
PID_temp_regulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08008278  08008278  00009278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008650  08008650  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008650  08008650  00009650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008658  08008658  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008658  08008658  00009658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800865c  0800865c  0000965c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008660  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200001d8  08008838  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08008838  0000a4a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e23a  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217f  00000000  00000000  00018442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0001a5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000904  00000000  00000000  0001b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027023  00000000  00000000  0001ba84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103c0  00000000  00000000  00042aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec3e9  00000000  00000000  00052e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f250  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004100  00000000  00000000  0013f294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00143394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008260 	.word	0x08008260

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08008260 	.word	0x08008260

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9b5 	b.w	8000f74 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f92f 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f806 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f004 f8c6 	bl	8005118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_InitTick+0x54>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <HAL_InitTick+0x58>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f93b 	bl	800122e <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00e      	b.n	8000fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d80a      	bhi.n	8000fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 f911 	bl	80011f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd4:	4a06      	ldr	r2, [pc, #24]	@ (8000ff0 <HAL_InitTick+0x5c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2000000c 	.word	0x2000000c
 8000fec:	20000004 	.word	0x20000004
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000004 	.word	0x20000004
 8001018:	200001f4 	.word	0x200001f4

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	@ (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	200001f4 	.word	0x200001f4

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff ffee 	bl	800101c <HAL_GetTick>
 8001040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <HAL_Delay+0x44>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800105a:	bf00      	nop
 800105c:	f7ff ffde 	bl	800101c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000004 	.word	0x20000004

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <__NVIC_SetPriorityGrouping+0x40>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <__NVIC_SetPriorityGrouping+0x40>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	05fa0000 	.word	0x05fa0000

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	@ (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	@ (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	@ 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	@ 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f7ff ff8e 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff47 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001208:	f7ff ff5c 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 800120c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff ff8e 	bl	8001134 <NVIC_EncodePriority>
 8001218:	4602      	mov	r2, r0
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5d 	bl	80010e0 <__NVIC_SetPriority>
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffb0 	bl	800119c <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	@ 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e175      	b.n	8001554 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	429a      	cmp	r2, r3
 8001282:	f040 8164 	bne.w	800154e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d005      	beq.n	800129e <HAL_GPIO_Init+0x56>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d130      	bne.n	8001300 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 0201 	and.w	r2, r3, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b03      	cmp	r3, #3
 800130a:	d017      	beq.n	800133c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d123      	bne.n	8001390 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3208      	adds	r2, #8
 8001350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0203 	and.w	r2, r3, #3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 80be 	beq.w	800154e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	4b66      	ldr	r3, [pc, #408]	@ (800156c <HAL_GPIO_Init+0x324>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	4a65      	ldr	r2, [pc, #404]	@ (800156c <HAL_GPIO_Init+0x324>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013de:	4b63      	ldr	r3, [pc, #396]	@ (800156c <HAL_GPIO_Init+0x324>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80013ea:	4a61      	ldr	r2, [pc, #388]	@ (8001570 <HAL_GPIO_Init+0x328>)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a58      	ldr	r2, [pc, #352]	@ (8001574 <HAL_GPIO_Init+0x32c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d037      	beq.n	8001486 <HAL_GPIO_Init+0x23e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a57      	ldr	r2, [pc, #348]	@ (8001578 <HAL_GPIO_Init+0x330>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d031      	beq.n	8001482 <HAL_GPIO_Init+0x23a>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a56      	ldr	r2, [pc, #344]	@ (800157c <HAL_GPIO_Init+0x334>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d02b      	beq.n	800147e <HAL_GPIO_Init+0x236>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a55      	ldr	r2, [pc, #340]	@ (8001580 <HAL_GPIO_Init+0x338>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d025      	beq.n	800147a <HAL_GPIO_Init+0x232>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a54      	ldr	r2, [pc, #336]	@ (8001584 <HAL_GPIO_Init+0x33c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01f      	beq.n	8001476 <HAL_GPIO_Init+0x22e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a53      	ldr	r2, [pc, #332]	@ (8001588 <HAL_GPIO_Init+0x340>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x22a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a52      	ldr	r2, [pc, #328]	@ (800158c <HAL_GPIO_Init+0x344>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x226>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a51      	ldr	r2, [pc, #324]	@ (8001590 <HAL_GPIO_Init+0x348>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x222>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a50      	ldr	r2, [pc, #320]	@ (8001594 <HAL_GPIO_Init+0x34c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x21e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4f      	ldr	r2, [pc, #316]	@ (8001598 <HAL_GPIO_Init+0x350>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x21a>
 800145e:	2309      	movs	r3, #9
 8001460:	e012      	b.n	8001488 <HAL_GPIO_Init+0x240>
 8001462:	230a      	movs	r3, #10
 8001464:	e010      	b.n	8001488 <HAL_GPIO_Init+0x240>
 8001466:	2308      	movs	r3, #8
 8001468:	e00e      	b.n	8001488 <HAL_GPIO_Init+0x240>
 800146a:	2307      	movs	r3, #7
 800146c:	e00c      	b.n	8001488 <HAL_GPIO_Init+0x240>
 800146e:	2306      	movs	r3, #6
 8001470:	e00a      	b.n	8001488 <HAL_GPIO_Init+0x240>
 8001472:	2305      	movs	r3, #5
 8001474:	e008      	b.n	8001488 <HAL_GPIO_Init+0x240>
 8001476:	2304      	movs	r3, #4
 8001478:	e006      	b.n	8001488 <HAL_GPIO_Init+0x240>
 800147a:	2303      	movs	r3, #3
 800147c:	e004      	b.n	8001488 <HAL_GPIO_Init+0x240>
 800147e:	2302      	movs	r3, #2
 8001480:	e002      	b.n	8001488 <HAL_GPIO_Init+0x240>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <HAL_GPIO_Init+0x240>
 8001486:	2300      	movs	r3, #0
 8001488:	69fa      	ldr	r2, [r7, #28]
 800148a:	f002 0203 	and.w	r2, r2, #3
 800148e:	0092      	lsls	r2, r2, #2
 8001490:	4093      	lsls	r3, r2
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001498:	4935      	ldr	r1, [pc, #212]	@ (8001570 <HAL_GPIO_Init+0x328>)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	3302      	adds	r3, #2
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a6:	4b3d      	ldr	r3, [pc, #244]	@ (800159c <HAL_GPIO_Init+0x354>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ca:	4a34      	ldr	r2, [pc, #208]	@ (800159c <HAL_GPIO_Init+0x354>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d0:	4b32      	ldr	r3, [pc, #200]	@ (800159c <HAL_GPIO_Init+0x354>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f4:	4a29      	ldr	r2, [pc, #164]	@ (800159c <HAL_GPIO_Init+0x354>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014fa:	4b28      	ldr	r3, [pc, #160]	@ (800159c <HAL_GPIO_Init+0x354>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800151e:	4a1f      	ldr	r2, [pc, #124]	@ (800159c <HAL_GPIO_Init+0x354>)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001524:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <HAL_GPIO_Init+0x354>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001548:	4a14      	ldr	r2, [pc, #80]	@ (800159c <HAL_GPIO_Init+0x354>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3301      	adds	r3, #1
 8001552:	61fb      	str	r3, [r7, #28]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	2b0f      	cmp	r3, #15
 8001558:	f67f ae86 	bls.w	8001268 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3724      	adds	r7, #36	@ 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40013800 	.word	0x40013800
 8001574:	40020000 	.word	0x40020000
 8001578:	40020400 	.word	0x40020400
 800157c:	40020800 	.word	0x40020800
 8001580:	40020c00 	.word	0x40020c00
 8001584:	40021000 	.word	0x40021000
 8001588:	40021400 	.word	0x40021400
 800158c:	40021800 	.word	0x40021800
 8001590:	40021c00 	.word	0x40021c00
 8001594:	40022000 	.word	0x40022000
 8001598:	40022400 	.word	0x40022400
 800159c:	40013c00 	.word	0x40013c00

080015a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b0:	787b      	ldrb	r3, [r7, #1]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015bc:	e003      	b.n	80015c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	041a      	lsls	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	619a      	str	r2, [r3, #24]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e08b      	b.n	80016fe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d106      	bne.n	8001600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f003 fdb0 	bl	8005160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2224      	movs	r2, #36	@ 0x24
 8001604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0201 	bic.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001624:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001634:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d107      	bne.n	800164e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	e006      	b.n	800165c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800165a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d108      	bne.n	8001676 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	e007      	b.n	8001686 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001684:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <HAL_I2C_Init+0x134>)
 8001692:	430b      	orrs	r3, r1
 8001694:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69d9      	ldr	r1, [r3, #28]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2220      	movs	r2, #32
 80016ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	02008000 	.word	0x02008000

0800170c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af02      	add	r7, sp, #8
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	461a      	mov	r2, r3
 8001718:	460b      	mov	r3, r1
 800171a:	817b      	strh	r3, [r7, #10]
 800171c:	4613      	mov	r3, r2
 800171e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b20      	cmp	r3, #32
 800172a:	f040 80fd 	bne.w	8001928 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <HAL_I2C_Master_Transmit+0x30>
 8001738:	2302      	movs	r3, #2
 800173a:	e0f6      	b.n	800192a <HAL_I2C_Master_Transmit+0x21e>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001744:	f7ff fc6a 	bl	800101c <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2319      	movs	r3, #25
 8001750:	2201      	movs	r2, #1
 8001752:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 fbea 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e0e1      	b.n	800192a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2221      	movs	r2, #33	@ 0x21
 800176a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2210      	movs	r2, #16
 8001772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	893a      	ldrh	r2, [r7, #8]
 8001786:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001792:	b29b      	uxth	r3, r3
 8001794:	2bff      	cmp	r3, #255	@ 0xff
 8001796:	d906      	bls.n	80017a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	22ff      	movs	r2, #255	@ 0xff
 800179c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800179e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e007      	b.n	80017b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80017b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d024      	beq.n	8001808 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c2:	781a      	ldrb	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3b01      	subs	r3, #1
 80017dc:	b29a      	uxth	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	3301      	adds	r3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	8979      	ldrh	r1, [r7, #10]
 80017fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001934 <HAL_I2C_Master_Transmit+0x228>)
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 fd59 	bl	80022b8 <I2C_TransferConfig>
 8001806:	e066      	b.n	80018d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800180c:	b2da      	uxtb	r2, r3
 800180e:	8979      	ldrh	r1, [r7, #10]
 8001810:	4b48      	ldr	r3, [pc, #288]	@ (8001934 <HAL_I2C_Master_Transmit+0x228>)
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fd4e 	bl	80022b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800181c:	e05b      	b.n	80018d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	6a39      	ldr	r1, [r7, #32]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fbdd 	bl	8001fe2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e07b      	b.n	800192a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800184c:	b29b      	uxth	r3, r3
 800184e:	3b01      	subs	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800185a:	3b01      	subs	r3, #1
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001866:	b29b      	uxth	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d034      	beq.n	80018d6 <HAL_I2C_Master_Transmit+0x1ca>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001870:	2b00      	cmp	r3, #0
 8001872:	d130      	bne.n	80018d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	2200      	movs	r2, #0
 800187c:	2180      	movs	r1, #128	@ 0x80
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 fb56 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e04d      	b.n	800192a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001892:	b29b      	uxth	r3, r3
 8001894:	2bff      	cmp	r3, #255	@ 0xff
 8001896:	d90e      	bls.n	80018b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	22ff      	movs	r2, #255	@ 0xff
 800189c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	8979      	ldrh	r1, [r7, #10]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 fd02 	bl	80022b8 <I2C_TransferConfig>
 80018b4:	e00f      	b.n	80018d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	8979      	ldrh	r1, [r7, #10]
 80018c8:	2300      	movs	r3, #0
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 fcf1 	bl	80022b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018da:	b29b      	uxth	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d19e      	bne.n	800181e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	6a39      	ldr	r1, [r7, #32]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 fbc3 	bl	8002070 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e01a      	b.n	800192a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2220      	movs	r2, #32
 80018fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6859      	ldr	r1, [r3, #4]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <HAL_I2C_Master_Transmit+0x22c>)
 8001908:	400b      	ands	r3, r1
 800190a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2220      	movs	r2, #32
 8001910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	e000      	b.n	800192a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001928:	2302      	movs	r3, #2
  }
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	80002000 	.word	0x80002000
 8001938:	fe00e800 	.word	0xfe00e800

0800193c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af02      	add	r7, sp, #8
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4603      	mov	r3, r0
 800194c:	817b      	strh	r3, [r7, #10]
 800194e:	460b      	mov	r3, r1
 8001950:	813b      	strh	r3, [r7, #8]
 8001952:	4613      	mov	r3, r2
 8001954:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b20      	cmp	r3, #32
 8001960:	f040 80f9 	bne.w	8001b56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <HAL_I2C_Mem_Write+0x34>
 800196a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800196c:	2b00      	cmp	r3, #0
 800196e:	d105      	bne.n	800197c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001976:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0ed      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_I2C_Mem_Write+0x4e>
 8001986:	2302      	movs	r3, #2
 8001988:	e0e6      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001992:	f7ff fb43 	bl	800101c <HAL_GetTick>
 8001996:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2319      	movs	r3, #25
 800199e:	2201      	movs	r2, #1
 80019a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 fac3 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0d1      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2221      	movs	r2, #33	@ 0x21
 80019b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2240      	movs	r2, #64	@ 0x40
 80019c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a3a      	ldr	r2, [r7, #32]
 80019ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80019d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019dc:	88f8      	ldrh	r0, [r7, #6]
 80019de:	893a      	ldrh	r2, [r7, #8]
 80019e0:	8979      	ldrh	r1, [r7, #10]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	4603      	mov	r3, r0
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 f9d3 	bl	8001d98 <I2C_RequestMemoryWrite>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0a9      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	2bff      	cmp	r3, #255	@ 0xff
 8001a0c:	d90e      	bls.n	8001a2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	22ff      	movs	r2, #255	@ 0xff
 8001a12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	8979      	ldrh	r1, [r7, #10]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 fc47 	bl	80022b8 <I2C_TransferConfig>
 8001a2a:	e00f      	b.n	8001a4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	8979      	ldrh	r1, [r7, #10]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 fc36 	bl	80022b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 fac6 	bl	8001fe2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e07b      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d034      	beq.n	8001b04 <HAL_I2C_Mem_Write+0x1c8>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d130      	bne.n	8001b04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2180      	movs	r1, #128	@ 0x80
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 fa3f 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e04d      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2bff      	cmp	r3, #255	@ 0xff
 8001ac4:	d90e      	bls.n	8001ae4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	22ff      	movs	r2, #255	@ 0xff
 8001aca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	8979      	ldrh	r1, [r7, #10]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 fbeb 	bl	80022b8 <I2C_TransferConfig>
 8001ae2:	e00f      	b.n	8001b04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	8979      	ldrh	r1, [r7, #10]
 8001af6:	2300      	movs	r3, #0
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 fbda 	bl	80022b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d19e      	bne.n	8001a4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 faac 	bl	8002070 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e01a      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2220      	movs	r2, #32
 8001b28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_I2C_Mem_Write+0x224>)
 8001b36:	400b      	ands	r3, r1
 8001b38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001b56:	2302      	movs	r3, #2
  }
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	fe00e800 	.word	0xfe00e800

08001b64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	4608      	mov	r0, r1
 8001b6e:	4611      	mov	r1, r2
 8001b70:	461a      	mov	r2, r3
 8001b72:	4603      	mov	r3, r0
 8001b74:	817b      	strh	r3, [r7, #10]
 8001b76:	460b      	mov	r3, r1
 8001b78:	813b      	strh	r3, [r7, #8]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	f040 80fd 	bne.w	8001d86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <HAL_I2C_Mem_Read+0x34>
 8001b92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d105      	bne.n	8001ba4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b9e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0f1      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_I2C_Mem_Read+0x4e>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e0ea      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bba:	f7ff fa2f 	bl	800101c <HAL_GetTick>
 8001bbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2319      	movs	r3, #25
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 f9af 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0d5      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2222      	movs	r2, #34	@ 0x22
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2240      	movs	r2, #64	@ 0x40
 8001be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a3a      	ldr	r2, [r7, #32]
 8001bf6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c04:	88f8      	ldrh	r0, [r7, #6]
 8001c06:	893a      	ldrh	r2, [r7, #8]
 8001c08:	8979      	ldrh	r1, [r7, #10]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	4603      	mov	r3, r0
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f913 	bl	8001e40 <I2C_RequestMemoryRead>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0ad      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	2bff      	cmp	r3, #255	@ 0xff
 8001c34:	d90e      	bls.n	8001c54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	8979      	ldrh	r1, [r7, #10]
 8001c44:	4b52      	ldr	r3, [pc, #328]	@ (8001d90 <HAL_I2C_Mem_Read+0x22c>)
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 fb33 	bl	80022b8 <I2C_TransferConfig>
 8001c52:	e00f      	b.n	8001c74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	8979      	ldrh	r1, [r7, #10]
 8001c66:	4b4a      	ldr	r3, [pc, #296]	@ (8001d90 <HAL_I2C_Mem_Read+0x22c>)
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 fb22 	bl	80022b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f956 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e07c      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d034      	beq.n	8001d34 <HAL_I2C_Mem_Read+0x1d0>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d130      	bne.n	8001d34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2180      	movs	r1, #128	@ 0x80
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f927 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e04d      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	2bff      	cmp	r3, #255	@ 0xff
 8001cf4:	d90e      	bls.n	8001d14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	8979      	ldrh	r1, [r7, #10]
 8001d04:	2300      	movs	r3, #0
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 fad3 	bl	80022b8 <I2C_TransferConfig>
 8001d12:	e00f      	b.n	8001d34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	8979      	ldrh	r1, [r7, #10]
 8001d26:	2300      	movs	r3, #0
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fac2 	bl	80022b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d19a      	bne.n	8001c74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f994 	bl	8002070 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e01a      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2220      	movs	r2, #32
 8001d58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <HAL_I2C_Mem_Read+0x230>)
 8001d66:	400b      	ands	r3, r1
 8001d68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e000      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001d86:	2302      	movs	r3, #2
  }
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	80002400 	.word	0x80002400
 8001d94:	fe00e800 	.word	0xfe00e800

08001d98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	817b      	strh	r3, [r7, #10]
 8001daa:	460b      	mov	r3, r1
 8001dac:	813b      	strh	r3, [r7, #8]
 8001dae:	4613      	mov	r3, r2
 8001db0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	8979      	ldrh	r1, [r7, #10]
 8001db8:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <I2C_RequestMemoryWrite+0xa4>)
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fa79 	bl	80022b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	69b9      	ldr	r1, [r7, #24]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f909 	bl	8001fe2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e02c      	b.n	8001e34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d105      	bne.n	8001dec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001de0:	893b      	ldrh	r3, [r7, #8]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001dea:	e015      	b.n	8001e18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001dec:	893b      	ldrh	r3, [r7, #8]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	69b9      	ldr	r1, [r7, #24]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f8ef 	bl	8001fe2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e012      	b.n	8001e34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e0e:	893b      	ldrh	r3, [r7, #8]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2180      	movs	r1, #128	@ 0x80
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f884 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	80002000 	.word	0x80002000

08001e40 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	4608      	mov	r0, r1
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4603      	mov	r3, r0
 8001e50:	817b      	strh	r3, [r7, #10]
 8001e52:	460b      	mov	r3, r1
 8001e54:	813b      	strh	r3, [r7, #8]
 8001e56:	4613      	mov	r3, r2
 8001e58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	8979      	ldrh	r1, [r7, #10]
 8001e60:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <I2C_RequestMemoryRead+0xa4>)
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2300      	movs	r3, #0
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fa26 	bl	80022b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f8b6 	bl	8001fe2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e02c      	b.n	8001eda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d105      	bne.n	8001e92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e86:	893b      	ldrh	r3, [r7, #8]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e90:	e015      	b.n	8001ebe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e92:	893b      	ldrh	r3, [r7, #8]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	69b9      	ldr	r1, [r7, #24]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f89c 	bl	8001fe2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e012      	b.n	8001eda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001eb4:	893b      	ldrh	r3, [r7, #8]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2140      	movs	r1, #64	@ 0x40
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f831 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	80002000 	.word	0x80002000

08001ee8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d103      	bne.n	8001f06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2200      	movs	r2, #0
 8001f04:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d007      	beq.n	8001f24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	619a      	str	r2, [r3, #24]
  }
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f40:	e03b      	b.n	8001fba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	6839      	ldr	r1, [r7, #0]
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f8d6 	bl	80020f8 <I2C_IsErrorOccurred>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e041      	b.n	8001fda <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d02d      	beq.n	8001fba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5e:	f7ff f85d 	bl	800101c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d302      	bcc.n	8001f74 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d122      	bne.n	8001fba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d113      	bne.n	8001fba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	f043 0220 	orr.w	r2, r3, #32
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00f      	b.n	8001fda <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699a      	ldr	r2, [r3, #24]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	bf0c      	ite	eq
 8001fca:	2301      	moveq	r3, #1
 8001fcc:	2300      	movne	r3, #0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d0b4      	beq.n	8001f42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fee:	e033      	b.n	8002058 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68b9      	ldr	r1, [r7, #8]
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 f87f 	bl	80020f8 <I2C_IsErrorOccurred>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e031      	b.n	8002068 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200a:	d025      	beq.n	8002058 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200c:	f7ff f806 	bl	800101c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	429a      	cmp	r2, r3
 800201a:	d302      	bcc.n	8002022 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d11a      	bne.n	8002058 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b02      	cmp	r3, #2
 800202e:	d013      	beq.n	8002058 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002034:	f043 0220 	orr.w	r2, r3, #32
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e007      	b.n	8002068 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b02      	cmp	r3, #2
 8002064:	d1c4      	bne.n	8001ff0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800207c:	e02f      	b.n	80020de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f838 	bl	80020f8 <I2C_IsErrorOccurred>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e02d      	b.n	80020ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002092:	f7fe ffc3 	bl	800101c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d302      	bcc.n	80020a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d11a      	bne.n	80020de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	d013      	beq.n	80020de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	f043 0220 	orr.w	r2, r3, #32
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e007      	b.n	80020ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b20      	cmp	r3, #32
 80020ea:	d1c8      	bne.n	800207e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	@ 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b00      	cmp	r3, #0
 8002122:	d068      	beq.n	80021f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2210      	movs	r2, #16
 800212a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800212c:	e049      	b.n	80021c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d045      	beq.n	80021c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002136:	f7fe ff71 	bl	800101c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	429a      	cmp	r2, r3
 8002144:	d302      	bcc.n	800214c <I2C_IsErrorOccurred+0x54>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d13a      	bne.n	80021c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002156:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800215e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800216a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800216e:	d121      	bne.n	80021b4 <I2C_IsErrorOccurred+0xbc>
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002176:	d01d      	beq.n	80021b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	2b20      	cmp	r3, #32
 800217c:	d01a      	beq.n	80021b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800218c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800218e:	f7fe ff45 	bl	800101c <HAL_GetTick>
 8002192:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002194:	e00e      	b.n	80021b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002196:	f7fe ff41 	bl	800101c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b19      	cmp	r3, #25
 80021a2:	d907      	bls.n	80021b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	f043 0320 	orr.w	r3, r3, #32
 80021aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80021b2:	e006      	b.n	80021c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b20      	cmp	r3, #32
 80021c0:	d1e9      	bne.n	8002196 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	d003      	beq.n	80021d8 <I2C_IsErrorOccurred+0xe0>
 80021d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0aa      	beq.n	800212e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d103      	bne.n	80021e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2220      	movs	r2, #32
 80021e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00b      	beq.n	8002220 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002218:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	f043 0308 	orr.w	r3, r3, #8
 8002230:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800223a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	f043 0302 	orr.w	r3, r3, #2
 8002252:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800225c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002268:	2b00      	cmp	r3, #0
 800226a:	d01c      	beq.n	80022a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f7ff fe3b 	bl	8001ee8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <I2C_IsErrorOccurred+0x1bc>)
 800227e:	400b      	ands	r3, r1
 8002280:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	431a      	orrs	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80022a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3728      	adds	r7, #40	@ 0x28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	fe00e800 	.word	0xfe00e800

080022b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	817b      	strh	r3, [r7, #10]
 80022c6:	4613      	mov	r3, r2
 80022c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022ca:	897b      	ldrh	r3, [r7, #10]
 80022cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022d0:	7a7b      	ldrb	r3, [r7, #9]
 80022d2:	041b      	lsls	r3, r3, #16
 80022d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	0d5b      	lsrs	r3, r3, #21
 80022f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80022f6:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <I2C_TransferConfig+0x60>)
 80022f8:	430b      	orrs	r3, r1
 80022fa:	43db      	mvns	r3, r3
 80022fc:	ea02 0103 	and.w	r1, r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	430a      	orrs	r2, r1
 8002308:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800230a:	bf00      	nop
 800230c:	371c      	adds	r7, #28
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	03ff63ff 	.word	0x03ff63ff

0800231c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b20      	cmp	r3, #32
 8002330:	d138      	bne.n	80023a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800233c:	2302      	movs	r3, #2
 800233e:	e032      	b.n	80023a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2224      	movs	r2, #36	@ 0x24
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800236e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e000      	b.n	80023a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023a4:	2302      	movs	r3, #2
  }
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b085      	sub	sp, #20
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	d139      	bne.n	800243c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e033      	b.n	800243e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2224      	movs	r2, #36	@ 0x24
 80023e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002404:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	e000      	b.n	800243e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800243c:	2302      	movs	r3, #2
  }
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002450:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a04      	ldr	r2, [pc, #16]	@ (8002468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800245a:	6013      	str	r3, [r2, #0]
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40007000 	.word	0x40007000

0800246c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002474:	2300      	movs	r3, #0
 8002476:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e291      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8087 	beq.w	800259e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002490:	4b96      	ldr	r3, [pc, #600]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b04      	cmp	r3, #4
 800249a:	d00c      	beq.n	80024b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249c:	4b93      	ldr	r3, [pc, #588]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d112      	bne.n	80024ce <HAL_RCC_OscConfig+0x62>
 80024a8:	4b90      	ldr	r3, [pc, #576]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024b4:	d10b      	bne.n	80024ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b6:	4b8d      	ldr	r3, [pc, #564]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d06c      	beq.n	800259c <HAL_RCC_OscConfig+0x130>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d168      	bne.n	800259c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e26b      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x7a>
 80024d8:	4b84      	ldr	r3, [pc, #528]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a83      	ldr	r2, [pc, #524]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80024de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	e02e      	b.n	8002544 <HAL_RCC_OscConfig+0xd8>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x9c>
 80024ee:	4b7f      	ldr	r3, [pc, #508]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a7e      	ldr	r2, [pc, #504]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80024f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b7c      	ldr	r3, [pc, #496]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7b      	ldr	r2, [pc, #492]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002500:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e01d      	b.n	8002544 <HAL_RCC_OscConfig+0xd8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0xc0>
 8002512:	4b76      	ldr	r3, [pc, #472]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a75      	ldr	r2, [pc, #468]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b73      	ldr	r3, [pc, #460]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a72      	ldr	r2, [pc, #456]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0xd8>
 800252c:	4b6f      	ldr	r3, [pc, #444]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a6e      	ldr	r2, [pc, #440]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b6c      	ldr	r3, [pc, #432]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6b      	ldr	r2, [pc, #428]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe fd66 	bl	800101c <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002554:	f7fe fd62 	bl	800101c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	@ 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e21f      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b61      	ldr	r3, [pc, #388]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0xe8>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fd52 	bl	800101c <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257c:	f7fe fd4e 	bl	800101c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	@ 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e20b      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	4b57      	ldr	r3, [pc, #348]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x110>
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d069      	beq.n	800267e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025aa:	4b50      	ldr	r3, [pc, #320]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b6:	4b4d      	ldr	r3, [pc, #308]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d11c      	bne.n	80025fc <HAL_RCC_OscConfig+0x190>
 80025c2:	4b4a      	ldr	r3, [pc, #296]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d116      	bne.n	80025fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	4b47      	ldr	r3, [pc, #284]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x17a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1df      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b41      	ldr	r3, [pc, #260]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	493d      	ldr	r1, [pc, #244]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	e040      	b.n	800267e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d023      	beq.n	800264c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002604:	4b39      	ldr	r3, [pc, #228]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a38      	ldr	r2, [pc, #224]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7fe fd04 	bl	800101c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002618:	f7fe fd00 	bl	800101c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e1bd      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	4b30      	ldr	r3, [pc, #192]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002636:	4b2d      	ldr	r3, [pc, #180]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4929      	ldr	r1, [pc, #164]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
 800264a:	e018      	b.n	800267e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264c:	4b27      	ldr	r3, [pc, #156]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a26      	ldr	r2, [pc, #152]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fce0 	bl	800101c <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002660:	f7fe fcdc 	bl	800101c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e199      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	4b1e      	ldr	r3, [pc, #120]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d038      	beq.n	80026fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d019      	beq.n	80026c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002692:	4b16      	ldr	r3, [pc, #88]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002696:	4a15      	ldr	r2, [pc, #84]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269e:	f7fe fcbd 	bl	800101c <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a6:	f7fe fcb9 	bl	800101c <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e176      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b8:	4b0c      	ldr	r3, [pc, #48]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80026ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x23a>
 80026c4:	e01a      	b.n	80026fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c6:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80026c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ca:	4a08      	ldr	r2, [pc, #32]	@ (80026ec <HAL_RCC_OscConfig+0x280>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7fe fca3 	bl	800101c <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026da:	f7fe fc9f 	bl	800101c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d903      	bls.n	80026f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e15c      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
 80026ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f0:	4b91      	ldr	r3, [pc, #580]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80026f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ee      	bne.n	80026da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80a4 	beq.w	8002852 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270a:	4b8b      	ldr	r3, [pc, #556]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10d      	bne.n	8002732 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002716:	4b88      	ldr	r3, [pc, #544]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	4a87      	ldr	r2, [pc, #540]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002720:	6413      	str	r3, [r2, #64]	@ 0x40
 8002722:	4b85      	ldr	r3, [pc, #532]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272e:	2301      	movs	r3, #1
 8002730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002732:	4b82      	ldr	r3, [pc, #520]	@ (800293c <HAL_RCC_OscConfig+0x4d0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d118      	bne.n	8002770 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800273e:	4b7f      	ldr	r3, [pc, #508]	@ (800293c <HAL_RCC_OscConfig+0x4d0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a7e      	ldr	r2, [pc, #504]	@ (800293c <HAL_RCC_OscConfig+0x4d0>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7fe fc67 	bl	800101c <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002752:	f7fe fc63 	bl	800101c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b64      	cmp	r3, #100	@ 0x64
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e120      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002764:	4b75      	ldr	r3, [pc, #468]	@ (800293c <HAL_RCC_OscConfig+0x4d0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x31a>
 8002778:	4b6f      	ldr	r3, [pc, #444]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277c:	4a6e      	ldr	r2, [pc, #440]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6713      	str	r3, [r2, #112]	@ 0x70
 8002784:	e02d      	b.n	80027e2 <HAL_RCC_OscConfig+0x376>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x33c>
 800278e:	4b6a      	ldr	r3, [pc, #424]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002792:	4a69      	ldr	r2, [pc, #420]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	6713      	str	r3, [r2, #112]	@ 0x70
 800279a:	4b67      	ldr	r3, [pc, #412]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279e:	4a66      	ldr	r2, [pc, #408]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027a0:	f023 0304 	bic.w	r3, r3, #4
 80027a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a6:	e01c      	b.n	80027e2 <HAL_RCC_OscConfig+0x376>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b05      	cmp	r3, #5
 80027ae:	d10c      	bne.n	80027ca <HAL_RCC_OscConfig+0x35e>
 80027b0:	4b61      	ldr	r3, [pc, #388]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b4:	4a60      	ldr	r2, [pc, #384]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027b6:	f043 0304 	orr.w	r3, r3, #4
 80027ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80027bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c8:	e00b      	b.n	80027e2 <HAL_RCC_OscConfig+0x376>
 80027ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ce:	4a5a      	ldr	r2, [pc, #360]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d6:	4b58      	ldr	r3, [pc, #352]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027da:	4a57      	ldr	r2, [pc, #348]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027dc:	f023 0304 	bic.w	r3, r3, #4
 80027e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d015      	beq.n	8002816 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ea:	f7fe fc17 	bl	800101c <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe fc13 	bl	800101c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e0ce      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002808:	4b4b      	ldr	r3, [pc, #300]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ee      	beq.n	80027f2 <HAL_RCC_OscConfig+0x386>
 8002814:	e014      	b.n	8002840 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002816:	f7fe fc01 	bl	800101c <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281c:	e00a      	b.n	8002834 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7fe fbfd 	bl	800101c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e0b8      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002834:	4b40      	ldr	r3, [pc, #256]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ee      	bne.n	800281e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002840:	7dfb      	ldrb	r3, [r7, #23]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d105      	bne.n	8002852 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002846:	4b3c      	ldr	r3, [pc, #240]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	4a3b      	ldr	r2, [pc, #236]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800284c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 80a4 	beq.w	80029a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800285c:	4b36      	ldr	r3, [pc, #216]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d06b      	beq.n	8002940 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d149      	bne.n	8002904 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002870:	4b31      	ldr	r3, [pc, #196]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a30      	ldr	r2, [pc, #192]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002876:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800287a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fbce 	bl	800101c <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002884:	f7fe fbca 	bl	800101c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e087      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	4b28      	ldr	r3, [pc, #160]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69da      	ldr	r2, [r3, #28]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	019b      	lsls	r3, r3, #6
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b8:	085b      	lsrs	r3, r3, #1
 80028ba:	3b01      	subs	r3, #1
 80028bc:	041b      	lsls	r3, r3, #16
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	4313      	orrs	r3, r2
 80028c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80028ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80028ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d0:	4b19      	ldr	r3, [pc, #100]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a18      	ldr	r2, [pc, #96]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe fb9e 	bl	800101c <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fe fb9a 	bl	800101c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e057      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	4b10      	ldr	r3, [pc, #64]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x478>
 8002902:	e04f      	b.n	80029a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002904:	4b0c      	ldr	r3, [pc, #48]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0b      	ldr	r2, [pc, #44]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800290a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800290e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe fb84 	bl	800101c <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe fb80 	bl	800101c <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e03d      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b03      	ldr	r3, [pc, #12]	@ (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x4ac>
 8002936:	e035      	b.n	80029a4 <HAL_RCC_OscConfig+0x538>
 8002938:	40023800 	.word	0x40023800
 800293c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002940:	4b1b      	ldr	r3, [pc, #108]	@ (80029b0 <HAL_RCC_OscConfig+0x544>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d028      	beq.n	80029a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d121      	bne.n	80029a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d11a      	bne.n	80029a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002970:	4013      	ands	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002976:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002978:	4293      	cmp	r3, r2
 800297a:	d111      	bne.n	80029a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	3b01      	subs	r3, #1
 800298a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800

080029b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0d0      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d910      	bls.n	80029fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b67      	ldr	r3, [pc, #412]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 020f 	bic.w	r2, r3, #15
 80029e2:	4965      	ldr	r1, [pc, #404]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b63      	ldr	r3, [pc, #396]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0b8      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a14:	4b59      	ldr	r3, [pc, #356]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a58      	ldr	r2, [pc, #352]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a2c:	4b53      	ldr	r3, [pc, #332]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a52      	ldr	r2, [pc, #328]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b50      	ldr	r3, [pc, #320]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	494d      	ldr	r1, [pc, #308]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d040      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b47      	ldr	r3, [pc, #284]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d115      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e07f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a76:	4b41      	ldr	r3, [pc, #260]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e073      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a86:	4b3d      	ldr	r3, [pc, #244]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e06b      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a96:	4b39      	ldr	r3, [pc, #228]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 0203 	bic.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4936      	ldr	r1, [pc, #216]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa8:	f7fe fab8 	bl	800101c <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab0:	f7fe fab4 	bl	800101c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e053      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 020c 	and.w	r2, r3, #12
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d1eb      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b27      	ldr	r3, [pc, #156]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d210      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b24      	ldr	r3, [pc, #144]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 020f 	bic.w	r2, r3, #15
 8002aee:	4922      	ldr	r1, [pc, #136]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e032      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b14:	4b19      	ldr	r3, [pc, #100]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4916      	ldr	r1, [pc, #88]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b32:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	490e      	ldr	r1, [pc, #56]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b46:	f000 f821 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	490a      	ldr	r1, [pc, #40]	@ (8002b80 <HAL_RCC_ClockConfig+0x1cc>)
 8002b58:	5ccb      	ldrb	r3, [r1, r3]
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	4a09      	ldr	r2, [pc, #36]	@ (8002b84 <HAL_RCC_ClockConfig+0x1d0>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b62:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <HAL_RCC_ClockConfig+0x1d4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fa14 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023c00 	.word	0x40023c00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	080082c4 	.word	0x080082c4
 8002b84:	2000000c 	.word	0x2000000c
 8002b88:	20000000 	.word	0x20000000

08002b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b90:	b094      	sub	sp, #80	@ 0x50
 8002b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b98:	2300      	movs	r3, #0
 8002b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba4:	4b79      	ldr	r3, [pc, #484]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d00d      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x40>
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	f200 80e1 	bhi.w	8002d78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bbe:	e0db      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc0:	4b73      	ldr	r3, [pc, #460]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bc4:	e0db      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bc6:	4b73      	ldr	r3, [pc, #460]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bca:	e0d8      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bcc:	4b6f      	ldr	r3, [pc, #444]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bd4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d063      	beq.n	8002caa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be2:	4b6a      	ldr	r3, [pc, #424]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	099b      	lsrs	r3, r3, #6
 8002be8:	2200      	movs	r2, #0
 8002bea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bfe:	4622      	mov	r2, r4
 8002c00:	462b      	mov	r3, r5
 8002c02:	f04f 0000 	mov.w	r0, #0
 8002c06:	f04f 0100 	mov.w	r1, #0
 8002c0a:	0159      	lsls	r1, r3, #5
 8002c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c10:	0150      	lsls	r0, r2, #5
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4621      	mov	r1, r4
 8002c18:	1a51      	subs	r1, r2, r1
 8002c1a:	6139      	str	r1, [r7, #16]
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c30:	4659      	mov	r1, fp
 8002c32:	018b      	lsls	r3, r1, #6
 8002c34:	4651      	mov	r1, sl
 8002c36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c3a:	4651      	mov	r1, sl
 8002c3c:	018a      	lsls	r2, r1, #6
 8002c3e:	4651      	mov	r1, sl
 8002c40:	ebb2 0801 	subs.w	r8, r2, r1
 8002c44:	4659      	mov	r1, fp
 8002c46:	eb63 0901 	sbc.w	r9, r3, r1
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c5e:	4690      	mov	r8, r2
 8002c60:	4699      	mov	r9, r3
 8002c62:	4623      	mov	r3, r4
 8002c64:	eb18 0303 	adds.w	r3, r8, r3
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	462b      	mov	r3, r5
 8002c6c:	eb49 0303 	adc.w	r3, r9, r3
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c7e:	4629      	mov	r1, r5
 8002c80:	024b      	lsls	r3, r1, #9
 8002c82:	4621      	mov	r1, r4
 8002c84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c88:	4621      	mov	r1, r4
 8002c8a:	024a      	lsls	r2, r1, #9
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c92:	2200      	movs	r2, #0
 8002c94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c9c:	f7fd fff4 	bl	8000c88 <__aeabi_uldivmod>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ca8:	e058      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002caa:	4b38      	ldr	r3, [pc, #224]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	099b      	lsrs	r3, r3, #6
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cba:	623b      	str	r3, [r7, #32]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cc4:	4642      	mov	r2, r8
 8002cc6:	464b      	mov	r3, r9
 8002cc8:	f04f 0000 	mov.w	r0, #0
 8002ccc:	f04f 0100 	mov.w	r1, #0
 8002cd0:	0159      	lsls	r1, r3, #5
 8002cd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd6:	0150      	lsls	r0, r2, #5
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4641      	mov	r1, r8
 8002cde:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ce2:	4649      	mov	r1, r9
 8002ce4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cfc:	ebb2 040a 	subs.w	r4, r2, sl
 8002d00:	eb63 050b 	sbc.w	r5, r3, fp
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	00eb      	lsls	r3, r5, #3
 8002d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d12:	00e2      	lsls	r2, r4, #3
 8002d14:	4614      	mov	r4, r2
 8002d16:	461d      	mov	r5, r3
 8002d18:	4643      	mov	r3, r8
 8002d1a:	18e3      	adds	r3, r4, r3
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	464b      	mov	r3, r9
 8002d20:	eb45 0303 	adc.w	r3, r5, r3
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d32:	4629      	mov	r1, r5
 8002d34:	028b      	lsls	r3, r1, #10
 8002d36:	4621      	mov	r1, r4
 8002d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	028a      	lsls	r2, r1, #10
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d46:	2200      	movs	r2, #0
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	61fa      	str	r2, [r7, #28]
 8002d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d50:	f7fd ff9a 	bl	8000c88 <__aeabi_uldivmod>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4613      	mov	r3, r2
 8002d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	0c1b      	lsrs	r3, r3, #16
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	3301      	adds	r3, #1
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d76:	e002      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3750      	adds	r7, #80	@ 0x50
 8002d84:	46bd      	mov	sp, r7
 8002d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	00f42400 	.word	0x00f42400
 8002d94:	007a1200 	.word	0x007a1200

08002d98 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d9c:	4b03      	ldr	r3, [pc, #12]	@ (8002dac <HAL_RCC_GetHCLKFreq+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	2000000c 	.word	0x2000000c

08002db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002db4:	f7ff fff0 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	0a9b      	lsrs	r3, r3, #10
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4903      	ldr	r1, [pc, #12]	@ (8002dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	080082d4 	.word	0x080082d4

08002dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ddc:	f7ff ffdc 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002de0:	4602      	mov	r2, r0
 8002de2:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	0b5b      	lsrs	r3, r3, #13
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	4903      	ldr	r1, [pc, #12]	@ (8002dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dee:	5ccb      	ldrb	r3, [r1, r3]
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	080082d4 	.word	0x080082d4

08002e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d012      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e28:	4b69      	ldr	r3, [pc, #420]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	4a68      	ldr	r2, [pc, #416]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002e32:	6093      	str	r3, [r2, #8]
 8002e34:	4b66      	ldr	r3, [pc, #408]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3c:	4964      	ldr	r1, [pc, #400]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d017      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e5a:	4b5d      	ldr	r3, [pc, #372]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e60:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e68:	4959      	ldr	r1, [pc, #356]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e78:	d101      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e86:	2301      	movs	r3, #1
 8002e88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d017      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e96:	4b4e      	ldr	r3, [pc, #312]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e9c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	494a      	ldr	r1, [pc, #296]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eb4:	d101      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 808b 	beq.w	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ee4:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	4a39      	ldr	r2, [pc, #228]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ef0:	4b37      	ldr	r3, [pc, #220]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002efc:	4b35      	ldr	r3, [pc, #212]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a34      	ldr	r2, [pc, #208]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f08:	f7fe f888 	bl	800101c <HAL_GetTick>
 8002f0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f10:	f7fe f884 	bl	800101c <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	@ 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e357      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f22:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f2e:	4b28      	ldr	r3, [pc, #160]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d035      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d02e      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f4c:	4b20      	ldr	r3, [pc, #128]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f56:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f60:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f62:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f66:	4a1a      	ldr	r2, [pc, #104]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f6e:	4a18      	ldr	r2, [pc, #96]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f74:	4b16      	ldr	r3, [pc, #88]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d114      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe f84c 	bl	800101c <HAL_GetTick>
 8002f84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f86:	e00a      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7fe f848 	bl	800101c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e319      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0ee      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fb6:	d111      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fb8:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fc4:	4b04      	ldr	r3, [pc, #16]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fc6:	400b      	ands	r3, r1
 8002fc8:	4901      	ldr	r1, [pc, #4]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40007000 	.word	0x40007000
 8002fd8:	0ffffcff 	.word	0x0ffffcff
 8002fdc:	4baa      	ldr	r3, [pc, #680]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4aa9      	ldr	r2, [pc, #676]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002fe6:	6093      	str	r3, [r2, #8]
 8002fe8:	4ba7      	ldr	r3, [pc, #668]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff4:	49a4      	ldr	r1, [pc, #656]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b00      	cmp	r3, #0
 8003004:	d010      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003006:	4ba0      	ldr	r3, [pc, #640]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800300c:	4a9e      	ldr	r2, [pc, #632]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800300e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003012:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003016:	4b9c      	ldr	r3, [pc, #624]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003018:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003020:	4999      	ldr	r1, [pc, #612]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003034:	4b94      	ldr	r3, [pc, #592]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003042:	4991      	ldr	r1, [pc, #580]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003056:	4b8c      	ldr	r3, [pc, #560]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003064:	4988      	ldr	r1, [pc, #544]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003078:	4b83      	ldr	r3, [pc, #524]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003086:	4980      	ldr	r1, [pc, #512]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800309a:	4b7b      	ldr	r3, [pc, #492]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a8:	4977      	ldr	r1, [pc, #476]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030bc:	4b72      	ldr	r3, [pc, #456]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c2:	f023 0203 	bic.w	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	496f      	ldr	r1, [pc, #444]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030de:	4b6a      	ldr	r3, [pc, #424]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e4:	f023 020c 	bic.w	r2, r3, #12
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ec:	4966      	ldr	r1, [pc, #408]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003100:	4b61      	ldr	r3, [pc, #388]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003106:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310e:	495e      	ldr	r1, [pc, #376]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003122:	4b59      	ldr	r3, [pc, #356]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003128:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003130:	4955      	ldr	r1, [pc, #340]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003144:	4b50      	ldr	r3, [pc, #320]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003152:	494d      	ldr	r1, [pc, #308]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003166:	4b48      	ldr	r3, [pc, #288]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	4944      	ldr	r1, [pc, #272]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003188:	4b3f      	ldr	r3, [pc, #252]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003196:	493c      	ldr	r1, [pc, #240]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031aa:	4b37      	ldr	r3, [pc, #220]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b8:	4933      	ldr	r1, [pc, #204]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031da:	492b      	ldr	r1, [pc, #172]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d011      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031ee:	4b26      	ldr	r3, [pc, #152]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031fc:	4922      	ldr	r1, [pc, #136]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003208:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800320c:	d101      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800320e:	2301      	movs	r3, #1
 8003210:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800321e:	2301      	movs	r3, #1
 8003220:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800322e:	4b16      	ldr	r3, [pc, #88]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003234:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800323c:	4912      	ldr	r1, [pc, #72]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00b      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003250:	4b0d      	ldr	r3, [pc, #52]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003256:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003260:	4909      	ldr	r1, [pc, #36]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d006      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 80d9 	beq.w	800342e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800327c:	4b02      	ldr	r3, [pc, #8]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a01      	ldr	r2, [pc, #4]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003282:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003286:	e001      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003288:	40023800 	.word	0x40023800
 800328c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800328e:	f7fd fec5 	bl	800101c <HAL_GetTick>
 8003292:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003296:	f7fd fec1 	bl	800101c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b64      	cmp	r3, #100	@ 0x64
 80032a2:	d901      	bls.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e194      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032a8:	4b6c      	ldr	r3, [pc, #432]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f0      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d021      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d11d      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032c8:	4b64      	ldr	r3, [pc, #400]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ce:	0c1b      	lsrs	r3, r3, #16
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032d6:	4b61      	ldr	r3, [pc, #388]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032dc:	0e1b      	lsrs	r3, r3, #24
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	019a      	lsls	r2, r3, #6
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	041b      	lsls	r3, r3, #16
 80032ee:	431a      	orrs	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	061b      	lsls	r3, r3, #24
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	071b      	lsls	r3, r3, #28
 80032fc:	4957      	ldr	r1, [pc, #348]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003314:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003318:	d00a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003322:	2b00      	cmp	r3, #0
 8003324:	d02e      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800332e:	d129      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003330:	4b4a      	ldr	r3, [pc, #296]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003336:	0c1b      	lsrs	r3, r3, #16
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800333e:	4b47      	ldr	r3, [pc, #284]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003344:	0f1b      	lsrs	r3, r3, #28
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	019a      	lsls	r2, r3, #6
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	431a      	orrs	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	071b      	lsls	r3, r3, #28
 8003364:	493d      	ldr	r1, [pc, #244]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800336c:	4b3b      	ldr	r3, [pc, #236]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800336e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003372:	f023 021f 	bic.w	r2, r3, #31
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337a:	3b01      	subs	r3, #1
 800337c:	4937      	ldr	r1, [pc, #220]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01d      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003390:	4b32      	ldr	r3, [pc, #200]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003396:	0e1b      	lsrs	r3, r3, #24
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800339e:	4b2f      	ldr	r3, [pc, #188]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033a4:	0f1b      	lsrs	r3, r3, #28
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	019a      	lsls	r2, r3, #6
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	431a      	orrs	r2, r3
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	061b      	lsls	r3, r3, #24
 80033be:	431a      	orrs	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	071b      	lsls	r3, r3, #28
 80033c4:	4925      	ldr	r1, [pc, #148]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d011      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	019a      	lsls	r2, r3, #6
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	061b      	lsls	r3, r3, #24
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	071b      	lsls	r3, r3, #28
 80033f4:	4919      	ldr	r1, [pc, #100]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033fc:	4b17      	ldr	r3, [pc, #92]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a16      	ldr	r2, [pc, #88]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003402:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003408:	f7fd fe08 	bl	800101c <HAL_GetTick>
 800340c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003410:	f7fd fe04 	bl	800101c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	@ 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0d7      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003422:	4b0e      	ldr	r3, [pc, #56]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2b01      	cmp	r3, #1
 8003432:	f040 80cd 	bne.w	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003436:	4b09      	ldr	r3, [pc, #36]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a08      	ldr	r2, [pc, #32]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800343c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003442:	f7fd fdeb 	bl	800101c <HAL_GetTick>
 8003446:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003448:	e00a      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800344a:	f7fd fde7 	bl	800101c <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b64      	cmp	r3, #100	@ 0x64
 8003456:	d903      	bls.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e0ba      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800345c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003460:	4b5e      	ldr	r3, [pc, #376]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800346c:	d0ed      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800348a:	2b00      	cmp	r3, #0
 800348c:	d02e      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d12a      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003496:	4b51      	ldr	r3, [pc, #324]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349c:	0c1b      	lsrs	r3, r3, #16
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034a4:	4b4d      	ldr	r3, [pc, #308]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	0f1b      	lsrs	r3, r3, #28
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	019a      	lsls	r2, r3, #6
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	061b      	lsls	r3, r3, #24
 80034c4:	431a      	orrs	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	071b      	lsls	r3, r3, #28
 80034ca:	4944      	ldr	r1, [pc, #272]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034d2:	4b42      	ldr	r3, [pc, #264]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e0:	3b01      	subs	r3, #1
 80034e2:	021b      	lsls	r3, r3, #8
 80034e4:	493d      	ldr	r1, [pc, #244]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d022      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003500:	d11d      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003502:	4b36      	ldr	r3, [pc, #216]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003508:	0e1b      	lsrs	r3, r3, #24
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003510:	4b32      	ldr	r3, [pc, #200]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003516:	0f1b      	lsrs	r3, r3, #28
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	019a      	lsls	r2, r3, #6
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	041b      	lsls	r3, r3, #16
 800352a:	431a      	orrs	r2, r3
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	061b      	lsls	r3, r3, #24
 8003530:	431a      	orrs	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	071b      	lsls	r3, r3, #28
 8003536:	4929      	ldr	r1, [pc, #164]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d028      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800354a:	4b24      	ldr	r3, [pc, #144]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800354c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003550:	0e1b      	lsrs	r3, r3, #24
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003558:	4b20      	ldr	r3, [pc, #128]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355e:	0c1b      	lsrs	r3, r3, #16
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	019a      	lsls	r2, r3, #6
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	041b      	lsls	r3, r3, #16
 8003570:	431a      	orrs	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	061b      	lsls	r3, r3, #24
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	071b      	lsls	r3, r3, #28
 800357e:	4917      	ldr	r1, [pc, #92]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003586:	4b15      	ldr	r3, [pc, #84]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800358c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	4911      	ldr	r1, [pc, #68]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800359c:	4b0f      	ldr	r3, [pc, #60]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0e      	ldr	r2, [pc, #56]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a8:	f7fd fd38 	bl	800101c <HAL_GetTick>
 80035ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035b0:	f7fd fd34 	bl	800101c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	@ 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e007      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035c2:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035ce:	d1ef      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800

080035e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e040      	b.n	8003674 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f001 fe54 	bl	80052b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2224      	movs	r2, #36	@ 0x24
 800360c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fb16 	bl	8003c58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f8af 	bl	8003790 <UART_SetConfig>
 8003632:	4603      	mov	r3, r0
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e01b      	b.n	8003674 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800364a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800365a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fb95 	bl	8003d9c <UART_CheckIdleState>
 8003672:	4603      	mov	r3, r0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	@ 0x28
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003690:	2b20      	cmp	r3, #32
 8003692:	d177      	bne.n	8003784 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_UART_Transmit+0x24>
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e070      	b.n	8003786 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2221      	movs	r2, #33	@ 0x21
 80036b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036b2:	f7fd fcb3 	bl	800101c <HAL_GetTick>
 80036b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	88fa      	ldrh	r2, [r7, #6]
 80036bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	88fa      	ldrh	r2, [r7, #6]
 80036c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d0:	d108      	bne.n	80036e4 <HAL_UART_Transmit+0x68>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d104      	bne.n	80036e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	e003      	b.n	80036ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036ec:	e02f      	b.n	800374e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2180      	movs	r1, #128	@ 0x80
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fba6 	bl	8003e4a <UART_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d004      	beq.n	800370e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e03b      	b.n	8003786 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003722:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	3302      	adds	r3, #2
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	e007      	b.n	800373c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	781a      	ldrb	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3301      	adds	r3, #1
 800373a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1c9      	bne.n	80036ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2200      	movs	r2, #0
 8003762:	2140      	movs	r1, #64	@ 0x40
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fb70 	bl	8003e4a <UART_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d004      	beq.n	800377a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e005      	b.n	8003786 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	e000      	b.n	8003786 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003784:	2302      	movs	r3, #2
  }
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4ba6      	ldr	r3, [pc, #664]	@ (8003a54 <UART_SetConfig+0x2c4>)
 80037bc:	4013      	ands	r3, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	6979      	ldr	r1, [r7, #20]
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	430a      	orrs	r2, r1
 8003800:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a94      	ldr	r2, [pc, #592]	@ (8003a58 <UART_SetConfig+0x2c8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d120      	bne.n	800384e <UART_SetConfig+0xbe>
 800380c:	4b93      	ldr	r3, [pc, #588]	@ (8003a5c <UART_SetConfig+0x2cc>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b03      	cmp	r3, #3
 8003818:	d816      	bhi.n	8003848 <UART_SetConfig+0xb8>
 800381a:	a201      	add	r2, pc, #4	@ (adr r2, 8003820 <UART_SetConfig+0x90>)
 800381c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003820:	08003831 	.word	0x08003831
 8003824:	0800383d 	.word	0x0800383d
 8003828:	08003837 	.word	0x08003837
 800382c:	08003843 	.word	0x08003843
 8003830:	2301      	movs	r3, #1
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e150      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003836:	2302      	movs	r3, #2
 8003838:	77fb      	strb	r3, [r7, #31]
 800383a:	e14d      	b.n	8003ad8 <UART_SetConfig+0x348>
 800383c:	2304      	movs	r3, #4
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e14a      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003842:	2308      	movs	r3, #8
 8003844:	77fb      	strb	r3, [r7, #31]
 8003846:	e147      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003848:	2310      	movs	r3, #16
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e144      	b.n	8003ad8 <UART_SetConfig+0x348>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a83      	ldr	r2, [pc, #524]	@ (8003a60 <UART_SetConfig+0x2d0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d132      	bne.n	80038be <UART_SetConfig+0x12e>
 8003858:	4b80      	ldr	r3, [pc, #512]	@ (8003a5c <UART_SetConfig+0x2cc>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385e:	f003 030c 	and.w	r3, r3, #12
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d828      	bhi.n	80038b8 <UART_SetConfig+0x128>
 8003866:	a201      	add	r2, pc, #4	@ (adr r2, 800386c <UART_SetConfig+0xdc>)
 8003868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386c:	080038a1 	.word	0x080038a1
 8003870:	080038b9 	.word	0x080038b9
 8003874:	080038b9 	.word	0x080038b9
 8003878:	080038b9 	.word	0x080038b9
 800387c:	080038ad 	.word	0x080038ad
 8003880:	080038b9 	.word	0x080038b9
 8003884:	080038b9 	.word	0x080038b9
 8003888:	080038b9 	.word	0x080038b9
 800388c:	080038a7 	.word	0x080038a7
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038b9 	.word	0x080038b9
 8003898:	080038b9 	.word	0x080038b9
 800389c:	080038b3 	.word	0x080038b3
 80038a0:	2300      	movs	r3, #0
 80038a2:	77fb      	strb	r3, [r7, #31]
 80038a4:	e118      	b.n	8003ad8 <UART_SetConfig+0x348>
 80038a6:	2302      	movs	r3, #2
 80038a8:	77fb      	strb	r3, [r7, #31]
 80038aa:	e115      	b.n	8003ad8 <UART_SetConfig+0x348>
 80038ac:	2304      	movs	r3, #4
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e112      	b.n	8003ad8 <UART_SetConfig+0x348>
 80038b2:	2308      	movs	r3, #8
 80038b4:	77fb      	strb	r3, [r7, #31]
 80038b6:	e10f      	b.n	8003ad8 <UART_SetConfig+0x348>
 80038b8:	2310      	movs	r3, #16
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e10c      	b.n	8003ad8 <UART_SetConfig+0x348>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a68      	ldr	r2, [pc, #416]	@ (8003a64 <UART_SetConfig+0x2d4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d120      	bne.n	800390a <UART_SetConfig+0x17a>
 80038c8:	4b64      	ldr	r3, [pc, #400]	@ (8003a5c <UART_SetConfig+0x2cc>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80038d2:	2b30      	cmp	r3, #48	@ 0x30
 80038d4:	d013      	beq.n	80038fe <UART_SetConfig+0x16e>
 80038d6:	2b30      	cmp	r3, #48	@ 0x30
 80038d8:	d814      	bhi.n	8003904 <UART_SetConfig+0x174>
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d009      	beq.n	80038f2 <UART_SetConfig+0x162>
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d810      	bhi.n	8003904 <UART_SetConfig+0x174>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <UART_SetConfig+0x15c>
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d006      	beq.n	80038f8 <UART_SetConfig+0x168>
 80038ea:	e00b      	b.n	8003904 <UART_SetConfig+0x174>
 80038ec:	2300      	movs	r3, #0
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e0f2      	b.n	8003ad8 <UART_SetConfig+0x348>
 80038f2:	2302      	movs	r3, #2
 80038f4:	77fb      	strb	r3, [r7, #31]
 80038f6:	e0ef      	b.n	8003ad8 <UART_SetConfig+0x348>
 80038f8:	2304      	movs	r3, #4
 80038fa:	77fb      	strb	r3, [r7, #31]
 80038fc:	e0ec      	b.n	8003ad8 <UART_SetConfig+0x348>
 80038fe:	2308      	movs	r3, #8
 8003900:	77fb      	strb	r3, [r7, #31]
 8003902:	e0e9      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003904:	2310      	movs	r3, #16
 8003906:	77fb      	strb	r3, [r7, #31]
 8003908:	e0e6      	b.n	8003ad8 <UART_SetConfig+0x348>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a56      	ldr	r2, [pc, #344]	@ (8003a68 <UART_SetConfig+0x2d8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d120      	bne.n	8003956 <UART_SetConfig+0x1c6>
 8003914:	4b51      	ldr	r3, [pc, #324]	@ (8003a5c <UART_SetConfig+0x2cc>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800391a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800391e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003920:	d013      	beq.n	800394a <UART_SetConfig+0x1ba>
 8003922:	2bc0      	cmp	r3, #192	@ 0xc0
 8003924:	d814      	bhi.n	8003950 <UART_SetConfig+0x1c0>
 8003926:	2b80      	cmp	r3, #128	@ 0x80
 8003928:	d009      	beq.n	800393e <UART_SetConfig+0x1ae>
 800392a:	2b80      	cmp	r3, #128	@ 0x80
 800392c:	d810      	bhi.n	8003950 <UART_SetConfig+0x1c0>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <UART_SetConfig+0x1a8>
 8003932:	2b40      	cmp	r3, #64	@ 0x40
 8003934:	d006      	beq.n	8003944 <UART_SetConfig+0x1b4>
 8003936:	e00b      	b.n	8003950 <UART_SetConfig+0x1c0>
 8003938:	2300      	movs	r3, #0
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e0cc      	b.n	8003ad8 <UART_SetConfig+0x348>
 800393e:	2302      	movs	r3, #2
 8003940:	77fb      	strb	r3, [r7, #31]
 8003942:	e0c9      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003944:	2304      	movs	r3, #4
 8003946:	77fb      	strb	r3, [r7, #31]
 8003948:	e0c6      	b.n	8003ad8 <UART_SetConfig+0x348>
 800394a:	2308      	movs	r3, #8
 800394c:	77fb      	strb	r3, [r7, #31]
 800394e:	e0c3      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003950:	2310      	movs	r3, #16
 8003952:	77fb      	strb	r3, [r7, #31]
 8003954:	e0c0      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a44      	ldr	r2, [pc, #272]	@ (8003a6c <UART_SetConfig+0x2dc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d125      	bne.n	80039ac <UART_SetConfig+0x21c>
 8003960:	4b3e      	ldr	r3, [pc, #248]	@ (8003a5c <UART_SetConfig+0x2cc>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800396a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800396e:	d017      	beq.n	80039a0 <UART_SetConfig+0x210>
 8003970:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003974:	d817      	bhi.n	80039a6 <UART_SetConfig+0x216>
 8003976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800397a:	d00b      	beq.n	8003994 <UART_SetConfig+0x204>
 800397c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003980:	d811      	bhi.n	80039a6 <UART_SetConfig+0x216>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <UART_SetConfig+0x1fe>
 8003986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800398a:	d006      	beq.n	800399a <UART_SetConfig+0x20a>
 800398c:	e00b      	b.n	80039a6 <UART_SetConfig+0x216>
 800398e:	2300      	movs	r3, #0
 8003990:	77fb      	strb	r3, [r7, #31]
 8003992:	e0a1      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003994:	2302      	movs	r3, #2
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e09e      	b.n	8003ad8 <UART_SetConfig+0x348>
 800399a:	2304      	movs	r3, #4
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e09b      	b.n	8003ad8 <UART_SetConfig+0x348>
 80039a0:	2308      	movs	r3, #8
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e098      	b.n	8003ad8 <UART_SetConfig+0x348>
 80039a6:	2310      	movs	r3, #16
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e095      	b.n	8003ad8 <UART_SetConfig+0x348>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003a70 <UART_SetConfig+0x2e0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d125      	bne.n	8003a02 <UART_SetConfig+0x272>
 80039b6:	4b29      	ldr	r3, [pc, #164]	@ (8003a5c <UART_SetConfig+0x2cc>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039c4:	d017      	beq.n	80039f6 <UART_SetConfig+0x266>
 80039c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039ca:	d817      	bhi.n	80039fc <UART_SetConfig+0x26c>
 80039cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039d0:	d00b      	beq.n	80039ea <UART_SetConfig+0x25a>
 80039d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039d6:	d811      	bhi.n	80039fc <UART_SetConfig+0x26c>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <UART_SetConfig+0x254>
 80039dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e0:	d006      	beq.n	80039f0 <UART_SetConfig+0x260>
 80039e2:	e00b      	b.n	80039fc <UART_SetConfig+0x26c>
 80039e4:	2301      	movs	r3, #1
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e076      	b.n	8003ad8 <UART_SetConfig+0x348>
 80039ea:	2302      	movs	r3, #2
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	e073      	b.n	8003ad8 <UART_SetConfig+0x348>
 80039f0:	2304      	movs	r3, #4
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e070      	b.n	8003ad8 <UART_SetConfig+0x348>
 80039f6:	2308      	movs	r3, #8
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e06d      	b.n	8003ad8 <UART_SetConfig+0x348>
 80039fc:	2310      	movs	r3, #16
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e06a      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1b      	ldr	r2, [pc, #108]	@ (8003a74 <UART_SetConfig+0x2e4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d138      	bne.n	8003a7e <UART_SetConfig+0x2ee>
 8003a0c:	4b13      	ldr	r3, [pc, #76]	@ (8003a5c <UART_SetConfig+0x2cc>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a12:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003a16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a1a:	d017      	beq.n	8003a4c <UART_SetConfig+0x2bc>
 8003a1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a20:	d82a      	bhi.n	8003a78 <UART_SetConfig+0x2e8>
 8003a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a26:	d00b      	beq.n	8003a40 <UART_SetConfig+0x2b0>
 8003a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a2c:	d824      	bhi.n	8003a78 <UART_SetConfig+0x2e8>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <UART_SetConfig+0x2aa>
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a36:	d006      	beq.n	8003a46 <UART_SetConfig+0x2b6>
 8003a38:	e01e      	b.n	8003a78 <UART_SetConfig+0x2e8>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	77fb      	strb	r3, [r7, #31]
 8003a3e:	e04b      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003a40:	2302      	movs	r3, #2
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	e048      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003a46:	2304      	movs	r3, #4
 8003a48:	77fb      	strb	r3, [r7, #31]
 8003a4a:	e045      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003a4c:	2308      	movs	r3, #8
 8003a4e:	77fb      	strb	r3, [r7, #31]
 8003a50:	e042      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003a52:	bf00      	nop
 8003a54:	efff69f3 	.word	0xefff69f3
 8003a58:	40011000 	.word	0x40011000
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40004400 	.word	0x40004400
 8003a64:	40004800 	.word	0x40004800
 8003a68:	40004c00 	.word	0x40004c00
 8003a6c:	40005000 	.word	0x40005000
 8003a70:	40011400 	.word	0x40011400
 8003a74:	40007800 	.word	0x40007800
 8003a78:	2310      	movs	r3, #16
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e02c      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a72      	ldr	r2, [pc, #456]	@ (8003c4c <UART_SetConfig+0x4bc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d125      	bne.n	8003ad4 <UART_SetConfig+0x344>
 8003a88:	4b71      	ldr	r3, [pc, #452]	@ (8003c50 <UART_SetConfig+0x4c0>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003a92:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003a96:	d017      	beq.n	8003ac8 <UART_SetConfig+0x338>
 8003a98:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003a9c:	d817      	bhi.n	8003ace <UART_SetConfig+0x33e>
 8003a9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aa2:	d00b      	beq.n	8003abc <UART_SetConfig+0x32c>
 8003aa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aa8:	d811      	bhi.n	8003ace <UART_SetConfig+0x33e>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <UART_SetConfig+0x326>
 8003aae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ab2:	d006      	beq.n	8003ac2 <UART_SetConfig+0x332>
 8003ab4:	e00b      	b.n	8003ace <UART_SetConfig+0x33e>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e00d      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003abc:	2302      	movs	r3, #2
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e00a      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003ac2:	2304      	movs	r3, #4
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e007      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003ac8:	2308      	movs	r3, #8
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e004      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003ace:	2310      	movs	r3, #16
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e001      	b.n	8003ad8 <UART_SetConfig+0x348>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ae0:	d15b      	bne.n	8003b9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003ae2:	7ffb      	ldrb	r3, [r7, #31]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d828      	bhi.n	8003b3a <UART_SetConfig+0x3aa>
 8003ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <UART_SetConfig+0x360>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b15 	.word	0x08003b15
 8003af4:	08003b1d 	.word	0x08003b1d
 8003af8:	08003b25 	.word	0x08003b25
 8003afc:	08003b3b 	.word	0x08003b3b
 8003b00:	08003b2b 	.word	0x08003b2b
 8003b04:	08003b3b 	.word	0x08003b3b
 8003b08:	08003b3b 	.word	0x08003b3b
 8003b0c:	08003b3b 	.word	0x08003b3b
 8003b10:	08003b33 	.word	0x08003b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b14:	f7ff f94c 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003b18:	61b8      	str	r0, [r7, #24]
        break;
 8003b1a:	e013      	b.n	8003b44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b1c:	f7ff f95c 	bl	8002dd8 <HAL_RCC_GetPCLK2Freq>
 8003b20:	61b8      	str	r0, [r7, #24]
        break;
 8003b22:	e00f      	b.n	8003b44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b24:	4b4b      	ldr	r3, [pc, #300]	@ (8003c54 <UART_SetConfig+0x4c4>)
 8003b26:	61bb      	str	r3, [r7, #24]
        break;
 8003b28:	e00c      	b.n	8003b44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b2a:	f7ff f82f 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8003b2e:	61b8      	str	r0, [r7, #24]
        break;
 8003b30:	e008      	b.n	8003b44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b36:	61bb      	str	r3, [r7, #24]
        break;
 8003b38:	e004      	b.n	8003b44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	77bb      	strb	r3, [r7, #30]
        break;
 8003b42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d074      	beq.n	8003c34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	005a      	lsls	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	441a      	add	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b0f      	cmp	r3, #15
 8003b64:	d916      	bls.n	8003b94 <UART_SetConfig+0x404>
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b6c:	d212      	bcs.n	8003b94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f023 030f 	bic.w	r3, r3, #15
 8003b76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	89fb      	ldrh	r3, [r7, #14]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	89fa      	ldrh	r2, [r7, #14]
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	e04f      	b.n	8003c34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	77bb      	strb	r3, [r7, #30]
 8003b98:	e04c      	b.n	8003c34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b9a:	7ffb      	ldrb	r3, [r7, #31]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d828      	bhi.n	8003bf2 <UART_SetConfig+0x462>
 8003ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <UART_SetConfig+0x418>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bcd 	.word	0x08003bcd
 8003bac:	08003bd5 	.word	0x08003bd5
 8003bb0:	08003bdd 	.word	0x08003bdd
 8003bb4:	08003bf3 	.word	0x08003bf3
 8003bb8:	08003be3 	.word	0x08003be3
 8003bbc:	08003bf3 	.word	0x08003bf3
 8003bc0:	08003bf3 	.word	0x08003bf3
 8003bc4:	08003bf3 	.word	0x08003bf3
 8003bc8:	08003beb 	.word	0x08003beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bcc:	f7ff f8f0 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003bd0:	61b8      	str	r0, [r7, #24]
        break;
 8003bd2:	e013      	b.n	8003bfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd4:	f7ff f900 	bl	8002dd8 <HAL_RCC_GetPCLK2Freq>
 8003bd8:	61b8      	str	r0, [r7, #24]
        break;
 8003bda:	e00f      	b.n	8003bfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c54 <UART_SetConfig+0x4c4>)
 8003bde:	61bb      	str	r3, [r7, #24]
        break;
 8003be0:	e00c      	b.n	8003bfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003be2:	f7fe ffd3 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8003be6:	61b8      	str	r0, [r7, #24]
        break;
 8003be8:	e008      	b.n	8003bfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bee:	61bb      	str	r3, [r7, #24]
        break;
 8003bf0:	e004      	b.n	8003bfc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	77bb      	strb	r3, [r7, #30]
        break;
 8003bfa:	bf00      	nop
    }

    if (pclk != 0U)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d018      	beq.n	8003c34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	085a      	lsrs	r2, r3, #1
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	441a      	add	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b0f      	cmp	r3, #15
 8003c1a:	d909      	bls.n	8003c30 <UART_SetConfig+0x4a0>
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c22:	d205      	bcs.n	8003c30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60da      	str	r2, [r3, #12]
 8003c2e:	e001      	b.n	8003c34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c40:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3720      	adds	r7, #32
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40007c00 	.word	0x40007c00
 8003c50:	40023800 	.word	0x40023800
 8003c54:	00f42400 	.word	0x00f42400

08003c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01a      	beq.n	8003d6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d56:	d10a      	bne.n	8003d6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
  }
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08c      	sub	sp, #48	@ 0x30
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dac:	f7fd f936 	bl	800101c <HAL_GetTick>
 8003db0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d12e      	bne.n	8003e1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f83b 	bl	8003e4a <UART_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d021      	beq.n	8003e1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dee:	623b      	str	r3, [r7, #32]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	61fb      	str	r3, [r7, #28]
 8003dfa:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	69b9      	ldr	r1, [r7, #24]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	617b      	str	r3, [r7, #20]
   return(result);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e6      	bne.n	8003dda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e011      	b.n	8003e42 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2220      	movs	r2, #32
 8003e22:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3728      	adds	r7, #40	@ 0x28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	4613      	mov	r3, r2
 8003e58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e5a:	e04f      	b.n	8003efc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d04b      	beq.n	8003efc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e64:	f7fd f8da 	bl	800101c <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d302      	bcc.n	8003e7a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e04e      	b.n	8003f1c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d037      	beq.n	8003efc <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b80      	cmp	r3, #128	@ 0x80
 8003e90:	d034      	beq.n	8003efc <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b40      	cmp	r3, #64	@ 0x40
 8003e96:	d031      	beq.n	8003efc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d110      	bne.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2208      	movs	r2, #8
 8003eac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f838 	bl	8003f24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e029      	b.n	8003f1c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ed2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ed6:	d111      	bne.n	8003efc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ee0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f81e 	bl	8003f24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e00f      	b.n	8003f1c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4013      	ands	r3, r2
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	bf0c      	ite	eq
 8003f0c:	2301      	moveq	r3, #1
 8003f0e:	2300      	movne	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	461a      	mov	r2, r3
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d0a0      	beq.n	8003e5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b095      	sub	sp, #84	@ 0x54
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e6      	bne.n	8003f2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e5      	bne.n	8003f5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d118      	bne.n	8003fcc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f023 0310 	bic.w	r3, r3, #16
 8003fae:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6979      	ldr	r1, [r7, #20]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e6      	bne.n	8003f9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003fe0:	bf00      	nop
 8003fe2:	3754      	adds	r7, #84	@ 0x54
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af04      	add	r7, sp, #16
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8004024 <BMP280_Read8+0x38>)
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	b29a      	uxth	r2, r3
 8004002:	230a      	movs	r3, #10
 8004004:	9302      	str	r3, [sp, #8]
 8004006:	2301      	movs	r3, #1
 8004008:	9301      	str	r3, [sp, #4]
 800400a:	f107 030f 	add.w	r3, r7, #15
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	2301      	movs	r3, #1
 8004012:	21ec      	movs	r1, #236	@ 0xec
 8004014:	f7fd fda6 	bl	8001b64 <HAL_I2C_Mem_Read>
  return tmp;
 8004018:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	200001f8 	.word	0x200001f8

08004028 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af04      	add	r7, sp, #16
 800402e:	4603      	mov	r3, r0
 8004030:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8004032:	4b0d      	ldr	r3, [pc, #52]	@ (8004068 <BMP280_Read16+0x40>)
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	b29a      	uxth	r2, r3
 800403a:	230a      	movs	r3, #10
 800403c:	9302      	str	r3, [sp, #8]
 800403e:	2302      	movs	r3, #2
 8004040:	9301      	str	r3, [sp, #4]
 8004042:	f107 030c 	add.w	r3, r7, #12
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2301      	movs	r3, #1
 800404a:	21ec      	movs	r1, #236	@ 0xec
 800404c:	f7fd fd8a 	bl	8001b64 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8004050:	7b3b      	ldrb	r3, [r7, #12]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	b21a      	sxth	r2, r3
 8004056:	7b7b      	ldrb	r3, [r7, #13]
 8004058:	b21b      	sxth	r3, r3
 800405a:	4313      	orrs	r3, r2
 800405c:	b21b      	sxth	r3, r3
 800405e:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	200001f8 	.word	0x200001f8

0800406c <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ffd5 	bl	8004028 <BMP280_Read16>
 800407e:	4603      	mov	r3, r0
 8004080:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8004082:	89fb      	ldrh	r3, [r7, #14]
 8004084:	0a1b      	lsrs	r3, r3, #8
 8004086:	b29b      	uxth	r3, r3
 8004088:	b21a      	sxth	r2, r3
 800408a:	89fb      	ldrh	r3, [r7, #14]
 800408c:	021b      	lsls	r3, r3, #8
 800408e:	b21b      	sxth	r3, r3
 8004090:	4313      	orrs	r3, r2
 8004092:	b21b      	sxth	r3, r3
 8004094:	b29b      	uxth	r3, r3
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af04      	add	r7, sp, #16
 80040a6:	4603      	mov	r3, r0
 80040a8:	460a      	mov	r2, r1
 80040aa:	71fb      	strb	r3, [r7, #7]
 80040ac:	4613      	mov	r3, r2
 80040ae:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 80040b0:	4b08      	ldr	r3, [pc, #32]	@ (80040d4 <BMP280_Write8+0x34>)
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	230a      	movs	r3, #10
 80040ba:	9302      	str	r3, [sp, #8]
 80040bc:	2301      	movs	r3, #1
 80040be:	9301      	str	r3, [sp, #4]
 80040c0:	1dbb      	adds	r3, r7, #6
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	2301      	movs	r3, #1
 80040c6:	21ec      	movs	r1, #236	@ 0xec
 80040c8:	f7fd fc38 	bl	800193c <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	200001f8 	.word	0x200001f8

080040d8 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af04      	add	r7, sp, #16
 80040de:	4603      	mov	r3, r0
 80040e0:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 80040e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004118 <BMP280_Read24+0x40>)
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	230a      	movs	r3, #10
 80040ec:	9302      	str	r3, [sp, #8]
 80040ee:	2303      	movs	r3, #3
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	f107 030c 	add.w	r3, r7, #12
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2301      	movs	r3, #1
 80040fa:	21ec      	movs	r1, #236	@ 0xec
 80040fc:	f7fd fd32 	bl	8001b64 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8004100:	7b3b      	ldrb	r3, [r7, #12]
 8004102:	041a      	lsls	r2, r3, #16
 8004104:	7b7b      	ldrb	r3, [r7, #13]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	4313      	orrs	r3, r2
 800410a:	7bba      	ldrb	r2, [r7, #14]
 800410c:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	200001f8 	.word	0x200001f8

0800411c <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	4608      	mov	r0, r1
 8004126:	4611      	mov	r1, r2
 8004128:	461a      	mov	r2, r3
 800412a:	4603      	mov	r3, r0
 800412c:	70fb      	strb	r3, [r7, #3]
 800412e:	460b      	mov	r3, r1
 8004130:	70bb      	strb	r3, [r7, #2]
 8004132:	4613      	mov	r3, r2
 8004134:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 8004136:	4a48      	ldr	r2, [pc, #288]	@ (8004258 <BMP280_Init+0x13c>)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 800413c:	787b      	ldrb	r3, [r7, #1]
 800413e:	2b03      	cmp	r3, #3
 8004140:	d901      	bls.n	8004146 <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8004142:	2303      	movs	r3, #3
 8004144:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8004146:	4a45      	ldr	r2, [pc, #276]	@ (800425c <BMP280_Init+0x140>)
 8004148:	787b      	ldrb	r3, [r7, #1]
 800414a:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 800414c:	787b      	ldrb	r3, [r7, #1]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8004152:	2300      	movs	r3, #0
 8004154:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	2b05      	cmp	r3, #5
 800415a:	d901      	bls.n	8004160 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 800415c:	2305      	movs	r3, #5
 800415e:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8004160:	4a3f      	ldr	r2, [pc, #252]	@ (8004260 <BMP280_Init+0x144>)
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8004166:	78bb      	ldrb	r3, [r7, #2]
 8004168:	2b05      	cmp	r3, #5
 800416a:	d901      	bls.n	8004170 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 800416c:	2305      	movs	r3, #5
 800416e:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8004170:	4a3c      	ldr	r2, [pc, #240]	@ (8004264 <BMP280_Init+0x148>)
 8004172:	78bb      	ldrb	r3, [r7, #2]
 8004174:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8004176:	bf00      	nop
 8004178:	20d0      	movs	r0, #208	@ 0xd0
 800417a:	f7ff ff37 	bl	8003fec <BMP280_Read8>
 800417e:	4603      	mov	r3, r0
 8004180:	2b58      	cmp	r3, #88	@ 0x58
 8004182:	d1f9      	bne.n	8004178 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8004184:	2088      	movs	r0, #136	@ 0x88
 8004186:	f7ff ff71 	bl	800406c <BMP280_Read16LE>
 800418a:	4603      	mov	r3, r0
 800418c:	461a      	mov	r2, r3
 800418e:	4b36      	ldr	r3, [pc, #216]	@ (8004268 <BMP280_Init+0x14c>)
 8004190:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8004192:	208a      	movs	r0, #138	@ 0x8a
 8004194:	f7ff ff6a 	bl	800406c <BMP280_Read16LE>
 8004198:	4603      	mov	r3, r0
 800419a:	b21a      	sxth	r2, r3
 800419c:	4b33      	ldr	r3, [pc, #204]	@ (800426c <BMP280_Init+0x150>)
 800419e:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80041a0:	208c      	movs	r0, #140	@ 0x8c
 80041a2:	f7ff ff63 	bl	800406c <BMP280_Read16LE>
 80041a6:	4603      	mov	r3, r0
 80041a8:	b21a      	sxth	r2, r3
 80041aa:	4b31      	ldr	r3, [pc, #196]	@ (8004270 <BMP280_Init+0x154>)
 80041ac:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80041ae:	208e      	movs	r0, #142	@ 0x8e
 80041b0:	f7ff ff5c 	bl	800406c <BMP280_Read16LE>
 80041b4:	4603      	mov	r3, r0
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004274 <BMP280_Init+0x158>)
 80041ba:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80041bc:	2090      	movs	r0, #144	@ 0x90
 80041be:	f7ff ff55 	bl	800406c <BMP280_Read16LE>
 80041c2:	4603      	mov	r3, r0
 80041c4:	b21a      	sxth	r2, r3
 80041c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004278 <BMP280_Init+0x15c>)
 80041c8:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80041ca:	2092      	movs	r0, #146	@ 0x92
 80041cc:	f7ff ff4e 	bl	800406c <BMP280_Read16LE>
 80041d0:	4603      	mov	r3, r0
 80041d2:	b21a      	sxth	r2, r3
 80041d4:	4b29      	ldr	r3, [pc, #164]	@ (800427c <BMP280_Init+0x160>)
 80041d6:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 80041d8:	2094      	movs	r0, #148	@ 0x94
 80041da:	f7ff ff47 	bl	800406c <BMP280_Read16LE>
 80041de:	4603      	mov	r3, r0
 80041e0:	b21a      	sxth	r2, r3
 80041e2:	4b27      	ldr	r3, [pc, #156]	@ (8004280 <BMP280_Init+0x164>)
 80041e4:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 80041e6:	2096      	movs	r0, #150	@ 0x96
 80041e8:	f7ff ff40 	bl	800406c <BMP280_Read16LE>
 80041ec:	4603      	mov	r3, r0
 80041ee:	b21a      	sxth	r2, r3
 80041f0:	4b24      	ldr	r3, [pc, #144]	@ (8004284 <BMP280_Init+0x168>)
 80041f2:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 80041f4:	2098      	movs	r0, #152	@ 0x98
 80041f6:	f7ff ff39 	bl	800406c <BMP280_Read16LE>
 80041fa:	4603      	mov	r3, r0
 80041fc:	b21a      	sxth	r2, r3
 80041fe:	4b22      	ldr	r3, [pc, #136]	@ (8004288 <BMP280_Init+0x16c>)
 8004200:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8004202:	209a      	movs	r0, #154	@ 0x9a
 8004204:	f7ff ff32 	bl	800406c <BMP280_Read16LE>
 8004208:	4603      	mov	r3, r0
 800420a:	b21a      	sxth	r2, r3
 800420c:	4b1f      	ldr	r3, [pc, #124]	@ (800428c <BMP280_Init+0x170>)
 800420e:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8004210:	209c      	movs	r0, #156	@ 0x9c
 8004212:	f7ff ff2b 	bl	800406c <BMP280_Read16LE>
 8004216:	4603      	mov	r3, r0
 8004218:	b21a      	sxth	r2, r3
 800421a:	4b1d      	ldr	r3, [pc, #116]	@ (8004290 <BMP280_Init+0x174>)
 800421c:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800421e:	209e      	movs	r0, #158	@ 0x9e
 8004220:	f7ff ff24 	bl	800406c <BMP280_Read16LE>
 8004224:	4603      	mov	r3, r0
 8004226:	b21a      	sxth	r2, r3
 8004228:	4b1a      	ldr	r3, [pc, #104]	@ (8004294 <BMP280_Init+0x178>)
 800422a:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	015b      	lsls	r3, r3, #5
 8004230:	b25a      	sxtb	r2, r3
 8004232:	78bb      	ldrb	r3, [r7, #2]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	b25b      	sxtb	r3, r3
 8004238:	4313      	orrs	r3, r2
 800423a:	b25a      	sxtb	r2, r3
 800423c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8004240:	4313      	orrs	r3, r2
 8004242:	b25b      	sxtb	r3, r3
 8004244:	b2db      	uxtb	r3, r3
 8004246:	4619      	mov	r1, r3
 8004248:	20f4      	movs	r0, #244	@ 0xf4
 800424a:	f7ff ff29 	bl	80040a0 <BMP280_Write8>
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	200001f8 	.word	0x200001f8
 800425c:	200001fe 	.word	0x200001fe
 8004260:	200001fc 	.word	0x200001fc
 8004264:	200001fd 	.word	0x200001fd
 8004268:	20000214 	.word	0x20000214
 800426c:	20000200 	.word	0x20000200
 8004270:	20000202 	.word	0x20000202
 8004274:	20000216 	.word	0x20000216
 8004278:	20000204 	.word	0x20000204
 800427c:	20000206 	.word	0x20000206
 8004280:	20000208 	.word	0x20000208
 8004284:	2000020a 	.word	0x2000020a
 8004288:	2000020c 	.word	0x2000020c
 800428c:	2000020e 	.word	0x2000020e
 8004290:	20000210 	.word	0x20000210
 8004294:	20000212 	.word	0x20000212

08004298 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800429e:	4b3d      	ldr	r3, [pc, #244]	@ (8004394 <BMP280_ReadTemperature+0xfc>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d16d      	bne.n	8004382 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80042a6:	20f4      	movs	r0, #244	@ 0xf4
 80042a8:	f7ff fea0 	bl	8003fec <BMP280_Read8>
 80042ac:	4603      	mov	r3, r0
 80042ae:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
 80042c2:	4619      	mov	r1, r3
 80042c4:	20f4      	movs	r0, #244	@ 0xf4
 80042c6:	f7ff feeb 	bl	80040a0 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80042ca:	20f4      	movs	r0, #244	@ 0xf4
 80042cc:	f7ff fe8e 	bl	8003fec <BMP280_Read8>
 80042d0:	4603      	mov	r3, r0
 80042d2:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80042d4:	7dbb      	ldrb	r3, [r7, #22]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80042dc:	7dbb      	ldrb	r3, [r7, #22]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d14f      	bne.n	8004382 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 80042e2:	20f4      	movs	r0, #244	@ 0xf4
 80042e4:	f7ff fe82 	bl	8003fec <BMP280_Read8>
 80042e8:	4603      	mov	r3, r0
 80042ea:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 80042ec:	7dbb      	ldrb	r3, [r7, #22]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 80042f4:	7dbb      	ldrb	r3, [r7, #22]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d000      	beq.n	80042fc <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 80042fa:	e7f2      	b.n	80042e2 <BMP280_ReadTemperature+0x4a>
				  break;
 80042fc:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 80042fe:	20fa      	movs	r0, #250	@ 0xfa
 8004300:	f7ff feea 	bl	80040d8 <BMP280_Read24>
 8004304:	4603      	mov	r3, r0
 8004306:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	111b      	asrs	r3, r3, #4
 800430c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	10da      	asrs	r2, r3, #3
 8004312:	4b21      	ldr	r3, [pc, #132]	@ (8004398 <BMP280_ReadTemperature+0x100>)
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800431a:	4a20      	ldr	r2, [pc, #128]	@ (800439c <BMP280_ReadTemperature+0x104>)
 800431c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8004320:	fb02 f303 	mul.w	r3, r2, r3
 8004324:	12db      	asrs	r3, r3, #11
 8004326:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	111b      	asrs	r3, r3, #4
 800432c:	4a1a      	ldr	r2, [pc, #104]	@ (8004398 <BMP280_ReadTemperature+0x100>)
 800432e:	8812      	ldrh	r2, [r2, #0]
 8004330:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	1112      	asrs	r2, r2, #4
 8004336:	4918      	ldr	r1, [pc, #96]	@ (8004398 <BMP280_ReadTemperature+0x100>)
 8004338:	8809      	ldrh	r1, [r1, #0]
 800433a:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800433c:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8004340:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8004342:	4a17      	ldr	r2, [pc, #92]	@ (80043a0 <BMP280_ReadTemperature+0x108>)
 8004344:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8004348:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800434c:	139b      	asrs	r3, r3, #14
 800434e:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4413      	add	r3, r2
 8004356:	4a13      	ldr	r2, [pc, #76]	@ (80043a4 <BMP280_ReadTemperature+0x10c>)
 8004358:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800435a:	4b12      	ldr	r3, [pc, #72]	@ (80043a4 <BMP280_ReadTemperature+0x10c>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4613      	mov	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	3380      	adds	r3, #128	@ 0x80
 8004366:	121b      	asrs	r3, r3, #8
 8004368:	ee07 3a90 	vmov	s15, r3
 800436c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004370:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8004374:	edd7 7a01 	vldr	s15, [r7, #4]
 8004378:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80043a8 <BMP280_ReadTemperature+0x110>
 800437c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004380:	e001      	b.n	8004386 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8004382:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80043ac <BMP280_ReadTemperature+0x114>
}
 8004386:	eef0 7a47 	vmov.f32	s15, s14
 800438a:	eeb0 0a67 	vmov.f32	s0, s15
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	200001fe 	.word	0x200001fe
 8004398:	20000214 	.word	0x20000214
 800439c:	20000200 	.word	0x20000200
 80043a0:	20000202 	.word	0x20000202
 80043a4:	20000218 	.word	0x20000218
 80043a8:	42c80000 	.word	0x42c80000
 80043ac:	c2c60000 	.word	0xc2c60000

080043b0 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80043b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b4:	b0cc      	sub	sp, #304	@ 0x130
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 80043bc:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80043c0:	f7ff ff6a 	bl	8004298 <BMP280_ReadTemperature>
 80043c4:	eef0 7a40 	vmov.f32	s15, s0
 80043c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043cc:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80043d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043d4:	edd3 7a00 	vldr	s15, [r3]
 80043d8:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 80046a8 <BMP280_ReadTemperatureAndPressure+0x2f8>
 80043dc:	eef4 7a47 	vcmp.f32	s15, s14
 80043e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e4:	d101      	bne.n	80043ea <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 80043e6:	23ff      	movs	r3, #255	@ 0xff
 80043e8:	e2bf      	b.n	800496a <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 80043ea:	20f7      	movs	r0, #247	@ 0xf7
 80043ec:	f7ff fe74 	bl	80040d8 <BMP280_Read24>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	  adc_P >>= 4;
 80043f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80043fa:	111b      	asrs	r3, r3, #4
 80043fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8004400:	4baa      	ldr	r3, [pc, #680]	@ (80046ac <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	17da      	asrs	r2, r3, #31
 8004406:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800440a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800440e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004412:	460b      	mov	r3, r1
 8004414:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8004418:	64bb      	str	r3, [r7, #72]	@ 0x48
 800441a:	4613      	mov	r3, r2
 800441c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8004420:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004422:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004426:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 800442a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800442e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004432:	fb03 f102 	mul.w	r1, r3, r2
 8004436:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800443a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	18ca      	adds	r2, r1, r3
 8004444:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004448:	fba3 4503 	umull	r4, r5, r3, r3
 800444c:	1953      	adds	r3, r2, r5
 800444e:	461d      	mov	r5, r3
 8004450:	4b97      	ldr	r3, [pc, #604]	@ (80046b0 <BMP280_ReadTemperatureAndPressure+0x300>)
 8004452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004456:	b21b      	sxth	r3, r3
 8004458:	17da      	asrs	r2, r3, #31
 800445a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800445e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004462:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8004466:	4603      	mov	r3, r0
 8004468:	fb03 f205 	mul.w	r2, r3, r5
 800446c:	460b      	mov	r3, r1
 800446e:	fb04 f303 	mul.w	r3, r4, r3
 8004472:	4413      	add	r3, r2
 8004474:	4602      	mov	r2, r0
 8004476:	fba4 8902 	umull	r8, r9, r4, r2
 800447a:	444b      	add	r3, r9
 800447c:	4699      	mov	r9, r3
 800447e:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 8004482:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8004486:	4b8b      	ldr	r3, [pc, #556]	@ (80046b4 <BMP280_ReadTemperatureAndPressure+0x304>)
 8004488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800448c:	b21b      	sxth	r3, r3
 800448e:	17da      	asrs	r2, r3, #31
 8004490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004494:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004498:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800449c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80044a0:	462a      	mov	r2, r5
 80044a2:	fb02 f203 	mul.w	r2, r2, r3
 80044a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80044aa:	4621      	mov	r1, r4
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	441a      	add	r2, r3
 80044b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80044b6:	4621      	mov	r1, r4
 80044b8:	fba3 ab01 	umull	sl, fp, r3, r1
 80044bc:	eb02 030b 	add.w	r3, r2, fp
 80044c0:	469b      	mov	fp, r3
 80044c2:	f04f 0000 	mov.w	r0, #0
 80044c6:	f04f 0100 	mov.w	r1, #0
 80044ca:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80044ce:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80044d2:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80044d6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80044da:	1814      	adds	r4, r2, r0
 80044dc:	643c      	str	r4, [r7, #64]	@ 0x40
 80044de:	414b      	adcs	r3, r1
 80044e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80044e6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 80044ea:	4b73      	ldr	r3, [pc, #460]	@ (80046b8 <BMP280_ReadTemperatureAndPressure+0x308>)
 80044ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044f0:	b21b      	sxth	r3, r3
 80044f2:	17da      	asrs	r2, r3, #31
 80044f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044f8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80044fc:	f04f 0000 	mov.w	r0, #0
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004508:	00d9      	lsls	r1, r3, #3
 800450a:	2000      	movs	r0, #0
 800450c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004510:	1814      	adds	r4, r2, r0
 8004512:	63bc      	str	r4, [r7, #56]	@ 0x38
 8004514:	414b      	adcs	r3, r1
 8004516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004518:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800451c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8004520:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004524:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004528:	fb03 f102 	mul.w	r1, r3, r2
 800452c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004530:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004534:	fb02 f303 	mul.w	r3, r2, r3
 8004538:	18ca      	adds	r2, r1, r3
 800453a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800453e:	fba3 1303 	umull	r1, r3, r3, r3
 8004542:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004546:	460b      	mov	r3, r1
 8004548:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800454c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004550:	18d3      	adds	r3, r2, r3
 8004552:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004556:	4b59      	ldr	r3, [pc, #356]	@ (80046bc <BMP280_ReadTemperatureAndPressure+0x30c>)
 8004558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800455c:	b21b      	sxth	r3, r3
 800455e:	17da      	asrs	r2, r3, #31
 8004560:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004564:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004568:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800456c:	462b      	mov	r3, r5
 800456e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8004572:	4642      	mov	r2, r8
 8004574:	fb02 f203 	mul.w	r2, r2, r3
 8004578:	464b      	mov	r3, r9
 800457a:	4621      	mov	r1, r4
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	4413      	add	r3, r2
 8004582:	4622      	mov	r2, r4
 8004584:	4641      	mov	r1, r8
 8004586:	fba2 1201 	umull	r1, r2, r2, r1
 800458a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800458e:	460a      	mov	r2, r1
 8004590:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8004594:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8004598:	4413      	add	r3, r2
 800459a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800459e:	f04f 0000 	mov.w	r0, #0
 80045a2:	f04f 0100 	mov.w	r1, #0
 80045a6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80045aa:	4623      	mov	r3, r4
 80045ac:	0a18      	lsrs	r0, r3, #8
 80045ae:	462b      	mov	r3, r5
 80045b0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80045b4:	462b      	mov	r3, r5
 80045b6:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 80045b8:	4b41      	ldr	r3, [pc, #260]	@ (80046c0 <BMP280_ReadTemperatureAndPressure+0x310>)
 80045ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045be:	b21b      	sxth	r3, r3
 80045c0:	17da      	asrs	r2, r3, #31
 80045c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80045ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045d2:	464a      	mov	r2, r9
 80045d4:	fb02 f203 	mul.w	r2, r2, r3
 80045d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80045dc:	4644      	mov	r4, r8
 80045de:	fb04 f303 	mul.w	r3, r4, r3
 80045e2:	441a      	add	r2, r3
 80045e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80045e8:	4644      	mov	r4, r8
 80045ea:	fba3 4304 	umull	r4, r3, r3, r4
 80045ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80045f2:	4623      	mov	r3, r4
 80045f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fc:	18d3      	adds	r3, r2, r3
 80045fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800460e:	464c      	mov	r4, r9
 8004610:	0323      	lsls	r3, r4, #12
 8004612:	4644      	mov	r4, r8
 8004614:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8004618:	4644      	mov	r4, r8
 800461a:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800461c:	1884      	adds	r4, r0, r2
 800461e:	633c      	str	r4, [r7, #48]	@ 0x30
 8004620:	eb41 0303 	adc.w	r3, r1, r3
 8004624:	637b      	str	r3, [r7, #52]	@ 0x34
 8004626:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800462a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 800462e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004632:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8004636:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 800463a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800463e:	4b21      	ldr	r3, [pc, #132]	@ (80046c4 <BMP280_ReadTemperatureAndPressure+0x314>)
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	2200      	movs	r2, #0
 8004646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800464a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800464e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8004652:	462b      	mov	r3, r5
 8004654:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8004658:	4642      	mov	r2, r8
 800465a:	fb02 f203 	mul.w	r2, r2, r3
 800465e:	464b      	mov	r3, r9
 8004660:	4621      	mov	r1, r4
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	4413      	add	r3, r2
 8004668:	4622      	mov	r2, r4
 800466a:	4641      	mov	r1, r8
 800466c:	fba2 1201 	umull	r1, r2, r2, r1
 8004670:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004674:	460a      	mov	r2, r1
 8004676:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 800467a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800467e:	4413      	add	r3, r2
 8004680:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004690:	4629      	mov	r1, r5
 8004692:	104a      	asrs	r2, r1, #1
 8004694:	4629      	mov	r1, r5
 8004696:	17cb      	asrs	r3, r1, #31
 8004698:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	  if (var1 == 0) {
 800469c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80046a0:	4313      	orrs	r3, r2
 80046a2:	d111      	bne.n	80046c8 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 80046a4:	2300      	movs	r3, #0
 80046a6:	e160      	b.n	800496a <BMP280_ReadTemperatureAndPressure+0x5ba>
 80046a8:	c2c60000 	.word	0xc2c60000
 80046ac:	20000218 	.word	0x20000218
 80046b0:	2000020c 	.word	0x2000020c
 80046b4:	2000020a 	.word	0x2000020a
 80046b8:	20000208 	.word	0x20000208
 80046bc:	20000206 	.word	0x20000206
 80046c0:	20000204 	.word	0x20000204
 80046c4:	20000216 	.word	0x20000216
	  }
	  p = 1048576 - adc_P;
 80046c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80046cc:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80046d0:	17da      	asrs	r2, r3, #31
 80046d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046d6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80046da:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 80046de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80046e2:	105b      	asrs	r3, r3, #1
 80046e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80046e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80046ec:	07db      	lsls	r3, r3, #31
 80046ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046f2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80046f6:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80046fa:	4621      	mov	r1, r4
 80046fc:	1a89      	subs	r1, r1, r2
 80046fe:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8004702:	4629      	mov	r1, r5
 8004704:	eb61 0303 	sbc.w	r3, r1, r3
 8004708:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800470c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8004710:	4622      	mov	r2, r4
 8004712:	462b      	mov	r3, r5
 8004714:	1891      	adds	r1, r2, r2
 8004716:	6239      	str	r1, [r7, #32]
 8004718:	415b      	adcs	r3, r3
 800471a:	627b      	str	r3, [r7, #36]	@ 0x24
 800471c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004720:	4621      	mov	r1, r4
 8004722:	1851      	adds	r1, r2, r1
 8004724:	61b9      	str	r1, [r7, #24]
 8004726:	4629      	mov	r1, r5
 8004728:	414b      	adcs	r3, r1
 800472a:	61fb      	str	r3, [r7, #28]
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004738:	4649      	mov	r1, r9
 800473a:	018b      	lsls	r3, r1, #6
 800473c:	4641      	mov	r1, r8
 800473e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004742:	4641      	mov	r1, r8
 8004744:	018a      	lsls	r2, r1, #6
 8004746:	4641      	mov	r1, r8
 8004748:	1889      	adds	r1, r1, r2
 800474a:	6139      	str	r1, [r7, #16]
 800474c:	4649      	mov	r1, r9
 800474e:	eb43 0101 	adc.w	r1, r3, r1
 8004752:	6179      	str	r1, [r7, #20]
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004760:	4649      	mov	r1, r9
 8004762:	008b      	lsls	r3, r1, #2
 8004764:	4641      	mov	r1, r8
 8004766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800476a:	4641      	mov	r1, r8
 800476c:	008a      	lsls	r2, r1, #2
 800476e:	4610      	mov	r0, r2
 8004770:	4619      	mov	r1, r3
 8004772:	4603      	mov	r3, r0
 8004774:	4622      	mov	r2, r4
 8004776:	189b      	adds	r3, r3, r2
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	460b      	mov	r3, r1
 800477c:	462a      	mov	r2, r5
 800477e:	eb42 0303 	adc.w	r3, r2, r3
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004790:	4649      	mov	r1, r9
 8004792:	008b      	lsls	r3, r1, #2
 8004794:	4641      	mov	r1, r8
 8004796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800479a:	4641      	mov	r1, r8
 800479c:	008a      	lsls	r2, r1, #2
 800479e:	4610      	mov	r0, r2
 80047a0:	4619      	mov	r1, r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	4622      	mov	r2, r4
 80047a6:	189b      	adds	r3, r3, r2
 80047a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047aa:	462b      	mov	r3, r5
 80047ac:	460a      	mov	r2, r1
 80047ae:	eb42 0303 	adc.w	r3, r2, r3
 80047b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047b4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80047b8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80047bc:	f7fc fa14 	bl	8000be8 <__aeabi_ldivmod>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80047c8:	4b6b      	ldr	r3, [pc, #428]	@ (8004978 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 80047ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047ce:	b21b      	sxth	r3, r3
 80047d0:	17da      	asrs	r2, r3, #31
 80047d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80047d4:	677a      	str	r2, [r7, #116]	@ 0x74
 80047d6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80047da:	f04f 0000 	mov.w	r0, #0
 80047de:	f04f 0100 	mov.w	r1, #0
 80047e2:	0b50      	lsrs	r0, r2, #13
 80047e4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80047e8:	1359      	asrs	r1, r3, #13
 80047ea:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80047ee:	462b      	mov	r3, r5
 80047f0:	fb00 f203 	mul.w	r2, r0, r3
 80047f4:	4623      	mov	r3, r4
 80047f6:	fb03 f301 	mul.w	r3, r3, r1
 80047fa:	4413      	add	r3, r2
 80047fc:	4622      	mov	r2, r4
 80047fe:	fba2 1200 	umull	r1, r2, r2, r0
 8004802:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8004806:	460a      	mov	r2, r1
 8004808:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800480c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004810:	4413      	add	r3, r2
 8004812:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004816:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800481a:	f04f 0000 	mov.w	r0, #0
 800481e:	f04f 0100 	mov.w	r1, #0
 8004822:	0b50      	lsrs	r0, r2, #13
 8004824:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004828:	1359      	asrs	r1, r3, #13
 800482a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800482e:	462b      	mov	r3, r5
 8004830:	fb00 f203 	mul.w	r2, r0, r3
 8004834:	4623      	mov	r3, r4
 8004836:	fb03 f301 	mul.w	r3, r3, r1
 800483a:	4413      	add	r3, r2
 800483c:	4622      	mov	r2, r4
 800483e:	fba2 1200 	umull	r1, r2, r2, r0
 8004842:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004846:	460a      	mov	r2, r1
 8004848:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800484c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004850:	4413      	add	r3, r2
 8004852:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8004862:	4621      	mov	r1, r4
 8004864:	0e4a      	lsrs	r2, r1, #25
 8004866:	4629      	mov	r1, r5
 8004868:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800486c:	4629      	mov	r1, r5
 800486e:	164b      	asrs	r3, r1, #25
 8004870:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 8004874:	4b41      	ldr	r3, [pc, #260]	@ (800497c <BMP280_ReadTemperatureAndPressure+0x5cc>)
 8004876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800487a:	b21b      	sxth	r3, r3
 800487c:	17da      	asrs	r2, r3, #31
 800487e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004880:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004882:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004886:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800488a:	462a      	mov	r2, r5
 800488c:	fb02 f203 	mul.w	r2, r2, r3
 8004890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004894:	4621      	mov	r1, r4
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	4413      	add	r3, r2
 800489c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80048a0:	4621      	mov	r1, r4
 80048a2:	fba2 1201 	umull	r1, r2, r2, r1
 80048a6:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048aa:	460a      	mov	r2, r1
 80048ac:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80048b0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80048b4:	4413      	add	r3, r2
 80048b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80048c6:	4621      	mov	r1, r4
 80048c8:	0cca      	lsrs	r2, r1, #19
 80048ca:	4629      	mov	r1, r5
 80048cc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80048d0:	4629      	mov	r1, r5
 80048d2:	14cb      	asrs	r3, r1, #19
 80048d4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 80048d8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80048dc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80048e0:	1884      	adds	r4, r0, r2
 80048e2:	663c      	str	r4, [r7, #96]	@ 0x60
 80048e4:	eb41 0303 	adc.w	r3, r1, r3
 80048e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80048ea:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80048ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80048f2:	4621      	mov	r1, r4
 80048f4:	1889      	adds	r1, r1, r2
 80048f6:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048f8:	4629      	mov	r1, r5
 80048fa:	eb43 0101 	adc.w	r1, r3, r1
 80048fe:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8004900:	f04f 0000 	mov.w	r0, #0
 8004904:	f04f 0100 	mov.w	r1, #0
 8004908:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800490c:	4623      	mov	r3, r4
 800490e:	0a18      	lsrs	r0, r3, #8
 8004910:	462b      	mov	r3, r5
 8004912:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004916:	462b      	mov	r3, r5
 8004918:	1219      	asrs	r1, r3, #8
 800491a:	4b19      	ldr	r3, [pc, #100]	@ (8004980 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 800491c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004920:	b21b      	sxth	r3, r3
 8004922:	17da      	asrs	r2, r3, #31
 8004924:	653b      	str	r3, [r7, #80]	@ 0x50
 8004926:	657a      	str	r2, [r7, #84]	@ 0x54
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004934:	464c      	mov	r4, r9
 8004936:	0123      	lsls	r3, r4, #4
 8004938:	4644      	mov	r4, r8
 800493a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800493e:	4644      	mov	r4, r8
 8004940:	0122      	lsls	r2, r4, #4
 8004942:	1884      	adds	r4, r0, r2
 8004944:	603c      	str	r4, [r7, #0]
 8004946:	eb41 0303 	adc.w	r3, r1, r3
 800494a:	607b      	str	r3, [r7, #4]
 800494c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004950:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  *pressure = (int32_t)p/256;
 8004954:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004958:	2b00      	cmp	r3, #0
 800495a:	da00      	bge.n	800495e <BMP280_ReadTemperatureAndPressure+0x5ae>
 800495c:	33ff      	adds	r3, #255	@ 0xff
 800495e:	121b      	asrs	r3, r3, #8
 8004960:	461a      	mov	r2, r3
 8004962:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004966:	601a      	str	r2, [r3, #0]

	  return 0;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004970:	46bd      	mov	sp, r7
 8004972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004976:	bf00      	nop
 8004978:	20000212 	.word	0x20000212
 800497c:	20000210 	.word	0x20000210
 8004980:	2000020e 	.word	0x2000020e

08004984 <lcd_send_cmd>:

//#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup
#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af02      	add	r7, sp, #8
 800498a:	4603      	mov	r3, r0
 800498c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	f023 030f 	bic.w	r3, r3, #15
 8004994:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	f043 030c 	orr.w	r3, r3, #12
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	f043 0308 	orr.w	r3, r3, #8
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80049b0:	7bbb      	ldrb	r3, [r7, #14]
 80049b2:	f043 030c 	orr.w	r3, r3, #12
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80049ba:	7bbb      	ldrb	r3, [r7, #14]
 80049bc:	f043 0308 	orr.w	r3, r3, #8
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80049c4:	f107 0208 	add.w	r2, r7, #8
 80049c8:	2364      	movs	r3, #100	@ 0x64
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	2304      	movs	r3, #4
 80049ce:	214e      	movs	r1, #78	@ 0x4e
 80049d0:	4803      	ldr	r0, [pc, #12]	@ (80049e0 <lcd_send_cmd+0x5c>)
 80049d2:	f7fc fe9b 	bl	800170c <HAL_I2C_Master_Transmit>
}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20000270 	.word	0x20000270

080049e4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	4603      	mov	r3, r0
 80049ec:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	f023 030f 	bic.w	r3, r3, #15
 80049f4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	f043 030d 	orr.w	r3, r3, #13
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	f043 0309 	orr.w	r3, r3, #9
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004a10:	7bbb      	ldrb	r3, [r7, #14]
 8004a12:	f043 030d 	orr.w	r3, r3, #13
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004a1a:	7bbb      	ldrb	r3, [r7, #14]
 8004a1c:	f043 0309 	orr.w	r3, r3, #9
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004a24:	f107 0208 	add.w	r2, r7, #8
 8004a28:	2364      	movs	r3, #100	@ 0x64
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	214e      	movs	r1, #78	@ 0x4e
 8004a30:	4803      	ldr	r0, [pc, #12]	@ (8004a40 <lcd_send_data+0x5c>)
 8004a32:	f7fc fe6b 	bl	800170c <HAL_I2C_Master_Transmit>
}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000270 	.word	0x20000270

08004a44 <lcd_clear>:

void lcd_clear (void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8004a4a:	2080      	movs	r0, #128	@ 0x80
 8004a4c:	f7ff ff9a 	bl	8004984 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8004a50:	2300      	movs	r3, #0
 8004a52:	607b      	str	r3, [r7, #4]
 8004a54:	e005      	b.n	8004a62 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8004a56:	2020      	movs	r0, #32
 8004a58:	f7ff ffc4 	bl	80049e4 <lcd_send_data>
	for (int i=0; i<70; i++)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	607b      	str	r3, [r7, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b45      	cmp	r3, #69	@ 0x45
 8004a66:	ddf6      	ble.n	8004a56 <lcd_clear+0x12>
	}
	lcd_put_cur(0, 0); //Dopisane ustawienie kursora na 0,0
 8004a68:	2100      	movs	r1, #0
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f000 f804 	bl	8004a78 <lcd_put_cur>
}
 8004a70:	bf00      	nop
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
    switch (row)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <lcd_put_cur+0x18>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d005      	beq.n	8004a9a <lcd_put_cur+0x22>
 8004a8e:	e009      	b.n	8004aa4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a96:	603b      	str	r3, [r7, #0]
            break;
 8004a98:	e004      	b.n	8004aa4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004aa0:	603b      	str	r3, [r7, #0]
            break;
 8004aa2:	bf00      	nop
    }

    lcd_send_cmd (col);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff ff6b 	bl	8004984 <lcd_send_cmd>
}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <lcd_init>:


void lcd_init (void)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8004aba:	2032      	movs	r0, #50	@ 0x32
 8004abc:	f7fc faba 	bl	8001034 <HAL_Delay>
	lcd_send_cmd (0x30);
 8004ac0:	2030      	movs	r0, #48	@ 0x30
 8004ac2:	f7ff ff5f 	bl	8004984 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8004ac6:	2005      	movs	r0, #5
 8004ac8:	f7fc fab4 	bl	8001034 <HAL_Delay>
	lcd_send_cmd (0x30);
 8004acc:	2030      	movs	r0, #48	@ 0x30
 8004ace:	f7ff ff59 	bl	8004984 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8004ad2:	2001      	movs	r0, #1
 8004ad4:	f7fc faae 	bl	8001034 <HAL_Delay>
	lcd_send_cmd (0x30);
 8004ad8:	2030      	movs	r0, #48	@ 0x30
 8004ada:	f7ff ff53 	bl	8004984 <lcd_send_cmd>
	HAL_Delay(10);
 8004ade:	200a      	movs	r0, #10
 8004ae0:	f7fc faa8 	bl	8001034 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8004ae4:	2020      	movs	r0, #32
 8004ae6:	f7ff ff4d 	bl	8004984 <lcd_send_cmd>
	HAL_Delay(10);
 8004aea:	200a      	movs	r0, #10
 8004aec:	f7fc faa2 	bl	8001034 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8004af0:	2028      	movs	r0, #40	@ 0x28
 8004af2:	f7ff ff47 	bl	8004984 <lcd_send_cmd>
	HAL_Delay(1);
 8004af6:	2001      	movs	r0, #1
 8004af8:	f7fc fa9c 	bl	8001034 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8004afc:	2008      	movs	r0, #8
 8004afe:	f7ff ff41 	bl	8004984 <lcd_send_cmd>
	HAL_Delay(1);
 8004b02:	2001      	movs	r0, #1
 8004b04:	f7fc fa96 	bl	8001034 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8004b08:	2001      	movs	r0, #1
 8004b0a:	f7ff ff3b 	bl	8004984 <lcd_send_cmd>
	HAL_Delay(1);
 8004b0e:	2001      	movs	r0, #1
 8004b10:	f7fc fa90 	bl	8001034 <HAL_Delay>
	HAL_Delay(1);
 8004b14:	2001      	movs	r0, #1
 8004b16:	f7fc fa8d 	bl	8001034 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8004b1a:	2006      	movs	r0, #6
 8004b1c:	f7ff ff32 	bl	8004984 <lcd_send_cmd>
	HAL_Delay(1);
 8004b20:	2001      	movs	r0, #1
 8004b22:	f7fc fa87 	bl	8001034 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8004b26:	200c      	movs	r0, #12
 8004b28:	f7ff ff2c 	bl	8004984 <lcd_send_cmd>
}
 8004b2c:	bf00      	nop
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	while (*str)
 8004b38:	e006      	b.n	8004b48 <lcd_send_string+0x18>
	{
		lcd_send_data (*str++);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff ff4e 	bl	80049e4 <lcd_send_data>
	while (*str)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f4      	bne.n	8004b3a <lcd_send_string+0xa>
	}
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b62:	f7fc fa09 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b66:	f000 f8a1 	bl	8004cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b6a:	f000 f9b7 	bl	8004edc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8004b6e:	f000 f985 	bl	8004e7c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8004b72:	f000 f903 	bl	8004d7c <MX_I2C1_Init>
  MX_I2C4_Init();
 8004b76:	f000 f941 	bl	8004dfc <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	2101      	movs	r1, #1
 8004b80:	483e      	ldr	r0, [pc, #248]	@ (8004c7c <main+0x120>)
 8004b82:	f7ff facb 	bl	800411c <BMP280_Init>
  lcd_init ();
 8004b86:	f7ff ff96 	bl	8004ab6 <lcd_init>
  lcd_send_string ("Czujnik BMP280");
 8004b8a:	483d      	ldr	r0, [pc, #244]	@ (8004c80 <main+0x124>)
 8004b8c:	f7ff ffd0 	bl	8004b30 <lcd_send_string>
  HAL_Delay(100);
 8004b90:	2064      	movs	r0, #100	@ 0x64
 8004b92:	f7fc fa4f 	bl	8001034 <HAL_Delay>
  lcd_put_cur(1, 0);
 8004b96:	2100      	movs	r1, #0
 8004b98:	2001      	movs	r0, #1
 8004b9a:	f7ff ff6d 	bl	8004a78 <lcd_put_cur>
  lcd_send_string("I2C1-BMP,I2C4-LCD");
 8004b9e:	4839      	ldr	r0, [pc, #228]	@ (8004c84 <main+0x128>)
 8004ba0:	f7ff ffc6 	bl	8004b30 <lcd_send_string>
  HAL_Delay(2000);
 8004ba4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004ba8:	f7fc fa44 	bl	8001034 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8004bac:	4936      	ldr	r1, [pc, #216]	@ (8004c88 <main+0x12c>)
 8004bae:	4837      	ldr	r0, [pc, #220]	@ (8004c8c <main+0x130>)
 8004bb0:	f7ff fbfe 	bl	80043b0 <BMP280_ReadTemperatureAndPressure>
	  sprintf((char*)text, "%.2f, ", temperature);
 8004bb4:	4b35      	ldr	r3, [pc, #212]	@ (8004c8c <main+0x130>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fb fce5 	bl	8000588 <__aeabi_f2d>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4638      	mov	r0, r7
 8004bc4:	4932      	ldr	r1, [pc, #200]	@ (8004c90 <main+0x134>)
 8004bc6:	f001 fa1d 	bl	8006004 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 1000);
 8004bca:	463b      	mov	r3, r7
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fb fb6f 	bl	80002b0 <strlen>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	4639      	mov	r1, r7
 8004bd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bdc:	482d      	ldr	r0, [pc, #180]	@ (8004c94 <main+0x138>)
 8004bde:	f7fe fd4d 	bl	800367c <HAL_UART_Transmit>

	  lcd_clear ();
 8004be2:	f7ff ff2f 	bl	8004a44 <lcd_clear>
	  lcd_put_cur(0, 0);
 8004be6:	2100      	movs	r1, #0
 8004be8:	2000      	movs	r0, #0
 8004bea:	f7ff ff45 	bl	8004a78 <lcd_put_cur>
	  sprintf((char*)text, "Temp.  %.2f  C", temperature);
 8004bee:	4b27      	ldr	r3, [pc, #156]	@ (8004c8c <main+0x130>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fb fcc8 	bl	8000588 <__aeabi_f2d>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4638      	mov	r0, r7
 8004bfe:	4926      	ldr	r1, [pc, #152]	@ (8004c98 <main+0x13c>)
 8004c00:	f001 fa00 	bl	8006004 <siprintf>
	  lcd_send_string(text);
 8004c04:	463b      	mov	r3, r7
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff ff92 	bl	8004b30 <lcd_send_string>
	  lcd_put_cur(1, 0);
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	2001      	movs	r0, #1
 8004c10:	f7ff ff32 	bl	8004a78 <lcd_put_cur>

	  // tutaj dodaj odczyt z enkodera - temp_zadana

	  sprintf((char*)text, "T_zad. %.2f  C", temp_zadana);
 8004c14:	4b21      	ldr	r3, [pc, #132]	@ (8004c9c <main+0x140>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fb fcb5 	bl	8000588 <__aeabi_f2d>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4638      	mov	r0, r7
 8004c24:	491e      	ldr	r1, [pc, #120]	@ (8004ca0 <main+0x144>)
 8004c26:	f001 f9ed 	bl	8006004 <siprintf>
	  lcd_send_string(text);
 8004c2a:	463b      	mov	r3, r7
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff ff7f 	bl	8004b30 <lcd_send_string>

	  if (temperature<temp_zadana)
 8004c32:	4b16      	ldr	r3, [pc, #88]	@ (8004c8c <main+0x130>)
 8004c34:	ed93 7a00 	vldr	s14, [r3]
 8004c38:	4b18      	ldr	r3, [pc, #96]	@ (8004c9c <main+0x140>)
 8004c3a:	edd3 7a00 	vldr	s15, [r3]
 8004c3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c46:	d50a      	bpl.n	8004c5e <main+0x102>
	  {
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8004c48:	2201      	movs	r2, #1
 8004c4a:	2180      	movs	r1, #128	@ 0x80
 8004c4c:	4815      	ldr	r0, [pc, #84]	@ (8004ca4 <main+0x148>)
 8004c4e:	f7fc fca7 	bl	80015a0 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8004c52:	2201      	movs	r2, #1
 8004c54:	2101      	movs	r1, #1
 8004c56:	4814      	ldr	r0, [pc, #80]	@ (8004ca8 <main+0x14c>)
 8004c58:	f7fc fca2 	bl	80015a0 <HAL_GPIO_WritePin>
 8004c5c:	e009      	b.n	8004c72 <main+0x116>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2180      	movs	r1, #128	@ 0x80
 8004c62:	4810      	ldr	r0, [pc, #64]	@ (8004ca4 <main+0x148>)
 8004c64:	f7fc fc9c 	bl	80015a0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	480e      	ldr	r0, [pc, #56]	@ (8004ca8 <main+0x14c>)
 8004c6e:	f7fc fc97 	bl	80015a0 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(1000);
 8004c72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c76:	f7fc f9dd 	bl	8001034 <HAL_Delay>
	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8004c7a:	e797      	b.n	8004bac <main+0x50>
 8004c7c:	2000021c 	.word	0x2000021c
 8004c80:	08008278 	.word	0x08008278
 8004c84:	08008288 	.word	0x08008288
 8004c88:	20000350 	.word	0x20000350
 8004c8c:	2000034c 	.word	0x2000034c
 8004c90:	0800829c 	.word	0x0800829c
 8004c94:	200002c4 	.word	0x200002c4
 8004c98:	080082a4 	.word	0x080082a4
 8004c9c:	20000008 	.word	0x20000008
 8004ca0:	080082b4 	.word	0x080082b4
 8004ca4:	40020c00 	.word	0x40020c00
 8004ca8:	40020400 	.word	0x40020400

08004cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b094      	sub	sp, #80	@ 0x50
 8004cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cb2:	f107 0320 	add.w	r3, r7, #32
 8004cb6:	2230      	movs	r2, #48	@ 0x30
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f001 fa05 	bl	80060ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cc0:	f107 030c 	add.w	r3, r7, #12
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	605a      	str	r2, [r3, #4]
 8004cca:	609a      	str	r2, [r3, #8]
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004cd0:	f7fd fbbc 	bl	800244c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cd4:	4b27      	ldr	r3, [pc, #156]	@ (8004d74 <SystemClock_Config+0xc8>)
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd8:	4a26      	ldr	r2, [pc, #152]	@ (8004d74 <SystemClock_Config+0xc8>)
 8004cda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cde:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ce0:	4b24      	ldr	r3, [pc, #144]	@ (8004d74 <SystemClock_Config+0xc8>)
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004cec:	4b22      	ldr	r3, [pc, #136]	@ (8004d78 <SystemClock_Config+0xcc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004cf4:	4a20      	ldr	r2, [pc, #128]	@ (8004d78 <SystemClock_Config+0xcc>)
 8004cf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8004d78 <SystemClock_Config+0xcc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004d0c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d12:	2302      	movs	r3, #2
 8004d14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004d20:	2348      	movs	r3, #72	@ 0x48
 8004d22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d24:	2302      	movs	r3, #2
 8004d26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d2c:	f107 0320 	add.w	r3, r7, #32
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fd fb9b 	bl	800246c <HAL_RCC_OscConfig>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004d3c:	f000 f9e6 	bl	800510c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d40:	230f      	movs	r3, #15
 8004d42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d44:	2302      	movs	r3, #2
 8004d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004d4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004d56:	f107 030c 	add.w	r3, r7, #12
 8004d5a:	2102      	movs	r1, #2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fd fe29 	bl	80029b4 <HAL_RCC_ClockConfig>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004d68:	f000 f9d0 	bl	800510c <Error_Handler>
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	3750      	adds	r7, #80	@ 0x50
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40007000 	.word	0x40007000

08004d7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004d80:	4b1b      	ldr	r3, [pc, #108]	@ (8004df0 <MX_I2C1_Init+0x74>)
 8004d82:	4a1c      	ldr	r2, [pc, #112]	@ (8004df4 <MX_I2C1_Init+0x78>)
 8004d84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8004d86:	4b1a      	ldr	r3, [pc, #104]	@ (8004df0 <MX_I2C1_Init+0x74>)
 8004d88:	4a1b      	ldr	r2, [pc, #108]	@ (8004df8 <MX_I2C1_Init+0x7c>)
 8004d8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004d8c:	4b18      	ldr	r3, [pc, #96]	@ (8004df0 <MX_I2C1_Init+0x74>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d92:	4b17      	ldr	r3, [pc, #92]	@ (8004df0 <MX_I2C1_Init+0x74>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d98:	4b15      	ldr	r3, [pc, #84]	@ (8004df0 <MX_I2C1_Init+0x74>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004d9e:	4b14      	ldr	r3, [pc, #80]	@ (8004df0 <MX_I2C1_Init+0x74>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004da4:	4b12      	ldr	r3, [pc, #72]	@ (8004df0 <MX_I2C1_Init+0x74>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004daa:	4b11      	ldr	r3, [pc, #68]	@ (8004df0 <MX_I2C1_Init+0x74>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004db0:	4b0f      	ldr	r3, [pc, #60]	@ (8004df0 <MX_I2C1_Init+0x74>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004db6:	480e      	ldr	r0, [pc, #56]	@ (8004df0 <MX_I2C1_Init+0x74>)
 8004db8:	f7fc fc0c 	bl	80015d4 <HAL_I2C_Init>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004dc2:	f000 f9a3 	bl	800510c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	4809      	ldr	r0, [pc, #36]	@ (8004df0 <MX_I2C1_Init+0x74>)
 8004dca:	f7fd faa7 	bl	800231c <HAL_I2CEx_ConfigAnalogFilter>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004dd4:	f000 f99a 	bl	800510c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4805      	ldr	r0, [pc, #20]	@ (8004df0 <MX_I2C1_Init+0x74>)
 8004ddc:	f7fd fae9 	bl	80023b2 <HAL_I2CEx_ConfigDigitalFilter>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004de6:	f000 f991 	bl	800510c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004dea:	bf00      	nop
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	2000021c 	.word	0x2000021c
 8004df4:	40005400 	.word	0x40005400
 8004df8:	00808cd2 	.word	0x00808cd2

08004dfc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8004e00:	4b1b      	ldr	r3, [pc, #108]	@ (8004e70 <MX_I2C4_Init+0x74>)
 8004e02:	4a1c      	ldr	r2, [pc, #112]	@ (8004e74 <MX_I2C4_Init+0x78>)
 8004e04:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 8004e06:	4b1a      	ldr	r3, [pc, #104]	@ (8004e70 <MX_I2C4_Init+0x74>)
 8004e08:	4a1b      	ldr	r2, [pc, #108]	@ (8004e78 <MX_I2C4_Init+0x7c>)
 8004e0a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8004e0c:	4b18      	ldr	r3, [pc, #96]	@ (8004e70 <MX_I2C4_Init+0x74>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e12:	4b17      	ldr	r3, [pc, #92]	@ (8004e70 <MX_I2C4_Init+0x74>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e18:	4b15      	ldr	r3, [pc, #84]	@ (8004e70 <MX_I2C4_Init+0x74>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8004e1e:	4b14      	ldr	r3, [pc, #80]	@ (8004e70 <MX_I2C4_Init+0x74>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004e24:	4b12      	ldr	r3, [pc, #72]	@ (8004e70 <MX_I2C4_Init+0x74>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e2a:	4b11      	ldr	r3, [pc, #68]	@ (8004e70 <MX_I2C4_Init+0x74>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e30:	4b0f      	ldr	r3, [pc, #60]	@ (8004e70 <MX_I2C4_Init+0x74>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8004e36:	480e      	ldr	r0, [pc, #56]	@ (8004e70 <MX_I2C4_Init+0x74>)
 8004e38:	f7fc fbcc 	bl	80015d4 <HAL_I2C_Init>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8004e42:	f000 f963 	bl	800510c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004e46:	2100      	movs	r1, #0
 8004e48:	4809      	ldr	r0, [pc, #36]	@ (8004e70 <MX_I2C4_Init+0x74>)
 8004e4a:	f7fd fa67 	bl	800231c <HAL_I2CEx_ConfigAnalogFilter>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8004e54:	f000 f95a 	bl	800510c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4805      	ldr	r0, [pc, #20]	@ (8004e70 <MX_I2C4_Init+0x74>)
 8004e5c:	f7fd faa9 	bl	80023b2 <HAL_I2CEx_ConfigDigitalFilter>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8004e66:	f000 f951 	bl	800510c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000270 	.word	0x20000270
 8004e74:	40006000 	.word	0x40006000
 8004e78:	00808cd2 	.word	0x00808cd2

08004e7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004e80:	4b14      	ldr	r3, [pc, #80]	@ (8004ed4 <MX_USART3_UART_Init+0x58>)
 8004e82:	4a15      	ldr	r2, [pc, #84]	@ (8004ed8 <MX_USART3_UART_Init+0x5c>)
 8004e84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004e86:	4b13      	ldr	r3, [pc, #76]	@ (8004ed4 <MX_USART3_UART_Init+0x58>)
 8004e88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004e8e:	4b11      	ldr	r3, [pc, #68]	@ (8004ed4 <MX_USART3_UART_Init+0x58>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004e94:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed4 <MX_USART3_UART_Init+0x58>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed4 <MX_USART3_UART_Init+0x58>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed4 <MX_USART3_UART_Init+0x58>)
 8004ea2:	220c      	movs	r2, #12
 8004ea4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <MX_USART3_UART_Init+0x58>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004eac:	4b09      	ldr	r3, [pc, #36]	@ (8004ed4 <MX_USART3_UART_Init+0x58>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004eb2:	4b08      	ldr	r3, [pc, #32]	@ (8004ed4 <MX_USART3_UART_Init+0x58>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004eb8:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <MX_USART3_UART_Init+0x58>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004ebe:	4805      	ldr	r0, [pc, #20]	@ (8004ed4 <MX_USART3_UART_Init+0x58>)
 8004ec0:	f7fe fb8e 	bl	80035e0 <HAL_UART_Init>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004eca:	f000 f91f 	bl	800510c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004ece:	bf00      	nop
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	200002c4 	.word	0x200002c4
 8004ed8:	40004800 	.word	0x40004800

08004edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08c      	sub	sp, #48	@ 0x30
 8004ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee2:	f107 031c 	add.w	r3, r7, #28
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	605a      	str	r2, [r3, #4]
 8004eec:	609a      	str	r2, [r3, #8]
 8004eee:	60da      	str	r2, [r3, #12]
 8004ef0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ef2:	4b80      	ldr	r3, [pc, #512]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef6:	4a7f      	ldr	r2, [pc, #508]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004ef8:	f043 0304 	orr.w	r3, r3, #4
 8004efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004efe:	4b7d      	ldr	r3, [pc, #500]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0e:	4a79      	ldr	r2, [pc, #484]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f16:	4b77      	ldr	r3, [pc, #476]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f22:	4b74      	ldr	r3, [pc, #464]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f26:	4a73      	ldr	r2, [pc, #460]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f2e:	4b71      	ldr	r3, [pc, #452]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f3a:	4b6e      	ldr	r3, [pc, #440]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3e:	4a6d      	ldr	r2, [pc, #436]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f40:	f043 0302 	orr.w	r3, r3, #2
 8004f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f46:	4b6b      	ldr	r3, [pc, #428]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f52:	4b68      	ldr	r3, [pc, #416]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f56:	4a67      	ldr	r2, [pc, #412]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f58:	f043 0308 	orr.w	r3, r3, #8
 8004f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f5e:	4b65      	ldr	r3, [pc, #404]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	60bb      	str	r3, [r7, #8]
 8004f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f6a:	4b62      	ldr	r3, [pc, #392]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6e:	4a61      	ldr	r2, [pc, #388]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f76:	4b5f      	ldr	r3, [pc, #380]	@ (80050f4 <MX_GPIO_Init+0x218>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7e:	607b      	str	r3, [r7, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004f82:	2200      	movs	r2, #0
 8004f84:	f244 0181 	movw	r1, #16513	@ 0x4081
 8004f88:	485b      	ldr	r0, [pc, #364]	@ (80050f8 <MX_GPIO_Init+0x21c>)
 8004f8a:	f7fc fb09 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2140      	movs	r1, #64	@ 0x40
 8004f92:	485a      	ldr	r0, [pc, #360]	@ (80050fc <MX_GPIO_Init+0x220>)
 8004f94:	f7fc fb04 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2180      	movs	r1, #128	@ 0x80
 8004f9c:	4858      	ldr	r0, [pc, #352]	@ (8005100 <MX_GPIO_Init+0x224>)
 8004f9e:	f7fc faff 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004fa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fa8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004fb2:	f107 031c 	add.w	r3, r7, #28
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4852      	ldr	r0, [pc, #328]	@ (8005104 <MX_GPIO_Init+0x228>)
 8004fba:	f7fc f945 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004fbe:	2332      	movs	r3, #50	@ 0x32
 8004fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fce:	230b      	movs	r3, #11
 8004fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fd2:	f107 031c 	add.w	r3, r7, #28
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	484a      	ldr	r0, [pc, #296]	@ (8005104 <MX_GPIO_Init+0x228>)
 8004fda:	f7fc f935 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004fde:	2386      	movs	r3, #134	@ 0x86
 8004fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fea:	2303      	movs	r3, #3
 8004fec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fee:	230b      	movs	r3, #11
 8004ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ff2:	f107 031c 	add.w	r3, r7, #28
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4843      	ldr	r0, [pc, #268]	@ (8005108 <MX_GPIO_Init+0x22c>)
 8004ffa:	f7fc f925 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8004ffe:	f244 0381 	movw	r3, #16513	@ 0x4081
 8005002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005004:	2301      	movs	r3, #1
 8005006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005008:	2300      	movs	r3, #0
 800500a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800500c:	2300      	movs	r3, #0
 800500e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005010:	f107 031c 	add.w	r3, r7, #28
 8005014:	4619      	mov	r1, r3
 8005016:	4838      	ldr	r0, [pc, #224]	@ (80050f8 <MX_GPIO_Init+0x21c>)
 8005018:	f7fc f916 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800501c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005022:	2302      	movs	r3, #2
 8005024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005026:	2300      	movs	r3, #0
 8005028:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800502a:	2303      	movs	r3, #3
 800502c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800502e:	230b      	movs	r3, #11
 8005030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005032:	f107 031c 	add.w	r3, r7, #28
 8005036:	4619      	mov	r1, r3
 8005038:	482f      	ldr	r0, [pc, #188]	@ (80050f8 <MX_GPIO_Init+0x21c>)
 800503a:	f7fc f905 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800503e:	2340      	movs	r3, #64	@ 0x40
 8005040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005042:	2301      	movs	r3, #1
 8005044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005046:	2300      	movs	r3, #0
 8005048:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800504a:	2300      	movs	r3, #0
 800504c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800504e:	f107 031c 	add.w	r3, r7, #28
 8005052:	4619      	mov	r1, r3
 8005054:	4829      	ldr	r0, [pc, #164]	@ (80050fc <MX_GPIO_Init+0x220>)
 8005056:	f7fc f8f7 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800505a:	2380      	movs	r3, #128	@ 0x80
 800505c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800505e:	2300      	movs	r3, #0
 8005060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005062:	2300      	movs	r3, #0
 8005064:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005066:	f107 031c 	add.w	r3, r7, #28
 800506a:	4619      	mov	r1, r3
 800506c:	4823      	ldr	r0, [pc, #140]	@ (80050fc <MX_GPIO_Init+0x220>)
 800506e:	f7fc f8eb 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005072:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8005076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005078:	2302      	movs	r3, #2
 800507a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507c:	2300      	movs	r3, #0
 800507e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005080:	2303      	movs	r3, #3
 8005082:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005084:	230a      	movs	r3, #10
 8005086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005088:	f107 031c 	add.w	r3, r7, #28
 800508c:	4619      	mov	r1, r3
 800508e:	481e      	ldr	r0, [pc, #120]	@ (8005108 <MX_GPIO_Init+0x22c>)
 8005090:	f7fc f8da 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005094:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800509a:	2300      	movs	r3, #0
 800509c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80050a2:	f107 031c 	add.w	r3, r7, #28
 80050a6:	4619      	mov	r1, r3
 80050a8:	4817      	ldr	r0, [pc, #92]	@ (8005108 <MX_GPIO_Init+0x22c>)
 80050aa:	f7fc f8cd 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80050ae:	2380      	movs	r3, #128	@ 0x80
 80050b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050b2:	2301      	movs	r3, #1
 80050b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ba:	2300      	movs	r3, #0
 80050bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050be:	f107 031c 	add.w	r3, r7, #28
 80050c2:	4619      	mov	r1, r3
 80050c4:	480e      	ldr	r0, [pc, #56]	@ (8005100 <MX_GPIO_Init+0x224>)
 80050c6:	f7fc f8bf 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80050ca:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80050ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d0:	2302      	movs	r3, #2
 80050d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d8:	2303      	movs	r3, #3
 80050da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80050dc:	230b      	movs	r3, #11
 80050de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80050e0:	f107 031c 	add.w	r3, r7, #28
 80050e4:	4619      	mov	r1, r3
 80050e6:	4805      	ldr	r0, [pc, #20]	@ (80050fc <MX_GPIO_Init+0x220>)
 80050e8:	f7fc f8ae 	bl	8001248 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80050ec:	bf00      	nop
 80050ee:	3730      	adds	r7, #48	@ 0x30
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40023800 	.word	0x40023800
 80050f8:	40020400 	.word	0x40020400
 80050fc:	40021800 	.word	0x40021800
 8005100:	40020c00 	.word	0x40020c00
 8005104:	40020800 	.word	0x40020800
 8005108:	40020000 	.word	0x40020000

0800510c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005110:	b672      	cpsid	i
}
 8005112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005114:	bf00      	nop
 8005116:	e7fd      	b.n	8005114 <Error_Handler+0x8>

08005118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800511e:	4b0f      	ldr	r3, [pc, #60]	@ (800515c <HAL_MspInit+0x44>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005122:	4a0e      	ldr	r2, [pc, #56]	@ (800515c <HAL_MspInit+0x44>)
 8005124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005128:	6413      	str	r3, [r2, #64]	@ 0x40
 800512a:	4b0c      	ldr	r3, [pc, #48]	@ (800515c <HAL_MspInit+0x44>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005132:	607b      	str	r3, [r7, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005136:	4b09      	ldr	r3, [pc, #36]	@ (800515c <HAL_MspInit+0x44>)
 8005138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513a:	4a08      	ldr	r2, [pc, #32]	@ (800515c <HAL_MspInit+0x44>)
 800513c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005140:	6453      	str	r3, [r2, #68]	@ 0x44
 8005142:	4b06      	ldr	r3, [pc, #24]	@ (800515c <HAL_MspInit+0x44>)
 8005144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40023800 	.word	0x40023800

08005160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b0ac      	sub	sp, #176	@ 0xb0
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005168:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	605a      	str	r2, [r3, #4]
 8005172:	609a      	str	r2, [r3, #8]
 8005174:	60da      	str	r2, [r3, #12]
 8005176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005178:	f107 0318 	add.w	r3, r7, #24
 800517c:	2284      	movs	r2, #132	@ 0x84
 800517e:	2100      	movs	r1, #0
 8005180:	4618      	mov	r0, r3
 8005182:	f000 ffa2 	bl	80060ca <memset>
  if(hi2c->Instance==I2C1)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a44      	ldr	r2, [pc, #272]	@ (800529c <HAL_I2C_MspInit+0x13c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d13d      	bne.n	800520c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005190:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005194:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005196:	2300      	movs	r3, #0
 8005198:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800519a:	f107 0318 	add.w	r3, r7, #24
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fd fe2e 	bl	8002e00 <HAL_RCCEx_PeriphCLKConfig>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80051aa:	f7ff ffaf 	bl	800510c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ae:	4b3c      	ldr	r3, [pc, #240]	@ (80052a0 <HAL_I2C_MspInit+0x140>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b2:	4a3b      	ldr	r2, [pc, #236]	@ (80052a0 <HAL_I2C_MspInit+0x140>)
 80051b4:	f043 0302 	orr.w	r3, r3, #2
 80051b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80051ba:	4b39      	ldr	r3, [pc, #228]	@ (80052a0 <HAL_I2C_MspInit+0x140>)
 80051bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80051c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80051ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051ce:	2312      	movs	r3, #18
 80051d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051da:	2303      	movs	r3, #3
 80051dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051e0:	2304      	movs	r3, #4
 80051e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80051ea:	4619      	mov	r1, r3
 80051ec:	482d      	ldr	r0, [pc, #180]	@ (80052a4 <HAL_I2C_MspInit+0x144>)
 80051ee:	f7fc f82b 	bl	8001248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80051f2:	4b2b      	ldr	r3, [pc, #172]	@ (80052a0 <HAL_I2C_MspInit+0x140>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	4a2a      	ldr	r2, [pc, #168]	@ (80052a0 <HAL_I2C_MspInit+0x140>)
 80051f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80051fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80051fe:	4b28      	ldr	r3, [pc, #160]	@ (80052a0 <HAL_I2C_MspInit+0x140>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800520a:	e042      	b.n	8005292 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C4)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a25      	ldr	r2, [pc, #148]	@ (80052a8 <HAL_I2C_MspInit+0x148>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d13d      	bne.n	8005292 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8005216:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800521a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800521c:	2300      	movs	r3, #0
 800521e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005222:	f107 0318 	add.w	r3, r7, #24
 8005226:	4618      	mov	r0, r3
 8005228:	f7fd fdea 	bl	8002e00 <HAL_RCCEx_PeriphCLKConfig>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8005232:	f7ff ff6b 	bl	800510c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005236:	4b1a      	ldr	r3, [pc, #104]	@ (80052a0 <HAL_I2C_MspInit+0x140>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523a:	4a19      	ldr	r2, [pc, #100]	@ (80052a0 <HAL_I2C_MspInit+0x140>)
 800523c:	f043 0308 	orr.w	r3, r3, #8
 8005240:	6313      	str	r3, [r2, #48]	@ 0x30
 8005242:	4b17      	ldr	r3, [pc, #92]	@ (80052a0 <HAL_I2C_MspInit+0x140>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800524e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005252:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005256:	2312      	movs	r3, #18
 8005258:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525c:	2300      	movs	r3, #0
 800525e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005262:	2303      	movs	r3, #3
 8005264:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8005268:	2304      	movs	r3, #4
 800526a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800526e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005272:	4619      	mov	r1, r3
 8005274:	480d      	ldr	r0, [pc, #52]	@ (80052ac <HAL_I2C_MspInit+0x14c>)
 8005276:	f7fb ffe7 	bl	8001248 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800527a:	4b09      	ldr	r3, [pc, #36]	@ (80052a0 <HAL_I2C_MspInit+0x140>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527e:	4a08      	ldr	r2, [pc, #32]	@ (80052a0 <HAL_I2C_MspInit+0x140>)
 8005280:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005284:	6413      	str	r3, [r2, #64]	@ 0x40
 8005286:	4b06      	ldr	r3, [pc, #24]	@ (80052a0 <HAL_I2C_MspInit+0x140>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800528e:	60bb      	str	r3, [r7, #8]
 8005290:	68bb      	ldr	r3, [r7, #8]
}
 8005292:	bf00      	nop
 8005294:	37b0      	adds	r7, #176	@ 0xb0
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40005400 	.word	0x40005400
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40020400 	.word	0x40020400
 80052a8:	40006000 	.word	0x40006000
 80052ac:	40020c00 	.word	0x40020c00

080052b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b0aa      	sub	sp, #168	@ 0xa8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	605a      	str	r2, [r3, #4]
 80052c2:	609a      	str	r2, [r3, #8]
 80052c4:	60da      	str	r2, [r3, #12]
 80052c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052c8:	f107 0310 	add.w	r3, r7, #16
 80052cc:	2284      	movs	r2, #132	@ 0x84
 80052ce:	2100      	movs	r1, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fefa 	bl	80060ca <memset>
  if(huart->Instance==USART3)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a22      	ldr	r2, [pc, #136]	@ (8005364 <HAL_UART_MspInit+0xb4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d13c      	bne.n	800535a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80052e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80052e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80052e6:	2300      	movs	r3, #0
 80052e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052ea:	f107 0310 	add.w	r3, r7, #16
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fd fd86 	bl	8002e00 <HAL_RCCEx_PeriphCLKConfig>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80052fa:	f7ff ff07 	bl	800510c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80052fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005368 <HAL_UART_MspInit+0xb8>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	4a19      	ldr	r2, [pc, #100]	@ (8005368 <HAL_UART_MspInit+0xb8>)
 8005304:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005308:	6413      	str	r3, [r2, #64]	@ 0x40
 800530a:	4b17      	ldr	r3, [pc, #92]	@ (8005368 <HAL_UART_MspInit+0xb8>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005316:	4b14      	ldr	r3, [pc, #80]	@ (8005368 <HAL_UART_MspInit+0xb8>)
 8005318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531a:	4a13      	ldr	r2, [pc, #76]	@ (8005368 <HAL_UART_MspInit+0xb8>)
 800531c:	f043 0308 	orr.w	r3, r3, #8
 8005320:	6313      	str	r3, [r2, #48]	@ 0x30
 8005322:	4b11      	ldr	r3, [pc, #68]	@ (8005368 <HAL_UART_MspInit+0xb8>)
 8005324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	60bb      	str	r3, [r7, #8]
 800532c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800532e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005332:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005336:	2302      	movs	r3, #2
 8005338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533c:	2300      	movs	r3, #0
 800533e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005342:	2303      	movs	r3, #3
 8005344:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005348:	2307      	movs	r3, #7
 800534a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800534e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005352:	4619      	mov	r1, r3
 8005354:	4805      	ldr	r0, [pc, #20]	@ (800536c <HAL_UART_MspInit+0xbc>)
 8005356:	f7fb ff77 	bl	8001248 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800535a:	bf00      	nop
 800535c:	37a8      	adds	r7, #168	@ 0xa8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40004800 	.word	0x40004800
 8005368:	40023800 	.word	0x40023800
 800536c:	40020c00 	.word	0x40020c00

08005370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005374:	bf00      	nop
 8005376:	e7fd      	b.n	8005374 <NMI_Handler+0x4>

08005378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800537c:	bf00      	nop
 800537e:	e7fd      	b.n	800537c <HardFault_Handler+0x4>

08005380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005384:	bf00      	nop
 8005386:	e7fd      	b.n	8005384 <MemManage_Handler+0x4>

08005388 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800538c:	bf00      	nop
 800538e:	e7fd      	b.n	800538c <BusFault_Handler+0x4>

08005390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005394:	bf00      	nop
 8005396:	e7fd      	b.n	8005394 <UsageFault_Handler+0x4>

08005398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800539c:	bf00      	nop
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053a6:	b480      	push	{r7}
 80053a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053aa:	bf00      	nop
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053b8:	bf00      	nop
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053c6:	f7fb fe15 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053ca:	bf00      	nop
 80053cc:	bd80      	pop	{r7, pc}

080053ce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80053ce:	b480      	push	{r7}
 80053d0:	af00      	add	r7, sp, #0
  return 1;
 80053d2:	2301      	movs	r3, #1
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <_kill>:

int _kill(int pid, int sig)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b082      	sub	sp, #8
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80053e8:	f000 fec2 	bl	8006170 <__errno>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2216      	movs	r2, #22
 80053f0:	601a      	str	r2, [r3, #0]
  return -1;
 80053f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <_exit>:

void _exit (int status)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005406:	f04f 31ff 	mov.w	r1, #4294967295
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff ffe7 	bl	80053de <_kill>
  while (1) {}    /* Make sure we hang here */
 8005410:	bf00      	nop
 8005412:	e7fd      	b.n	8005410 <_exit+0x12>

08005414 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	e00a      	b.n	800543c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005426:	f3af 8000 	nop.w
 800542a:	4601      	mov	r1, r0
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	60ba      	str	r2, [r7, #8]
 8005432:	b2ca      	uxtb	r2, r1
 8005434:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	3301      	adds	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	429a      	cmp	r2, r3
 8005442:	dbf0      	blt.n	8005426 <_read+0x12>
  }

  return len;
 8005444:	687b      	ldr	r3, [r7, #4]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b086      	sub	sp, #24
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	e009      	b.n	8005474 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	60ba      	str	r2, [r7, #8]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	3301      	adds	r3, #1
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	429a      	cmp	r2, r3
 800547a:	dbf1      	blt.n	8005460 <_write+0x12>
  }
  return len;
 800547c:	687b      	ldr	r3, [r7, #4]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <_close>:

int _close(int file)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800548e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80054ae:	605a      	str	r2, [r3, #4]
  return 0;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <_isatty>:

int _isatty(int file)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80054c6:	2301      	movs	r3, #1
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
	...

080054f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054f8:	4a14      	ldr	r2, [pc, #80]	@ (800554c <_sbrk+0x5c>)
 80054fa:	4b15      	ldr	r3, [pc, #84]	@ (8005550 <_sbrk+0x60>)
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005504:	4b13      	ldr	r3, [pc, #76]	@ (8005554 <_sbrk+0x64>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800550c:	4b11      	ldr	r3, [pc, #68]	@ (8005554 <_sbrk+0x64>)
 800550e:	4a12      	ldr	r2, [pc, #72]	@ (8005558 <_sbrk+0x68>)
 8005510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005512:	4b10      	ldr	r3, [pc, #64]	@ (8005554 <_sbrk+0x64>)
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4413      	add	r3, r2
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	429a      	cmp	r2, r3
 800551e:	d207      	bcs.n	8005530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005520:	f000 fe26 	bl	8006170 <__errno>
 8005524:	4603      	mov	r3, r0
 8005526:	220c      	movs	r2, #12
 8005528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800552a:	f04f 33ff 	mov.w	r3, #4294967295
 800552e:	e009      	b.n	8005544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005530:	4b08      	ldr	r3, [pc, #32]	@ (8005554 <_sbrk+0x64>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005536:	4b07      	ldr	r3, [pc, #28]	@ (8005554 <_sbrk+0x64>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4413      	add	r3, r2
 800553e:	4a05      	ldr	r2, [pc, #20]	@ (8005554 <_sbrk+0x64>)
 8005540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005542:	68fb      	ldr	r3, [r7, #12]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	20050000 	.word	0x20050000
 8005550:	00000400 	.word	0x00000400
 8005554:	20000354 	.word	0x20000354
 8005558:	200004a8 	.word	0x200004a8

0800555c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005560:	4b06      	ldr	r3, [pc, #24]	@ (800557c <SystemInit+0x20>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005566:	4a05      	ldr	r2, [pc, #20]	@ (800557c <SystemInit+0x20>)
 8005568:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800556c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005570:	bf00      	nop
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	e000ed00 	.word	0xe000ed00

08005580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005580:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80055b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005584:	f7ff ffea 	bl	800555c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005588:	480c      	ldr	r0, [pc, #48]	@ (80055bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800558a:	490d      	ldr	r1, [pc, #52]	@ (80055c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800558c:	4a0d      	ldr	r2, [pc, #52]	@ (80055c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800558e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005590:	e002      	b.n	8005598 <LoopCopyDataInit>

08005592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005596:	3304      	adds	r3, #4

08005598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800559a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800559c:	d3f9      	bcc.n	8005592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800559e:	4a0a      	ldr	r2, [pc, #40]	@ (80055c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80055a0:	4c0a      	ldr	r4, [pc, #40]	@ (80055cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80055a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055a4:	e001      	b.n	80055aa <LoopFillZerobss>

080055a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055a8:	3204      	adds	r2, #4

080055aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055ac:	d3fb      	bcc.n	80055a6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80055ae:	f000 fde5 	bl	800617c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055b2:	f7ff fad3 	bl	8004b5c <main>
  bx  lr    
 80055b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80055b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80055bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055c0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80055c4:	08008660 	.word	0x08008660
  ldr r2, =_sbss
 80055c8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80055cc:	200004a4 	.word	0x200004a4

080055d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055d0:	e7fe      	b.n	80055d0 <ADC_IRQHandler>

080055d2 <__cvt>:
 80055d2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055d6:	ec57 6b10 	vmov	r6, r7, d0
 80055da:	2f00      	cmp	r7, #0
 80055dc:	460c      	mov	r4, r1
 80055de:	4619      	mov	r1, r3
 80055e0:	463b      	mov	r3, r7
 80055e2:	bfbb      	ittet	lt
 80055e4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80055e8:	461f      	movlt	r7, r3
 80055ea:	2300      	movge	r3, #0
 80055ec:	232d      	movlt	r3, #45	@ 0x2d
 80055ee:	700b      	strb	r3, [r1, #0]
 80055f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055f2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80055f6:	4691      	mov	r9, r2
 80055f8:	f023 0820 	bic.w	r8, r3, #32
 80055fc:	bfbc      	itt	lt
 80055fe:	4632      	movlt	r2, r6
 8005600:	4616      	movlt	r6, r2
 8005602:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005606:	d005      	beq.n	8005614 <__cvt+0x42>
 8005608:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800560c:	d100      	bne.n	8005610 <__cvt+0x3e>
 800560e:	3401      	adds	r4, #1
 8005610:	2102      	movs	r1, #2
 8005612:	e000      	b.n	8005616 <__cvt+0x44>
 8005614:	2103      	movs	r1, #3
 8005616:	ab03      	add	r3, sp, #12
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	ab02      	add	r3, sp, #8
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	ec47 6b10 	vmov	d0, r6, r7
 8005622:	4653      	mov	r3, sl
 8005624:	4622      	mov	r2, r4
 8005626:	f000 fe5b 	bl	80062e0 <_dtoa_r>
 800562a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800562e:	4605      	mov	r5, r0
 8005630:	d119      	bne.n	8005666 <__cvt+0x94>
 8005632:	f019 0f01 	tst.w	r9, #1
 8005636:	d00e      	beq.n	8005656 <__cvt+0x84>
 8005638:	eb00 0904 	add.w	r9, r0, r4
 800563c:	2200      	movs	r2, #0
 800563e:	2300      	movs	r3, #0
 8005640:	4630      	mov	r0, r6
 8005642:	4639      	mov	r1, r7
 8005644:	f7fb fa60 	bl	8000b08 <__aeabi_dcmpeq>
 8005648:	b108      	cbz	r0, 800564e <__cvt+0x7c>
 800564a:	f8cd 900c 	str.w	r9, [sp, #12]
 800564e:	2230      	movs	r2, #48	@ 0x30
 8005650:	9b03      	ldr	r3, [sp, #12]
 8005652:	454b      	cmp	r3, r9
 8005654:	d31e      	bcc.n	8005694 <__cvt+0xc2>
 8005656:	9b03      	ldr	r3, [sp, #12]
 8005658:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800565a:	1b5b      	subs	r3, r3, r5
 800565c:	4628      	mov	r0, r5
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	b004      	add	sp, #16
 8005662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005666:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800566a:	eb00 0904 	add.w	r9, r0, r4
 800566e:	d1e5      	bne.n	800563c <__cvt+0x6a>
 8005670:	7803      	ldrb	r3, [r0, #0]
 8005672:	2b30      	cmp	r3, #48	@ 0x30
 8005674:	d10a      	bne.n	800568c <__cvt+0xba>
 8005676:	2200      	movs	r2, #0
 8005678:	2300      	movs	r3, #0
 800567a:	4630      	mov	r0, r6
 800567c:	4639      	mov	r1, r7
 800567e:	f7fb fa43 	bl	8000b08 <__aeabi_dcmpeq>
 8005682:	b918      	cbnz	r0, 800568c <__cvt+0xba>
 8005684:	f1c4 0401 	rsb	r4, r4, #1
 8005688:	f8ca 4000 	str.w	r4, [sl]
 800568c:	f8da 3000 	ldr.w	r3, [sl]
 8005690:	4499      	add	r9, r3
 8005692:	e7d3      	b.n	800563c <__cvt+0x6a>
 8005694:	1c59      	adds	r1, r3, #1
 8005696:	9103      	str	r1, [sp, #12]
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	e7d9      	b.n	8005650 <__cvt+0x7e>

0800569c <__exponent>:
 800569c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800569e:	2900      	cmp	r1, #0
 80056a0:	bfba      	itte	lt
 80056a2:	4249      	neglt	r1, r1
 80056a4:	232d      	movlt	r3, #45	@ 0x2d
 80056a6:	232b      	movge	r3, #43	@ 0x2b
 80056a8:	2909      	cmp	r1, #9
 80056aa:	7002      	strb	r2, [r0, #0]
 80056ac:	7043      	strb	r3, [r0, #1]
 80056ae:	dd29      	ble.n	8005704 <__exponent+0x68>
 80056b0:	f10d 0307 	add.w	r3, sp, #7
 80056b4:	461d      	mov	r5, r3
 80056b6:	270a      	movs	r7, #10
 80056b8:	461a      	mov	r2, r3
 80056ba:	fbb1 f6f7 	udiv	r6, r1, r7
 80056be:	fb07 1416 	mls	r4, r7, r6, r1
 80056c2:	3430      	adds	r4, #48	@ 0x30
 80056c4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80056c8:	460c      	mov	r4, r1
 80056ca:	2c63      	cmp	r4, #99	@ 0x63
 80056cc:	f103 33ff 	add.w	r3, r3, #4294967295
 80056d0:	4631      	mov	r1, r6
 80056d2:	dcf1      	bgt.n	80056b8 <__exponent+0x1c>
 80056d4:	3130      	adds	r1, #48	@ 0x30
 80056d6:	1e94      	subs	r4, r2, #2
 80056d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80056dc:	1c41      	adds	r1, r0, #1
 80056de:	4623      	mov	r3, r4
 80056e0:	42ab      	cmp	r3, r5
 80056e2:	d30a      	bcc.n	80056fa <__exponent+0x5e>
 80056e4:	f10d 0309 	add.w	r3, sp, #9
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	42ac      	cmp	r4, r5
 80056ec:	bf88      	it	hi
 80056ee:	2300      	movhi	r3, #0
 80056f0:	3302      	adds	r3, #2
 80056f2:	4403      	add	r3, r0
 80056f4:	1a18      	subs	r0, r3, r0
 80056f6:	b003      	add	sp, #12
 80056f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056fa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80056fe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005702:	e7ed      	b.n	80056e0 <__exponent+0x44>
 8005704:	2330      	movs	r3, #48	@ 0x30
 8005706:	3130      	adds	r1, #48	@ 0x30
 8005708:	7083      	strb	r3, [r0, #2]
 800570a:	70c1      	strb	r1, [r0, #3]
 800570c:	1d03      	adds	r3, r0, #4
 800570e:	e7f1      	b.n	80056f4 <__exponent+0x58>

08005710 <_printf_float>:
 8005710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005714:	b08d      	sub	sp, #52	@ 0x34
 8005716:	460c      	mov	r4, r1
 8005718:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800571c:	4616      	mov	r6, r2
 800571e:	461f      	mov	r7, r3
 8005720:	4605      	mov	r5, r0
 8005722:	f000 fcdb 	bl	80060dc <_localeconv_r>
 8005726:	6803      	ldr	r3, [r0, #0]
 8005728:	9304      	str	r3, [sp, #16]
 800572a:	4618      	mov	r0, r3
 800572c:	f7fa fdc0 	bl	80002b0 <strlen>
 8005730:	2300      	movs	r3, #0
 8005732:	930a      	str	r3, [sp, #40]	@ 0x28
 8005734:	f8d8 3000 	ldr.w	r3, [r8]
 8005738:	9005      	str	r0, [sp, #20]
 800573a:	3307      	adds	r3, #7
 800573c:	f023 0307 	bic.w	r3, r3, #7
 8005740:	f103 0208 	add.w	r2, r3, #8
 8005744:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005748:	f8d4 b000 	ldr.w	fp, [r4]
 800574c:	f8c8 2000 	str.w	r2, [r8]
 8005750:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005754:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005758:	9307      	str	r3, [sp, #28]
 800575a:	f8cd 8018 	str.w	r8, [sp, #24]
 800575e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005766:	4b9c      	ldr	r3, [pc, #624]	@ (80059d8 <_printf_float+0x2c8>)
 8005768:	f04f 32ff 	mov.w	r2, #4294967295
 800576c:	f7fb f9fe 	bl	8000b6c <__aeabi_dcmpun>
 8005770:	bb70      	cbnz	r0, 80057d0 <_printf_float+0xc0>
 8005772:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005776:	4b98      	ldr	r3, [pc, #608]	@ (80059d8 <_printf_float+0x2c8>)
 8005778:	f04f 32ff 	mov.w	r2, #4294967295
 800577c:	f7fb f9d8 	bl	8000b30 <__aeabi_dcmple>
 8005780:	bb30      	cbnz	r0, 80057d0 <_printf_float+0xc0>
 8005782:	2200      	movs	r2, #0
 8005784:	2300      	movs	r3, #0
 8005786:	4640      	mov	r0, r8
 8005788:	4649      	mov	r1, r9
 800578a:	f7fb f9c7 	bl	8000b1c <__aeabi_dcmplt>
 800578e:	b110      	cbz	r0, 8005796 <_printf_float+0x86>
 8005790:	232d      	movs	r3, #45	@ 0x2d
 8005792:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005796:	4a91      	ldr	r2, [pc, #580]	@ (80059dc <_printf_float+0x2cc>)
 8005798:	4b91      	ldr	r3, [pc, #580]	@ (80059e0 <_printf_float+0x2d0>)
 800579a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800579e:	bf94      	ite	ls
 80057a0:	4690      	movls	r8, r2
 80057a2:	4698      	movhi	r8, r3
 80057a4:	2303      	movs	r3, #3
 80057a6:	6123      	str	r3, [r4, #16]
 80057a8:	f02b 0304 	bic.w	r3, fp, #4
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	f04f 0900 	mov.w	r9, #0
 80057b2:	9700      	str	r7, [sp, #0]
 80057b4:	4633      	mov	r3, r6
 80057b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80057b8:	4621      	mov	r1, r4
 80057ba:	4628      	mov	r0, r5
 80057bc:	f000 f9d2 	bl	8005b64 <_printf_common>
 80057c0:	3001      	adds	r0, #1
 80057c2:	f040 808d 	bne.w	80058e0 <_printf_float+0x1d0>
 80057c6:	f04f 30ff 	mov.w	r0, #4294967295
 80057ca:	b00d      	add	sp, #52	@ 0x34
 80057cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	4640      	mov	r0, r8
 80057d6:	4649      	mov	r1, r9
 80057d8:	f7fb f9c8 	bl	8000b6c <__aeabi_dcmpun>
 80057dc:	b140      	cbz	r0, 80057f0 <_printf_float+0xe0>
 80057de:	464b      	mov	r3, r9
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	bfbc      	itt	lt
 80057e4:	232d      	movlt	r3, #45	@ 0x2d
 80057e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80057ea:	4a7e      	ldr	r2, [pc, #504]	@ (80059e4 <_printf_float+0x2d4>)
 80057ec:	4b7e      	ldr	r3, [pc, #504]	@ (80059e8 <_printf_float+0x2d8>)
 80057ee:	e7d4      	b.n	800579a <_printf_float+0x8a>
 80057f0:	6863      	ldr	r3, [r4, #4]
 80057f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80057f6:	9206      	str	r2, [sp, #24]
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	d13b      	bne.n	8005874 <_printf_float+0x164>
 80057fc:	2306      	movs	r3, #6
 80057fe:	6063      	str	r3, [r4, #4]
 8005800:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005804:	2300      	movs	r3, #0
 8005806:	6022      	str	r2, [r4, #0]
 8005808:	9303      	str	r3, [sp, #12]
 800580a:	ab0a      	add	r3, sp, #40	@ 0x28
 800580c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005810:	ab09      	add	r3, sp, #36	@ 0x24
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	6861      	ldr	r1, [r4, #4]
 8005816:	ec49 8b10 	vmov	d0, r8, r9
 800581a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800581e:	4628      	mov	r0, r5
 8005820:	f7ff fed7 	bl	80055d2 <__cvt>
 8005824:	9b06      	ldr	r3, [sp, #24]
 8005826:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005828:	2b47      	cmp	r3, #71	@ 0x47
 800582a:	4680      	mov	r8, r0
 800582c:	d129      	bne.n	8005882 <_printf_float+0x172>
 800582e:	1cc8      	adds	r0, r1, #3
 8005830:	db02      	blt.n	8005838 <_printf_float+0x128>
 8005832:	6863      	ldr	r3, [r4, #4]
 8005834:	4299      	cmp	r1, r3
 8005836:	dd41      	ble.n	80058bc <_printf_float+0x1ac>
 8005838:	f1aa 0a02 	sub.w	sl, sl, #2
 800583c:	fa5f fa8a 	uxtb.w	sl, sl
 8005840:	3901      	subs	r1, #1
 8005842:	4652      	mov	r2, sl
 8005844:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005848:	9109      	str	r1, [sp, #36]	@ 0x24
 800584a:	f7ff ff27 	bl	800569c <__exponent>
 800584e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005850:	1813      	adds	r3, r2, r0
 8005852:	2a01      	cmp	r2, #1
 8005854:	4681      	mov	r9, r0
 8005856:	6123      	str	r3, [r4, #16]
 8005858:	dc02      	bgt.n	8005860 <_printf_float+0x150>
 800585a:	6822      	ldr	r2, [r4, #0]
 800585c:	07d2      	lsls	r2, r2, #31
 800585e:	d501      	bpl.n	8005864 <_printf_float+0x154>
 8005860:	3301      	adds	r3, #1
 8005862:	6123      	str	r3, [r4, #16]
 8005864:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0a2      	beq.n	80057b2 <_printf_float+0xa2>
 800586c:	232d      	movs	r3, #45	@ 0x2d
 800586e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005872:	e79e      	b.n	80057b2 <_printf_float+0xa2>
 8005874:	9a06      	ldr	r2, [sp, #24]
 8005876:	2a47      	cmp	r2, #71	@ 0x47
 8005878:	d1c2      	bne.n	8005800 <_printf_float+0xf0>
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1c0      	bne.n	8005800 <_printf_float+0xf0>
 800587e:	2301      	movs	r3, #1
 8005880:	e7bd      	b.n	80057fe <_printf_float+0xee>
 8005882:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005886:	d9db      	bls.n	8005840 <_printf_float+0x130>
 8005888:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800588c:	d118      	bne.n	80058c0 <_printf_float+0x1b0>
 800588e:	2900      	cmp	r1, #0
 8005890:	6863      	ldr	r3, [r4, #4]
 8005892:	dd0b      	ble.n	80058ac <_printf_float+0x19c>
 8005894:	6121      	str	r1, [r4, #16]
 8005896:	b913      	cbnz	r3, 800589e <_printf_float+0x18e>
 8005898:	6822      	ldr	r2, [r4, #0]
 800589a:	07d0      	lsls	r0, r2, #31
 800589c:	d502      	bpl.n	80058a4 <_printf_float+0x194>
 800589e:	3301      	adds	r3, #1
 80058a0:	440b      	add	r3, r1
 80058a2:	6123      	str	r3, [r4, #16]
 80058a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80058a6:	f04f 0900 	mov.w	r9, #0
 80058aa:	e7db      	b.n	8005864 <_printf_float+0x154>
 80058ac:	b913      	cbnz	r3, 80058b4 <_printf_float+0x1a4>
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	07d2      	lsls	r2, r2, #31
 80058b2:	d501      	bpl.n	80058b8 <_printf_float+0x1a8>
 80058b4:	3302      	adds	r3, #2
 80058b6:	e7f4      	b.n	80058a2 <_printf_float+0x192>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e7f2      	b.n	80058a2 <_printf_float+0x192>
 80058bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80058c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058c2:	4299      	cmp	r1, r3
 80058c4:	db05      	blt.n	80058d2 <_printf_float+0x1c2>
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	6121      	str	r1, [r4, #16]
 80058ca:	07d8      	lsls	r0, r3, #31
 80058cc:	d5ea      	bpl.n	80058a4 <_printf_float+0x194>
 80058ce:	1c4b      	adds	r3, r1, #1
 80058d0:	e7e7      	b.n	80058a2 <_printf_float+0x192>
 80058d2:	2900      	cmp	r1, #0
 80058d4:	bfd4      	ite	le
 80058d6:	f1c1 0202 	rsble	r2, r1, #2
 80058da:	2201      	movgt	r2, #1
 80058dc:	4413      	add	r3, r2
 80058de:	e7e0      	b.n	80058a2 <_printf_float+0x192>
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	055a      	lsls	r2, r3, #21
 80058e4:	d407      	bmi.n	80058f6 <_printf_float+0x1e6>
 80058e6:	6923      	ldr	r3, [r4, #16]
 80058e8:	4642      	mov	r2, r8
 80058ea:	4631      	mov	r1, r6
 80058ec:	4628      	mov	r0, r5
 80058ee:	47b8      	blx	r7
 80058f0:	3001      	adds	r0, #1
 80058f2:	d12b      	bne.n	800594c <_printf_float+0x23c>
 80058f4:	e767      	b.n	80057c6 <_printf_float+0xb6>
 80058f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80058fa:	f240 80dd 	bls.w	8005ab8 <_printf_float+0x3a8>
 80058fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005902:	2200      	movs	r2, #0
 8005904:	2300      	movs	r3, #0
 8005906:	f7fb f8ff 	bl	8000b08 <__aeabi_dcmpeq>
 800590a:	2800      	cmp	r0, #0
 800590c:	d033      	beq.n	8005976 <_printf_float+0x266>
 800590e:	4a37      	ldr	r2, [pc, #220]	@ (80059ec <_printf_float+0x2dc>)
 8005910:	2301      	movs	r3, #1
 8005912:	4631      	mov	r1, r6
 8005914:	4628      	mov	r0, r5
 8005916:	47b8      	blx	r7
 8005918:	3001      	adds	r0, #1
 800591a:	f43f af54 	beq.w	80057c6 <_printf_float+0xb6>
 800591e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005922:	4543      	cmp	r3, r8
 8005924:	db02      	blt.n	800592c <_printf_float+0x21c>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	07d8      	lsls	r0, r3, #31
 800592a:	d50f      	bpl.n	800594c <_printf_float+0x23c>
 800592c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005930:	4631      	mov	r1, r6
 8005932:	4628      	mov	r0, r5
 8005934:	47b8      	blx	r7
 8005936:	3001      	adds	r0, #1
 8005938:	f43f af45 	beq.w	80057c6 <_printf_float+0xb6>
 800593c:	f04f 0900 	mov.w	r9, #0
 8005940:	f108 38ff 	add.w	r8, r8, #4294967295
 8005944:	f104 0a1a 	add.w	sl, r4, #26
 8005948:	45c8      	cmp	r8, r9
 800594a:	dc09      	bgt.n	8005960 <_printf_float+0x250>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	079b      	lsls	r3, r3, #30
 8005950:	f100 8103 	bmi.w	8005b5a <_printf_float+0x44a>
 8005954:	68e0      	ldr	r0, [r4, #12]
 8005956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005958:	4298      	cmp	r0, r3
 800595a:	bfb8      	it	lt
 800595c:	4618      	movlt	r0, r3
 800595e:	e734      	b.n	80057ca <_printf_float+0xba>
 8005960:	2301      	movs	r3, #1
 8005962:	4652      	mov	r2, sl
 8005964:	4631      	mov	r1, r6
 8005966:	4628      	mov	r0, r5
 8005968:	47b8      	blx	r7
 800596a:	3001      	adds	r0, #1
 800596c:	f43f af2b 	beq.w	80057c6 <_printf_float+0xb6>
 8005970:	f109 0901 	add.w	r9, r9, #1
 8005974:	e7e8      	b.n	8005948 <_printf_float+0x238>
 8005976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	dc39      	bgt.n	80059f0 <_printf_float+0x2e0>
 800597c:	4a1b      	ldr	r2, [pc, #108]	@ (80059ec <_printf_float+0x2dc>)
 800597e:	2301      	movs	r3, #1
 8005980:	4631      	mov	r1, r6
 8005982:	4628      	mov	r0, r5
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	f43f af1d 	beq.w	80057c6 <_printf_float+0xb6>
 800598c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005990:	ea59 0303 	orrs.w	r3, r9, r3
 8005994:	d102      	bne.n	800599c <_printf_float+0x28c>
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	07d9      	lsls	r1, r3, #31
 800599a:	d5d7      	bpl.n	800594c <_printf_float+0x23c>
 800599c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059a0:	4631      	mov	r1, r6
 80059a2:	4628      	mov	r0, r5
 80059a4:	47b8      	blx	r7
 80059a6:	3001      	adds	r0, #1
 80059a8:	f43f af0d 	beq.w	80057c6 <_printf_float+0xb6>
 80059ac:	f04f 0a00 	mov.w	sl, #0
 80059b0:	f104 0b1a 	add.w	fp, r4, #26
 80059b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059b6:	425b      	negs	r3, r3
 80059b8:	4553      	cmp	r3, sl
 80059ba:	dc01      	bgt.n	80059c0 <_printf_float+0x2b0>
 80059bc:	464b      	mov	r3, r9
 80059be:	e793      	b.n	80058e8 <_printf_float+0x1d8>
 80059c0:	2301      	movs	r3, #1
 80059c2:	465a      	mov	r2, fp
 80059c4:	4631      	mov	r1, r6
 80059c6:	4628      	mov	r0, r5
 80059c8:	47b8      	blx	r7
 80059ca:	3001      	adds	r0, #1
 80059cc:	f43f aefb 	beq.w	80057c6 <_printf_float+0xb6>
 80059d0:	f10a 0a01 	add.w	sl, sl, #1
 80059d4:	e7ee      	b.n	80059b4 <_printf_float+0x2a4>
 80059d6:	bf00      	nop
 80059d8:	7fefffff 	.word	0x7fefffff
 80059dc:	080082dc 	.word	0x080082dc
 80059e0:	080082e0 	.word	0x080082e0
 80059e4:	080082e4 	.word	0x080082e4
 80059e8:	080082e8 	.word	0x080082e8
 80059ec:	080082ec 	.word	0x080082ec
 80059f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80059f6:	4553      	cmp	r3, sl
 80059f8:	bfa8      	it	ge
 80059fa:	4653      	movge	r3, sl
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	4699      	mov	r9, r3
 8005a00:	dc36      	bgt.n	8005a70 <_printf_float+0x360>
 8005a02:	f04f 0b00 	mov.w	fp, #0
 8005a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a0a:	f104 021a 	add.w	r2, r4, #26
 8005a0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a10:	9306      	str	r3, [sp, #24]
 8005a12:	eba3 0309 	sub.w	r3, r3, r9
 8005a16:	455b      	cmp	r3, fp
 8005a18:	dc31      	bgt.n	8005a7e <_printf_float+0x36e>
 8005a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a1c:	459a      	cmp	sl, r3
 8005a1e:	dc3a      	bgt.n	8005a96 <_printf_float+0x386>
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	07da      	lsls	r2, r3, #31
 8005a24:	d437      	bmi.n	8005a96 <_printf_float+0x386>
 8005a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a28:	ebaa 0903 	sub.w	r9, sl, r3
 8005a2c:	9b06      	ldr	r3, [sp, #24]
 8005a2e:	ebaa 0303 	sub.w	r3, sl, r3
 8005a32:	4599      	cmp	r9, r3
 8005a34:	bfa8      	it	ge
 8005a36:	4699      	movge	r9, r3
 8005a38:	f1b9 0f00 	cmp.w	r9, #0
 8005a3c:	dc33      	bgt.n	8005aa6 <_printf_float+0x396>
 8005a3e:	f04f 0800 	mov.w	r8, #0
 8005a42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a46:	f104 0b1a 	add.w	fp, r4, #26
 8005a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a4c:	ebaa 0303 	sub.w	r3, sl, r3
 8005a50:	eba3 0309 	sub.w	r3, r3, r9
 8005a54:	4543      	cmp	r3, r8
 8005a56:	f77f af79 	ble.w	800594c <_printf_float+0x23c>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	465a      	mov	r2, fp
 8005a5e:	4631      	mov	r1, r6
 8005a60:	4628      	mov	r0, r5
 8005a62:	47b8      	blx	r7
 8005a64:	3001      	adds	r0, #1
 8005a66:	f43f aeae 	beq.w	80057c6 <_printf_float+0xb6>
 8005a6a:	f108 0801 	add.w	r8, r8, #1
 8005a6e:	e7ec      	b.n	8005a4a <_printf_float+0x33a>
 8005a70:	4642      	mov	r2, r8
 8005a72:	4631      	mov	r1, r6
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b8      	blx	r7
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d1c2      	bne.n	8005a02 <_printf_float+0x2f2>
 8005a7c:	e6a3      	b.n	80057c6 <_printf_float+0xb6>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4631      	mov	r1, r6
 8005a82:	4628      	mov	r0, r5
 8005a84:	9206      	str	r2, [sp, #24]
 8005a86:	47b8      	blx	r7
 8005a88:	3001      	adds	r0, #1
 8005a8a:	f43f ae9c 	beq.w	80057c6 <_printf_float+0xb6>
 8005a8e:	9a06      	ldr	r2, [sp, #24]
 8005a90:	f10b 0b01 	add.w	fp, fp, #1
 8005a94:	e7bb      	b.n	8005a0e <_printf_float+0x2fe>
 8005a96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b8      	blx	r7
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d1c0      	bne.n	8005a26 <_printf_float+0x316>
 8005aa4:	e68f      	b.n	80057c6 <_printf_float+0xb6>
 8005aa6:	9a06      	ldr	r2, [sp, #24]
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	4442      	add	r2, r8
 8005aac:	4631      	mov	r1, r6
 8005aae:	4628      	mov	r0, r5
 8005ab0:	47b8      	blx	r7
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	d1c3      	bne.n	8005a3e <_printf_float+0x32e>
 8005ab6:	e686      	b.n	80057c6 <_printf_float+0xb6>
 8005ab8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005abc:	f1ba 0f01 	cmp.w	sl, #1
 8005ac0:	dc01      	bgt.n	8005ac6 <_printf_float+0x3b6>
 8005ac2:	07db      	lsls	r3, r3, #31
 8005ac4:	d536      	bpl.n	8005b34 <_printf_float+0x424>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	4642      	mov	r2, r8
 8005aca:	4631      	mov	r1, r6
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b8      	blx	r7
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	f43f ae78 	beq.w	80057c6 <_printf_float+0xb6>
 8005ad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ada:	4631      	mov	r1, r6
 8005adc:	4628      	mov	r0, r5
 8005ade:	47b8      	blx	r7
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f43f ae70 	beq.w	80057c6 <_printf_float+0xb6>
 8005ae6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005aea:	2200      	movs	r2, #0
 8005aec:	2300      	movs	r3, #0
 8005aee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005af2:	f7fb f809 	bl	8000b08 <__aeabi_dcmpeq>
 8005af6:	b9c0      	cbnz	r0, 8005b2a <_printf_float+0x41a>
 8005af8:	4653      	mov	r3, sl
 8005afa:	f108 0201 	add.w	r2, r8, #1
 8005afe:	4631      	mov	r1, r6
 8005b00:	4628      	mov	r0, r5
 8005b02:	47b8      	blx	r7
 8005b04:	3001      	adds	r0, #1
 8005b06:	d10c      	bne.n	8005b22 <_printf_float+0x412>
 8005b08:	e65d      	b.n	80057c6 <_printf_float+0xb6>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	465a      	mov	r2, fp
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4628      	mov	r0, r5
 8005b12:	47b8      	blx	r7
 8005b14:	3001      	adds	r0, #1
 8005b16:	f43f ae56 	beq.w	80057c6 <_printf_float+0xb6>
 8005b1a:	f108 0801 	add.w	r8, r8, #1
 8005b1e:	45d0      	cmp	r8, sl
 8005b20:	dbf3      	blt.n	8005b0a <_printf_float+0x3fa>
 8005b22:	464b      	mov	r3, r9
 8005b24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005b28:	e6df      	b.n	80058ea <_printf_float+0x1da>
 8005b2a:	f04f 0800 	mov.w	r8, #0
 8005b2e:	f104 0b1a 	add.w	fp, r4, #26
 8005b32:	e7f4      	b.n	8005b1e <_printf_float+0x40e>
 8005b34:	2301      	movs	r3, #1
 8005b36:	4642      	mov	r2, r8
 8005b38:	e7e1      	b.n	8005afe <_printf_float+0x3ee>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	464a      	mov	r2, r9
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4628      	mov	r0, r5
 8005b42:	47b8      	blx	r7
 8005b44:	3001      	adds	r0, #1
 8005b46:	f43f ae3e 	beq.w	80057c6 <_printf_float+0xb6>
 8005b4a:	f108 0801 	add.w	r8, r8, #1
 8005b4e:	68e3      	ldr	r3, [r4, #12]
 8005b50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b52:	1a5b      	subs	r3, r3, r1
 8005b54:	4543      	cmp	r3, r8
 8005b56:	dcf0      	bgt.n	8005b3a <_printf_float+0x42a>
 8005b58:	e6fc      	b.n	8005954 <_printf_float+0x244>
 8005b5a:	f04f 0800 	mov.w	r8, #0
 8005b5e:	f104 0919 	add.w	r9, r4, #25
 8005b62:	e7f4      	b.n	8005b4e <_printf_float+0x43e>

08005b64 <_printf_common>:
 8005b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b68:	4616      	mov	r6, r2
 8005b6a:	4698      	mov	r8, r3
 8005b6c:	688a      	ldr	r2, [r1, #8]
 8005b6e:	690b      	ldr	r3, [r1, #16]
 8005b70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b74:	4293      	cmp	r3, r2
 8005b76:	bfb8      	it	lt
 8005b78:	4613      	movlt	r3, r2
 8005b7a:	6033      	str	r3, [r6, #0]
 8005b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b80:	4607      	mov	r7, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	b10a      	cbz	r2, 8005b8a <_printf_common+0x26>
 8005b86:	3301      	adds	r3, #1
 8005b88:	6033      	str	r3, [r6, #0]
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	0699      	lsls	r1, r3, #26
 8005b8e:	bf42      	ittt	mi
 8005b90:	6833      	ldrmi	r3, [r6, #0]
 8005b92:	3302      	addmi	r3, #2
 8005b94:	6033      	strmi	r3, [r6, #0]
 8005b96:	6825      	ldr	r5, [r4, #0]
 8005b98:	f015 0506 	ands.w	r5, r5, #6
 8005b9c:	d106      	bne.n	8005bac <_printf_common+0x48>
 8005b9e:	f104 0a19 	add.w	sl, r4, #25
 8005ba2:	68e3      	ldr	r3, [r4, #12]
 8005ba4:	6832      	ldr	r2, [r6, #0]
 8005ba6:	1a9b      	subs	r3, r3, r2
 8005ba8:	42ab      	cmp	r3, r5
 8005baa:	dc26      	bgt.n	8005bfa <_printf_common+0x96>
 8005bac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005bb0:	6822      	ldr	r2, [r4, #0]
 8005bb2:	3b00      	subs	r3, #0
 8005bb4:	bf18      	it	ne
 8005bb6:	2301      	movne	r3, #1
 8005bb8:	0692      	lsls	r2, r2, #26
 8005bba:	d42b      	bmi.n	8005c14 <_printf_common+0xb0>
 8005bbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005bc0:	4641      	mov	r1, r8
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	47c8      	blx	r9
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	d01e      	beq.n	8005c08 <_printf_common+0xa4>
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	6922      	ldr	r2, [r4, #16]
 8005bce:	f003 0306 	and.w	r3, r3, #6
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	bf02      	ittt	eq
 8005bd6:	68e5      	ldreq	r5, [r4, #12]
 8005bd8:	6833      	ldreq	r3, [r6, #0]
 8005bda:	1aed      	subeq	r5, r5, r3
 8005bdc:	68a3      	ldr	r3, [r4, #8]
 8005bde:	bf0c      	ite	eq
 8005be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005be4:	2500      	movne	r5, #0
 8005be6:	4293      	cmp	r3, r2
 8005be8:	bfc4      	itt	gt
 8005bea:	1a9b      	subgt	r3, r3, r2
 8005bec:	18ed      	addgt	r5, r5, r3
 8005bee:	2600      	movs	r6, #0
 8005bf0:	341a      	adds	r4, #26
 8005bf2:	42b5      	cmp	r5, r6
 8005bf4:	d11a      	bne.n	8005c2c <_printf_common+0xc8>
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	e008      	b.n	8005c0c <_printf_common+0xa8>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4652      	mov	r2, sl
 8005bfe:	4641      	mov	r1, r8
 8005c00:	4638      	mov	r0, r7
 8005c02:	47c8      	blx	r9
 8005c04:	3001      	adds	r0, #1
 8005c06:	d103      	bne.n	8005c10 <_printf_common+0xac>
 8005c08:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c10:	3501      	adds	r5, #1
 8005c12:	e7c6      	b.n	8005ba2 <_printf_common+0x3e>
 8005c14:	18e1      	adds	r1, r4, r3
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	2030      	movs	r0, #48	@ 0x30
 8005c1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c1e:	4422      	add	r2, r4
 8005c20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c28:	3302      	adds	r3, #2
 8005c2a:	e7c7      	b.n	8005bbc <_printf_common+0x58>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	4622      	mov	r2, r4
 8005c30:	4641      	mov	r1, r8
 8005c32:	4638      	mov	r0, r7
 8005c34:	47c8      	blx	r9
 8005c36:	3001      	adds	r0, #1
 8005c38:	d0e6      	beq.n	8005c08 <_printf_common+0xa4>
 8005c3a:	3601      	adds	r6, #1
 8005c3c:	e7d9      	b.n	8005bf2 <_printf_common+0x8e>
	...

08005c40 <_printf_i>:
 8005c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c44:	7e0f      	ldrb	r7, [r1, #24]
 8005c46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c48:	2f78      	cmp	r7, #120	@ 0x78
 8005c4a:	4691      	mov	r9, r2
 8005c4c:	4680      	mov	r8, r0
 8005c4e:	460c      	mov	r4, r1
 8005c50:	469a      	mov	sl, r3
 8005c52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c56:	d807      	bhi.n	8005c68 <_printf_i+0x28>
 8005c58:	2f62      	cmp	r7, #98	@ 0x62
 8005c5a:	d80a      	bhi.n	8005c72 <_printf_i+0x32>
 8005c5c:	2f00      	cmp	r7, #0
 8005c5e:	f000 80d2 	beq.w	8005e06 <_printf_i+0x1c6>
 8005c62:	2f58      	cmp	r7, #88	@ 0x58
 8005c64:	f000 80b9 	beq.w	8005dda <_printf_i+0x19a>
 8005c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c70:	e03a      	b.n	8005ce8 <_printf_i+0xa8>
 8005c72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c76:	2b15      	cmp	r3, #21
 8005c78:	d8f6      	bhi.n	8005c68 <_printf_i+0x28>
 8005c7a:	a101      	add	r1, pc, #4	@ (adr r1, 8005c80 <_printf_i+0x40>)
 8005c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c80:	08005cd9 	.word	0x08005cd9
 8005c84:	08005ced 	.word	0x08005ced
 8005c88:	08005c69 	.word	0x08005c69
 8005c8c:	08005c69 	.word	0x08005c69
 8005c90:	08005c69 	.word	0x08005c69
 8005c94:	08005c69 	.word	0x08005c69
 8005c98:	08005ced 	.word	0x08005ced
 8005c9c:	08005c69 	.word	0x08005c69
 8005ca0:	08005c69 	.word	0x08005c69
 8005ca4:	08005c69 	.word	0x08005c69
 8005ca8:	08005c69 	.word	0x08005c69
 8005cac:	08005ded 	.word	0x08005ded
 8005cb0:	08005d17 	.word	0x08005d17
 8005cb4:	08005da7 	.word	0x08005da7
 8005cb8:	08005c69 	.word	0x08005c69
 8005cbc:	08005c69 	.word	0x08005c69
 8005cc0:	08005e0f 	.word	0x08005e0f
 8005cc4:	08005c69 	.word	0x08005c69
 8005cc8:	08005d17 	.word	0x08005d17
 8005ccc:	08005c69 	.word	0x08005c69
 8005cd0:	08005c69 	.word	0x08005c69
 8005cd4:	08005daf 	.word	0x08005daf
 8005cd8:	6833      	ldr	r3, [r6, #0]
 8005cda:	1d1a      	adds	r2, r3, #4
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6032      	str	r2, [r6, #0]
 8005ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ce4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e09d      	b.n	8005e28 <_printf_i+0x1e8>
 8005cec:	6833      	ldr	r3, [r6, #0]
 8005cee:	6820      	ldr	r0, [r4, #0]
 8005cf0:	1d19      	adds	r1, r3, #4
 8005cf2:	6031      	str	r1, [r6, #0]
 8005cf4:	0606      	lsls	r6, r0, #24
 8005cf6:	d501      	bpl.n	8005cfc <_printf_i+0xbc>
 8005cf8:	681d      	ldr	r5, [r3, #0]
 8005cfa:	e003      	b.n	8005d04 <_printf_i+0xc4>
 8005cfc:	0645      	lsls	r5, r0, #25
 8005cfe:	d5fb      	bpl.n	8005cf8 <_printf_i+0xb8>
 8005d00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d04:	2d00      	cmp	r5, #0
 8005d06:	da03      	bge.n	8005d10 <_printf_i+0xd0>
 8005d08:	232d      	movs	r3, #45	@ 0x2d
 8005d0a:	426d      	negs	r5, r5
 8005d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d10:	4859      	ldr	r0, [pc, #356]	@ (8005e78 <_printf_i+0x238>)
 8005d12:	230a      	movs	r3, #10
 8005d14:	e011      	b.n	8005d3a <_printf_i+0xfa>
 8005d16:	6821      	ldr	r1, [r4, #0]
 8005d18:	6833      	ldr	r3, [r6, #0]
 8005d1a:	0608      	lsls	r0, r1, #24
 8005d1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d20:	d402      	bmi.n	8005d28 <_printf_i+0xe8>
 8005d22:	0649      	lsls	r1, r1, #25
 8005d24:	bf48      	it	mi
 8005d26:	b2ad      	uxthmi	r5, r5
 8005d28:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d2a:	4853      	ldr	r0, [pc, #332]	@ (8005e78 <_printf_i+0x238>)
 8005d2c:	6033      	str	r3, [r6, #0]
 8005d2e:	bf14      	ite	ne
 8005d30:	230a      	movne	r3, #10
 8005d32:	2308      	moveq	r3, #8
 8005d34:	2100      	movs	r1, #0
 8005d36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d3a:	6866      	ldr	r6, [r4, #4]
 8005d3c:	60a6      	str	r6, [r4, #8]
 8005d3e:	2e00      	cmp	r6, #0
 8005d40:	bfa2      	ittt	ge
 8005d42:	6821      	ldrge	r1, [r4, #0]
 8005d44:	f021 0104 	bicge.w	r1, r1, #4
 8005d48:	6021      	strge	r1, [r4, #0]
 8005d4a:	b90d      	cbnz	r5, 8005d50 <_printf_i+0x110>
 8005d4c:	2e00      	cmp	r6, #0
 8005d4e:	d04b      	beq.n	8005de8 <_printf_i+0x1a8>
 8005d50:	4616      	mov	r6, r2
 8005d52:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d56:	fb03 5711 	mls	r7, r3, r1, r5
 8005d5a:	5dc7      	ldrb	r7, [r0, r7]
 8005d5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d60:	462f      	mov	r7, r5
 8005d62:	42bb      	cmp	r3, r7
 8005d64:	460d      	mov	r5, r1
 8005d66:	d9f4      	bls.n	8005d52 <_printf_i+0x112>
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d10b      	bne.n	8005d84 <_printf_i+0x144>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	07df      	lsls	r7, r3, #31
 8005d70:	d508      	bpl.n	8005d84 <_printf_i+0x144>
 8005d72:	6923      	ldr	r3, [r4, #16]
 8005d74:	6861      	ldr	r1, [r4, #4]
 8005d76:	4299      	cmp	r1, r3
 8005d78:	bfde      	ittt	le
 8005d7a:	2330      	movle	r3, #48	@ 0x30
 8005d7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d84:	1b92      	subs	r2, r2, r6
 8005d86:	6122      	str	r2, [r4, #16]
 8005d88:	f8cd a000 	str.w	sl, [sp]
 8005d8c:	464b      	mov	r3, r9
 8005d8e:	aa03      	add	r2, sp, #12
 8005d90:	4621      	mov	r1, r4
 8005d92:	4640      	mov	r0, r8
 8005d94:	f7ff fee6 	bl	8005b64 <_printf_common>
 8005d98:	3001      	adds	r0, #1
 8005d9a:	d14a      	bne.n	8005e32 <_printf_i+0x1f2>
 8005d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005da0:	b004      	add	sp, #16
 8005da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	f043 0320 	orr.w	r3, r3, #32
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	4833      	ldr	r0, [pc, #204]	@ (8005e7c <_printf_i+0x23c>)
 8005db0:	2778      	movs	r7, #120	@ 0x78
 8005db2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	6831      	ldr	r1, [r6, #0]
 8005dba:	061f      	lsls	r7, r3, #24
 8005dbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005dc0:	d402      	bmi.n	8005dc8 <_printf_i+0x188>
 8005dc2:	065f      	lsls	r7, r3, #25
 8005dc4:	bf48      	it	mi
 8005dc6:	b2ad      	uxthmi	r5, r5
 8005dc8:	6031      	str	r1, [r6, #0]
 8005dca:	07d9      	lsls	r1, r3, #31
 8005dcc:	bf44      	itt	mi
 8005dce:	f043 0320 	orrmi.w	r3, r3, #32
 8005dd2:	6023      	strmi	r3, [r4, #0]
 8005dd4:	b11d      	cbz	r5, 8005dde <_printf_i+0x19e>
 8005dd6:	2310      	movs	r3, #16
 8005dd8:	e7ac      	b.n	8005d34 <_printf_i+0xf4>
 8005dda:	4827      	ldr	r0, [pc, #156]	@ (8005e78 <_printf_i+0x238>)
 8005ddc:	e7e9      	b.n	8005db2 <_printf_i+0x172>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	f023 0320 	bic.w	r3, r3, #32
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	e7f6      	b.n	8005dd6 <_printf_i+0x196>
 8005de8:	4616      	mov	r6, r2
 8005dea:	e7bd      	b.n	8005d68 <_printf_i+0x128>
 8005dec:	6833      	ldr	r3, [r6, #0]
 8005dee:	6825      	ldr	r5, [r4, #0]
 8005df0:	6961      	ldr	r1, [r4, #20]
 8005df2:	1d18      	adds	r0, r3, #4
 8005df4:	6030      	str	r0, [r6, #0]
 8005df6:	062e      	lsls	r6, r5, #24
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	d501      	bpl.n	8005e00 <_printf_i+0x1c0>
 8005dfc:	6019      	str	r1, [r3, #0]
 8005dfe:	e002      	b.n	8005e06 <_printf_i+0x1c6>
 8005e00:	0668      	lsls	r0, r5, #25
 8005e02:	d5fb      	bpl.n	8005dfc <_printf_i+0x1bc>
 8005e04:	8019      	strh	r1, [r3, #0]
 8005e06:	2300      	movs	r3, #0
 8005e08:	6123      	str	r3, [r4, #16]
 8005e0a:	4616      	mov	r6, r2
 8005e0c:	e7bc      	b.n	8005d88 <_printf_i+0x148>
 8005e0e:	6833      	ldr	r3, [r6, #0]
 8005e10:	1d1a      	adds	r2, r3, #4
 8005e12:	6032      	str	r2, [r6, #0]
 8005e14:	681e      	ldr	r6, [r3, #0]
 8005e16:	6862      	ldr	r2, [r4, #4]
 8005e18:	2100      	movs	r1, #0
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f7fa f9f8 	bl	8000210 <memchr>
 8005e20:	b108      	cbz	r0, 8005e26 <_printf_i+0x1e6>
 8005e22:	1b80      	subs	r0, r0, r6
 8005e24:	6060      	str	r0, [r4, #4]
 8005e26:	6863      	ldr	r3, [r4, #4]
 8005e28:	6123      	str	r3, [r4, #16]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e30:	e7aa      	b.n	8005d88 <_printf_i+0x148>
 8005e32:	6923      	ldr	r3, [r4, #16]
 8005e34:	4632      	mov	r2, r6
 8005e36:	4649      	mov	r1, r9
 8005e38:	4640      	mov	r0, r8
 8005e3a:	47d0      	blx	sl
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d0ad      	beq.n	8005d9c <_printf_i+0x15c>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	079b      	lsls	r3, r3, #30
 8005e44:	d413      	bmi.n	8005e6e <_printf_i+0x22e>
 8005e46:	68e0      	ldr	r0, [r4, #12]
 8005e48:	9b03      	ldr	r3, [sp, #12]
 8005e4a:	4298      	cmp	r0, r3
 8005e4c:	bfb8      	it	lt
 8005e4e:	4618      	movlt	r0, r3
 8005e50:	e7a6      	b.n	8005da0 <_printf_i+0x160>
 8005e52:	2301      	movs	r3, #1
 8005e54:	4632      	mov	r2, r6
 8005e56:	4649      	mov	r1, r9
 8005e58:	4640      	mov	r0, r8
 8005e5a:	47d0      	blx	sl
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d09d      	beq.n	8005d9c <_printf_i+0x15c>
 8005e60:	3501      	adds	r5, #1
 8005e62:	68e3      	ldr	r3, [r4, #12]
 8005e64:	9903      	ldr	r1, [sp, #12]
 8005e66:	1a5b      	subs	r3, r3, r1
 8005e68:	42ab      	cmp	r3, r5
 8005e6a:	dcf2      	bgt.n	8005e52 <_printf_i+0x212>
 8005e6c:	e7eb      	b.n	8005e46 <_printf_i+0x206>
 8005e6e:	2500      	movs	r5, #0
 8005e70:	f104 0619 	add.w	r6, r4, #25
 8005e74:	e7f5      	b.n	8005e62 <_printf_i+0x222>
 8005e76:	bf00      	nop
 8005e78:	080082ee 	.word	0x080082ee
 8005e7c:	080082ff 	.word	0x080082ff

08005e80 <std>:
 8005e80:	2300      	movs	r3, #0
 8005e82:	b510      	push	{r4, lr}
 8005e84:	4604      	mov	r4, r0
 8005e86:	e9c0 3300 	strd	r3, r3, [r0]
 8005e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e8e:	6083      	str	r3, [r0, #8]
 8005e90:	8181      	strh	r1, [r0, #12]
 8005e92:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e94:	81c2      	strh	r2, [r0, #14]
 8005e96:	6183      	str	r3, [r0, #24]
 8005e98:	4619      	mov	r1, r3
 8005e9a:	2208      	movs	r2, #8
 8005e9c:	305c      	adds	r0, #92	@ 0x5c
 8005e9e:	f000 f914 	bl	80060ca <memset>
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed8 <std+0x58>)
 8005ea4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8005edc <std+0x5c>)
 8005ea8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee0 <std+0x60>)
 8005eac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005eae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee4 <std+0x64>)
 8005eb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee8 <std+0x68>)
 8005eb4:	6224      	str	r4, [r4, #32]
 8005eb6:	429c      	cmp	r4, r3
 8005eb8:	d006      	beq.n	8005ec8 <std+0x48>
 8005eba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ebe:	4294      	cmp	r4, r2
 8005ec0:	d002      	beq.n	8005ec8 <std+0x48>
 8005ec2:	33d0      	adds	r3, #208	@ 0xd0
 8005ec4:	429c      	cmp	r4, r3
 8005ec6:	d105      	bne.n	8005ed4 <std+0x54>
 8005ec8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ed0:	f000 b978 	b.w	80061c4 <__retarget_lock_init_recursive>
 8005ed4:	bd10      	pop	{r4, pc}
 8005ed6:	bf00      	nop
 8005ed8:	08006045 	.word	0x08006045
 8005edc:	08006067 	.word	0x08006067
 8005ee0:	0800609f 	.word	0x0800609f
 8005ee4:	080060c3 	.word	0x080060c3
 8005ee8:	20000358 	.word	0x20000358

08005eec <stdio_exit_handler>:
 8005eec:	4a02      	ldr	r2, [pc, #8]	@ (8005ef8 <stdio_exit_handler+0xc>)
 8005eee:	4903      	ldr	r1, [pc, #12]	@ (8005efc <stdio_exit_handler+0x10>)
 8005ef0:	4803      	ldr	r0, [pc, #12]	@ (8005f00 <stdio_exit_handler+0x14>)
 8005ef2:	f000 b869 	b.w	8005fc8 <_fwalk_sglue>
 8005ef6:	bf00      	nop
 8005ef8:	20000010 	.word	0x20000010
 8005efc:	08007b25 	.word	0x08007b25
 8005f00:	20000020 	.word	0x20000020

08005f04 <cleanup_stdio>:
 8005f04:	6841      	ldr	r1, [r0, #4]
 8005f06:	4b0c      	ldr	r3, [pc, #48]	@ (8005f38 <cleanup_stdio+0x34>)
 8005f08:	4299      	cmp	r1, r3
 8005f0a:	b510      	push	{r4, lr}
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	d001      	beq.n	8005f14 <cleanup_stdio+0x10>
 8005f10:	f001 fe08 	bl	8007b24 <_fflush_r>
 8005f14:	68a1      	ldr	r1, [r4, #8]
 8005f16:	4b09      	ldr	r3, [pc, #36]	@ (8005f3c <cleanup_stdio+0x38>)
 8005f18:	4299      	cmp	r1, r3
 8005f1a:	d002      	beq.n	8005f22 <cleanup_stdio+0x1e>
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f001 fe01 	bl	8007b24 <_fflush_r>
 8005f22:	68e1      	ldr	r1, [r4, #12]
 8005f24:	4b06      	ldr	r3, [pc, #24]	@ (8005f40 <cleanup_stdio+0x3c>)
 8005f26:	4299      	cmp	r1, r3
 8005f28:	d004      	beq.n	8005f34 <cleanup_stdio+0x30>
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f30:	f001 bdf8 	b.w	8007b24 <_fflush_r>
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	bf00      	nop
 8005f38:	20000358 	.word	0x20000358
 8005f3c:	200003c0 	.word	0x200003c0
 8005f40:	20000428 	.word	0x20000428

08005f44 <global_stdio_init.part.0>:
 8005f44:	b510      	push	{r4, lr}
 8005f46:	4b0b      	ldr	r3, [pc, #44]	@ (8005f74 <global_stdio_init.part.0+0x30>)
 8005f48:	4c0b      	ldr	r4, [pc, #44]	@ (8005f78 <global_stdio_init.part.0+0x34>)
 8005f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8005f7c <global_stdio_init.part.0+0x38>)
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	4620      	mov	r0, r4
 8005f50:	2200      	movs	r2, #0
 8005f52:	2104      	movs	r1, #4
 8005f54:	f7ff ff94 	bl	8005e80 <std>
 8005f58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	2109      	movs	r1, #9
 8005f60:	f7ff ff8e 	bl	8005e80 <std>
 8005f64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f68:	2202      	movs	r2, #2
 8005f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f6e:	2112      	movs	r1, #18
 8005f70:	f7ff bf86 	b.w	8005e80 <std>
 8005f74:	20000490 	.word	0x20000490
 8005f78:	20000358 	.word	0x20000358
 8005f7c:	08005eed 	.word	0x08005eed

08005f80 <__sfp_lock_acquire>:
 8005f80:	4801      	ldr	r0, [pc, #4]	@ (8005f88 <__sfp_lock_acquire+0x8>)
 8005f82:	f000 b920 	b.w	80061c6 <__retarget_lock_acquire_recursive>
 8005f86:	bf00      	nop
 8005f88:	20000499 	.word	0x20000499

08005f8c <__sfp_lock_release>:
 8005f8c:	4801      	ldr	r0, [pc, #4]	@ (8005f94 <__sfp_lock_release+0x8>)
 8005f8e:	f000 b91b 	b.w	80061c8 <__retarget_lock_release_recursive>
 8005f92:	bf00      	nop
 8005f94:	20000499 	.word	0x20000499

08005f98 <__sinit>:
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	f7ff fff0 	bl	8005f80 <__sfp_lock_acquire>
 8005fa0:	6a23      	ldr	r3, [r4, #32]
 8005fa2:	b11b      	cbz	r3, 8005fac <__sinit+0x14>
 8005fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fa8:	f7ff bff0 	b.w	8005f8c <__sfp_lock_release>
 8005fac:	4b04      	ldr	r3, [pc, #16]	@ (8005fc0 <__sinit+0x28>)
 8005fae:	6223      	str	r3, [r4, #32]
 8005fb0:	4b04      	ldr	r3, [pc, #16]	@ (8005fc4 <__sinit+0x2c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1f5      	bne.n	8005fa4 <__sinit+0xc>
 8005fb8:	f7ff ffc4 	bl	8005f44 <global_stdio_init.part.0>
 8005fbc:	e7f2      	b.n	8005fa4 <__sinit+0xc>
 8005fbe:	bf00      	nop
 8005fc0:	08005f05 	.word	0x08005f05
 8005fc4:	20000490 	.word	0x20000490

08005fc8 <_fwalk_sglue>:
 8005fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fcc:	4607      	mov	r7, r0
 8005fce:	4688      	mov	r8, r1
 8005fd0:	4614      	mov	r4, r2
 8005fd2:	2600      	movs	r6, #0
 8005fd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fd8:	f1b9 0901 	subs.w	r9, r9, #1
 8005fdc:	d505      	bpl.n	8005fea <_fwalk_sglue+0x22>
 8005fde:	6824      	ldr	r4, [r4, #0]
 8005fe0:	2c00      	cmp	r4, #0
 8005fe2:	d1f7      	bne.n	8005fd4 <_fwalk_sglue+0xc>
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fea:	89ab      	ldrh	r3, [r5, #12]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d907      	bls.n	8006000 <_fwalk_sglue+0x38>
 8005ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	d003      	beq.n	8006000 <_fwalk_sglue+0x38>
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	47c0      	blx	r8
 8005ffe:	4306      	orrs	r6, r0
 8006000:	3568      	adds	r5, #104	@ 0x68
 8006002:	e7e9      	b.n	8005fd8 <_fwalk_sglue+0x10>

08006004 <siprintf>:
 8006004:	b40e      	push	{r1, r2, r3}
 8006006:	b500      	push	{lr}
 8006008:	b09c      	sub	sp, #112	@ 0x70
 800600a:	ab1d      	add	r3, sp, #116	@ 0x74
 800600c:	9002      	str	r0, [sp, #8]
 800600e:	9006      	str	r0, [sp, #24]
 8006010:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006014:	4809      	ldr	r0, [pc, #36]	@ (800603c <siprintf+0x38>)
 8006016:	9107      	str	r1, [sp, #28]
 8006018:	9104      	str	r1, [sp, #16]
 800601a:	4909      	ldr	r1, [pc, #36]	@ (8006040 <siprintf+0x3c>)
 800601c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006020:	9105      	str	r1, [sp, #20]
 8006022:	6800      	ldr	r0, [r0, #0]
 8006024:	9301      	str	r3, [sp, #4]
 8006026:	a902      	add	r1, sp, #8
 8006028:	f001 fbfc 	bl	8007824 <_svfiprintf_r>
 800602c:	9b02      	ldr	r3, [sp, #8]
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	b01c      	add	sp, #112	@ 0x70
 8006034:	f85d eb04 	ldr.w	lr, [sp], #4
 8006038:	b003      	add	sp, #12
 800603a:	4770      	bx	lr
 800603c:	2000001c 	.word	0x2000001c
 8006040:	ffff0208 	.word	0xffff0208

08006044 <__sread>:
 8006044:	b510      	push	{r4, lr}
 8006046:	460c      	mov	r4, r1
 8006048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800604c:	f000 f86c 	bl	8006128 <_read_r>
 8006050:	2800      	cmp	r0, #0
 8006052:	bfab      	itete	ge
 8006054:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006056:	89a3      	ldrhlt	r3, [r4, #12]
 8006058:	181b      	addge	r3, r3, r0
 800605a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800605e:	bfac      	ite	ge
 8006060:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006062:	81a3      	strhlt	r3, [r4, #12]
 8006064:	bd10      	pop	{r4, pc}

08006066 <__swrite>:
 8006066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606a:	461f      	mov	r7, r3
 800606c:	898b      	ldrh	r3, [r1, #12]
 800606e:	05db      	lsls	r3, r3, #23
 8006070:	4605      	mov	r5, r0
 8006072:	460c      	mov	r4, r1
 8006074:	4616      	mov	r6, r2
 8006076:	d505      	bpl.n	8006084 <__swrite+0x1e>
 8006078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800607c:	2302      	movs	r3, #2
 800607e:	2200      	movs	r2, #0
 8006080:	f000 f840 	bl	8006104 <_lseek_r>
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800608a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800608e:	81a3      	strh	r3, [r4, #12]
 8006090:	4632      	mov	r2, r6
 8006092:	463b      	mov	r3, r7
 8006094:	4628      	mov	r0, r5
 8006096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800609a:	f000 b857 	b.w	800614c <_write_r>

0800609e <__sseek>:
 800609e:	b510      	push	{r4, lr}
 80060a0:	460c      	mov	r4, r1
 80060a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a6:	f000 f82d 	bl	8006104 <_lseek_r>
 80060aa:	1c43      	adds	r3, r0, #1
 80060ac:	89a3      	ldrh	r3, [r4, #12]
 80060ae:	bf15      	itete	ne
 80060b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060ba:	81a3      	strheq	r3, [r4, #12]
 80060bc:	bf18      	it	ne
 80060be:	81a3      	strhne	r3, [r4, #12]
 80060c0:	bd10      	pop	{r4, pc}

080060c2 <__sclose>:
 80060c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c6:	f000 b80d 	b.w	80060e4 <_close_r>

080060ca <memset>:
 80060ca:	4402      	add	r2, r0
 80060cc:	4603      	mov	r3, r0
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d100      	bne.n	80060d4 <memset+0xa>
 80060d2:	4770      	bx	lr
 80060d4:	f803 1b01 	strb.w	r1, [r3], #1
 80060d8:	e7f9      	b.n	80060ce <memset+0x4>
	...

080060dc <_localeconv_r>:
 80060dc:	4800      	ldr	r0, [pc, #0]	@ (80060e0 <_localeconv_r+0x4>)
 80060de:	4770      	bx	lr
 80060e0:	2000015c 	.word	0x2000015c

080060e4 <_close_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4d06      	ldr	r5, [pc, #24]	@ (8006100 <_close_r+0x1c>)
 80060e8:	2300      	movs	r3, #0
 80060ea:	4604      	mov	r4, r0
 80060ec:	4608      	mov	r0, r1
 80060ee:	602b      	str	r3, [r5, #0]
 80060f0:	f7ff f9c9 	bl	8005486 <_close>
 80060f4:	1c43      	adds	r3, r0, #1
 80060f6:	d102      	bne.n	80060fe <_close_r+0x1a>
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	b103      	cbz	r3, 80060fe <_close_r+0x1a>
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	bd38      	pop	{r3, r4, r5, pc}
 8006100:	20000494 	.word	0x20000494

08006104 <_lseek_r>:
 8006104:	b538      	push	{r3, r4, r5, lr}
 8006106:	4d07      	ldr	r5, [pc, #28]	@ (8006124 <_lseek_r+0x20>)
 8006108:	4604      	mov	r4, r0
 800610a:	4608      	mov	r0, r1
 800610c:	4611      	mov	r1, r2
 800610e:	2200      	movs	r2, #0
 8006110:	602a      	str	r2, [r5, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	f7ff f9de 	bl	80054d4 <_lseek>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d102      	bne.n	8006122 <_lseek_r+0x1e>
 800611c:	682b      	ldr	r3, [r5, #0]
 800611e:	b103      	cbz	r3, 8006122 <_lseek_r+0x1e>
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	20000494 	.word	0x20000494

08006128 <_read_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	4d07      	ldr	r5, [pc, #28]	@ (8006148 <_read_r+0x20>)
 800612c:	4604      	mov	r4, r0
 800612e:	4608      	mov	r0, r1
 8006130:	4611      	mov	r1, r2
 8006132:	2200      	movs	r2, #0
 8006134:	602a      	str	r2, [r5, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	f7ff f96c 	bl	8005414 <_read>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_read_r+0x1e>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_read_r+0x1e>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	20000494 	.word	0x20000494

0800614c <_write_r>:
 800614c:	b538      	push	{r3, r4, r5, lr}
 800614e:	4d07      	ldr	r5, [pc, #28]	@ (800616c <_write_r+0x20>)
 8006150:	4604      	mov	r4, r0
 8006152:	4608      	mov	r0, r1
 8006154:	4611      	mov	r1, r2
 8006156:	2200      	movs	r2, #0
 8006158:	602a      	str	r2, [r5, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	f7ff f977 	bl	800544e <_write>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d102      	bne.n	800616a <_write_r+0x1e>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	b103      	cbz	r3, 800616a <_write_r+0x1e>
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	20000494 	.word	0x20000494

08006170 <__errno>:
 8006170:	4b01      	ldr	r3, [pc, #4]	@ (8006178 <__errno+0x8>)
 8006172:	6818      	ldr	r0, [r3, #0]
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	2000001c 	.word	0x2000001c

0800617c <__libc_init_array>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	4d0d      	ldr	r5, [pc, #52]	@ (80061b4 <__libc_init_array+0x38>)
 8006180:	4c0d      	ldr	r4, [pc, #52]	@ (80061b8 <__libc_init_array+0x3c>)
 8006182:	1b64      	subs	r4, r4, r5
 8006184:	10a4      	asrs	r4, r4, #2
 8006186:	2600      	movs	r6, #0
 8006188:	42a6      	cmp	r6, r4
 800618a:	d109      	bne.n	80061a0 <__libc_init_array+0x24>
 800618c:	4d0b      	ldr	r5, [pc, #44]	@ (80061bc <__libc_init_array+0x40>)
 800618e:	4c0c      	ldr	r4, [pc, #48]	@ (80061c0 <__libc_init_array+0x44>)
 8006190:	f002 f866 	bl	8008260 <_init>
 8006194:	1b64      	subs	r4, r4, r5
 8006196:	10a4      	asrs	r4, r4, #2
 8006198:	2600      	movs	r6, #0
 800619a:	42a6      	cmp	r6, r4
 800619c:	d105      	bne.n	80061aa <__libc_init_array+0x2e>
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061a4:	4798      	blx	r3
 80061a6:	3601      	adds	r6, #1
 80061a8:	e7ee      	b.n	8006188 <__libc_init_array+0xc>
 80061aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ae:	4798      	blx	r3
 80061b0:	3601      	adds	r6, #1
 80061b2:	e7f2      	b.n	800619a <__libc_init_array+0x1e>
 80061b4:	08008658 	.word	0x08008658
 80061b8:	08008658 	.word	0x08008658
 80061bc:	08008658 	.word	0x08008658
 80061c0:	0800865c 	.word	0x0800865c

080061c4 <__retarget_lock_init_recursive>:
 80061c4:	4770      	bx	lr

080061c6 <__retarget_lock_acquire_recursive>:
 80061c6:	4770      	bx	lr

080061c8 <__retarget_lock_release_recursive>:
 80061c8:	4770      	bx	lr

080061ca <quorem>:
 80061ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ce:	6903      	ldr	r3, [r0, #16]
 80061d0:	690c      	ldr	r4, [r1, #16]
 80061d2:	42a3      	cmp	r3, r4
 80061d4:	4607      	mov	r7, r0
 80061d6:	db7e      	blt.n	80062d6 <quorem+0x10c>
 80061d8:	3c01      	subs	r4, #1
 80061da:	f101 0814 	add.w	r8, r1, #20
 80061de:	00a3      	lsls	r3, r4, #2
 80061e0:	f100 0514 	add.w	r5, r0, #20
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061f4:	3301      	adds	r3, #1
 80061f6:	429a      	cmp	r2, r3
 80061f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006200:	d32e      	bcc.n	8006260 <quorem+0x96>
 8006202:	f04f 0a00 	mov.w	sl, #0
 8006206:	46c4      	mov	ip, r8
 8006208:	46ae      	mov	lr, r5
 800620a:	46d3      	mov	fp, sl
 800620c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006210:	b298      	uxth	r0, r3
 8006212:	fb06 a000 	mla	r0, r6, r0, sl
 8006216:	0c02      	lsrs	r2, r0, #16
 8006218:	0c1b      	lsrs	r3, r3, #16
 800621a:	fb06 2303 	mla	r3, r6, r3, r2
 800621e:	f8de 2000 	ldr.w	r2, [lr]
 8006222:	b280      	uxth	r0, r0
 8006224:	b292      	uxth	r2, r2
 8006226:	1a12      	subs	r2, r2, r0
 8006228:	445a      	add	r2, fp
 800622a:	f8de 0000 	ldr.w	r0, [lr]
 800622e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006232:	b29b      	uxth	r3, r3
 8006234:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006238:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800623c:	b292      	uxth	r2, r2
 800623e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006242:	45e1      	cmp	r9, ip
 8006244:	f84e 2b04 	str.w	r2, [lr], #4
 8006248:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800624c:	d2de      	bcs.n	800620c <quorem+0x42>
 800624e:	9b00      	ldr	r3, [sp, #0]
 8006250:	58eb      	ldr	r3, [r5, r3]
 8006252:	b92b      	cbnz	r3, 8006260 <quorem+0x96>
 8006254:	9b01      	ldr	r3, [sp, #4]
 8006256:	3b04      	subs	r3, #4
 8006258:	429d      	cmp	r5, r3
 800625a:	461a      	mov	r2, r3
 800625c:	d32f      	bcc.n	80062be <quorem+0xf4>
 800625e:	613c      	str	r4, [r7, #16]
 8006260:	4638      	mov	r0, r7
 8006262:	f001 f97b 	bl	800755c <__mcmp>
 8006266:	2800      	cmp	r0, #0
 8006268:	db25      	blt.n	80062b6 <quorem+0xec>
 800626a:	4629      	mov	r1, r5
 800626c:	2000      	movs	r0, #0
 800626e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006272:	f8d1 c000 	ldr.w	ip, [r1]
 8006276:	fa1f fe82 	uxth.w	lr, r2
 800627a:	fa1f f38c 	uxth.w	r3, ip
 800627e:	eba3 030e 	sub.w	r3, r3, lr
 8006282:	4403      	add	r3, r0
 8006284:	0c12      	lsrs	r2, r2, #16
 8006286:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800628a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800628e:	b29b      	uxth	r3, r3
 8006290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006294:	45c1      	cmp	r9, r8
 8006296:	f841 3b04 	str.w	r3, [r1], #4
 800629a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800629e:	d2e6      	bcs.n	800626e <quorem+0xa4>
 80062a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062a8:	b922      	cbnz	r2, 80062b4 <quorem+0xea>
 80062aa:	3b04      	subs	r3, #4
 80062ac:	429d      	cmp	r5, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	d30b      	bcc.n	80062ca <quorem+0x100>
 80062b2:	613c      	str	r4, [r7, #16]
 80062b4:	3601      	adds	r6, #1
 80062b6:	4630      	mov	r0, r6
 80062b8:	b003      	add	sp, #12
 80062ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062be:	6812      	ldr	r2, [r2, #0]
 80062c0:	3b04      	subs	r3, #4
 80062c2:	2a00      	cmp	r2, #0
 80062c4:	d1cb      	bne.n	800625e <quorem+0x94>
 80062c6:	3c01      	subs	r4, #1
 80062c8:	e7c6      	b.n	8006258 <quorem+0x8e>
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	3b04      	subs	r3, #4
 80062ce:	2a00      	cmp	r2, #0
 80062d0:	d1ef      	bne.n	80062b2 <quorem+0xe8>
 80062d2:	3c01      	subs	r4, #1
 80062d4:	e7ea      	b.n	80062ac <quorem+0xe2>
 80062d6:	2000      	movs	r0, #0
 80062d8:	e7ee      	b.n	80062b8 <quorem+0xee>
 80062da:	0000      	movs	r0, r0
 80062dc:	0000      	movs	r0, r0
	...

080062e0 <_dtoa_r>:
 80062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	69c7      	ldr	r7, [r0, #28]
 80062e6:	b099      	sub	sp, #100	@ 0x64
 80062e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80062ec:	ec55 4b10 	vmov	r4, r5, d0
 80062f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80062f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80062f4:	4683      	mov	fp, r0
 80062f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80062f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80062fa:	b97f      	cbnz	r7, 800631c <_dtoa_r+0x3c>
 80062fc:	2010      	movs	r0, #16
 80062fe:	f000 fdfd 	bl	8006efc <malloc>
 8006302:	4602      	mov	r2, r0
 8006304:	f8cb 001c 	str.w	r0, [fp, #28]
 8006308:	b920      	cbnz	r0, 8006314 <_dtoa_r+0x34>
 800630a:	4ba7      	ldr	r3, [pc, #668]	@ (80065a8 <_dtoa_r+0x2c8>)
 800630c:	21ef      	movs	r1, #239	@ 0xef
 800630e:	48a7      	ldr	r0, [pc, #668]	@ (80065ac <_dtoa_r+0x2cc>)
 8006310:	f001 fc68 	bl	8007be4 <__assert_func>
 8006314:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006318:	6007      	str	r7, [r0, #0]
 800631a:	60c7      	str	r7, [r0, #12]
 800631c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006320:	6819      	ldr	r1, [r3, #0]
 8006322:	b159      	cbz	r1, 800633c <_dtoa_r+0x5c>
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	604a      	str	r2, [r1, #4]
 8006328:	2301      	movs	r3, #1
 800632a:	4093      	lsls	r3, r2
 800632c:	608b      	str	r3, [r1, #8]
 800632e:	4658      	mov	r0, fp
 8006330:	f000 feda 	bl	80070e8 <_Bfree>
 8006334:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	1e2b      	subs	r3, r5, #0
 800633e:	bfb9      	ittee	lt
 8006340:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006344:	9303      	strlt	r3, [sp, #12]
 8006346:	2300      	movge	r3, #0
 8006348:	6033      	strge	r3, [r6, #0]
 800634a:	9f03      	ldr	r7, [sp, #12]
 800634c:	4b98      	ldr	r3, [pc, #608]	@ (80065b0 <_dtoa_r+0x2d0>)
 800634e:	bfbc      	itt	lt
 8006350:	2201      	movlt	r2, #1
 8006352:	6032      	strlt	r2, [r6, #0]
 8006354:	43bb      	bics	r3, r7
 8006356:	d112      	bne.n	800637e <_dtoa_r+0x9e>
 8006358:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800635a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006364:	4323      	orrs	r3, r4
 8006366:	f000 854d 	beq.w	8006e04 <_dtoa_r+0xb24>
 800636a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800636c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80065c4 <_dtoa_r+0x2e4>
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 854f 	beq.w	8006e14 <_dtoa_r+0xb34>
 8006376:	f10a 0303 	add.w	r3, sl, #3
 800637a:	f000 bd49 	b.w	8006e10 <_dtoa_r+0xb30>
 800637e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006382:	2200      	movs	r2, #0
 8006384:	ec51 0b17 	vmov	r0, r1, d7
 8006388:	2300      	movs	r3, #0
 800638a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800638e:	f7fa fbbb 	bl	8000b08 <__aeabi_dcmpeq>
 8006392:	4680      	mov	r8, r0
 8006394:	b158      	cbz	r0, 80063ae <_dtoa_r+0xce>
 8006396:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006398:	2301      	movs	r3, #1
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800639e:	b113      	cbz	r3, 80063a6 <_dtoa_r+0xc6>
 80063a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80063a2:	4b84      	ldr	r3, [pc, #528]	@ (80065b4 <_dtoa_r+0x2d4>)
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80065c8 <_dtoa_r+0x2e8>
 80063aa:	f000 bd33 	b.w	8006e14 <_dtoa_r+0xb34>
 80063ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80063b2:	aa16      	add	r2, sp, #88	@ 0x58
 80063b4:	a917      	add	r1, sp, #92	@ 0x5c
 80063b6:	4658      	mov	r0, fp
 80063b8:	f001 f980 	bl	80076bc <__d2b>
 80063bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80063c0:	4681      	mov	r9, r0
 80063c2:	2e00      	cmp	r6, #0
 80063c4:	d077      	beq.n	80064b6 <_dtoa_r+0x1d6>
 80063c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80063cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80063d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80063dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80063e0:	4619      	mov	r1, r3
 80063e2:	2200      	movs	r2, #0
 80063e4:	4b74      	ldr	r3, [pc, #464]	@ (80065b8 <_dtoa_r+0x2d8>)
 80063e6:	f7f9 ff6f 	bl	80002c8 <__aeabi_dsub>
 80063ea:	a369      	add	r3, pc, #420	@ (adr r3, 8006590 <_dtoa_r+0x2b0>)
 80063ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f0:	f7fa f922 	bl	8000638 <__aeabi_dmul>
 80063f4:	a368      	add	r3, pc, #416	@ (adr r3, 8006598 <_dtoa_r+0x2b8>)
 80063f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fa:	f7f9 ff67 	bl	80002cc <__adddf3>
 80063fe:	4604      	mov	r4, r0
 8006400:	4630      	mov	r0, r6
 8006402:	460d      	mov	r5, r1
 8006404:	f7fa f8ae 	bl	8000564 <__aeabi_i2d>
 8006408:	a365      	add	r3, pc, #404	@ (adr r3, 80065a0 <_dtoa_r+0x2c0>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f7fa f913 	bl	8000638 <__aeabi_dmul>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4620      	mov	r0, r4
 8006418:	4629      	mov	r1, r5
 800641a:	f7f9 ff57 	bl	80002cc <__adddf3>
 800641e:	4604      	mov	r4, r0
 8006420:	460d      	mov	r5, r1
 8006422:	f7fa fbb9 	bl	8000b98 <__aeabi_d2iz>
 8006426:	2200      	movs	r2, #0
 8006428:	4607      	mov	r7, r0
 800642a:	2300      	movs	r3, #0
 800642c:	4620      	mov	r0, r4
 800642e:	4629      	mov	r1, r5
 8006430:	f7fa fb74 	bl	8000b1c <__aeabi_dcmplt>
 8006434:	b140      	cbz	r0, 8006448 <_dtoa_r+0x168>
 8006436:	4638      	mov	r0, r7
 8006438:	f7fa f894 	bl	8000564 <__aeabi_i2d>
 800643c:	4622      	mov	r2, r4
 800643e:	462b      	mov	r3, r5
 8006440:	f7fa fb62 	bl	8000b08 <__aeabi_dcmpeq>
 8006444:	b900      	cbnz	r0, 8006448 <_dtoa_r+0x168>
 8006446:	3f01      	subs	r7, #1
 8006448:	2f16      	cmp	r7, #22
 800644a:	d851      	bhi.n	80064f0 <_dtoa_r+0x210>
 800644c:	4b5b      	ldr	r3, [pc, #364]	@ (80065bc <_dtoa_r+0x2dc>)
 800644e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800645a:	f7fa fb5f 	bl	8000b1c <__aeabi_dcmplt>
 800645e:	2800      	cmp	r0, #0
 8006460:	d048      	beq.n	80064f4 <_dtoa_r+0x214>
 8006462:	3f01      	subs	r7, #1
 8006464:	2300      	movs	r3, #0
 8006466:	9312      	str	r3, [sp, #72]	@ 0x48
 8006468:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800646a:	1b9b      	subs	r3, r3, r6
 800646c:	1e5a      	subs	r2, r3, #1
 800646e:	bf44      	itt	mi
 8006470:	f1c3 0801 	rsbmi	r8, r3, #1
 8006474:	2300      	movmi	r3, #0
 8006476:	9208      	str	r2, [sp, #32]
 8006478:	bf54      	ite	pl
 800647a:	f04f 0800 	movpl.w	r8, #0
 800647e:	9308      	strmi	r3, [sp, #32]
 8006480:	2f00      	cmp	r7, #0
 8006482:	db39      	blt.n	80064f8 <_dtoa_r+0x218>
 8006484:	9b08      	ldr	r3, [sp, #32]
 8006486:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006488:	443b      	add	r3, r7
 800648a:	9308      	str	r3, [sp, #32]
 800648c:	2300      	movs	r3, #0
 800648e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006492:	2b09      	cmp	r3, #9
 8006494:	d864      	bhi.n	8006560 <_dtoa_r+0x280>
 8006496:	2b05      	cmp	r3, #5
 8006498:	bfc4      	itt	gt
 800649a:	3b04      	subgt	r3, #4
 800649c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800649e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a0:	f1a3 0302 	sub.w	r3, r3, #2
 80064a4:	bfcc      	ite	gt
 80064a6:	2400      	movgt	r4, #0
 80064a8:	2401      	movle	r4, #1
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d863      	bhi.n	8006576 <_dtoa_r+0x296>
 80064ae:	e8df f003 	tbb	[pc, r3]
 80064b2:	372a      	.short	0x372a
 80064b4:	5535      	.short	0x5535
 80064b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80064ba:	441e      	add	r6, r3
 80064bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	bfc1      	itttt	gt
 80064c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80064c8:	409f      	lslgt	r7, r3
 80064ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80064ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80064d2:	bfd6      	itet	le
 80064d4:	f1c3 0320 	rsble	r3, r3, #32
 80064d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80064dc:	fa04 f003 	lslle.w	r0, r4, r3
 80064e0:	f7fa f830 	bl	8000544 <__aeabi_ui2d>
 80064e4:	2201      	movs	r2, #1
 80064e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80064ea:	3e01      	subs	r6, #1
 80064ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80064ee:	e777      	b.n	80063e0 <_dtoa_r+0x100>
 80064f0:	2301      	movs	r3, #1
 80064f2:	e7b8      	b.n	8006466 <_dtoa_r+0x186>
 80064f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80064f6:	e7b7      	b.n	8006468 <_dtoa_r+0x188>
 80064f8:	427b      	negs	r3, r7
 80064fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80064fc:	2300      	movs	r3, #0
 80064fe:	eba8 0807 	sub.w	r8, r8, r7
 8006502:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006504:	e7c4      	b.n	8006490 <_dtoa_r+0x1b0>
 8006506:	2300      	movs	r3, #0
 8006508:	930b      	str	r3, [sp, #44]	@ 0x2c
 800650a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800650c:	2b00      	cmp	r3, #0
 800650e:	dc35      	bgt.n	800657c <_dtoa_r+0x29c>
 8006510:	2301      	movs	r3, #1
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	9307      	str	r3, [sp, #28]
 8006516:	461a      	mov	r2, r3
 8006518:	920e      	str	r2, [sp, #56]	@ 0x38
 800651a:	e00b      	b.n	8006534 <_dtoa_r+0x254>
 800651c:	2301      	movs	r3, #1
 800651e:	e7f3      	b.n	8006508 <_dtoa_r+0x228>
 8006520:	2300      	movs	r3, #0
 8006522:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006526:	18fb      	adds	r3, r7, r3
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	3301      	adds	r3, #1
 800652c:	2b01      	cmp	r3, #1
 800652e:	9307      	str	r3, [sp, #28]
 8006530:	bfb8      	it	lt
 8006532:	2301      	movlt	r3, #1
 8006534:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006538:	2100      	movs	r1, #0
 800653a:	2204      	movs	r2, #4
 800653c:	f102 0514 	add.w	r5, r2, #20
 8006540:	429d      	cmp	r5, r3
 8006542:	d91f      	bls.n	8006584 <_dtoa_r+0x2a4>
 8006544:	6041      	str	r1, [r0, #4]
 8006546:	4658      	mov	r0, fp
 8006548:	f000 fd8e 	bl	8007068 <_Balloc>
 800654c:	4682      	mov	sl, r0
 800654e:	2800      	cmp	r0, #0
 8006550:	d13c      	bne.n	80065cc <_dtoa_r+0x2ec>
 8006552:	4b1b      	ldr	r3, [pc, #108]	@ (80065c0 <_dtoa_r+0x2e0>)
 8006554:	4602      	mov	r2, r0
 8006556:	f240 11af 	movw	r1, #431	@ 0x1af
 800655a:	e6d8      	b.n	800630e <_dtoa_r+0x2e>
 800655c:	2301      	movs	r3, #1
 800655e:	e7e0      	b.n	8006522 <_dtoa_r+0x242>
 8006560:	2401      	movs	r4, #1
 8006562:	2300      	movs	r3, #0
 8006564:	9309      	str	r3, [sp, #36]	@ 0x24
 8006566:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006568:	f04f 33ff 	mov.w	r3, #4294967295
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	9307      	str	r3, [sp, #28]
 8006570:	2200      	movs	r2, #0
 8006572:	2312      	movs	r3, #18
 8006574:	e7d0      	b.n	8006518 <_dtoa_r+0x238>
 8006576:	2301      	movs	r3, #1
 8006578:	930b      	str	r3, [sp, #44]	@ 0x2c
 800657a:	e7f5      	b.n	8006568 <_dtoa_r+0x288>
 800657c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	9307      	str	r3, [sp, #28]
 8006582:	e7d7      	b.n	8006534 <_dtoa_r+0x254>
 8006584:	3101      	adds	r1, #1
 8006586:	0052      	lsls	r2, r2, #1
 8006588:	e7d8      	b.n	800653c <_dtoa_r+0x25c>
 800658a:	bf00      	nop
 800658c:	f3af 8000 	nop.w
 8006590:	636f4361 	.word	0x636f4361
 8006594:	3fd287a7 	.word	0x3fd287a7
 8006598:	8b60c8b3 	.word	0x8b60c8b3
 800659c:	3fc68a28 	.word	0x3fc68a28
 80065a0:	509f79fb 	.word	0x509f79fb
 80065a4:	3fd34413 	.word	0x3fd34413
 80065a8:	0800831d 	.word	0x0800831d
 80065ac:	08008334 	.word	0x08008334
 80065b0:	7ff00000 	.word	0x7ff00000
 80065b4:	080082ed 	.word	0x080082ed
 80065b8:	3ff80000 	.word	0x3ff80000
 80065bc:	08008430 	.word	0x08008430
 80065c0:	0800838c 	.word	0x0800838c
 80065c4:	08008319 	.word	0x08008319
 80065c8:	080082ec 	.word	0x080082ec
 80065cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80065d0:	6018      	str	r0, [r3, #0]
 80065d2:	9b07      	ldr	r3, [sp, #28]
 80065d4:	2b0e      	cmp	r3, #14
 80065d6:	f200 80a4 	bhi.w	8006722 <_dtoa_r+0x442>
 80065da:	2c00      	cmp	r4, #0
 80065dc:	f000 80a1 	beq.w	8006722 <_dtoa_r+0x442>
 80065e0:	2f00      	cmp	r7, #0
 80065e2:	dd33      	ble.n	800664c <_dtoa_r+0x36c>
 80065e4:	4bad      	ldr	r3, [pc, #692]	@ (800689c <_dtoa_r+0x5bc>)
 80065e6:	f007 020f 	and.w	r2, r7, #15
 80065ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065ee:	ed93 7b00 	vldr	d7, [r3]
 80065f2:	05f8      	lsls	r0, r7, #23
 80065f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80065f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80065fc:	d516      	bpl.n	800662c <_dtoa_r+0x34c>
 80065fe:	4ba8      	ldr	r3, [pc, #672]	@ (80068a0 <_dtoa_r+0x5c0>)
 8006600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006604:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006608:	f7fa f940 	bl	800088c <__aeabi_ddiv>
 800660c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006610:	f004 040f 	and.w	r4, r4, #15
 8006614:	2603      	movs	r6, #3
 8006616:	4da2      	ldr	r5, [pc, #648]	@ (80068a0 <_dtoa_r+0x5c0>)
 8006618:	b954      	cbnz	r4, 8006630 <_dtoa_r+0x350>
 800661a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800661e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006622:	f7fa f933 	bl	800088c <__aeabi_ddiv>
 8006626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800662a:	e028      	b.n	800667e <_dtoa_r+0x39e>
 800662c:	2602      	movs	r6, #2
 800662e:	e7f2      	b.n	8006616 <_dtoa_r+0x336>
 8006630:	07e1      	lsls	r1, r4, #31
 8006632:	d508      	bpl.n	8006646 <_dtoa_r+0x366>
 8006634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006638:	e9d5 2300 	ldrd	r2, r3, [r5]
 800663c:	f7f9 fffc 	bl	8000638 <__aeabi_dmul>
 8006640:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006644:	3601      	adds	r6, #1
 8006646:	1064      	asrs	r4, r4, #1
 8006648:	3508      	adds	r5, #8
 800664a:	e7e5      	b.n	8006618 <_dtoa_r+0x338>
 800664c:	f000 80d2 	beq.w	80067f4 <_dtoa_r+0x514>
 8006650:	427c      	negs	r4, r7
 8006652:	4b92      	ldr	r3, [pc, #584]	@ (800689c <_dtoa_r+0x5bc>)
 8006654:	4d92      	ldr	r5, [pc, #584]	@ (80068a0 <_dtoa_r+0x5c0>)
 8006656:	f004 020f 	and.w	r2, r4, #15
 800665a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006666:	f7f9 ffe7 	bl	8000638 <__aeabi_dmul>
 800666a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800666e:	1124      	asrs	r4, r4, #4
 8006670:	2300      	movs	r3, #0
 8006672:	2602      	movs	r6, #2
 8006674:	2c00      	cmp	r4, #0
 8006676:	f040 80b2 	bne.w	80067de <_dtoa_r+0x4fe>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1d3      	bne.n	8006626 <_dtoa_r+0x346>
 800667e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006680:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 80b7 	beq.w	80067f8 <_dtoa_r+0x518>
 800668a:	4b86      	ldr	r3, [pc, #536]	@ (80068a4 <_dtoa_r+0x5c4>)
 800668c:	2200      	movs	r2, #0
 800668e:	4620      	mov	r0, r4
 8006690:	4629      	mov	r1, r5
 8006692:	f7fa fa43 	bl	8000b1c <__aeabi_dcmplt>
 8006696:	2800      	cmp	r0, #0
 8006698:	f000 80ae 	beq.w	80067f8 <_dtoa_r+0x518>
 800669c:	9b07      	ldr	r3, [sp, #28]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 80aa 	beq.w	80067f8 <_dtoa_r+0x518>
 80066a4:	9b00      	ldr	r3, [sp, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	dd37      	ble.n	800671a <_dtoa_r+0x43a>
 80066aa:	1e7b      	subs	r3, r7, #1
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	4620      	mov	r0, r4
 80066b0:	4b7d      	ldr	r3, [pc, #500]	@ (80068a8 <_dtoa_r+0x5c8>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	4629      	mov	r1, r5
 80066b6:	f7f9 ffbf 	bl	8000638 <__aeabi_dmul>
 80066ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066be:	9c00      	ldr	r4, [sp, #0]
 80066c0:	3601      	adds	r6, #1
 80066c2:	4630      	mov	r0, r6
 80066c4:	f7f9 ff4e 	bl	8000564 <__aeabi_i2d>
 80066c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066cc:	f7f9 ffb4 	bl	8000638 <__aeabi_dmul>
 80066d0:	4b76      	ldr	r3, [pc, #472]	@ (80068ac <_dtoa_r+0x5cc>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	f7f9 fdfa 	bl	80002cc <__adddf3>
 80066d8:	4605      	mov	r5, r0
 80066da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80066de:	2c00      	cmp	r4, #0
 80066e0:	f040 808d 	bne.w	80067fe <_dtoa_r+0x51e>
 80066e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066e8:	4b71      	ldr	r3, [pc, #452]	@ (80068b0 <_dtoa_r+0x5d0>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	f7f9 fdec 	bl	80002c8 <__aeabi_dsub>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066f8:	462a      	mov	r2, r5
 80066fa:	4633      	mov	r3, r6
 80066fc:	f7fa fa2c 	bl	8000b58 <__aeabi_dcmpgt>
 8006700:	2800      	cmp	r0, #0
 8006702:	f040 828b 	bne.w	8006c1c <_dtoa_r+0x93c>
 8006706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800670a:	462a      	mov	r2, r5
 800670c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006710:	f7fa fa04 	bl	8000b1c <__aeabi_dcmplt>
 8006714:	2800      	cmp	r0, #0
 8006716:	f040 8128 	bne.w	800696a <_dtoa_r+0x68a>
 800671a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800671e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006722:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006724:	2b00      	cmp	r3, #0
 8006726:	f2c0 815a 	blt.w	80069de <_dtoa_r+0x6fe>
 800672a:	2f0e      	cmp	r7, #14
 800672c:	f300 8157 	bgt.w	80069de <_dtoa_r+0x6fe>
 8006730:	4b5a      	ldr	r3, [pc, #360]	@ (800689c <_dtoa_r+0x5bc>)
 8006732:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006736:	ed93 7b00 	vldr	d7, [r3]
 800673a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800673c:	2b00      	cmp	r3, #0
 800673e:	ed8d 7b00 	vstr	d7, [sp]
 8006742:	da03      	bge.n	800674c <_dtoa_r+0x46c>
 8006744:	9b07      	ldr	r3, [sp, #28]
 8006746:	2b00      	cmp	r3, #0
 8006748:	f340 8101 	ble.w	800694e <_dtoa_r+0x66e>
 800674c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006750:	4656      	mov	r6, sl
 8006752:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006756:	4620      	mov	r0, r4
 8006758:	4629      	mov	r1, r5
 800675a:	f7fa f897 	bl	800088c <__aeabi_ddiv>
 800675e:	f7fa fa1b 	bl	8000b98 <__aeabi_d2iz>
 8006762:	4680      	mov	r8, r0
 8006764:	f7f9 fefe 	bl	8000564 <__aeabi_i2d>
 8006768:	e9dd 2300 	ldrd	r2, r3, [sp]
 800676c:	f7f9 ff64 	bl	8000638 <__aeabi_dmul>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4620      	mov	r0, r4
 8006776:	4629      	mov	r1, r5
 8006778:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800677c:	f7f9 fda4 	bl	80002c8 <__aeabi_dsub>
 8006780:	f806 4b01 	strb.w	r4, [r6], #1
 8006784:	9d07      	ldr	r5, [sp, #28]
 8006786:	eba6 040a 	sub.w	r4, r6, sl
 800678a:	42a5      	cmp	r5, r4
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	f040 8117 	bne.w	80069c2 <_dtoa_r+0x6e2>
 8006794:	f7f9 fd9a 	bl	80002cc <__adddf3>
 8006798:	e9dd 2300 	ldrd	r2, r3, [sp]
 800679c:	4604      	mov	r4, r0
 800679e:	460d      	mov	r5, r1
 80067a0:	f7fa f9da 	bl	8000b58 <__aeabi_dcmpgt>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	f040 80f9 	bne.w	800699c <_dtoa_r+0x6bc>
 80067aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067ae:	4620      	mov	r0, r4
 80067b0:	4629      	mov	r1, r5
 80067b2:	f7fa f9a9 	bl	8000b08 <__aeabi_dcmpeq>
 80067b6:	b118      	cbz	r0, 80067c0 <_dtoa_r+0x4e0>
 80067b8:	f018 0f01 	tst.w	r8, #1
 80067bc:	f040 80ee 	bne.w	800699c <_dtoa_r+0x6bc>
 80067c0:	4649      	mov	r1, r9
 80067c2:	4658      	mov	r0, fp
 80067c4:	f000 fc90 	bl	80070e8 <_Bfree>
 80067c8:	2300      	movs	r3, #0
 80067ca:	7033      	strb	r3, [r6, #0]
 80067cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80067ce:	3701      	adds	r7, #1
 80067d0:	601f      	str	r7, [r3, #0]
 80067d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 831d 	beq.w	8006e14 <_dtoa_r+0xb34>
 80067da:	601e      	str	r6, [r3, #0]
 80067dc:	e31a      	b.n	8006e14 <_dtoa_r+0xb34>
 80067de:	07e2      	lsls	r2, r4, #31
 80067e0:	d505      	bpl.n	80067ee <_dtoa_r+0x50e>
 80067e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80067e6:	f7f9 ff27 	bl	8000638 <__aeabi_dmul>
 80067ea:	3601      	adds	r6, #1
 80067ec:	2301      	movs	r3, #1
 80067ee:	1064      	asrs	r4, r4, #1
 80067f0:	3508      	adds	r5, #8
 80067f2:	e73f      	b.n	8006674 <_dtoa_r+0x394>
 80067f4:	2602      	movs	r6, #2
 80067f6:	e742      	b.n	800667e <_dtoa_r+0x39e>
 80067f8:	9c07      	ldr	r4, [sp, #28]
 80067fa:	9704      	str	r7, [sp, #16]
 80067fc:	e761      	b.n	80066c2 <_dtoa_r+0x3e2>
 80067fe:	4b27      	ldr	r3, [pc, #156]	@ (800689c <_dtoa_r+0x5bc>)
 8006800:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006802:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006806:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800680a:	4454      	add	r4, sl
 800680c:	2900      	cmp	r1, #0
 800680e:	d053      	beq.n	80068b8 <_dtoa_r+0x5d8>
 8006810:	4928      	ldr	r1, [pc, #160]	@ (80068b4 <_dtoa_r+0x5d4>)
 8006812:	2000      	movs	r0, #0
 8006814:	f7fa f83a 	bl	800088c <__aeabi_ddiv>
 8006818:	4633      	mov	r3, r6
 800681a:	462a      	mov	r2, r5
 800681c:	f7f9 fd54 	bl	80002c8 <__aeabi_dsub>
 8006820:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006824:	4656      	mov	r6, sl
 8006826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800682a:	f7fa f9b5 	bl	8000b98 <__aeabi_d2iz>
 800682e:	4605      	mov	r5, r0
 8006830:	f7f9 fe98 	bl	8000564 <__aeabi_i2d>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800683c:	f7f9 fd44 	bl	80002c8 <__aeabi_dsub>
 8006840:	3530      	adds	r5, #48	@ 0x30
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800684a:	f806 5b01 	strb.w	r5, [r6], #1
 800684e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006852:	f7fa f963 	bl	8000b1c <__aeabi_dcmplt>
 8006856:	2800      	cmp	r0, #0
 8006858:	d171      	bne.n	800693e <_dtoa_r+0x65e>
 800685a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800685e:	4911      	ldr	r1, [pc, #68]	@ (80068a4 <_dtoa_r+0x5c4>)
 8006860:	2000      	movs	r0, #0
 8006862:	f7f9 fd31 	bl	80002c8 <__aeabi_dsub>
 8006866:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800686a:	f7fa f957 	bl	8000b1c <__aeabi_dcmplt>
 800686e:	2800      	cmp	r0, #0
 8006870:	f040 8095 	bne.w	800699e <_dtoa_r+0x6be>
 8006874:	42a6      	cmp	r6, r4
 8006876:	f43f af50 	beq.w	800671a <_dtoa_r+0x43a>
 800687a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800687e:	4b0a      	ldr	r3, [pc, #40]	@ (80068a8 <_dtoa_r+0x5c8>)
 8006880:	2200      	movs	r2, #0
 8006882:	f7f9 fed9 	bl	8000638 <__aeabi_dmul>
 8006886:	4b08      	ldr	r3, [pc, #32]	@ (80068a8 <_dtoa_r+0x5c8>)
 8006888:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800688c:	2200      	movs	r2, #0
 800688e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006892:	f7f9 fed1 	bl	8000638 <__aeabi_dmul>
 8006896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800689a:	e7c4      	b.n	8006826 <_dtoa_r+0x546>
 800689c:	08008430 	.word	0x08008430
 80068a0:	08008408 	.word	0x08008408
 80068a4:	3ff00000 	.word	0x3ff00000
 80068a8:	40240000 	.word	0x40240000
 80068ac:	401c0000 	.word	0x401c0000
 80068b0:	40140000 	.word	0x40140000
 80068b4:	3fe00000 	.word	0x3fe00000
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	f7f9 febc 	bl	8000638 <__aeabi_dmul>
 80068c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80068c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80068c6:	4656      	mov	r6, sl
 80068c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068cc:	f7fa f964 	bl	8000b98 <__aeabi_d2iz>
 80068d0:	4605      	mov	r5, r0
 80068d2:	f7f9 fe47 	bl	8000564 <__aeabi_i2d>
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068de:	f7f9 fcf3 	bl	80002c8 <__aeabi_dsub>
 80068e2:	3530      	adds	r5, #48	@ 0x30
 80068e4:	f806 5b01 	strb.w	r5, [r6], #1
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	42a6      	cmp	r6, r4
 80068ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068f2:	f04f 0200 	mov.w	r2, #0
 80068f6:	d124      	bne.n	8006942 <_dtoa_r+0x662>
 80068f8:	4bac      	ldr	r3, [pc, #688]	@ (8006bac <_dtoa_r+0x8cc>)
 80068fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80068fe:	f7f9 fce5 	bl	80002cc <__adddf3>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800690a:	f7fa f925 	bl	8000b58 <__aeabi_dcmpgt>
 800690e:	2800      	cmp	r0, #0
 8006910:	d145      	bne.n	800699e <_dtoa_r+0x6be>
 8006912:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006916:	49a5      	ldr	r1, [pc, #660]	@ (8006bac <_dtoa_r+0x8cc>)
 8006918:	2000      	movs	r0, #0
 800691a:	f7f9 fcd5 	bl	80002c8 <__aeabi_dsub>
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006926:	f7fa f8f9 	bl	8000b1c <__aeabi_dcmplt>
 800692a:	2800      	cmp	r0, #0
 800692c:	f43f aef5 	beq.w	800671a <_dtoa_r+0x43a>
 8006930:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006932:	1e73      	subs	r3, r6, #1
 8006934:	9315      	str	r3, [sp, #84]	@ 0x54
 8006936:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800693a:	2b30      	cmp	r3, #48	@ 0x30
 800693c:	d0f8      	beq.n	8006930 <_dtoa_r+0x650>
 800693e:	9f04      	ldr	r7, [sp, #16]
 8006940:	e73e      	b.n	80067c0 <_dtoa_r+0x4e0>
 8006942:	4b9b      	ldr	r3, [pc, #620]	@ (8006bb0 <_dtoa_r+0x8d0>)
 8006944:	f7f9 fe78 	bl	8000638 <__aeabi_dmul>
 8006948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800694c:	e7bc      	b.n	80068c8 <_dtoa_r+0x5e8>
 800694e:	d10c      	bne.n	800696a <_dtoa_r+0x68a>
 8006950:	4b98      	ldr	r3, [pc, #608]	@ (8006bb4 <_dtoa_r+0x8d4>)
 8006952:	2200      	movs	r2, #0
 8006954:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006958:	f7f9 fe6e 	bl	8000638 <__aeabi_dmul>
 800695c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006960:	f7fa f8f0 	bl	8000b44 <__aeabi_dcmpge>
 8006964:	2800      	cmp	r0, #0
 8006966:	f000 8157 	beq.w	8006c18 <_dtoa_r+0x938>
 800696a:	2400      	movs	r4, #0
 800696c:	4625      	mov	r5, r4
 800696e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006970:	43db      	mvns	r3, r3
 8006972:	9304      	str	r3, [sp, #16]
 8006974:	4656      	mov	r6, sl
 8006976:	2700      	movs	r7, #0
 8006978:	4621      	mov	r1, r4
 800697a:	4658      	mov	r0, fp
 800697c:	f000 fbb4 	bl	80070e8 <_Bfree>
 8006980:	2d00      	cmp	r5, #0
 8006982:	d0dc      	beq.n	800693e <_dtoa_r+0x65e>
 8006984:	b12f      	cbz	r7, 8006992 <_dtoa_r+0x6b2>
 8006986:	42af      	cmp	r7, r5
 8006988:	d003      	beq.n	8006992 <_dtoa_r+0x6b2>
 800698a:	4639      	mov	r1, r7
 800698c:	4658      	mov	r0, fp
 800698e:	f000 fbab 	bl	80070e8 <_Bfree>
 8006992:	4629      	mov	r1, r5
 8006994:	4658      	mov	r0, fp
 8006996:	f000 fba7 	bl	80070e8 <_Bfree>
 800699a:	e7d0      	b.n	800693e <_dtoa_r+0x65e>
 800699c:	9704      	str	r7, [sp, #16]
 800699e:	4633      	mov	r3, r6
 80069a0:	461e      	mov	r6, r3
 80069a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069a6:	2a39      	cmp	r2, #57	@ 0x39
 80069a8:	d107      	bne.n	80069ba <_dtoa_r+0x6da>
 80069aa:	459a      	cmp	sl, r3
 80069ac:	d1f8      	bne.n	80069a0 <_dtoa_r+0x6c0>
 80069ae:	9a04      	ldr	r2, [sp, #16]
 80069b0:	3201      	adds	r2, #1
 80069b2:	9204      	str	r2, [sp, #16]
 80069b4:	2230      	movs	r2, #48	@ 0x30
 80069b6:	f88a 2000 	strb.w	r2, [sl]
 80069ba:	781a      	ldrb	r2, [r3, #0]
 80069bc:	3201      	adds	r2, #1
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	e7bd      	b.n	800693e <_dtoa_r+0x65e>
 80069c2:	4b7b      	ldr	r3, [pc, #492]	@ (8006bb0 <_dtoa_r+0x8d0>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	f7f9 fe37 	bl	8000638 <__aeabi_dmul>
 80069ca:	2200      	movs	r2, #0
 80069cc:	2300      	movs	r3, #0
 80069ce:	4604      	mov	r4, r0
 80069d0:	460d      	mov	r5, r1
 80069d2:	f7fa f899 	bl	8000b08 <__aeabi_dcmpeq>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f43f aebb 	beq.w	8006752 <_dtoa_r+0x472>
 80069dc:	e6f0      	b.n	80067c0 <_dtoa_r+0x4e0>
 80069de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80069e0:	2a00      	cmp	r2, #0
 80069e2:	f000 80db 	beq.w	8006b9c <_dtoa_r+0x8bc>
 80069e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069e8:	2a01      	cmp	r2, #1
 80069ea:	f300 80bf 	bgt.w	8006b6c <_dtoa_r+0x88c>
 80069ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80069f0:	2a00      	cmp	r2, #0
 80069f2:	f000 80b7 	beq.w	8006b64 <_dtoa_r+0x884>
 80069f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80069fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80069fc:	4646      	mov	r6, r8
 80069fe:	9a08      	ldr	r2, [sp, #32]
 8006a00:	2101      	movs	r1, #1
 8006a02:	441a      	add	r2, r3
 8006a04:	4658      	mov	r0, fp
 8006a06:	4498      	add	r8, r3
 8006a08:	9208      	str	r2, [sp, #32]
 8006a0a:	f000 fc21 	bl	8007250 <__i2b>
 8006a0e:	4605      	mov	r5, r0
 8006a10:	b15e      	cbz	r6, 8006a2a <_dtoa_r+0x74a>
 8006a12:	9b08      	ldr	r3, [sp, #32]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dd08      	ble.n	8006a2a <_dtoa_r+0x74a>
 8006a18:	42b3      	cmp	r3, r6
 8006a1a:	9a08      	ldr	r2, [sp, #32]
 8006a1c:	bfa8      	it	ge
 8006a1e:	4633      	movge	r3, r6
 8006a20:	eba8 0803 	sub.w	r8, r8, r3
 8006a24:	1af6      	subs	r6, r6, r3
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	9308      	str	r3, [sp, #32]
 8006a2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a2c:	b1f3      	cbz	r3, 8006a6c <_dtoa_r+0x78c>
 8006a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80b7 	beq.w	8006ba4 <_dtoa_r+0x8c4>
 8006a36:	b18c      	cbz	r4, 8006a5c <_dtoa_r+0x77c>
 8006a38:	4629      	mov	r1, r5
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	4658      	mov	r0, fp
 8006a3e:	f000 fcc7 	bl	80073d0 <__pow5mult>
 8006a42:	464a      	mov	r2, r9
 8006a44:	4601      	mov	r1, r0
 8006a46:	4605      	mov	r5, r0
 8006a48:	4658      	mov	r0, fp
 8006a4a:	f000 fc17 	bl	800727c <__multiply>
 8006a4e:	4649      	mov	r1, r9
 8006a50:	9004      	str	r0, [sp, #16]
 8006a52:	4658      	mov	r0, fp
 8006a54:	f000 fb48 	bl	80070e8 <_Bfree>
 8006a58:	9b04      	ldr	r3, [sp, #16]
 8006a5a:	4699      	mov	r9, r3
 8006a5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a5e:	1b1a      	subs	r2, r3, r4
 8006a60:	d004      	beq.n	8006a6c <_dtoa_r+0x78c>
 8006a62:	4649      	mov	r1, r9
 8006a64:	4658      	mov	r0, fp
 8006a66:	f000 fcb3 	bl	80073d0 <__pow5mult>
 8006a6a:	4681      	mov	r9, r0
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	4658      	mov	r0, fp
 8006a70:	f000 fbee 	bl	8007250 <__i2b>
 8006a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a76:	4604      	mov	r4, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 81cf 	beq.w	8006e1c <_dtoa_r+0xb3c>
 8006a7e:	461a      	mov	r2, r3
 8006a80:	4601      	mov	r1, r0
 8006a82:	4658      	mov	r0, fp
 8006a84:	f000 fca4 	bl	80073d0 <__pow5mult>
 8006a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	f300 8095 	bgt.w	8006bbc <_dtoa_r+0x8dc>
 8006a92:	9b02      	ldr	r3, [sp, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f040 8087 	bne.w	8006ba8 <_dtoa_r+0x8c8>
 8006a9a:	9b03      	ldr	r3, [sp, #12]
 8006a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f040 8089 	bne.w	8006bb8 <_dtoa_r+0x8d8>
 8006aa6:	9b03      	ldr	r3, [sp, #12]
 8006aa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006aac:	0d1b      	lsrs	r3, r3, #20
 8006aae:	051b      	lsls	r3, r3, #20
 8006ab0:	b12b      	cbz	r3, 8006abe <_dtoa_r+0x7de>
 8006ab2:	9b08      	ldr	r3, [sp, #32]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	9308      	str	r3, [sp, #32]
 8006ab8:	f108 0801 	add.w	r8, r8, #1
 8006abc:	2301      	movs	r3, #1
 8006abe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ac0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 81b0 	beq.w	8006e28 <_dtoa_r+0xb48>
 8006ac8:	6923      	ldr	r3, [r4, #16]
 8006aca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ace:	6918      	ldr	r0, [r3, #16]
 8006ad0:	f000 fb72 	bl	80071b8 <__hi0bits>
 8006ad4:	f1c0 0020 	rsb	r0, r0, #32
 8006ad8:	9b08      	ldr	r3, [sp, #32]
 8006ada:	4418      	add	r0, r3
 8006adc:	f010 001f 	ands.w	r0, r0, #31
 8006ae0:	d077      	beq.n	8006bd2 <_dtoa_r+0x8f2>
 8006ae2:	f1c0 0320 	rsb	r3, r0, #32
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	dd6b      	ble.n	8006bc2 <_dtoa_r+0x8e2>
 8006aea:	9b08      	ldr	r3, [sp, #32]
 8006aec:	f1c0 001c 	rsb	r0, r0, #28
 8006af0:	4403      	add	r3, r0
 8006af2:	4480      	add	r8, r0
 8006af4:	4406      	add	r6, r0
 8006af6:	9308      	str	r3, [sp, #32]
 8006af8:	f1b8 0f00 	cmp.w	r8, #0
 8006afc:	dd05      	ble.n	8006b0a <_dtoa_r+0x82a>
 8006afe:	4649      	mov	r1, r9
 8006b00:	4642      	mov	r2, r8
 8006b02:	4658      	mov	r0, fp
 8006b04:	f000 fcbe 	bl	8007484 <__lshift>
 8006b08:	4681      	mov	r9, r0
 8006b0a:	9b08      	ldr	r3, [sp, #32]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	dd05      	ble.n	8006b1c <_dtoa_r+0x83c>
 8006b10:	4621      	mov	r1, r4
 8006b12:	461a      	mov	r2, r3
 8006b14:	4658      	mov	r0, fp
 8006b16:	f000 fcb5 	bl	8007484 <__lshift>
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d059      	beq.n	8006bd6 <_dtoa_r+0x8f6>
 8006b22:	4621      	mov	r1, r4
 8006b24:	4648      	mov	r0, r9
 8006b26:	f000 fd19 	bl	800755c <__mcmp>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	da53      	bge.n	8006bd6 <_dtoa_r+0x8f6>
 8006b2e:	1e7b      	subs	r3, r7, #1
 8006b30:	9304      	str	r3, [sp, #16]
 8006b32:	4649      	mov	r1, r9
 8006b34:	2300      	movs	r3, #0
 8006b36:	220a      	movs	r2, #10
 8006b38:	4658      	mov	r0, fp
 8006b3a:	f000 faf7 	bl	800712c <__multadd>
 8006b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b40:	4681      	mov	r9, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 8172 	beq.w	8006e2c <_dtoa_r+0xb4c>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	220a      	movs	r2, #10
 8006b4e:	4658      	mov	r0, fp
 8006b50:	f000 faec 	bl	800712c <__multadd>
 8006b54:	9b00      	ldr	r3, [sp, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	4605      	mov	r5, r0
 8006b5a:	dc67      	bgt.n	8006c2c <_dtoa_r+0x94c>
 8006b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	dc41      	bgt.n	8006be6 <_dtoa_r+0x906>
 8006b62:	e063      	b.n	8006c2c <_dtoa_r+0x94c>
 8006b64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006b66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006b6a:	e746      	b.n	80069fa <_dtoa_r+0x71a>
 8006b6c:	9b07      	ldr	r3, [sp, #28]
 8006b6e:	1e5c      	subs	r4, r3, #1
 8006b70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b72:	42a3      	cmp	r3, r4
 8006b74:	bfbf      	itttt	lt
 8006b76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006b78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006b7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006b7c:	1ae3      	sublt	r3, r4, r3
 8006b7e:	bfb4      	ite	lt
 8006b80:	18d2      	addlt	r2, r2, r3
 8006b82:	1b1c      	subge	r4, r3, r4
 8006b84:	9b07      	ldr	r3, [sp, #28]
 8006b86:	bfbc      	itt	lt
 8006b88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006b8a:	2400      	movlt	r4, #0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	bfb5      	itete	lt
 8006b90:	eba8 0603 	sublt.w	r6, r8, r3
 8006b94:	9b07      	ldrge	r3, [sp, #28]
 8006b96:	2300      	movlt	r3, #0
 8006b98:	4646      	movge	r6, r8
 8006b9a:	e730      	b.n	80069fe <_dtoa_r+0x71e>
 8006b9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006b9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006ba0:	4646      	mov	r6, r8
 8006ba2:	e735      	b.n	8006a10 <_dtoa_r+0x730>
 8006ba4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ba6:	e75c      	b.n	8006a62 <_dtoa_r+0x782>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e788      	b.n	8006abe <_dtoa_r+0x7de>
 8006bac:	3fe00000 	.word	0x3fe00000
 8006bb0:	40240000 	.word	0x40240000
 8006bb4:	40140000 	.word	0x40140000
 8006bb8:	9b02      	ldr	r3, [sp, #8]
 8006bba:	e780      	b.n	8006abe <_dtoa_r+0x7de>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bc0:	e782      	b.n	8006ac8 <_dtoa_r+0x7e8>
 8006bc2:	d099      	beq.n	8006af8 <_dtoa_r+0x818>
 8006bc4:	9a08      	ldr	r2, [sp, #32]
 8006bc6:	331c      	adds	r3, #28
 8006bc8:	441a      	add	r2, r3
 8006bca:	4498      	add	r8, r3
 8006bcc:	441e      	add	r6, r3
 8006bce:	9208      	str	r2, [sp, #32]
 8006bd0:	e792      	b.n	8006af8 <_dtoa_r+0x818>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	e7f6      	b.n	8006bc4 <_dtoa_r+0x8e4>
 8006bd6:	9b07      	ldr	r3, [sp, #28]
 8006bd8:	9704      	str	r7, [sp, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	dc20      	bgt.n	8006c20 <_dtoa_r+0x940>
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	dd1e      	ble.n	8006c24 <_dtoa_r+0x944>
 8006be6:	9b00      	ldr	r3, [sp, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f47f aec0 	bne.w	800696e <_dtoa_r+0x68e>
 8006bee:	4621      	mov	r1, r4
 8006bf0:	2205      	movs	r2, #5
 8006bf2:	4658      	mov	r0, fp
 8006bf4:	f000 fa9a 	bl	800712c <__multadd>
 8006bf8:	4601      	mov	r1, r0
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4648      	mov	r0, r9
 8006bfe:	f000 fcad 	bl	800755c <__mcmp>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f77f aeb3 	ble.w	800696e <_dtoa_r+0x68e>
 8006c08:	4656      	mov	r6, sl
 8006c0a:	2331      	movs	r3, #49	@ 0x31
 8006c0c:	f806 3b01 	strb.w	r3, [r6], #1
 8006c10:	9b04      	ldr	r3, [sp, #16]
 8006c12:	3301      	adds	r3, #1
 8006c14:	9304      	str	r3, [sp, #16]
 8006c16:	e6ae      	b.n	8006976 <_dtoa_r+0x696>
 8006c18:	9c07      	ldr	r4, [sp, #28]
 8006c1a:	9704      	str	r7, [sp, #16]
 8006c1c:	4625      	mov	r5, r4
 8006c1e:	e7f3      	b.n	8006c08 <_dtoa_r+0x928>
 8006c20:	9b07      	ldr	r3, [sp, #28]
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 8104 	beq.w	8006e34 <_dtoa_r+0xb54>
 8006c2c:	2e00      	cmp	r6, #0
 8006c2e:	dd05      	ble.n	8006c3c <_dtoa_r+0x95c>
 8006c30:	4629      	mov	r1, r5
 8006c32:	4632      	mov	r2, r6
 8006c34:	4658      	mov	r0, fp
 8006c36:	f000 fc25 	bl	8007484 <__lshift>
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d05a      	beq.n	8006cf8 <_dtoa_r+0xa18>
 8006c42:	6869      	ldr	r1, [r5, #4]
 8006c44:	4658      	mov	r0, fp
 8006c46:	f000 fa0f 	bl	8007068 <_Balloc>
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	b928      	cbnz	r0, 8006c5a <_dtoa_r+0x97a>
 8006c4e:	4b84      	ldr	r3, [pc, #528]	@ (8006e60 <_dtoa_r+0xb80>)
 8006c50:	4602      	mov	r2, r0
 8006c52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006c56:	f7ff bb5a 	b.w	800630e <_dtoa_r+0x2e>
 8006c5a:	692a      	ldr	r2, [r5, #16]
 8006c5c:	3202      	adds	r2, #2
 8006c5e:	0092      	lsls	r2, r2, #2
 8006c60:	f105 010c 	add.w	r1, r5, #12
 8006c64:	300c      	adds	r0, #12
 8006c66:	f000 ffaf 	bl	8007bc8 <memcpy>
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	4658      	mov	r0, fp
 8006c70:	f000 fc08 	bl	8007484 <__lshift>
 8006c74:	f10a 0301 	add.w	r3, sl, #1
 8006c78:	9307      	str	r3, [sp, #28]
 8006c7a:	9b00      	ldr	r3, [sp, #0]
 8006c7c:	4453      	add	r3, sl
 8006c7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c80:	9b02      	ldr	r3, [sp, #8]
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	462f      	mov	r7, r5
 8006c88:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	9b07      	ldr	r3, [sp, #28]
 8006c8e:	4621      	mov	r1, r4
 8006c90:	3b01      	subs	r3, #1
 8006c92:	4648      	mov	r0, r9
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	f7ff fa98 	bl	80061ca <quorem>
 8006c9a:	4639      	mov	r1, r7
 8006c9c:	9002      	str	r0, [sp, #8]
 8006c9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ca2:	4648      	mov	r0, r9
 8006ca4:	f000 fc5a 	bl	800755c <__mcmp>
 8006ca8:	462a      	mov	r2, r5
 8006caa:	9008      	str	r0, [sp, #32]
 8006cac:	4621      	mov	r1, r4
 8006cae:	4658      	mov	r0, fp
 8006cb0:	f000 fc70 	bl	8007594 <__mdiff>
 8006cb4:	68c2      	ldr	r2, [r0, #12]
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	bb02      	cbnz	r2, 8006cfc <_dtoa_r+0xa1c>
 8006cba:	4601      	mov	r1, r0
 8006cbc:	4648      	mov	r0, r9
 8006cbe:	f000 fc4d 	bl	800755c <__mcmp>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	4658      	mov	r0, fp
 8006cc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006cca:	f000 fa0d 	bl	80070e8 <_Bfree>
 8006cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cd2:	9e07      	ldr	r6, [sp, #28]
 8006cd4:	ea43 0102 	orr.w	r1, r3, r2
 8006cd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cda:	4319      	orrs	r1, r3
 8006cdc:	d110      	bne.n	8006d00 <_dtoa_r+0xa20>
 8006cde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ce2:	d029      	beq.n	8006d38 <_dtoa_r+0xa58>
 8006ce4:	9b08      	ldr	r3, [sp, #32]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	dd02      	ble.n	8006cf0 <_dtoa_r+0xa10>
 8006cea:	9b02      	ldr	r3, [sp, #8]
 8006cec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006cf0:	9b00      	ldr	r3, [sp, #0]
 8006cf2:	f883 8000 	strb.w	r8, [r3]
 8006cf6:	e63f      	b.n	8006978 <_dtoa_r+0x698>
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	e7bb      	b.n	8006c74 <_dtoa_r+0x994>
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	e7e1      	b.n	8006cc4 <_dtoa_r+0x9e4>
 8006d00:	9b08      	ldr	r3, [sp, #32]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	db04      	blt.n	8006d10 <_dtoa_r+0xa30>
 8006d06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	d120      	bne.n	8006d52 <_dtoa_r+0xa72>
 8006d10:	2a00      	cmp	r2, #0
 8006d12:	dded      	ble.n	8006cf0 <_dtoa_r+0xa10>
 8006d14:	4649      	mov	r1, r9
 8006d16:	2201      	movs	r2, #1
 8006d18:	4658      	mov	r0, fp
 8006d1a:	f000 fbb3 	bl	8007484 <__lshift>
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4681      	mov	r9, r0
 8006d22:	f000 fc1b 	bl	800755c <__mcmp>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	dc03      	bgt.n	8006d32 <_dtoa_r+0xa52>
 8006d2a:	d1e1      	bne.n	8006cf0 <_dtoa_r+0xa10>
 8006d2c:	f018 0f01 	tst.w	r8, #1
 8006d30:	d0de      	beq.n	8006cf0 <_dtoa_r+0xa10>
 8006d32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006d36:	d1d8      	bne.n	8006cea <_dtoa_r+0xa0a>
 8006d38:	9a00      	ldr	r2, [sp, #0]
 8006d3a:	2339      	movs	r3, #57	@ 0x39
 8006d3c:	7013      	strb	r3, [r2, #0]
 8006d3e:	4633      	mov	r3, r6
 8006d40:	461e      	mov	r6, r3
 8006d42:	3b01      	subs	r3, #1
 8006d44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006d48:	2a39      	cmp	r2, #57	@ 0x39
 8006d4a:	d052      	beq.n	8006df2 <_dtoa_r+0xb12>
 8006d4c:	3201      	adds	r2, #1
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	e612      	b.n	8006978 <_dtoa_r+0x698>
 8006d52:	2a00      	cmp	r2, #0
 8006d54:	dd07      	ble.n	8006d66 <_dtoa_r+0xa86>
 8006d56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006d5a:	d0ed      	beq.n	8006d38 <_dtoa_r+0xa58>
 8006d5c:	9a00      	ldr	r2, [sp, #0]
 8006d5e:	f108 0301 	add.w	r3, r8, #1
 8006d62:	7013      	strb	r3, [r2, #0]
 8006d64:	e608      	b.n	8006978 <_dtoa_r+0x698>
 8006d66:	9b07      	ldr	r3, [sp, #28]
 8006d68:	9a07      	ldr	r2, [sp, #28]
 8006d6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006d6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d028      	beq.n	8006dc6 <_dtoa_r+0xae6>
 8006d74:	4649      	mov	r1, r9
 8006d76:	2300      	movs	r3, #0
 8006d78:	220a      	movs	r2, #10
 8006d7a:	4658      	mov	r0, fp
 8006d7c:	f000 f9d6 	bl	800712c <__multadd>
 8006d80:	42af      	cmp	r7, r5
 8006d82:	4681      	mov	r9, r0
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	f04f 020a 	mov.w	r2, #10
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	4658      	mov	r0, fp
 8006d90:	d107      	bne.n	8006da2 <_dtoa_r+0xac2>
 8006d92:	f000 f9cb 	bl	800712c <__multadd>
 8006d96:	4607      	mov	r7, r0
 8006d98:	4605      	mov	r5, r0
 8006d9a:	9b07      	ldr	r3, [sp, #28]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	9307      	str	r3, [sp, #28]
 8006da0:	e774      	b.n	8006c8c <_dtoa_r+0x9ac>
 8006da2:	f000 f9c3 	bl	800712c <__multadd>
 8006da6:	4629      	mov	r1, r5
 8006da8:	4607      	mov	r7, r0
 8006daa:	2300      	movs	r3, #0
 8006dac:	220a      	movs	r2, #10
 8006dae:	4658      	mov	r0, fp
 8006db0:	f000 f9bc 	bl	800712c <__multadd>
 8006db4:	4605      	mov	r5, r0
 8006db6:	e7f0      	b.n	8006d9a <_dtoa_r+0xaba>
 8006db8:	9b00      	ldr	r3, [sp, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	bfcc      	ite	gt
 8006dbe:	461e      	movgt	r6, r3
 8006dc0:	2601      	movle	r6, #1
 8006dc2:	4456      	add	r6, sl
 8006dc4:	2700      	movs	r7, #0
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	2201      	movs	r2, #1
 8006dca:	4658      	mov	r0, fp
 8006dcc:	f000 fb5a 	bl	8007484 <__lshift>
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	4681      	mov	r9, r0
 8006dd4:	f000 fbc2 	bl	800755c <__mcmp>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	dcb0      	bgt.n	8006d3e <_dtoa_r+0xa5e>
 8006ddc:	d102      	bne.n	8006de4 <_dtoa_r+0xb04>
 8006dde:	f018 0f01 	tst.w	r8, #1
 8006de2:	d1ac      	bne.n	8006d3e <_dtoa_r+0xa5e>
 8006de4:	4633      	mov	r3, r6
 8006de6:	461e      	mov	r6, r3
 8006de8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dec:	2a30      	cmp	r2, #48	@ 0x30
 8006dee:	d0fa      	beq.n	8006de6 <_dtoa_r+0xb06>
 8006df0:	e5c2      	b.n	8006978 <_dtoa_r+0x698>
 8006df2:	459a      	cmp	sl, r3
 8006df4:	d1a4      	bne.n	8006d40 <_dtoa_r+0xa60>
 8006df6:	9b04      	ldr	r3, [sp, #16]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	9304      	str	r3, [sp, #16]
 8006dfc:	2331      	movs	r3, #49	@ 0x31
 8006dfe:	f88a 3000 	strb.w	r3, [sl]
 8006e02:	e5b9      	b.n	8006978 <_dtoa_r+0x698>
 8006e04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006e64 <_dtoa_r+0xb84>
 8006e0a:	b11b      	cbz	r3, 8006e14 <_dtoa_r+0xb34>
 8006e0c:	f10a 0308 	add.w	r3, sl, #8
 8006e10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	4650      	mov	r0, sl
 8006e16:	b019      	add	sp, #100	@ 0x64
 8006e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	f77f ae37 	ble.w	8006a92 <_dtoa_r+0x7b2>
 8006e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e26:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e28:	2001      	movs	r0, #1
 8006e2a:	e655      	b.n	8006ad8 <_dtoa_r+0x7f8>
 8006e2c:	9b00      	ldr	r3, [sp, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f77f aed6 	ble.w	8006be0 <_dtoa_r+0x900>
 8006e34:	4656      	mov	r6, sl
 8006e36:	4621      	mov	r1, r4
 8006e38:	4648      	mov	r0, r9
 8006e3a:	f7ff f9c6 	bl	80061ca <quorem>
 8006e3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e42:	f806 8b01 	strb.w	r8, [r6], #1
 8006e46:	9b00      	ldr	r3, [sp, #0]
 8006e48:	eba6 020a 	sub.w	r2, r6, sl
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	ddb3      	ble.n	8006db8 <_dtoa_r+0xad8>
 8006e50:	4649      	mov	r1, r9
 8006e52:	2300      	movs	r3, #0
 8006e54:	220a      	movs	r2, #10
 8006e56:	4658      	mov	r0, fp
 8006e58:	f000 f968 	bl	800712c <__multadd>
 8006e5c:	4681      	mov	r9, r0
 8006e5e:	e7ea      	b.n	8006e36 <_dtoa_r+0xb56>
 8006e60:	0800838c 	.word	0x0800838c
 8006e64:	08008310 	.word	0x08008310

08006e68 <_free_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	d041      	beq.n	8006ef4 <_free_r+0x8c>
 8006e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e74:	1f0c      	subs	r4, r1, #4
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	bfb8      	it	lt
 8006e7a:	18e4      	addlt	r4, r4, r3
 8006e7c:	f000 f8e8 	bl	8007050 <__malloc_lock>
 8006e80:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef8 <_free_r+0x90>)
 8006e82:	6813      	ldr	r3, [r2, #0]
 8006e84:	b933      	cbnz	r3, 8006e94 <_free_r+0x2c>
 8006e86:	6063      	str	r3, [r4, #4]
 8006e88:	6014      	str	r4, [r2, #0]
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e90:	f000 b8e4 	b.w	800705c <__malloc_unlock>
 8006e94:	42a3      	cmp	r3, r4
 8006e96:	d908      	bls.n	8006eaa <_free_r+0x42>
 8006e98:	6820      	ldr	r0, [r4, #0]
 8006e9a:	1821      	adds	r1, r4, r0
 8006e9c:	428b      	cmp	r3, r1
 8006e9e:	bf01      	itttt	eq
 8006ea0:	6819      	ldreq	r1, [r3, #0]
 8006ea2:	685b      	ldreq	r3, [r3, #4]
 8006ea4:	1809      	addeq	r1, r1, r0
 8006ea6:	6021      	streq	r1, [r4, #0]
 8006ea8:	e7ed      	b.n	8006e86 <_free_r+0x1e>
 8006eaa:	461a      	mov	r2, r3
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	b10b      	cbz	r3, 8006eb4 <_free_r+0x4c>
 8006eb0:	42a3      	cmp	r3, r4
 8006eb2:	d9fa      	bls.n	8006eaa <_free_r+0x42>
 8006eb4:	6811      	ldr	r1, [r2, #0]
 8006eb6:	1850      	adds	r0, r2, r1
 8006eb8:	42a0      	cmp	r0, r4
 8006eba:	d10b      	bne.n	8006ed4 <_free_r+0x6c>
 8006ebc:	6820      	ldr	r0, [r4, #0]
 8006ebe:	4401      	add	r1, r0
 8006ec0:	1850      	adds	r0, r2, r1
 8006ec2:	4283      	cmp	r3, r0
 8006ec4:	6011      	str	r1, [r2, #0]
 8006ec6:	d1e0      	bne.n	8006e8a <_free_r+0x22>
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	6053      	str	r3, [r2, #4]
 8006ece:	4408      	add	r0, r1
 8006ed0:	6010      	str	r0, [r2, #0]
 8006ed2:	e7da      	b.n	8006e8a <_free_r+0x22>
 8006ed4:	d902      	bls.n	8006edc <_free_r+0x74>
 8006ed6:	230c      	movs	r3, #12
 8006ed8:	602b      	str	r3, [r5, #0]
 8006eda:	e7d6      	b.n	8006e8a <_free_r+0x22>
 8006edc:	6820      	ldr	r0, [r4, #0]
 8006ede:	1821      	adds	r1, r4, r0
 8006ee0:	428b      	cmp	r3, r1
 8006ee2:	bf04      	itt	eq
 8006ee4:	6819      	ldreq	r1, [r3, #0]
 8006ee6:	685b      	ldreq	r3, [r3, #4]
 8006ee8:	6063      	str	r3, [r4, #4]
 8006eea:	bf04      	itt	eq
 8006eec:	1809      	addeq	r1, r1, r0
 8006eee:	6021      	streq	r1, [r4, #0]
 8006ef0:	6054      	str	r4, [r2, #4]
 8006ef2:	e7ca      	b.n	8006e8a <_free_r+0x22>
 8006ef4:	bd38      	pop	{r3, r4, r5, pc}
 8006ef6:	bf00      	nop
 8006ef8:	200004a0 	.word	0x200004a0

08006efc <malloc>:
 8006efc:	4b02      	ldr	r3, [pc, #8]	@ (8006f08 <malloc+0xc>)
 8006efe:	4601      	mov	r1, r0
 8006f00:	6818      	ldr	r0, [r3, #0]
 8006f02:	f000 b825 	b.w	8006f50 <_malloc_r>
 8006f06:	bf00      	nop
 8006f08:	2000001c 	.word	0x2000001c

08006f0c <sbrk_aligned>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	4e0f      	ldr	r6, [pc, #60]	@ (8006f4c <sbrk_aligned+0x40>)
 8006f10:	460c      	mov	r4, r1
 8006f12:	6831      	ldr	r1, [r6, #0]
 8006f14:	4605      	mov	r5, r0
 8006f16:	b911      	cbnz	r1, 8006f1e <sbrk_aligned+0x12>
 8006f18:	f000 fe46 	bl	8007ba8 <_sbrk_r>
 8006f1c:	6030      	str	r0, [r6, #0]
 8006f1e:	4621      	mov	r1, r4
 8006f20:	4628      	mov	r0, r5
 8006f22:	f000 fe41 	bl	8007ba8 <_sbrk_r>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	d103      	bne.n	8006f32 <sbrk_aligned+0x26>
 8006f2a:	f04f 34ff 	mov.w	r4, #4294967295
 8006f2e:	4620      	mov	r0, r4
 8006f30:	bd70      	pop	{r4, r5, r6, pc}
 8006f32:	1cc4      	adds	r4, r0, #3
 8006f34:	f024 0403 	bic.w	r4, r4, #3
 8006f38:	42a0      	cmp	r0, r4
 8006f3a:	d0f8      	beq.n	8006f2e <sbrk_aligned+0x22>
 8006f3c:	1a21      	subs	r1, r4, r0
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f000 fe32 	bl	8007ba8 <_sbrk_r>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d1f2      	bne.n	8006f2e <sbrk_aligned+0x22>
 8006f48:	e7ef      	b.n	8006f2a <sbrk_aligned+0x1e>
 8006f4a:	bf00      	nop
 8006f4c:	2000049c 	.word	0x2000049c

08006f50 <_malloc_r>:
 8006f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f54:	1ccd      	adds	r5, r1, #3
 8006f56:	f025 0503 	bic.w	r5, r5, #3
 8006f5a:	3508      	adds	r5, #8
 8006f5c:	2d0c      	cmp	r5, #12
 8006f5e:	bf38      	it	cc
 8006f60:	250c      	movcc	r5, #12
 8006f62:	2d00      	cmp	r5, #0
 8006f64:	4606      	mov	r6, r0
 8006f66:	db01      	blt.n	8006f6c <_malloc_r+0x1c>
 8006f68:	42a9      	cmp	r1, r5
 8006f6a:	d904      	bls.n	8006f76 <_malloc_r+0x26>
 8006f6c:	230c      	movs	r3, #12
 8006f6e:	6033      	str	r3, [r6, #0]
 8006f70:	2000      	movs	r0, #0
 8006f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800704c <_malloc_r+0xfc>
 8006f7a:	f000 f869 	bl	8007050 <__malloc_lock>
 8006f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006f82:	461c      	mov	r4, r3
 8006f84:	bb44      	cbnz	r4, 8006fd8 <_malloc_r+0x88>
 8006f86:	4629      	mov	r1, r5
 8006f88:	4630      	mov	r0, r6
 8006f8a:	f7ff ffbf 	bl	8006f0c <sbrk_aligned>
 8006f8e:	1c43      	adds	r3, r0, #1
 8006f90:	4604      	mov	r4, r0
 8006f92:	d158      	bne.n	8007046 <_malloc_r+0xf6>
 8006f94:	f8d8 4000 	ldr.w	r4, [r8]
 8006f98:	4627      	mov	r7, r4
 8006f9a:	2f00      	cmp	r7, #0
 8006f9c:	d143      	bne.n	8007026 <_malloc_r+0xd6>
 8006f9e:	2c00      	cmp	r4, #0
 8006fa0:	d04b      	beq.n	800703a <_malloc_r+0xea>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	eb04 0903 	add.w	r9, r4, r3
 8006fac:	f000 fdfc 	bl	8007ba8 <_sbrk_r>
 8006fb0:	4581      	cmp	r9, r0
 8006fb2:	d142      	bne.n	800703a <_malloc_r+0xea>
 8006fb4:	6821      	ldr	r1, [r4, #0]
 8006fb6:	1a6d      	subs	r5, r5, r1
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7ff ffa6 	bl	8006f0c <sbrk_aligned>
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d03a      	beq.n	800703a <_malloc_r+0xea>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	442b      	add	r3, r5
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	f8d8 3000 	ldr.w	r3, [r8]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	bb62      	cbnz	r2, 800702c <_malloc_r+0xdc>
 8006fd2:	f8c8 7000 	str.w	r7, [r8]
 8006fd6:	e00f      	b.n	8006ff8 <_malloc_r+0xa8>
 8006fd8:	6822      	ldr	r2, [r4, #0]
 8006fda:	1b52      	subs	r2, r2, r5
 8006fdc:	d420      	bmi.n	8007020 <_malloc_r+0xd0>
 8006fde:	2a0b      	cmp	r2, #11
 8006fe0:	d917      	bls.n	8007012 <_malloc_r+0xc2>
 8006fe2:	1961      	adds	r1, r4, r5
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	6025      	str	r5, [r4, #0]
 8006fe8:	bf18      	it	ne
 8006fea:	6059      	strne	r1, [r3, #4]
 8006fec:	6863      	ldr	r3, [r4, #4]
 8006fee:	bf08      	it	eq
 8006ff0:	f8c8 1000 	streq.w	r1, [r8]
 8006ff4:	5162      	str	r2, [r4, r5]
 8006ff6:	604b      	str	r3, [r1, #4]
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f000 f82f 	bl	800705c <__malloc_unlock>
 8006ffe:	f104 000b 	add.w	r0, r4, #11
 8007002:	1d23      	adds	r3, r4, #4
 8007004:	f020 0007 	bic.w	r0, r0, #7
 8007008:	1ac2      	subs	r2, r0, r3
 800700a:	bf1c      	itt	ne
 800700c:	1a1b      	subne	r3, r3, r0
 800700e:	50a3      	strne	r3, [r4, r2]
 8007010:	e7af      	b.n	8006f72 <_malloc_r+0x22>
 8007012:	6862      	ldr	r2, [r4, #4]
 8007014:	42a3      	cmp	r3, r4
 8007016:	bf0c      	ite	eq
 8007018:	f8c8 2000 	streq.w	r2, [r8]
 800701c:	605a      	strne	r2, [r3, #4]
 800701e:	e7eb      	b.n	8006ff8 <_malloc_r+0xa8>
 8007020:	4623      	mov	r3, r4
 8007022:	6864      	ldr	r4, [r4, #4]
 8007024:	e7ae      	b.n	8006f84 <_malloc_r+0x34>
 8007026:	463c      	mov	r4, r7
 8007028:	687f      	ldr	r7, [r7, #4]
 800702a:	e7b6      	b.n	8006f9a <_malloc_r+0x4a>
 800702c:	461a      	mov	r2, r3
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	42a3      	cmp	r3, r4
 8007032:	d1fb      	bne.n	800702c <_malloc_r+0xdc>
 8007034:	2300      	movs	r3, #0
 8007036:	6053      	str	r3, [r2, #4]
 8007038:	e7de      	b.n	8006ff8 <_malloc_r+0xa8>
 800703a:	230c      	movs	r3, #12
 800703c:	6033      	str	r3, [r6, #0]
 800703e:	4630      	mov	r0, r6
 8007040:	f000 f80c 	bl	800705c <__malloc_unlock>
 8007044:	e794      	b.n	8006f70 <_malloc_r+0x20>
 8007046:	6005      	str	r5, [r0, #0]
 8007048:	e7d6      	b.n	8006ff8 <_malloc_r+0xa8>
 800704a:	bf00      	nop
 800704c:	200004a0 	.word	0x200004a0

08007050 <__malloc_lock>:
 8007050:	4801      	ldr	r0, [pc, #4]	@ (8007058 <__malloc_lock+0x8>)
 8007052:	f7ff b8b8 	b.w	80061c6 <__retarget_lock_acquire_recursive>
 8007056:	bf00      	nop
 8007058:	20000498 	.word	0x20000498

0800705c <__malloc_unlock>:
 800705c:	4801      	ldr	r0, [pc, #4]	@ (8007064 <__malloc_unlock+0x8>)
 800705e:	f7ff b8b3 	b.w	80061c8 <__retarget_lock_release_recursive>
 8007062:	bf00      	nop
 8007064:	20000498 	.word	0x20000498

08007068 <_Balloc>:
 8007068:	b570      	push	{r4, r5, r6, lr}
 800706a:	69c6      	ldr	r6, [r0, #28]
 800706c:	4604      	mov	r4, r0
 800706e:	460d      	mov	r5, r1
 8007070:	b976      	cbnz	r6, 8007090 <_Balloc+0x28>
 8007072:	2010      	movs	r0, #16
 8007074:	f7ff ff42 	bl	8006efc <malloc>
 8007078:	4602      	mov	r2, r0
 800707a:	61e0      	str	r0, [r4, #28]
 800707c:	b920      	cbnz	r0, 8007088 <_Balloc+0x20>
 800707e:	4b18      	ldr	r3, [pc, #96]	@ (80070e0 <_Balloc+0x78>)
 8007080:	4818      	ldr	r0, [pc, #96]	@ (80070e4 <_Balloc+0x7c>)
 8007082:	216b      	movs	r1, #107	@ 0x6b
 8007084:	f000 fdae 	bl	8007be4 <__assert_func>
 8007088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800708c:	6006      	str	r6, [r0, #0]
 800708e:	60c6      	str	r6, [r0, #12]
 8007090:	69e6      	ldr	r6, [r4, #28]
 8007092:	68f3      	ldr	r3, [r6, #12]
 8007094:	b183      	cbz	r3, 80070b8 <_Balloc+0x50>
 8007096:	69e3      	ldr	r3, [r4, #28]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800709e:	b9b8      	cbnz	r0, 80070d0 <_Balloc+0x68>
 80070a0:	2101      	movs	r1, #1
 80070a2:	fa01 f605 	lsl.w	r6, r1, r5
 80070a6:	1d72      	adds	r2, r6, #5
 80070a8:	0092      	lsls	r2, r2, #2
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 fdb8 	bl	8007c20 <_calloc_r>
 80070b0:	b160      	cbz	r0, 80070cc <_Balloc+0x64>
 80070b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070b6:	e00e      	b.n	80070d6 <_Balloc+0x6e>
 80070b8:	2221      	movs	r2, #33	@ 0x21
 80070ba:	2104      	movs	r1, #4
 80070bc:	4620      	mov	r0, r4
 80070be:	f000 fdaf 	bl	8007c20 <_calloc_r>
 80070c2:	69e3      	ldr	r3, [r4, #28]
 80070c4:	60f0      	str	r0, [r6, #12]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e4      	bne.n	8007096 <_Balloc+0x2e>
 80070cc:	2000      	movs	r0, #0
 80070ce:	bd70      	pop	{r4, r5, r6, pc}
 80070d0:	6802      	ldr	r2, [r0, #0]
 80070d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070d6:	2300      	movs	r3, #0
 80070d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070dc:	e7f7      	b.n	80070ce <_Balloc+0x66>
 80070de:	bf00      	nop
 80070e0:	0800831d 	.word	0x0800831d
 80070e4:	0800839d 	.word	0x0800839d

080070e8 <_Bfree>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	69c6      	ldr	r6, [r0, #28]
 80070ec:	4605      	mov	r5, r0
 80070ee:	460c      	mov	r4, r1
 80070f0:	b976      	cbnz	r6, 8007110 <_Bfree+0x28>
 80070f2:	2010      	movs	r0, #16
 80070f4:	f7ff ff02 	bl	8006efc <malloc>
 80070f8:	4602      	mov	r2, r0
 80070fa:	61e8      	str	r0, [r5, #28]
 80070fc:	b920      	cbnz	r0, 8007108 <_Bfree+0x20>
 80070fe:	4b09      	ldr	r3, [pc, #36]	@ (8007124 <_Bfree+0x3c>)
 8007100:	4809      	ldr	r0, [pc, #36]	@ (8007128 <_Bfree+0x40>)
 8007102:	218f      	movs	r1, #143	@ 0x8f
 8007104:	f000 fd6e 	bl	8007be4 <__assert_func>
 8007108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800710c:	6006      	str	r6, [r0, #0]
 800710e:	60c6      	str	r6, [r0, #12]
 8007110:	b13c      	cbz	r4, 8007122 <_Bfree+0x3a>
 8007112:	69eb      	ldr	r3, [r5, #28]
 8007114:	6862      	ldr	r2, [r4, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800711c:	6021      	str	r1, [r4, #0]
 800711e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007122:	bd70      	pop	{r4, r5, r6, pc}
 8007124:	0800831d 	.word	0x0800831d
 8007128:	0800839d 	.word	0x0800839d

0800712c <__multadd>:
 800712c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007130:	690d      	ldr	r5, [r1, #16]
 8007132:	4607      	mov	r7, r0
 8007134:	460c      	mov	r4, r1
 8007136:	461e      	mov	r6, r3
 8007138:	f101 0c14 	add.w	ip, r1, #20
 800713c:	2000      	movs	r0, #0
 800713e:	f8dc 3000 	ldr.w	r3, [ip]
 8007142:	b299      	uxth	r1, r3
 8007144:	fb02 6101 	mla	r1, r2, r1, r6
 8007148:	0c1e      	lsrs	r6, r3, #16
 800714a:	0c0b      	lsrs	r3, r1, #16
 800714c:	fb02 3306 	mla	r3, r2, r6, r3
 8007150:	b289      	uxth	r1, r1
 8007152:	3001      	adds	r0, #1
 8007154:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007158:	4285      	cmp	r5, r0
 800715a:	f84c 1b04 	str.w	r1, [ip], #4
 800715e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007162:	dcec      	bgt.n	800713e <__multadd+0x12>
 8007164:	b30e      	cbz	r6, 80071aa <__multadd+0x7e>
 8007166:	68a3      	ldr	r3, [r4, #8]
 8007168:	42ab      	cmp	r3, r5
 800716a:	dc19      	bgt.n	80071a0 <__multadd+0x74>
 800716c:	6861      	ldr	r1, [r4, #4]
 800716e:	4638      	mov	r0, r7
 8007170:	3101      	adds	r1, #1
 8007172:	f7ff ff79 	bl	8007068 <_Balloc>
 8007176:	4680      	mov	r8, r0
 8007178:	b928      	cbnz	r0, 8007186 <__multadd+0x5a>
 800717a:	4602      	mov	r2, r0
 800717c:	4b0c      	ldr	r3, [pc, #48]	@ (80071b0 <__multadd+0x84>)
 800717e:	480d      	ldr	r0, [pc, #52]	@ (80071b4 <__multadd+0x88>)
 8007180:	21ba      	movs	r1, #186	@ 0xba
 8007182:	f000 fd2f 	bl	8007be4 <__assert_func>
 8007186:	6922      	ldr	r2, [r4, #16]
 8007188:	3202      	adds	r2, #2
 800718a:	f104 010c 	add.w	r1, r4, #12
 800718e:	0092      	lsls	r2, r2, #2
 8007190:	300c      	adds	r0, #12
 8007192:	f000 fd19 	bl	8007bc8 <memcpy>
 8007196:	4621      	mov	r1, r4
 8007198:	4638      	mov	r0, r7
 800719a:	f7ff ffa5 	bl	80070e8 <_Bfree>
 800719e:	4644      	mov	r4, r8
 80071a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071a4:	3501      	adds	r5, #1
 80071a6:	615e      	str	r6, [r3, #20]
 80071a8:	6125      	str	r5, [r4, #16]
 80071aa:	4620      	mov	r0, r4
 80071ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b0:	0800838c 	.word	0x0800838c
 80071b4:	0800839d 	.word	0x0800839d

080071b8 <__hi0bits>:
 80071b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80071bc:	4603      	mov	r3, r0
 80071be:	bf36      	itet	cc
 80071c0:	0403      	lslcc	r3, r0, #16
 80071c2:	2000      	movcs	r0, #0
 80071c4:	2010      	movcc	r0, #16
 80071c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071ca:	bf3c      	itt	cc
 80071cc:	021b      	lslcc	r3, r3, #8
 80071ce:	3008      	addcc	r0, #8
 80071d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071d4:	bf3c      	itt	cc
 80071d6:	011b      	lslcc	r3, r3, #4
 80071d8:	3004      	addcc	r0, #4
 80071da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071de:	bf3c      	itt	cc
 80071e0:	009b      	lslcc	r3, r3, #2
 80071e2:	3002      	addcc	r0, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	db05      	blt.n	80071f4 <__hi0bits+0x3c>
 80071e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80071ec:	f100 0001 	add.w	r0, r0, #1
 80071f0:	bf08      	it	eq
 80071f2:	2020      	moveq	r0, #32
 80071f4:	4770      	bx	lr

080071f6 <__lo0bits>:
 80071f6:	6803      	ldr	r3, [r0, #0]
 80071f8:	4602      	mov	r2, r0
 80071fa:	f013 0007 	ands.w	r0, r3, #7
 80071fe:	d00b      	beq.n	8007218 <__lo0bits+0x22>
 8007200:	07d9      	lsls	r1, r3, #31
 8007202:	d421      	bmi.n	8007248 <__lo0bits+0x52>
 8007204:	0798      	lsls	r0, r3, #30
 8007206:	bf49      	itett	mi
 8007208:	085b      	lsrmi	r3, r3, #1
 800720a:	089b      	lsrpl	r3, r3, #2
 800720c:	2001      	movmi	r0, #1
 800720e:	6013      	strmi	r3, [r2, #0]
 8007210:	bf5c      	itt	pl
 8007212:	6013      	strpl	r3, [r2, #0]
 8007214:	2002      	movpl	r0, #2
 8007216:	4770      	bx	lr
 8007218:	b299      	uxth	r1, r3
 800721a:	b909      	cbnz	r1, 8007220 <__lo0bits+0x2a>
 800721c:	0c1b      	lsrs	r3, r3, #16
 800721e:	2010      	movs	r0, #16
 8007220:	b2d9      	uxtb	r1, r3
 8007222:	b909      	cbnz	r1, 8007228 <__lo0bits+0x32>
 8007224:	3008      	adds	r0, #8
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	0719      	lsls	r1, r3, #28
 800722a:	bf04      	itt	eq
 800722c:	091b      	lsreq	r3, r3, #4
 800722e:	3004      	addeq	r0, #4
 8007230:	0799      	lsls	r1, r3, #30
 8007232:	bf04      	itt	eq
 8007234:	089b      	lsreq	r3, r3, #2
 8007236:	3002      	addeq	r0, #2
 8007238:	07d9      	lsls	r1, r3, #31
 800723a:	d403      	bmi.n	8007244 <__lo0bits+0x4e>
 800723c:	085b      	lsrs	r3, r3, #1
 800723e:	f100 0001 	add.w	r0, r0, #1
 8007242:	d003      	beq.n	800724c <__lo0bits+0x56>
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	4770      	bx	lr
 8007248:	2000      	movs	r0, #0
 800724a:	4770      	bx	lr
 800724c:	2020      	movs	r0, #32
 800724e:	4770      	bx	lr

08007250 <__i2b>:
 8007250:	b510      	push	{r4, lr}
 8007252:	460c      	mov	r4, r1
 8007254:	2101      	movs	r1, #1
 8007256:	f7ff ff07 	bl	8007068 <_Balloc>
 800725a:	4602      	mov	r2, r0
 800725c:	b928      	cbnz	r0, 800726a <__i2b+0x1a>
 800725e:	4b05      	ldr	r3, [pc, #20]	@ (8007274 <__i2b+0x24>)
 8007260:	4805      	ldr	r0, [pc, #20]	@ (8007278 <__i2b+0x28>)
 8007262:	f240 1145 	movw	r1, #325	@ 0x145
 8007266:	f000 fcbd 	bl	8007be4 <__assert_func>
 800726a:	2301      	movs	r3, #1
 800726c:	6144      	str	r4, [r0, #20]
 800726e:	6103      	str	r3, [r0, #16]
 8007270:	bd10      	pop	{r4, pc}
 8007272:	bf00      	nop
 8007274:	0800838c 	.word	0x0800838c
 8007278:	0800839d 	.word	0x0800839d

0800727c <__multiply>:
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	4614      	mov	r4, r2
 8007282:	690a      	ldr	r2, [r1, #16]
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	429a      	cmp	r2, r3
 8007288:	bfa8      	it	ge
 800728a:	4623      	movge	r3, r4
 800728c:	460f      	mov	r7, r1
 800728e:	bfa4      	itt	ge
 8007290:	460c      	movge	r4, r1
 8007292:	461f      	movge	r7, r3
 8007294:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007298:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800729c:	68a3      	ldr	r3, [r4, #8]
 800729e:	6861      	ldr	r1, [r4, #4]
 80072a0:	eb0a 0609 	add.w	r6, sl, r9
 80072a4:	42b3      	cmp	r3, r6
 80072a6:	b085      	sub	sp, #20
 80072a8:	bfb8      	it	lt
 80072aa:	3101      	addlt	r1, #1
 80072ac:	f7ff fedc 	bl	8007068 <_Balloc>
 80072b0:	b930      	cbnz	r0, 80072c0 <__multiply+0x44>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4b44      	ldr	r3, [pc, #272]	@ (80073c8 <__multiply+0x14c>)
 80072b6:	4845      	ldr	r0, [pc, #276]	@ (80073cc <__multiply+0x150>)
 80072b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80072bc:	f000 fc92 	bl	8007be4 <__assert_func>
 80072c0:	f100 0514 	add.w	r5, r0, #20
 80072c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072c8:	462b      	mov	r3, r5
 80072ca:	2200      	movs	r2, #0
 80072cc:	4543      	cmp	r3, r8
 80072ce:	d321      	bcc.n	8007314 <__multiply+0x98>
 80072d0:	f107 0114 	add.w	r1, r7, #20
 80072d4:	f104 0214 	add.w	r2, r4, #20
 80072d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80072dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80072e0:	9302      	str	r3, [sp, #8]
 80072e2:	1b13      	subs	r3, r2, r4
 80072e4:	3b15      	subs	r3, #21
 80072e6:	f023 0303 	bic.w	r3, r3, #3
 80072ea:	3304      	adds	r3, #4
 80072ec:	f104 0715 	add.w	r7, r4, #21
 80072f0:	42ba      	cmp	r2, r7
 80072f2:	bf38      	it	cc
 80072f4:	2304      	movcc	r3, #4
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	9b02      	ldr	r3, [sp, #8]
 80072fa:	9103      	str	r1, [sp, #12]
 80072fc:	428b      	cmp	r3, r1
 80072fe:	d80c      	bhi.n	800731a <__multiply+0x9e>
 8007300:	2e00      	cmp	r6, #0
 8007302:	dd03      	ble.n	800730c <__multiply+0x90>
 8007304:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007308:	2b00      	cmp	r3, #0
 800730a:	d05b      	beq.n	80073c4 <__multiply+0x148>
 800730c:	6106      	str	r6, [r0, #16]
 800730e:	b005      	add	sp, #20
 8007310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007314:	f843 2b04 	str.w	r2, [r3], #4
 8007318:	e7d8      	b.n	80072cc <__multiply+0x50>
 800731a:	f8b1 a000 	ldrh.w	sl, [r1]
 800731e:	f1ba 0f00 	cmp.w	sl, #0
 8007322:	d024      	beq.n	800736e <__multiply+0xf2>
 8007324:	f104 0e14 	add.w	lr, r4, #20
 8007328:	46a9      	mov	r9, r5
 800732a:	f04f 0c00 	mov.w	ip, #0
 800732e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007332:	f8d9 3000 	ldr.w	r3, [r9]
 8007336:	fa1f fb87 	uxth.w	fp, r7
 800733a:	b29b      	uxth	r3, r3
 800733c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007340:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007344:	f8d9 7000 	ldr.w	r7, [r9]
 8007348:	4463      	add	r3, ip
 800734a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800734e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007352:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007356:	b29b      	uxth	r3, r3
 8007358:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800735c:	4572      	cmp	r2, lr
 800735e:	f849 3b04 	str.w	r3, [r9], #4
 8007362:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007366:	d8e2      	bhi.n	800732e <__multiply+0xb2>
 8007368:	9b01      	ldr	r3, [sp, #4]
 800736a:	f845 c003 	str.w	ip, [r5, r3]
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007374:	3104      	adds	r1, #4
 8007376:	f1b9 0f00 	cmp.w	r9, #0
 800737a:	d021      	beq.n	80073c0 <__multiply+0x144>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	f104 0c14 	add.w	ip, r4, #20
 8007382:	46ae      	mov	lr, r5
 8007384:	f04f 0a00 	mov.w	sl, #0
 8007388:	f8bc b000 	ldrh.w	fp, [ip]
 800738c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007390:	fb09 770b 	mla	r7, r9, fp, r7
 8007394:	4457      	add	r7, sl
 8007396:	b29b      	uxth	r3, r3
 8007398:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800739c:	f84e 3b04 	str.w	r3, [lr], #4
 80073a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80073a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073a8:	f8be 3000 	ldrh.w	r3, [lr]
 80073ac:	fb09 330a 	mla	r3, r9, sl, r3
 80073b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80073b4:	4562      	cmp	r2, ip
 80073b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073ba:	d8e5      	bhi.n	8007388 <__multiply+0x10c>
 80073bc:	9f01      	ldr	r7, [sp, #4]
 80073be:	51eb      	str	r3, [r5, r7]
 80073c0:	3504      	adds	r5, #4
 80073c2:	e799      	b.n	80072f8 <__multiply+0x7c>
 80073c4:	3e01      	subs	r6, #1
 80073c6:	e79b      	b.n	8007300 <__multiply+0x84>
 80073c8:	0800838c 	.word	0x0800838c
 80073cc:	0800839d 	.word	0x0800839d

080073d0 <__pow5mult>:
 80073d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d4:	4615      	mov	r5, r2
 80073d6:	f012 0203 	ands.w	r2, r2, #3
 80073da:	4607      	mov	r7, r0
 80073dc:	460e      	mov	r6, r1
 80073de:	d007      	beq.n	80073f0 <__pow5mult+0x20>
 80073e0:	4c25      	ldr	r4, [pc, #148]	@ (8007478 <__pow5mult+0xa8>)
 80073e2:	3a01      	subs	r2, #1
 80073e4:	2300      	movs	r3, #0
 80073e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073ea:	f7ff fe9f 	bl	800712c <__multadd>
 80073ee:	4606      	mov	r6, r0
 80073f0:	10ad      	asrs	r5, r5, #2
 80073f2:	d03d      	beq.n	8007470 <__pow5mult+0xa0>
 80073f4:	69fc      	ldr	r4, [r7, #28]
 80073f6:	b97c      	cbnz	r4, 8007418 <__pow5mult+0x48>
 80073f8:	2010      	movs	r0, #16
 80073fa:	f7ff fd7f 	bl	8006efc <malloc>
 80073fe:	4602      	mov	r2, r0
 8007400:	61f8      	str	r0, [r7, #28]
 8007402:	b928      	cbnz	r0, 8007410 <__pow5mult+0x40>
 8007404:	4b1d      	ldr	r3, [pc, #116]	@ (800747c <__pow5mult+0xac>)
 8007406:	481e      	ldr	r0, [pc, #120]	@ (8007480 <__pow5mult+0xb0>)
 8007408:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800740c:	f000 fbea 	bl	8007be4 <__assert_func>
 8007410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007414:	6004      	str	r4, [r0, #0]
 8007416:	60c4      	str	r4, [r0, #12]
 8007418:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800741c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007420:	b94c      	cbnz	r4, 8007436 <__pow5mult+0x66>
 8007422:	f240 2171 	movw	r1, #625	@ 0x271
 8007426:	4638      	mov	r0, r7
 8007428:	f7ff ff12 	bl	8007250 <__i2b>
 800742c:	2300      	movs	r3, #0
 800742e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007432:	4604      	mov	r4, r0
 8007434:	6003      	str	r3, [r0, #0]
 8007436:	f04f 0900 	mov.w	r9, #0
 800743a:	07eb      	lsls	r3, r5, #31
 800743c:	d50a      	bpl.n	8007454 <__pow5mult+0x84>
 800743e:	4631      	mov	r1, r6
 8007440:	4622      	mov	r2, r4
 8007442:	4638      	mov	r0, r7
 8007444:	f7ff ff1a 	bl	800727c <__multiply>
 8007448:	4631      	mov	r1, r6
 800744a:	4680      	mov	r8, r0
 800744c:	4638      	mov	r0, r7
 800744e:	f7ff fe4b 	bl	80070e8 <_Bfree>
 8007452:	4646      	mov	r6, r8
 8007454:	106d      	asrs	r5, r5, #1
 8007456:	d00b      	beq.n	8007470 <__pow5mult+0xa0>
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	b938      	cbnz	r0, 800746c <__pow5mult+0x9c>
 800745c:	4622      	mov	r2, r4
 800745e:	4621      	mov	r1, r4
 8007460:	4638      	mov	r0, r7
 8007462:	f7ff ff0b 	bl	800727c <__multiply>
 8007466:	6020      	str	r0, [r4, #0]
 8007468:	f8c0 9000 	str.w	r9, [r0]
 800746c:	4604      	mov	r4, r0
 800746e:	e7e4      	b.n	800743a <__pow5mult+0x6a>
 8007470:	4630      	mov	r0, r6
 8007472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007476:	bf00      	nop
 8007478:	080083f8 	.word	0x080083f8
 800747c:	0800831d 	.word	0x0800831d
 8007480:	0800839d 	.word	0x0800839d

08007484 <__lshift>:
 8007484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007488:	460c      	mov	r4, r1
 800748a:	6849      	ldr	r1, [r1, #4]
 800748c:	6923      	ldr	r3, [r4, #16]
 800748e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007492:	68a3      	ldr	r3, [r4, #8]
 8007494:	4607      	mov	r7, r0
 8007496:	4691      	mov	r9, r2
 8007498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800749c:	f108 0601 	add.w	r6, r8, #1
 80074a0:	42b3      	cmp	r3, r6
 80074a2:	db0b      	blt.n	80074bc <__lshift+0x38>
 80074a4:	4638      	mov	r0, r7
 80074a6:	f7ff fddf 	bl	8007068 <_Balloc>
 80074aa:	4605      	mov	r5, r0
 80074ac:	b948      	cbnz	r0, 80074c2 <__lshift+0x3e>
 80074ae:	4602      	mov	r2, r0
 80074b0:	4b28      	ldr	r3, [pc, #160]	@ (8007554 <__lshift+0xd0>)
 80074b2:	4829      	ldr	r0, [pc, #164]	@ (8007558 <__lshift+0xd4>)
 80074b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80074b8:	f000 fb94 	bl	8007be4 <__assert_func>
 80074bc:	3101      	adds	r1, #1
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	e7ee      	b.n	80074a0 <__lshift+0x1c>
 80074c2:	2300      	movs	r3, #0
 80074c4:	f100 0114 	add.w	r1, r0, #20
 80074c8:	f100 0210 	add.w	r2, r0, #16
 80074cc:	4618      	mov	r0, r3
 80074ce:	4553      	cmp	r3, sl
 80074d0:	db33      	blt.n	800753a <__lshift+0xb6>
 80074d2:	6920      	ldr	r0, [r4, #16]
 80074d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074d8:	f104 0314 	add.w	r3, r4, #20
 80074dc:	f019 091f 	ands.w	r9, r9, #31
 80074e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074e8:	d02b      	beq.n	8007542 <__lshift+0xbe>
 80074ea:	f1c9 0e20 	rsb	lr, r9, #32
 80074ee:	468a      	mov	sl, r1
 80074f0:	2200      	movs	r2, #0
 80074f2:	6818      	ldr	r0, [r3, #0]
 80074f4:	fa00 f009 	lsl.w	r0, r0, r9
 80074f8:	4310      	orrs	r0, r2
 80074fa:	f84a 0b04 	str.w	r0, [sl], #4
 80074fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007502:	459c      	cmp	ip, r3
 8007504:	fa22 f20e 	lsr.w	r2, r2, lr
 8007508:	d8f3      	bhi.n	80074f2 <__lshift+0x6e>
 800750a:	ebac 0304 	sub.w	r3, ip, r4
 800750e:	3b15      	subs	r3, #21
 8007510:	f023 0303 	bic.w	r3, r3, #3
 8007514:	3304      	adds	r3, #4
 8007516:	f104 0015 	add.w	r0, r4, #21
 800751a:	4584      	cmp	ip, r0
 800751c:	bf38      	it	cc
 800751e:	2304      	movcc	r3, #4
 8007520:	50ca      	str	r2, [r1, r3]
 8007522:	b10a      	cbz	r2, 8007528 <__lshift+0xa4>
 8007524:	f108 0602 	add.w	r6, r8, #2
 8007528:	3e01      	subs	r6, #1
 800752a:	4638      	mov	r0, r7
 800752c:	612e      	str	r6, [r5, #16]
 800752e:	4621      	mov	r1, r4
 8007530:	f7ff fdda 	bl	80070e8 <_Bfree>
 8007534:	4628      	mov	r0, r5
 8007536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753a:	f842 0f04 	str.w	r0, [r2, #4]!
 800753e:	3301      	adds	r3, #1
 8007540:	e7c5      	b.n	80074ce <__lshift+0x4a>
 8007542:	3904      	subs	r1, #4
 8007544:	f853 2b04 	ldr.w	r2, [r3], #4
 8007548:	f841 2f04 	str.w	r2, [r1, #4]!
 800754c:	459c      	cmp	ip, r3
 800754e:	d8f9      	bhi.n	8007544 <__lshift+0xc0>
 8007550:	e7ea      	b.n	8007528 <__lshift+0xa4>
 8007552:	bf00      	nop
 8007554:	0800838c 	.word	0x0800838c
 8007558:	0800839d 	.word	0x0800839d

0800755c <__mcmp>:
 800755c:	690a      	ldr	r2, [r1, #16]
 800755e:	4603      	mov	r3, r0
 8007560:	6900      	ldr	r0, [r0, #16]
 8007562:	1a80      	subs	r0, r0, r2
 8007564:	b530      	push	{r4, r5, lr}
 8007566:	d10e      	bne.n	8007586 <__mcmp+0x2a>
 8007568:	3314      	adds	r3, #20
 800756a:	3114      	adds	r1, #20
 800756c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007570:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007574:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007578:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800757c:	4295      	cmp	r5, r2
 800757e:	d003      	beq.n	8007588 <__mcmp+0x2c>
 8007580:	d205      	bcs.n	800758e <__mcmp+0x32>
 8007582:	f04f 30ff 	mov.w	r0, #4294967295
 8007586:	bd30      	pop	{r4, r5, pc}
 8007588:	42a3      	cmp	r3, r4
 800758a:	d3f3      	bcc.n	8007574 <__mcmp+0x18>
 800758c:	e7fb      	b.n	8007586 <__mcmp+0x2a>
 800758e:	2001      	movs	r0, #1
 8007590:	e7f9      	b.n	8007586 <__mcmp+0x2a>
	...

08007594 <__mdiff>:
 8007594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007598:	4689      	mov	r9, r1
 800759a:	4606      	mov	r6, r0
 800759c:	4611      	mov	r1, r2
 800759e:	4648      	mov	r0, r9
 80075a0:	4614      	mov	r4, r2
 80075a2:	f7ff ffdb 	bl	800755c <__mcmp>
 80075a6:	1e05      	subs	r5, r0, #0
 80075a8:	d112      	bne.n	80075d0 <__mdiff+0x3c>
 80075aa:	4629      	mov	r1, r5
 80075ac:	4630      	mov	r0, r6
 80075ae:	f7ff fd5b 	bl	8007068 <_Balloc>
 80075b2:	4602      	mov	r2, r0
 80075b4:	b928      	cbnz	r0, 80075c2 <__mdiff+0x2e>
 80075b6:	4b3f      	ldr	r3, [pc, #252]	@ (80076b4 <__mdiff+0x120>)
 80075b8:	f240 2137 	movw	r1, #567	@ 0x237
 80075bc:	483e      	ldr	r0, [pc, #248]	@ (80076b8 <__mdiff+0x124>)
 80075be:	f000 fb11 	bl	8007be4 <__assert_func>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075c8:	4610      	mov	r0, r2
 80075ca:	b003      	add	sp, #12
 80075cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d0:	bfbc      	itt	lt
 80075d2:	464b      	movlt	r3, r9
 80075d4:	46a1      	movlt	r9, r4
 80075d6:	4630      	mov	r0, r6
 80075d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80075dc:	bfba      	itte	lt
 80075de:	461c      	movlt	r4, r3
 80075e0:	2501      	movlt	r5, #1
 80075e2:	2500      	movge	r5, #0
 80075e4:	f7ff fd40 	bl	8007068 <_Balloc>
 80075e8:	4602      	mov	r2, r0
 80075ea:	b918      	cbnz	r0, 80075f4 <__mdiff+0x60>
 80075ec:	4b31      	ldr	r3, [pc, #196]	@ (80076b4 <__mdiff+0x120>)
 80075ee:	f240 2145 	movw	r1, #581	@ 0x245
 80075f2:	e7e3      	b.n	80075bc <__mdiff+0x28>
 80075f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80075f8:	6926      	ldr	r6, [r4, #16]
 80075fa:	60c5      	str	r5, [r0, #12]
 80075fc:	f109 0310 	add.w	r3, r9, #16
 8007600:	f109 0514 	add.w	r5, r9, #20
 8007604:	f104 0e14 	add.w	lr, r4, #20
 8007608:	f100 0b14 	add.w	fp, r0, #20
 800760c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007610:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007614:	9301      	str	r3, [sp, #4]
 8007616:	46d9      	mov	r9, fp
 8007618:	f04f 0c00 	mov.w	ip, #0
 800761c:	9b01      	ldr	r3, [sp, #4]
 800761e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007622:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007626:	9301      	str	r3, [sp, #4]
 8007628:	fa1f f38a 	uxth.w	r3, sl
 800762c:	4619      	mov	r1, r3
 800762e:	b283      	uxth	r3, r0
 8007630:	1acb      	subs	r3, r1, r3
 8007632:	0c00      	lsrs	r0, r0, #16
 8007634:	4463      	add	r3, ip
 8007636:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800763a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800763e:	b29b      	uxth	r3, r3
 8007640:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007644:	4576      	cmp	r6, lr
 8007646:	f849 3b04 	str.w	r3, [r9], #4
 800764a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800764e:	d8e5      	bhi.n	800761c <__mdiff+0x88>
 8007650:	1b33      	subs	r3, r6, r4
 8007652:	3b15      	subs	r3, #21
 8007654:	f023 0303 	bic.w	r3, r3, #3
 8007658:	3415      	adds	r4, #21
 800765a:	3304      	adds	r3, #4
 800765c:	42a6      	cmp	r6, r4
 800765e:	bf38      	it	cc
 8007660:	2304      	movcc	r3, #4
 8007662:	441d      	add	r5, r3
 8007664:	445b      	add	r3, fp
 8007666:	461e      	mov	r6, r3
 8007668:	462c      	mov	r4, r5
 800766a:	4544      	cmp	r4, r8
 800766c:	d30e      	bcc.n	800768c <__mdiff+0xf8>
 800766e:	f108 0103 	add.w	r1, r8, #3
 8007672:	1b49      	subs	r1, r1, r5
 8007674:	f021 0103 	bic.w	r1, r1, #3
 8007678:	3d03      	subs	r5, #3
 800767a:	45a8      	cmp	r8, r5
 800767c:	bf38      	it	cc
 800767e:	2100      	movcc	r1, #0
 8007680:	440b      	add	r3, r1
 8007682:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007686:	b191      	cbz	r1, 80076ae <__mdiff+0x11a>
 8007688:	6117      	str	r7, [r2, #16]
 800768a:	e79d      	b.n	80075c8 <__mdiff+0x34>
 800768c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007690:	46e6      	mov	lr, ip
 8007692:	0c08      	lsrs	r0, r1, #16
 8007694:	fa1c fc81 	uxtah	ip, ip, r1
 8007698:	4471      	add	r1, lr
 800769a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800769e:	b289      	uxth	r1, r1
 80076a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80076a4:	f846 1b04 	str.w	r1, [r6], #4
 80076a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80076ac:	e7dd      	b.n	800766a <__mdiff+0xd6>
 80076ae:	3f01      	subs	r7, #1
 80076b0:	e7e7      	b.n	8007682 <__mdiff+0xee>
 80076b2:	bf00      	nop
 80076b4:	0800838c 	.word	0x0800838c
 80076b8:	0800839d 	.word	0x0800839d

080076bc <__d2b>:
 80076bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076c0:	460f      	mov	r7, r1
 80076c2:	2101      	movs	r1, #1
 80076c4:	ec59 8b10 	vmov	r8, r9, d0
 80076c8:	4616      	mov	r6, r2
 80076ca:	f7ff fccd 	bl	8007068 <_Balloc>
 80076ce:	4604      	mov	r4, r0
 80076d0:	b930      	cbnz	r0, 80076e0 <__d2b+0x24>
 80076d2:	4602      	mov	r2, r0
 80076d4:	4b23      	ldr	r3, [pc, #140]	@ (8007764 <__d2b+0xa8>)
 80076d6:	4824      	ldr	r0, [pc, #144]	@ (8007768 <__d2b+0xac>)
 80076d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80076dc:	f000 fa82 	bl	8007be4 <__assert_func>
 80076e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80076e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076e8:	b10d      	cbz	r5, 80076ee <__d2b+0x32>
 80076ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	f1b8 0300 	subs.w	r3, r8, #0
 80076f4:	d023      	beq.n	800773e <__d2b+0x82>
 80076f6:	4668      	mov	r0, sp
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	f7ff fd7c 	bl	80071f6 <__lo0bits>
 80076fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007702:	b1d0      	cbz	r0, 800773a <__d2b+0x7e>
 8007704:	f1c0 0320 	rsb	r3, r0, #32
 8007708:	fa02 f303 	lsl.w	r3, r2, r3
 800770c:	430b      	orrs	r3, r1
 800770e:	40c2      	lsrs	r2, r0
 8007710:	6163      	str	r3, [r4, #20]
 8007712:	9201      	str	r2, [sp, #4]
 8007714:	9b01      	ldr	r3, [sp, #4]
 8007716:	61a3      	str	r3, [r4, #24]
 8007718:	2b00      	cmp	r3, #0
 800771a:	bf0c      	ite	eq
 800771c:	2201      	moveq	r2, #1
 800771e:	2202      	movne	r2, #2
 8007720:	6122      	str	r2, [r4, #16]
 8007722:	b1a5      	cbz	r5, 800774e <__d2b+0x92>
 8007724:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007728:	4405      	add	r5, r0
 800772a:	603d      	str	r5, [r7, #0]
 800772c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007730:	6030      	str	r0, [r6, #0]
 8007732:	4620      	mov	r0, r4
 8007734:	b003      	add	sp, #12
 8007736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800773a:	6161      	str	r1, [r4, #20]
 800773c:	e7ea      	b.n	8007714 <__d2b+0x58>
 800773e:	a801      	add	r0, sp, #4
 8007740:	f7ff fd59 	bl	80071f6 <__lo0bits>
 8007744:	9b01      	ldr	r3, [sp, #4]
 8007746:	6163      	str	r3, [r4, #20]
 8007748:	3020      	adds	r0, #32
 800774a:	2201      	movs	r2, #1
 800774c:	e7e8      	b.n	8007720 <__d2b+0x64>
 800774e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007752:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007756:	6038      	str	r0, [r7, #0]
 8007758:	6918      	ldr	r0, [r3, #16]
 800775a:	f7ff fd2d 	bl	80071b8 <__hi0bits>
 800775e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007762:	e7e5      	b.n	8007730 <__d2b+0x74>
 8007764:	0800838c 	.word	0x0800838c
 8007768:	0800839d 	.word	0x0800839d

0800776c <__ssputs_r>:
 800776c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007770:	688e      	ldr	r6, [r1, #8]
 8007772:	461f      	mov	r7, r3
 8007774:	42be      	cmp	r6, r7
 8007776:	680b      	ldr	r3, [r1, #0]
 8007778:	4682      	mov	sl, r0
 800777a:	460c      	mov	r4, r1
 800777c:	4690      	mov	r8, r2
 800777e:	d82d      	bhi.n	80077dc <__ssputs_r+0x70>
 8007780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007784:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007788:	d026      	beq.n	80077d8 <__ssputs_r+0x6c>
 800778a:	6965      	ldr	r5, [r4, #20]
 800778c:	6909      	ldr	r1, [r1, #16]
 800778e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007792:	eba3 0901 	sub.w	r9, r3, r1
 8007796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800779a:	1c7b      	adds	r3, r7, #1
 800779c:	444b      	add	r3, r9
 800779e:	106d      	asrs	r5, r5, #1
 80077a0:	429d      	cmp	r5, r3
 80077a2:	bf38      	it	cc
 80077a4:	461d      	movcc	r5, r3
 80077a6:	0553      	lsls	r3, r2, #21
 80077a8:	d527      	bpl.n	80077fa <__ssputs_r+0x8e>
 80077aa:	4629      	mov	r1, r5
 80077ac:	f7ff fbd0 	bl	8006f50 <_malloc_r>
 80077b0:	4606      	mov	r6, r0
 80077b2:	b360      	cbz	r0, 800780e <__ssputs_r+0xa2>
 80077b4:	6921      	ldr	r1, [r4, #16]
 80077b6:	464a      	mov	r2, r9
 80077b8:	f000 fa06 	bl	8007bc8 <memcpy>
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80077c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077c6:	81a3      	strh	r3, [r4, #12]
 80077c8:	6126      	str	r6, [r4, #16]
 80077ca:	6165      	str	r5, [r4, #20]
 80077cc:	444e      	add	r6, r9
 80077ce:	eba5 0509 	sub.w	r5, r5, r9
 80077d2:	6026      	str	r6, [r4, #0]
 80077d4:	60a5      	str	r5, [r4, #8]
 80077d6:	463e      	mov	r6, r7
 80077d8:	42be      	cmp	r6, r7
 80077da:	d900      	bls.n	80077de <__ssputs_r+0x72>
 80077dc:	463e      	mov	r6, r7
 80077de:	6820      	ldr	r0, [r4, #0]
 80077e0:	4632      	mov	r2, r6
 80077e2:	4641      	mov	r1, r8
 80077e4:	f000 f9c6 	bl	8007b74 <memmove>
 80077e8:	68a3      	ldr	r3, [r4, #8]
 80077ea:	1b9b      	subs	r3, r3, r6
 80077ec:	60a3      	str	r3, [r4, #8]
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	4433      	add	r3, r6
 80077f2:	6023      	str	r3, [r4, #0]
 80077f4:	2000      	movs	r0, #0
 80077f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fa:	462a      	mov	r2, r5
 80077fc:	f000 fa36 	bl	8007c6c <_realloc_r>
 8007800:	4606      	mov	r6, r0
 8007802:	2800      	cmp	r0, #0
 8007804:	d1e0      	bne.n	80077c8 <__ssputs_r+0x5c>
 8007806:	6921      	ldr	r1, [r4, #16]
 8007808:	4650      	mov	r0, sl
 800780a:	f7ff fb2d 	bl	8006e68 <_free_r>
 800780e:	230c      	movs	r3, #12
 8007810:	f8ca 3000 	str.w	r3, [sl]
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	e7e9      	b.n	80077f6 <__ssputs_r+0x8a>
	...

08007824 <_svfiprintf_r>:
 8007824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007828:	4698      	mov	r8, r3
 800782a:	898b      	ldrh	r3, [r1, #12]
 800782c:	061b      	lsls	r3, r3, #24
 800782e:	b09d      	sub	sp, #116	@ 0x74
 8007830:	4607      	mov	r7, r0
 8007832:	460d      	mov	r5, r1
 8007834:	4614      	mov	r4, r2
 8007836:	d510      	bpl.n	800785a <_svfiprintf_r+0x36>
 8007838:	690b      	ldr	r3, [r1, #16]
 800783a:	b973      	cbnz	r3, 800785a <_svfiprintf_r+0x36>
 800783c:	2140      	movs	r1, #64	@ 0x40
 800783e:	f7ff fb87 	bl	8006f50 <_malloc_r>
 8007842:	6028      	str	r0, [r5, #0]
 8007844:	6128      	str	r0, [r5, #16]
 8007846:	b930      	cbnz	r0, 8007856 <_svfiprintf_r+0x32>
 8007848:	230c      	movs	r3, #12
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	f04f 30ff 	mov.w	r0, #4294967295
 8007850:	b01d      	add	sp, #116	@ 0x74
 8007852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007856:	2340      	movs	r3, #64	@ 0x40
 8007858:	616b      	str	r3, [r5, #20]
 800785a:	2300      	movs	r3, #0
 800785c:	9309      	str	r3, [sp, #36]	@ 0x24
 800785e:	2320      	movs	r3, #32
 8007860:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007864:	f8cd 800c 	str.w	r8, [sp, #12]
 8007868:	2330      	movs	r3, #48	@ 0x30
 800786a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a08 <_svfiprintf_r+0x1e4>
 800786e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007872:	f04f 0901 	mov.w	r9, #1
 8007876:	4623      	mov	r3, r4
 8007878:	469a      	mov	sl, r3
 800787a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800787e:	b10a      	cbz	r2, 8007884 <_svfiprintf_r+0x60>
 8007880:	2a25      	cmp	r2, #37	@ 0x25
 8007882:	d1f9      	bne.n	8007878 <_svfiprintf_r+0x54>
 8007884:	ebba 0b04 	subs.w	fp, sl, r4
 8007888:	d00b      	beq.n	80078a2 <_svfiprintf_r+0x7e>
 800788a:	465b      	mov	r3, fp
 800788c:	4622      	mov	r2, r4
 800788e:	4629      	mov	r1, r5
 8007890:	4638      	mov	r0, r7
 8007892:	f7ff ff6b 	bl	800776c <__ssputs_r>
 8007896:	3001      	adds	r0, #1
 8007898:	f000 80a7 	beq.w	80079ea <_svfiprintf_r+0x1c6>
 800789c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800789e:	445a      	add	r2, fp
 80078a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80078a2:	f89a 3000 	ldrb.w	r3, [sl]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 809f 	beq.w	80079ea <_svfiprintf_r+0x1c6>
 80078ac:	2300      	movs	r3, #0
 80078ae:	f04f 32ff 	mov.w	r2, #4294967295
 80078b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078b6:	f10a 0a01 	add.w	sl, sl, #1
 80078ba:	9304      	str	r3, [sp, #16]
 80078bc:	9307      	str	r3, [sp, #28]
 80078be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80078c4:	4654      	mov	r4, sl
 80078c6:	2205      	movs	r2, #5
 80078c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078cc:	484e      	ldr	r0, [pc, #312]	@ (8007a08 <_svfiprintf_r+0x1e4>)
 80078ce:	f7f8 fc9f 	bl	8000210 <memchr>
 80078d2:	9a04      	ldr	r2, [sp, #16]
 80078d4:	b9d8      	cbnz	r0, 800790e <_svfiprintf_r+0xea>
 80078d6:	06d0      	lsls	r0, r2, #27
 80078d8:	bf44      	itt	mi
 80078da:	2320      	movmi	r3, #32
 80078dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078e0:	0711      	lsls	r1, r2, #28
 80078e2:	bf44      	itt	mi
 80078e4:	232b      	movmi	r3, #43	@ 0x2b
 80078e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078ea:	f89a 3000 	ldrb.w	r3, [sl]
 80078ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80078f0:	d015      	beq.n	800791e <_svfiprintf_r+0xfa>
 80078f2:	9a07      	ldr	r2, [sp, #28]
 80078f4:	4654      	mov	r4, sl
 80078f6:	2000      	movs	r0, #0
 80078f8:	f04f 0c0a 	mov.w	ip, #10
 80078fc:	4621      	mov	r1, r4
 80078fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007902:	3b30      	subs	r3, #48	@ 0x30
 8007904:	2b09      	cmp	r3, #9
 8007906:	d94b      	bls.n	80079a0 <_svfiprintf_r+0x17c>
 8007908:	b1b0      	cbz	r0, 8007938 <_svfiprintf_r+0x114>
 800790a:	9207      	str	r2, [sp, #28]
 800790c:	e014      	b.n	8007938 <_svfiprintf_r+0x114>
 800790e:	eba0 0308 	sub.w	r3, r0, r8
 8007912:	fa09 f303 	lsl.w	r3, r9, r3
 8007916:	4313      	orrs	r3, r2
 8007918:	9304      	str	r3, [sp, #16]
 800791a:	46a2      	mov	sl, r4
 800791c:	e7d2      	b.n	80078c4 <_svfiprintf_r+0xa0>
 800791e:	9b03      	ldr	r3, [sp, #12]
 8007920:	1d19      	adds	r1, r3, #4
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	9103      	str	r1, [sp, #12]
 8007926:	2b00      	cmp	r3, #0
 8007928:	bfbb      	ittet	lt
 800792a:	425b      	neglt	r3, r3
 800792c:	f042 0202 	orrlt.w	r2, r2, #2
 8007930:	9307      	strge	r3, [sp, #28]
 8007932:	9307      	strlt	r3, [sp, #28]
 8007934:	bfb8      	it	lt
 8007936:	9204      	strlt	r2, [sp, #16]
 8007938:	7823      	ldrb	r3, [r4, #0]
 800793a:	2b2e      	cmp	r3, #46	@ 0x2e
 800793c:	d10a      	bne.n	8007954 <_svfiprintf_r+0x130>
 800793e:	7863      	ldrb	r3, [r4, #1]
 8007940:	2b2a      	cmp	r3, #42	@ 0x2a
 8007942:	d132      	bne.n	80079aa <_svfiprintf_r+0x186>
 8007944:	9b03      	ldr	r3, [sp, #12]
 8007946:	1d1a      	adds	r2, r3, #4
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	9203      	str	r2, [sp, #12]
 800794c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007950:	3402      	adds	r4, #2
 8007952:	9305      	str	r3, [sp, #20]
 8007954:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a18 <_svfiprintf_r+0x1f4>
 8007958:	7821      	ldrb	r1, [r4, #0]
 800795a:	2203      	movs	r2, #3
 800795c:	4650      	mov	r0, sl
 800795e:	f7f8 fc57 	bl	8000210 <memchr>
 8007962:	b138      	cbz	r0, 8007974 <_svfiprintf_r+0x150>
 8007964:	9b04      	ldr	r3, [sp, #16]
 8007966:	eba0 000a 	sub.w	r0, r0, sl
 800796a:	2240      	movs	r2, #64	@ 0x40
 800796c:	4082      	lsls	r2, r0
 800796e:	4313      	orrs	r3, r2
 8007970:	3401      	adds	r4, #1
 8007972:	9304      	str	r3, [sp, #16]
 8007974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007978:	4824      	ldr	r0, [pc, #144]	@ (8007a0c <_svfiprintf_r+0x1e8>)
 800797a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800797e:	2206      	movs	r2, #6
 8007980:	f7f8 fc46 	bl	8000210 <memchr>
 8007984:	2800      	cmp	r0, #0
 8007986:	d036      	beq.n	80079f6 <_svfiprintf_r+0x1d2>
 8007988:	4b21      	ldr	r3, [pc, #132]	@ (8007a10 <_svfiprintf_r+0x1ec>)
 800798a:	bb1b      	cbnz	r3, 80079d4 <_svfiprintf_r+0x1b0>
 800798c:	9b03      	ldr	r3, [sp, #12]
 800798e:	3307      	adds	r3, #7
 8007990:	f023 0307 	bic.w	r3, r3, #7
 8007994:	3308      	adds	r3, #8
 8007996:	9303      	str	r3, [sp, #12]
 8007998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800799a:	4433      	add	r3, r6
 800799c:	9309      	str	r3, [sp, #36]	@ 0x24
 800799e:	e76a      	b.n	8007876 <_svfiprintf_r+0x52>
 80079a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80079a4:	460c      	mov	r4, r1
 80079a6:	2001      	movs	r0, #1
 80079a8:	e7a8      	b.n	80078fc <_svfiprintf_r+0xd8>
 80079aa:	2300      	movs	r3, #0
 80079ac:	3401      	adds	r4, #1
 80079ae:	9305      	str	r3, [sp, #20]
 80079b0:	4619      	mov	r1, r3
 80079b2:	f04f 0c0a 	mov.w	ip, #10
 80079b6:	4620      	mov	r0, r4
 80079b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079bc:	3a30      	subs	r2, #48	@ 0x30
 80079be:	2a09      	cmp	r2, #9
 80079c0:	d903      	bls.n	80079ca <_svfiprintf_r+0x1a6>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0c6      	beq.n	8007954 <_svfiprintf_r+0x130>
 80079c6:	9105      	str	r1, [sp, #20]
 80079c8:	e7c4      	b.n	8007954 <_svfiprintf_r+0x130>
 80079ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80079ce:	4604      	mov	r4, r0
 80079d0:	2301      	movs	r3, #1
 80079d2:	e7f0      	b.n	80079b6 <_svfiprintf_r+0x192>
 80079d4:	ab03      	add	r3, sp, #12
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	462a      	mov	r2, r5
 80079da:	4b0e      	ldr	r3, [pc, #56]	@ (8007a14 <_svfiprintf_r+0x1f0>)
 80079dc:	a904      	add	r1, sp, #16
 80079de:	4638      	mov	r0, r7
 80079e0:	f7fd fe96 	bl	8005710 <_printf_float>
 80079e4:	1c42      	adds	r2, r0, #1
 80079e6:	4606      	mov	r6, r0
 80079e8:	d1d6      	bne.n	8007998 <_svfiprintf_r+0x174>
 80079ea:	89ab      	ldrh	r3, [r5, #12]
 80079ec:	065b      	lsls	r3, r3, #25
 80079ee:	f53f af2d 	bmi.w	800784c <_svfiprintf_r+0x28>
 80079f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079f4:	e72c      	b.n	8007850 <_svfiprintf_r+0x2c>
 80079f6:	ab03      	add	r3, sp, #12
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	462a      	mov	r2, r5
 80079fc:	4b05      	ldr	r3, [pc, #20]	@ (8007a14 <_svfiprintf_r+0x1f0>)
 80079fe:	a904      	add	r1, sp, #16
 8007a00:	4638      	mov	r0, r7
 8007a02:	f7fe f91d 	bl	8005c40 <_printf_i>
 8007a06:	e7ed      	b.n	80079e4 <_svfiprintf_r+0x1c0>
 8007a08:	080084f8 	.word	0x080084f8
 8007a0c:	08008502 	.word	0x08008502
 8007a10:	08005711 	.word	0x08005711
 8007a14:	0800776d 	.word	0x0800776d
 8007a18:	080084fe 	.word	0x080084fe

08007a1c <__sflush_r>:
 8007a1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a24:	0716      	lsls	r6, r2, #28
 8007a26:	4605      	mov	r5, r0
 8007a28:	460c      	mov	r4, r1
 8007a2a:	d454      	bmi.n	8007ad6 <__sflush_r+0xba>
 8007a2c:	684b      	ldr	r3, [r1, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	dc02      	bgt.n	8007a38 <__sflush_r+0x1c>
 8007a32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dd48      	ble.n	8007aca <__sflush_r+0xae>
 8007a38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a3a:	2e00      	cmp	r6, #0
 8007a3c:	d045      	beq.n	8007aca <__sflush_r+0xae>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a44:	682f      	ldr	r7, [r5, #0]
 8007a46:	6a21      	ldr	r1, [r4, #32]
 8007a48:	602b      	str	r3, [r5, #0]
 8007a4a:	d030      	beq.n	8007aae <__sflush_r+0x92>
 8007a4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	0759      	lsls	r1, r3, #29
 8007a52:	d505      	bpl.n	8007a60 <__sflush_r+0x44>
 8007a54:	6863      	ldr	r3, [r4, #4]
 8007a56:	1ad2      	subs	r2, r2, r3
 8007a58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a5a:	b10b      	cbz	r3, 8007a60 <__sflush_r+0x44>
 8007a5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a5e:	1ad2      	subs	r2, r2, r3
 8007a60:	2300      	movs	r3, #0
 8007a62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a64:	6a21      	ldr	r1, [r4, #32]
 8007a66:	4628      	mov	r0, r5
 8007a68:	47b0      	blx	r6
 8007a6a:	1c43      	adds	r3, r0, #1
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	d106      	bne.n	8007a7e <__sflush_r+0x62>
 8007a70:	6829      	ldr	r1, [r5, #0]
 8007a72:	291d      	cmp	r1, #29
 8007a74:	d82b      	bhi.n	8007ace <__sflush_r+0xb2>
 8007a76:	4a2a      	ldr	r2, [pc, #168]	@ (8007b20 <__sflush_r+0x104>)
 8007a78:	410a      	asrs	r2, r1
 8007a7a:	07d6      	lsls	r6, r2, #31
 8007a7c:	d427      	bmi.n	8007ace <__sflush_r+0xb2>
 8007a7e:	2200      	movs	r2, #0
 8007a80:	6062      	str	r2, [r4, #4]
 8007a82:	04d9      	lsls	r1, r3, #19
 8007a84:	6922      	ldr	r2, [r4, #16]
 8007a86:	6022      	str	r2, [r4, #0]
 8007a88:	d504      	bpl.n	8007a94 <__sflush_r+0x78>
 8007a8a:	1c42      	adds	r2, r0, #1
 8007a8c:	d101      	bne.n	8007a92 <__sflush_r+0x76>
 8007a8e:	682b      	ldr	r3, [r5, #0]
 8007a90:	b903      	cbnz	r3, 8007a94 <__sflush_r+0x78>
 8007a92:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a96:	602f      	str	r7, [r5, #0]
 8007a98:	b1b9      	cbz	r1, 8007aca <__sflush_r+0xae>
 8007a9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a9e:	4299      	cmp	r1, r3
 8007aa0:	d002      	beq.n	8007aa8 <__sflush_r+0x8c>
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f7ff f9e0 	bl	8006e68 <_free_r>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	6363      	str	r3, [r4, #52]	@ 0x34
 8007aac:	e00d      	b.n	8007aca <__sflush_r+0xae>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	47b0      	blx	r6
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	1c50      	adds	r0, r2, #1
 8007ab8:	d1c9      	bne.n	8007a4e <__sflush_r+0x32>
 8007aba:	682b      	ldr	r3, [r5, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0c6      	beq.n	8007a4e <__sflush_r+0x32>
 8007ac0:	2b1d      	cmp	r3, #29
 8007ac2:	d001      	beq.n	8007ac8 <__sflush_r+0xac>
 8007ac4:	2b16      	cmp	r3, #22
 8007ac6:	d11e      	bne.n	8007b06 <__sflush_r+0xea>
 8007ac8:	602f      	str	r7, [r5, #0]
 8007aca:	2000      	movs	r0, #0
 8007acc:	e022      	b.n	8007b14 <__sflush_r+0xf8>
 8007ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ad2:	b21b      	sxth	r3, r3
 8007ad4:	e01b      	b.n	8007b0e <__sflush_r+0xf2>
 8007ad6:	690f      	ldr	r7, [r1, #16]
 8007ad8:	2f00      	cmp	r7, #0
 8007ada:	d0f6      	beq.n	8007aca <__sflush_r+0xae>
 8007adc:	0793      	lsls	r3, r2, #30
 8007ade:	680e      	ldr	r6, [r1, #0]
 8007ae0:	bf08      	it	eq
 8007ae2:	694b      	ldreq	r3, [r1, #20]
 8007ae4:	600f      	str	r7, [r1, #0]
 8007ae6:	bf18      	it	ne
 8007ae8:	2300      	movne	r3, #0
 8007aea:	eba6 0807 	sub.w	r8, r6, r7
 8007aee:	608b      	str	r3, [r1, #8]
 8007af0:	f1b8 0f00 	cmp.w	r8, #0
 8007af4:	dde9      	ble.n	8007aca <__sflush_r+0xae>
 8007af6:	6a21      	ldr	r1, [r4, #32]
 8007af8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007afa:	4643      	mov	r3, r8
 8007afc:	463a      	mov	r2, r7
 8007afe:	4628      	mov	r0, r5
 8007b00:	47b0      	blx	r6
 8007b02:	2800      	cmp	r0, #0
 8007b04:	dc08      	bgt.n	8007b18 <__sflush_r+0xfc>
 8007b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b0e:	81a3      	strh	r3, [r4, #12]
 8007b10:	f04f 30ff 	mov.w	r0, #4294967295
 8007b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b18:	4407      	add	r7, r0
 8007b1a:	eba8 0800 	sub.w	r8, r8, r0
 8007b1e:	e7e7      	b.n	8007af0 <__sflush_r+0xd4>
 8007b20:	dfbffffe 	.word	0xdfbffffe

08007b24 <_fflush_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	690b      	ldr	r3, [r1, #16]
 8007b28:	4605      	mov	r5, r0
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	b913      	cbnz	r3, 8007b34 <_fflush_r+0x10>
 8007b2e:	2500      	movs	r5, #0
 8007b30:	4628      	mov	r0, r5
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	b118      	cbz	r0, 8007b3e <_fflush_r+0x1a>
 8007b36:	6a03      	ldr	r3, [r0, #32]
 8007b38:	b90b      	cbnz	r3, 8007b3e <_fflush_r+0x1a>
 8007b3a:	f7fe fa2d 	bl	8005f98 <__sinit>
 8007b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0f3      	beq.n	8007b2e <_fflush_r+0xa>
 8007b46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b48:	07d0      	lsls	r0, r2, #31
 8007b4a:	d404      	bmi.n	8007b56 <_fflush_r+0x32>
 8007b4c:	0599      	lsls	r1, r3, #22
 8007b4e:	d402      	bmi.n	8007b56 <_fflush_r+0x32>
 8007b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b52:	f7fe fb38 	bl	80061c6 <__retarget_lock_acquire_recursive>
 8007b56:	4628      	mov	r0, r5
 8007b58:	4621      	mov	r1, r4
 8007b5a:	f7ff ff5f 	bl	8007a1c <__sflush_r>
 8007b5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b60:	07da      	lsls	r2, r3, #31
 8007b62:	4605      	mov	r5, r0
 8007b64:	d4e4      	bmi.n	8007b30 <_fflush_r+0xc>
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	059b      	lsls	r3, r3, #22
 8007b6a:	d4e1      	bmi.n	8007b30 <_fflush_r+0xc>
 8007b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b6e:	f7fe fb2b 	bl	80061c8 <__retarget_lock_release_recursive>
 8007b72:	e7dd      	b.n	8007b30 <_fflush_r+0xc>

08007b74 <memmove>:
 8007b74:	4288      	cmp	r0, r1
 8007b76:	b510      	push	{r4, lr}
 8007b78:	eb01 0402 	add.w	r4, r1, r2
 8007b7c:	d902      	bls.n	8007b84 <memmove+0x10>
 8007b7e:	4284      	cmp	r4, r0
 8007b80:	4623      	mov	r3, r4
 8007b82:	d807      	bhi.n	8007b94 <memmove+0x20>
 8007b84:	1e43      	subs	r3, r0, #1
 8007b86:	42a1      	cmp	r1, r4
 8007b88:	d008      	beq.n	8007b9c <memmove+0x28>
 8007b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b92:	e7f8      	b.n	8007b86 <memmove+0x12>
 8007b94:	4402      	add	r2, r0
 8007b96:	4601      	mov	r1, r0
 8007b98:	428a      	cmp	r2, r1
 8007b9a:	d100      	bne.n	8007b9e <memmove+0x2a>
 8007b9c:	bd10      	pop	{r4, pc}
 8007b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ba6:	e7f7      	b.n	8007b98 <memmove+0x24>

08007ba8 <_sbrk_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4d06      	ldr	r5, [pc, #24]	@ (8007bc4 <_sbrk_r+0x1c>)
 8007bac:	2300      	movs	r3, #0
 8007bae:	4604      	mov	r4, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	602b      	str	r3, [r5, #0]
 8007bb4:	f7fd fc9c 	bl	80054f0 <_sbrk>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d102      	bne.n	8007bc2 <_sbrk_r+0x1a>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b103      	cbz	r3, 8007bc2 <_sbrk_r+0x1a>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	20000494 	.word	0x20000494

08007bc8 <memcpy>:
 8007bc8:	440a      	add	r2, r1
 8007bca:	4291      	cmp	r1, r2
 8007bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bd0:	d100      	bne.n	8007bd4 <memcpy+0xc>
 8007bd2:	4770      	bx	lr
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bde:	4291      	cmp	r1, r2
 8007be0:	d1f9      	bne.n	8007bd6 <memcpy+0xe>
 8007be2:	bd10      	pop	{r4, pc}

08007be4 <__assert_func>:
 8007be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007be6:	4614      	mov	r4, r2
 8007be8:	461a      	mov	r2, r3
 8007bea:	4b09      	ldr	r3, [pc, #36]	@ (8007c10 <__assert_func+0x2c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4605      	mov	r5, r0
 8007bf0:	68d8      	ldr	r0, [r3, #12]
 8007bf2:	b954      	cbnz	r4, 8007c0a <__assert_func+0x26>
 8007bf4:	4b07      	ldr	r3, [pc, #28]	@ (8007c14 <__assert_func+0x30>)
 8007bf6:	461c      	mov	r4, r3
 8007bf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bfc:	9100      	str	r1, [sp, #0]
 8007bfe:	462b      	mov	r3, r5
 8007c00:	4905      	ldr	r1, [pc, #20]	@ (8007c18 <__assert_func+0x34>)
 8007c02:	f000 f86f 	bl	8007ce4 <fiprintf>
 8007c06:	f000 f87f 	bl	8007d08 <abort>
 8007c0a:	4b04      	ldr	r3, [pc, #16]	@ (8007c1c <__assert_func+0x38>)
 8007c0c:	e7f4      	b.n	8007bf8 <__assert_func+0x14>
 8007c0e:	bf00      	nop
 8007c10:	2000001c 	.word	0x2000001c
 8007c14:	0800854e 	.word	0x0800854e
 8007c18:	08008520 	.word	0x08008520
 8007c1c:	08008513 	.word	0x08008513

08007c20 <_calloc_r>:
 8007c20:	b570      	push	{r4, r5, r6, lr}
 8007c22:	fba1 5402 	umull	r5, r4, r1, r2
 8007c26:	b93c      	cbnz	r4, 8007c38 <_calloc_r+0x18>
 8007c28:	4629      	mov	r1, r5
 8007c2a:	f7ff f991 	bl	8006f50 <_malloc_r>
 8007c2e:	4606      	mov	r6, r0
 8007c30:	b928      	cbnz	r0, 8007c3e <_calloc_r+0x1e>
 8007c32:	2600      	movs	r6, #0
 8007c34:	4630      	mov	r0, r6
 8007c36:	bd70      	pop	{r4, r5, r6, pc}
 8007c38:	220c      	movs	r2, #12
 8007c3a:	6002      	str	r2, [r0, #0]
 8007c3c:	e7f9      	b.n	8007c32 <_calloc_r+0x12>
 8007c3e:	462a      	mov	r2, r5
 8007c40:	4621      	mov	r1, r4
 8007c42:	f7fe fa42 	bl	80060ca <memset>
 8007c46:	e7f5      	b.n	8007c34 <_calloc_r+0x14>

08007c48 <__ascii_mbtowc>:
 8007c48:	b082      	sub	sp, #8
 8007c4a:	b901      	cbnz	r1, 8007c4e <__ascii_mbtowc+0x6>
 8007c4c:	a901      	add	r1, sp, #4
 8007c4e:	b142      	cbz	r2, 8007c62 <__ascii_mbtowc+0x1a>
 8007c50:	b14b      	cbz	r3, 8007c66 <__ascii_mbtowc+0x1e>
 8007c52:	7813      	ldrb	r3, [r2, #0]
 8007c54:	600b      	str	r3, [r1, #0]
 8007c56:	7812      	ldrb	r2, [r2, #0]
 8007c58:	1e10      	subs	r0, r2, #0
 8007c5a:	bf18      	it	ne
 8007c5c:	2001      	movne	r0, #1
 8007c5e:	b002      	add	sp, #8
 8007c60:	4770      	bx	lr
 8007c62:	4610      	mov	r0, r2
 8007c64:	e7fb      	b.n	8007c5e <__ascii_mbtowc+0x16>
 8007c66:	f06f 0001 	mvn.w	r0, #1
 8007c6a:	e7f8      	b.n	8007c5e <__ascii_mbtowc+0x16>

08007c6c <_realloc_r>:
 8007c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c70:	4680      	mov	r8, r0
 8007c72:	4615      	mov	r5, r2
 8007c74:	460c      	mov	r4, r1
 8007c76:	b921      	cbnz	r1, 8007c82 <_realloc_r+0x16>
 8007c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	f7ff b967 	b.w	8006f50 <_malloc_r>
 8007c82:	b92a      	cbnz	r2, 8007c90 <_realloc_r+0x24>
 8007c84:	f7ff f8f0 	bl	8006e68 <_free_r>
 8007c88:	2400      	movs	r4, #0
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c90:	f000 f841 	bl	8007d16 <_malloc_usable_size_r>
 8007c94:	4285      	cmp	r5, r0
 8007c96:	4606      	mov	r6, r0
 8007c98:	d802      	bhi.n	8007ca0 <_realloc_r+0x34>
 8007c9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c9e:	d8f4      	bhi.n	8007c8a <_realloc_r+0x1e>
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	f7ff f954 	bl	8006f50 <_malloc_r>
 8007ca8:	4607      	mov	r7, r0
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d0ec      	beq.n	8007c88 <_realloc_r+0x1c>
 8007cae:	42b5      	cmp	r5, r6
 8007cb0:	462a      	mov	r2, r5
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	bf28      	it	cs
 8007cb6:	4632      	movcs	r2, r6
 8007cb8:	f7ff ff86 	bl	8007bc8 <memcpy>
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	f7ff f8d2 	bl	8006e68 <_free_r>
 8007cc4:	463c      	mov	r4, r7
 8007cc6:	e7e0      	b.n	8007c8a <_realloc_r+0x1e>

08007cc8 <__ascii_wctomb>:
 8007cc8:	4603      	mov	r3, r0
 8007cca:	4608      	mov	r0, r1
 8007ccc:	b141      	cbz	r1, 8007ce0 <__ascii_wctomb+0x18>
 8007cce:	2aff      	cmp	r2, #255	@ 0xff
 8007cd0:	d904      	bls.n	8007cdc <__ascii_wctomb+0x14>
 8007cd2:	228a      	movs	r2, #138	@ 0x8a
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cda:	4770      	bx	lr
 8007cdc:	700a      	strb	r2, [r1, #0]
 8007cde:	2001      	movs	r0, #1
 8007ce0:	4770      	bx	lr
	...

08007ce4 <fiprintf>:
 8007ce4:	b40e      	push	{r1, r2, r3}
 8007ce6:	b503      	push	{r0, r1, lr}
 8007ce8:	4601      	mov	r1, r0
 8007cea:	ab03      	add	r3, sp, #12
 8007cec:	4805      	ldr	r0, [pc, #20]	@ (8007d04 <fiprintf+0x20>)
 8007cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cf2:	6800      	ldr	r0, [r0, #0]
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	f000 f83f 	bl	8007d78 <_vfiprintf_r>
 8007cfa:	b002      	add	sp, #8
 8007cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d00:	b003      	add	sp, #12
 8007d02:	4770      	bx	lr
 8007d04:	2000001c 	.word	0x2000001c

08007d08 <abort>:
 8007d08:	b508      	push	{r3, lr}
 8007d0a:	2006      	movs	r0, #6
 8007d0c:	f000 fa08 	bl	8008120 <raise>
 8007d10:	2001      	movs	r0, #1
 8007d12:	f7fd fb74 	bl	80053fe <_exit>

08007d16 <_malloc_usable_size_r>:
 8007d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d1a:	1f18      	subs	r0, r3, #4
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	bfbc      	itt	lt
 8007d20:	580b      	ldrlt	r3, [r1, r0]
 8007d22:	18c0      	addlt	r0, r0, r3
 8007d24:	4770      	bx	lr

08007d26 <__sfputc_r>:
 8007d26:	6893      	ldr	r3, [r2, #8]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	b410      	push	{r4}
 8007d2e:	6093      	str	r3, [r2, #8]
 8007d30:	da08      	bge.n	8007d44 <__sfputc_r+0x1e>
 8007d32:	6994      	ldr	r4, [r2, #24]
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	db01      	blt.n	8007d3c <__sfputc_r+0x16>
 8007d38:	290a      	cmp	r1, #10
 8007d3a:	d103      	bne.n	8007d44 <__sfputc_r+0x1e>
 8007d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d40:	f000 b932 	b.w	8007fa8 <__swbuf_r>
 8007d44:	6813      	ldr	r3, [r2, #0]
 8007d46:	1c58      	adds	r0, r3, #1
 8007d48:	6010      	str	r0, [r2, #0]
 8007d4a:	7019      	strb	r1, [r3, #0]
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <__sfputs_r>:
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	4606      	mov	r6, r0
 8007d58:	460f      	mov	r7, r1
 8007d5a:	4614      	mov	r4, r2
 8007d5c:	18d5      	adds	r5, r2, r3
 8007d5e:	42ac      	cmp	r4, r5
 8007d60:	d101      	bne.n	8007d66 <__sfputs_r+0x12>
 8007d62:	2000      	movs	r0, #0
 8007d64:	e007      	b.n	8007d76 <__sfputs_r+0x22>
 8007d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d6a:	463a      	mov	r2, r7
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f7ff ffda 	bl	8007d26 <__sfputc_r>
 8007d72:	1c43      	adds	r3, r0, #1
 8007d74:	d1f3      	bne.n	8007d5e <__sfputs_r+0xa>
 8007d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d78 <_vfiprintf_r>:
 8007d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	460d      	mov	r5, r1
 8007d7e:	b09d      	sub	sp, #116	@ 0x74
 8007d80:	4614      	mov	r4, r2
 8007d82:	4698      	mov	r8, r3
 8007d84:	4606      	mov	r6, r0
 8007d86:	b118      	cbz	r0, 8007d90 <_vfiprintf_r+0x18>
 8007d88:	6a03      	ldr	r3, [r0, #32]
 8007d8a:	b90b      	cbnz	r3, 8007d90 <_vfiprintf_r+0x18>
 8007d8c:	f7fe f904 	bl	8005f98 <__sinit>
 8007d90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d92:	07d9      	lsls	r1, r3, #31
 8007d94:	d405      	bmi.n	8007da2 <_vfiprintf_r+0x2a>
 8007d96:	89ab      	ldrh	r3, [r5, #12]
 8007d98:	059a      	lsls	r2, r3, #22
 8007d9a:	d402      	bmi.n	8007da2 <_vfiprintf_r+0x2a>
 8007d9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d9e:	f7fe fa12 	bl	80061c6 <__retarget_lock_acquire_recursive>
 8007da2:	89ab      	ldrh	r3, [r5, #12]
 8007da4:	071b      	lsls	r3, r3, #28
 8007da6:	d501      	bpl.n	8007dac <_vfiprintf_r+0x34>
 8007da8:	692b      	ldr	r3, [r5, #16]
 8007daa:	b99b      	cbnz	r3, 8007dd4 <_vfiprintf_r+0x5c>
 8007dac:	4629      	mov	r1, r5
 8007dae:	4630      	mov	r0, r6
 8007db0:	f000 f938 	bl	8008024 <__swsetup_r>
 8007db4:	b170      	cbz	r0, 8007dd4 <_vfiprintf_r+0x5c>
 8007db6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007db8:	07dc      	lsls	r4, r3, #31
 8007dba:	d504      	bpl.n	8007dc6 <_vfiprintf_r+0x4e>
 8007dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc0:	b01d      	add	sp, #116	@ 0x74
 8007dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc6:	89ab      	ldrh	r3, [r5, #12]
 8007dc8:	0598      	lsls	r0, r3, #22
 8007dca:	d4f7      	bmi.n	8007dbc <_vfiprintf_r+0x44>
 8007dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dce:	f7fe f9fb 	bl	80061c8 <__retarget_lock_release_recursive>
 8007dd2:	e7f3      	b.n	8007dbc <_vfiprintf_r+0x44>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dd8:	2320      	movs	r3, #32
 8007dda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8007de2:	2330      	movs	r3, #48	@ 0x30
 8007de4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f94 <_vfiprintf_r+0x21c>
 8007de8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dec:	f04f 0901 	mov.w	r9, #1
 8007df0:	4623      	mov	r3, r4
 8007df2:	469a      	mov	sl, r3
 8007df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007df8:	b10a      	cbz	r2, 8007dfe <_vfiprintf_r+0x86>
 8007dfa:	2a25      	cmp	r2, #37	@ 0x25
 8007dfc:	d1f9      	bne.n	8007df2 <_vfiprintf_r+0x7a>
 8007dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8007e02:	d00b      	beq.n	8007e1c <_vfiprintf_r+0xa4>
 8007e04:	465b      	mov	r3, fp
 8007e06:	4622      	mov	r2, r4
 8007e08:	4629      	mov	r1, r5
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f7ff ffa2 	bl	8007d54 <__sfputs_r>
 8007e10:	3001      	adds	r0, #1
 8007e12:	f000 80a7 	beq.w	8007f64 <_vfiprintf_r+0x1ec>
 8007e16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e18:	445a      	add	r2, fp
 8007e1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 809f 	beq.w	8007f64 <_vfiprintf_r+0x1ec>
 8007e26:	2300      	movs	r3, #0
 8007e28:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e30:	f10a 0a01 	add.w	sl, sl, #1
 8007e34:	9304      	str	r3, [sp, #16]
 8007e36:	9307      	str	r3, [sp, #28]
 8007e38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e3e:	4654      	mov	r4, sl
 8007e40:	2205      	movs	r2, #5
 8007e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e46:	4853      	ldr	r0, [pc, #332]	@ (8007f94 <_vfiprintf_r+0x21c>)
 8007e48:	f7f8 f9e2 	bl	8000210 <memchr>
 8007e4c:	9a04      	ldr	r2, [sp, #16]
 8007e4e:	b9d8      	cbnz	r0, 8007e88 <_vfiprintf_r+0x110>
 8007e50:	06d1      	lsls	r1, r2, #27
 8007e52:	bf44      	itt	mi
 8007e54:	2320      	movmi	r3, #32
 8007e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e5a:	0713      	lsls	r3, r2, #28
 8007e5c:	bf44      	itt	mi
 8007e5e:	232b      	movmi	r3, #43	@ 0x2b
 8007e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e64:	f89a 3000 	ldrb.w	r3, [sl]
 8007e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e6a:	d015      	beq.n	8007e98 <_vfiprintf_r+0x120>
 8007e6c:	9a07      	ldr	r2, [sp, #28]
 8007e6e:	4654      	mov	r4, sl
 8007e70:	2000      	movs	r0, #0
 8007e72:	f04f 0c0a 	mov.w	ip, #10
 8007e76:	4621      	mov	r1, r4
 8007e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e7c:	3b30      	subs	r3, #48	@ 0x30
 8007e7e:	2b09      	cmp	r3, #9
 8007e80:	d94b      	bls.n	8007f1a <_vfiprintf_r+0x1a2>
 8007e82:	b1b0      	cbz	r0, 8007eb2 <_vfiprintf_r+0x13a>
 8007e84:	9207      	str	r2, [sp, #28]
 8007e86:	e014      	b.n	8007eb2 <_vfiprintf_r+0x13a>
 8007e88:	eba0 0308 	sub.w	r3, r0, r8
 8007e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e90:	4313      	orrs	r3, r2
 8007e92:	9304      	str	r3, [sp, #16]
 8007e94:	46a2      	mov	sl, r4
 8007e96:	e7d2      	b.n	8007e3e <_vfiprintf_r+0xc6>
 8007e98:	9b03      	ldr	r3, [sp, #12]
 8007e9a:	1d19      	adds	r1, r3, #4
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	9103      	str	r1, [sp, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	bfbb      	ittet	lt
 8007ea4:	425b      	neglt	r3, r3
 8007ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8007eaa:	9307      	strge	r3, [sp, #28]
 8007eac:	9307      	strlt	r3, [sp, #28]
 8007eae:	bfb8      	it	lt
 8007eb0:	9204      	strlt	r2, [sp, #16]
 8007eb2:	7823      	ldrb	r3, [r4, #0]
 8007eb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007eb6:	d10a      	bne.n	8007ece <_vfiprintf_r+0x156>
 8007eb8:	7863      	ldrb	r3, [r4, #1]
 8007eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ebc:	d132      	bne.n	8007f24 <_vfiprintf_r+0x1ac>
 8007ebe:	9b03      	ldr	r3, [sp, #12]
 8007ec0:	1d1a      	adds	r2, r3, #4
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	9203      	str	r2, [sp, #12]
 8007ec6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007eca:	3402      	adds	r4, #2
 8007ecc:	9305      	str	r3, [sp, #20]
 8007ece:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007fa4 <_vfiprintf_r+0x22c>
 8007ed2:	7821      	ldrb	r1, [r4, #0]
 8007ed4:	2203      	movs	r2, #3
 8007ed6:	4650      	mov	r0, sl
 8007ed8:	f7f8 f99a 	bl	8000210 <memchr>
 8007edc:	b138      	cbz	r0, 8007eee <_vfiprintf_r+0x176>
 8007ede:	9b04      	ldr	r3, [sp, #16]
 8007ee0:	eba0 000a 	sub.w	r0, r0, sl
 8007ee4:	2240      	movs	r2, #64	@ 0x40
 8007ee6:	4082      	lsls	r2, r0
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	3401      	adds	r4, #1
 8007eec:	9304      	str	r3, [sp, #16]
 8007eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef2:	4829      	ldr	r0, [pc, #164]	@ (8007f98 <_vfiprintf_r+0x220>)
 8007ef4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ef8:	2206      	movs	r2, #6
 8007efa:	f7f8 f989 	bl	8000210 <memchr>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d03f      	beq.n	8007f82 <_vfiprintf_r+0x20a>
 8007f02:	4b26      	ldr	r3, [pc, #152]	@ (8007f9c <_vfiprintf_r+0x224>)
 8007f04:	bb1b      	cbnz	r3, 8007f4e <_vfiprintf_r+0x1d6>
 8007f06:	9b03      	ldr	r3, [sp, #12]
 8007f08:	3307      	adds	r3, #7
 8007f0a:	f023 0307 	bic.w	r3, r3, #7
 8007f0e:	3308      	adds	r3, #8
 8007f10:	9303      	str	r3, [sp, #12]
 8007f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f14:	443b      	add	r3, r7
 8007f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f18:	e76a      	b.n	8007df0 <_vfiprintf_r+0x78>
 8007f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f1e:	460c      	mov	r4, r1
 8007f20:	2001      	movs	r0, #1
 8007f22:	e7a8      	b.n	8007e76 <_vfiprintf_r+0xfe>
 8007f24:	2300      	movs	r3, #0
 8007f26:	3401      	adds	r4, #1
 8007f28:	9305      	str	r3, [sp, #20]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	f04f 0c0a 	mov.w	ip, #10
 8007f30:	4620      	mov	r0, r4
 8007f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f36:	3a30      	subs	r2, #48	@ 0x30
 8007f38:	2a09      	cmp	r2, #9
 8007f3a:	d903      	bls.n	8007f44 <_vfiprintf_r+0x1cc>
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0c6      	beq.n	8007ece <_vfiprintf_r+0x156>
 8007f40:	9105      	str	r1, [sp, #20]
 8007f42:	e7c4      	b.n	8007ece <_vfiprintf_r+0x156>
 8007f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f48:	4604      	mov	r4, r0
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e7f0      	b.n	8007f30 <_vfiprintf_r+0x1b8>
 8007f4e:	ab03      	add	r3, sp, #12
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	462a      	mov	r2, r5
 8007f54:	4b12      	ldr	r3, [pc, #72]	@ (8007fa0 <_vfiprintf_r+0x228>)
 8007f56:	a904      	add	r1, sp, #16
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f7fd fbd9 	bl	8005710 <_printf_float>
 8007f5e:	4607      	mov	r7, r0
 8007f60:	1c78      	adds	r0, r7, #1
 8007f62:	d1d6      	bne.n	8007f12 <_vfiprintf_r+0x19a>
 8007f64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f66:	07d9      	lsls	r1, r3, #31
 8007f68:	d405      	bmi.n	8007f76 <_vfiprintf_r+0x1fe>
 8007f6a:	89ab      	ldrh	r3, [r5, #12]
 8007f6c:	059a      	lsls	r2, r3, #22
 8007f6e:	d402      	bmi.n	8007f76 <_vfiprintf_r+0x1fe>
 8007f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f72:	f7fe f929 	bl	80061c8 <__retarget_lock_release_recursive>
 8007f76:	89ab      	ldrh	r3, [r5, #12]
 8007f78:	065b      	lsls	r3, r3, #25
 8007f7a:	f53f af1f 	bmi.w	8007dbc <_vfiprintf_r+0x44>
 8007f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f80:	e71e      	b.n	8007dc0 <_vfiprintf_r+0x48>
 8007f82:	ab03      	add	r3, sp, #12
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	462a      	mov	r2, r5
 8007f88:	4b05      	ldr	r3, [pc, #20]	@ (8007fa0 <_vfiprintf_r+0x228>)
 8007f8a:	a904      	add	r1, sp, #16
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f7fd fe57 	bl	8005c40 <_printf_i>
 8007f92:	e7e4      	b.n	8007f5e <_vfiprintf_r+0x1e6>
 8007f94:	080084f8 	.word	0x080084f8
 8007f98:	08008502 	.word	0x08008502
 8007f9c:	08005711 	.word	0x08005711
 8007fa0:	08007d55 	.word	0x08007d55
 8007fa4:	080084fe 	.word	0x080084fe

08007fa8 <__swbuf_r>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	460e      	mov	r6, r1
 8007fac:	4614      	mov	r4, r2
 8007fae:	4605      	mov	r5, r0
 8007fb0:	b118      	cbz	r0, 8007fba <__swbuf_r+0x12>
 8007fb2:	6a03      	ldr	r3, [r0, #32]
 8007fb4:	b90b      	cbnz	r3, 8007fba <__swbuf_r+0x12>
 8007fb6:	f7fd ffef 	bl	8005f98 <__sinit>
 8007fba:	69a3      	ldr	r3, [r4, #24]
 8007fbc:	60a3      	str	r3, [r4, #8]
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	071a      	lsls	r2, r3, #28
 8007fc2:	d501      	bpl.n	8007fc8 <__swbuf_r+0x20>
 8007fc4:	6923      	ldr	r3, [r4, #16]
 8007fc6:	b943      	cbnz	r3, 8007fda <__swbuf_r+0x32>
 8007fc8:	4621      	mov	r1, r4
 8007fca:	4628      	mov	r0, r5
 8007fcc:	f000 f82a 	bl	8008024 <__swsetup_r>
 8007fd0:	b118      	cbz	r0, 8007fda <__swbuf_r+0x32>
 8007fd2:	f04f 37ff 	mov.w	r7, #4294967295
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	6922      	ldr	r2, [r4, #16]
 8007fde:	1a98      	subs	r0, r3, r2
 8007fe0:	6963      	ldr	r3, [r4, #20]
 8007fe2:	b2f6      	uxtb	r6, r6
 8007fe4:	4283      	cmp	r3, r0
 8007fe6:	4637      	mov	r7, r6
 8007fe8:	dc05      	bgt.n	8007ff6 <__swbuf_r+0x4e>
 8007fea:	4621      	mov	r1, r4
 8007fec:	4628      	mov	r0, r5
 8007fee:	f7ff fd99 	bl	8007b24 <_fflush_r>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	d1ed      	bne.n	8007fd2 <__swbuf_r+0x2a>
 8007ff6:	68a3      	ldr	r3, [r4, #8]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	60a3      	str	r3, [r4, #8]
 8007ffc:	6823      	ldr	r3, [r4, #0]
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	6022      	str	r2, [r4, #0]
 8008002:	701e      	strb	r6, [r3, #0]
 8008004:	6962      	ldr	r2, [r4, #20]
 8008006:	1c43      	adds	r3, r0, #1
 8008008:	429a      	cmp	r2, r3
 800800a:	d004      	beq.n	8008016 <__swbuf_r+0x6e>
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	07db      	lsls	r3, r3, #31
 8008010:	d5e1      	bpl.n	8007fd6 <__swbuf_r+0x2e>
 8008012:	2e0a      	cmp	r6, #10
 8008014:	d1df      	bne.n	8007fd6 <__swbuf_r+0x2e>
 8008016:	4621      	mov	r1, r4
 8008018:	4628      	mov	r0, r5
 800801a:	f7ff fd83 	bl	8007b24 <_fflush_r>
 800801e:	2800      	cmp	r0, #0
 8008020:	d0d9      	beq.n	8007fd6 <__swbuf_r+0x2e>
 8008022:	e7d6      	b.n	8007fd2 <__swbuf_r+0x2a>

08008024 <__swsetup_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	4b29      	ldr	r3, [pc, #164]	@ (80080cc <__swsetup_r+0xa8>)
 8008028:	4605      	mov	r5, r0
 800802a:	6818      	ldr	r0, [r3, #0]
 800802c:	460c      	mov	r4, r1
 800802e:	b118      	cbz	r0, 8008038 <__swsetup_r+0x14>
 8008030:	6a03      	ldr	r3, [r0, #32]
 8008032:	b90b      	cbnz	r3, 8008038 <__swsetup_r+0x14>
 8008034:	f7fd ffb0 	bl	8005f98 <__sinit>
 8008038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800803c:	0719      	lsls	r1, r3, #28
 800803e:	d422      	bmi.n	8008086 <__swsetup_r+0x62>
 8008040:	06da      	lsls	r2, r3, #27
 8008042:	d407      	bmi.n	8008054 <__swsetup_r+0x30>
 8008044:	2209      	movs	r2, #9
 8008046:	602a      	str	r2, [r5, #0]
 8008048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800804c:	81a3      	strh	r3, [r4, #12]
 800804e:	f04f 30ff 	mov.w	r0, #4294967295
 8008052:	e033      	b.n	80080bc <__swsetup_r+0x98>
 8008054:	0758      	lsls	r0, r3, #29
 8008056:	d512      	bpl.n	800807e <__swsetup_r+0x5a>
 8008058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800805a:	b141      	cbz	r1, 800806e <__swsetup_r+0x4a>
 800805c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008060:	4299      	cmp	r1, r3
 8008062:	d002      	beq.n	800806a <__swsetup_r+0x46>
 8008064:	4628      	mov	r0, r5
 8008066:	f7fe feff 	bl	8006e68 <_free_r>
 800806a:	2300      	movs	r3, #0
 800806c:	6363      	str	r3, [r4, #52]	@ 0x34
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008074:	81a3      	strh	r3, [r4, #12]
 8008076:	2300      	movs	r3, #0
 8008078:	6063      	str	r3, [r4, #4]
 800807a:	6923      	ldr	r3, [r4, #16]
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	f043 0308 	orr.w	r3, r3, #8
 8008084:	81a3      	strh	r3, [r4, #12]
 8008086:	6923      	ldr	r3, [r4, #16]
 8008088:	b94b      	cbnz	r3, 800809e <__swsetup_r+0x7a>
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008094:	d003      	beq.n	800809e <__swsetup_r+0x7a>
 8008096:	4621      	mov	r1, r4
 8008098:	4628      	mov	r0, r5
 800809a:	f000 f883 	bl	80081a4 <__smakebuf_r>
 800809e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080a2:	f013 0201 	ands.w	r2, r3, #1
 80080a6:	d00a      	beq.n	80080be <__swsetup_r+0x9a>
 80080a8:	2200      	movs	r2, #0
 80080aa:	60a2      	str	r2, [r4, #8]
 80080ac:	6962      	ldr	r2, [r4, #20]
 80080ae:	4252      	negs	r2, r2
 80080b0:	61a2      	str	r2, [r4, #24]
 80080b2:	6922      	ldr	r2, [r4, #16]
 80080b4:	b942      	cbnz	r2, 80080c8 <__swsetup_r+0xa4>
 80080b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80080ba:	d1c5      	bne.n	8008048 <__swsetup_r+0x24>
 80080bc:	bd38      	pop	{r3, r4, r5, pc}
 80080be:	0799      	lsls	r1, r3, #30
 80080c0:	bf58      	it	pl
 80080c2:	6962      	ldrpl	r2, [r4, #20]
 80080c4:	60a2      	str	r2, [r4, #8]
 80080c6:	e7f4      	b.n	80080b2 <__swsetup_r+0x8e>
 80080c8:	2000      	movs	r0, #0
 80080ca:	e7f7      	b.n	80080bc <__swsetup_r+0x98>
 80080cc:	2000001c 	.word	0x2000001c

080080d0 <_raise_r>:
 80080d0:	291f      	cmp	r1, #31
 80080d2:	b538      	push	{r3, r4, r5, lr}
 80080d4:	4605      	mov	r5, r0
 80080d6:	460c      	mov	r4, r1
 80080d8:	d904      	bls.n	80080e4 <_raise_r+0x14>
 80080da:	2316      	movs	r3, #22
 80080dc:	6003      	str	r3, [r0, #0]
 80080de:	f04f 30ff 	mov.w	r0, #4294967295
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80080e6:	b112      	cbz	r2, 80080ee <_raise_r+0x1e>
 80080e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080ec:	b94b      	cbnz	r3, 8008102 <_raise_r+0x32>
 80080ee:	4628      	mov	r0, r5
 80080f0:	f000 f830 	bl	8008154 <_getpid_r>
 80080f4:	4622      	mov	r2, r4
 80080f6:	4601      	mov	r1, r0
 80080f8:	4628      	mov	r0, r5
 80080fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080fe:	f000 b817 	b.w	8008130 <_kill_r>
 8008102:	2b01      	cmp	r3, #1
 8008104:	d00a      	beq.n	800811c <_raise_r+0x4c>
 8008106:	1c59      	adds	r1, r3, #1
 8008108:	d103      	bne.n	8008112 <_raise_r+0x42>
 800810a:	2316      	movs	r3, #22
 800810c:	6003      	str	r3, [r0, #0]
 800810e:	2001      	movs	r0, #1
 8008110:	e7e7      	b.n	80080e2 <_raise_r+0x12>
 8008112:	2100      	movs	r1, #0
 8008114:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008118:	4620      	mov	r0, r4
 800811a:	4798      	blx	r3
 800811c:	2000      	movs	r0, #0
 800811e:	e7e0      	b.n	80080e2 <_raise_r+0x12>

08008120 <raise>:
 8008120:	4b02      	ldr	r3, [pc, #8]	@ (800812c <raise+0xc>)
 8008122:	4601      	mov	r1, r0
 8008124:	6818      	ldr	r0, [r3, #0]
 8008126:	f7ff bfd3 	b.w	80080d0 <_raise_r>
 800812a:	bf00      	nop
 800812c:	2000001c 	.word	0x2000001c

08008130 <_kill_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d07      	ldr	r5, [pc, #28]	@ (8008150 <_kill_r+0x20>)
 8008134:	2300      	movs	r3, #0
 8008136:	4604      	mov	r4, r0
 8008138:	4608      	mov	r0, r1
 800813a:	4611      	mov	r1, r2
 800813c:	602b      	str	r3, [r5, #0]
 800813e:	f7fd f94e 	bl	80053de <_kill>
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	d102      	bne.n	800814c <_kill_r+0x1c>
 8008146:	682b      	ldr	r3, [r5, #0]
 8008148:	b103      	cbz	r3, 800814c <_kill_r+0x1c>
 800814a:	6023      	str	r3, [r4, #0]
 800814c:	bd38      	pop	{r3, r4, r5, pc}
 800814e:	bf00      	nop
 8008150:	20000494 	.word	0x20000494

08008154 <_getpid_r>:
 8008154:	f7fd b93b 	b.w	80053ce <_getpid>

08008158 <__swhatbuf_r>:
 8008158:	b570      	push	{r4, r5, r6, lr}
 800815a:	460c      	mov	r4, r1
 800815c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008160:	2900      	cmp	r1, #0
 8008162:	b096      	sub	sp, #88	@ 0x58
 8008164:	4615      	mov	r5, r2
 8008166:	461e      	mov	r6, r3
 8008168:	da0d      	bge.n	8008186 <__swhatbuf_r+0x2e>
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008170:	f04f 0100 	mov.w	r1, #0
 8008174:	bf14      	ite	ne
 8008176:	2340      	movne	r3, #64	@ 0x40
 8008178:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800817c:	2000      	movs	r0, #0
 800817e:	6031      	str	r1, [r6, #0]
 8008180:	602b      	str	r3, [r5, #0]
 8008182:	b016      	add	sp, #88	@ 0x58
 8008184:	bd70      	pop	{r4, r5, r6, pc}
 8008186:	466a      	mov	r2, sp
 8008188:	f000 f848 	bl	800821c <_fstat_r>
 800818c:	2800      	cmp	r0, #0
 800818e:	dbec      	blt.n	800816a <__swhatbuf_r+0x12>
 8008190:	9901      	ldr	r1, [sp, #4]
 8008192:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008196:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800819a:	4259      	negs	r1, r3
 800819c:	4159      	adcs	r1, r3
 800819e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081a2:	e7eb      	b.n	800817c <__swhatbuf_r+0x24>

080081a4 <__smakebuf_r>:
 80081a4:	898b      	ldrh	r3, [r1, #12]
 80081a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081a8:	079d      	lsls	r5, r3, #30
 80081aa:	4606      	mov	r6, r0
 80081ac:	460c      	mov	r4, r1
 80081ae:	d507      	bpl.n	80081c0 <__smakebuf_r+0x1c>
 80081b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	6123      	str	r3, [r4, #16]
 80081b8:	2301      	movs	r3, #1
 80081ba:	6163      	str	r3, [r4, #20]
 80081bc:	b003      	add	sp, #12
 80081be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081c0:	ab01      	add	r3, sp, #4
 80081c2:	466a      	mov	r2, sp
 80081c4:	f7ff ffc8 	bl	8008158 <__swhatbuf_r>
 80081c8:	9f00      	ldr	r7, [sp, #0]
 80081ca:	4605      	mov	r5, r0
 80081cc:	4639      	mov	r1, r7
 80081ce:	4630      	mov	r0, r6
 80081d0:	f7fe febe 	bl	8006f50 <_malloc_r>
 80081d4:	b948      	cbnz	r0, 80081ea <__smakebuf_r+0x46>
 80081d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081da:	059a      	lsls	r2, r3, #22
 80081dc:	d4ee      	bmi.n	80081bc <__smakebuf_r+0x18>
 80081de:	f023 0303 	bic.w	r3, r3, #3
 80081e2:	f043 0302 	orr.w	r3, r3, #2
 80081e6:	81a3      	strh	r3, [r4, #12]
 80081e8:	e7e2      	b.n	80081b0 <__smakebuf_r+0xc>
 80081ea:	89a3      	ldrh	r3, [r4, #12]
 80081ec:	6020      	str	r0, [r4, #0]
 80081ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081f2:	81a3      	strh	r3, [r4, #12]
 80081f4:	9b01      	ldr	r3, [sp, #4]
 80081f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80081fa:	b15b      	cbz	r3, 8008214 <__smakebuf_r+0x70>
 80081fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008200:	4630      	mov	r0, r6
 8008202:	f000 f81d 	bl	8008240 <_isatty_r>
 8008206:	b128      	cbz	r0, 8008214 <__smakebuf_r+0x70>
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	f023 0303 	bic.w	r3, r3, #3
 800820e:	f043 0301 	orr.w	r3, r3, #1
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	431d      	orrs	r5, r3
 8008218:	81a5      	strh	r5, [r4, #12]
 800821a:	e7cf      	b.n	80081bc <__smakebuf_r+0x18>

0800821c <_fstat_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4d07      	ldr	r5, [pc, #28]	@ (800823c <_fstat_r+0x20>)
 8008220:	2300      	movs	r3, #0
 8008222:	4604      	mov	r4, r0
 8008224:	4608      	mov	r0, r1
 8008226:	4611      	mov	r1, r2
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	f7fd f938 	bl	800549e <_fstat>
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	d102      	bne.n	8008238 <_fstat_r+0x1c>
 8008232:	682b      	ldr	r3, [r5, #0]
 8008234:	b103      	cbz	r3, 8008238 <_fstat_r+0x1c>
 8008236:	6023      	str	r3, [r4, #0]
 8008238:	bd38      	pop	{r3, r4, r5, pc}
 800823a:	bf00      	nop
 800823c:	20000494 	.word	0x20000494

08008240 <_isatty_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4d06      	ldr	r5, [pc, #24]	@ (800825c <_isatty_r+0x1c>)
 8008244:	2300      	movs	r3, #0
 8008246:	4604      	mov	r4, r0
 8008248:	4608      	mov	r0, r1
 800824a:	602b      	str	r3, [r5, #0]
 800824c:	f7fd f937 	bl	80054be <_isatty>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d102      	bne.n	800825a <_isatty_r+0x1a>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	b103      	cbz	r3, 800825a <_isatty_r+0x1a>
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	20000494 	.word	0x20000494

08008260 <_init>:
 8008260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008262:	bf00      	nop
 8008264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008266:	bc08      	pop	{r3}
 8008268:	469e      	mov	lr, r3
 800826a:	4770      	bx	lr

0800826c <_fini>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	bf00      	nop
 8008270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008272:	bc08      	pop	{r3}
 8008274:	469e      	mov	lr, r3
 8008276:	4770      	bx	lr
