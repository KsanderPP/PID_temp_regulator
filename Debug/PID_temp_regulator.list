
PID_temp_regulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b788  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800b958  0800b958  0000c958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be14  0800be14  0000d1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be14  0800be14  0000ce14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be1c  0800be1c  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be1c  0800be1c  0000ce1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be20  0800be20  0000ce20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800be24  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200001e4  0800c008  0000d1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800c008  0000d530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fb1  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a54  00000000  00000000  000211c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00023c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dee  00000000  00000000  00024de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281e4  00000000  00000000  00025bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017112  00000000  00000000  0004ddba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f67f6  00000000  00000000  00064ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b6c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062a8  00000000  00000000  0015b708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001619b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b940 	.word	0x0800b940

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800b940 	.word	0x0800b940

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f94d 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 f806 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f005 f9ee 	bl	80064b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f967 	bl	80013d2 <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f92f 	bl	800137e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000018 	.word	0x20000018
 8001138:	20000004 	.word	0x20000004
 800113c:	20000000 	.word	0x20000000

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000004 	.word	0x20000004
 8001164:	20000200 	.word	0x20000200

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000200 	.word	0x20000200

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000004 	.word	0x20000004

080011c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <__NVIC_SetPriorityGrouping+0x40>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <__NVIC_SetPriorityGrouping+0x40>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00
 800120c:	05fa0000 	.word	0x05fa0000

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db0b      	blt.n	8001256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	4907      	ldr	r1, [pc, #28]	@ (8001264 <__NVIC_EnableIRQ+0x38>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	@ (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	@ (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	@ 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	@ 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f7ff ff8e 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff29 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff3e 	bl	8001210 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff8e 	bl	80012bc <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5d 	bl	8001268 <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff31 	bl	800122c <__NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffa2 	bl	8001324 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff feb6 	bl	8001168 <HAL_GetTick>
 80013fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d008      	beq.n	800141c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2280      	movs	r2, #128	@ 0x80
 800140e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e052      	b.n	80014c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0216 	bic.w	r2, r2, #22
 800142a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800143a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	2b00      	cmp	r3, #0
 8001442:	d103      	bne.n	800144c <HAL_DMA_Abort+0x62>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001448:	2b00      	cmp	r3, #0
 800144a:	d007      	beq.n	800145c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0208 	bic.w	r2, r2, #8
 800145a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0201 	bic.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146c:	e013      	b.n	8001496 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800146e:	f7ff fe7b 	bl	8001168 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b05      	cmp	r3, #5
 800147a:	d90c      	bls.n	8001496 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2220      	movs	r2, #32
 8001480:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2203      	movs	r2, #3
 8001486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e015      	b.n	80014c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1e4      	bne.n	800146e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a8:	223f      	movs	r2, #63	@ 0x3f
 80014aa:	409a      	lsls	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d004      	beq.n	80014e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2280      	movs	r2, #128	@ 0x80
 80014e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e00c      	b.n	8001502 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2205      	movs	r2, #5
 80014ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0201 	bic.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	@ 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	e175      	b.n	800181c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001530:	2201      	movs	r2, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	429a      	cmp	r2, r3
 800154a:	f040 8164 	bne.w	8001816 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d005      	beq.n	8001566 <HAL_GPIO_Init+0x56>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d130      	bne.n	80015c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 0201 	and.w	r2, r3, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d017      	beq.n	8001604 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d123      	bne.n	8001658 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0203 	and.w	r2, r3, #3
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80be 	beq.w	8001816 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b66      	ldr	r3, [pc, #408]	@ (8001834 <HAL_GPIO_Init+0x324>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	4a65      	ldr	r2, [pc, #404]	@ (8001834 <HAL_GPIO_Init+0x324>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a6:	4b63      	ldr	r3, [pc, #396]	@ (8001834 <HAL_GPIO_Init+0x324>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80016b2:	4a61      	ldr	r2, [pc, #388]	@ (8001838 <HAL_GPIO_Init+0x328>)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	220f      	movs	r2, #15
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a58      	ldr	r2, [pc, #352]	@ (800183c <HAL_GPIO_Init+0x32c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d037      	beq.n	800174e <HAL_GPIO_Init+0x23e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a57      	ldr	r2, [pc, #348]	@ (8001840 <HAL_GPIO_Init+0x330>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d031      	beq.n	800174a <HAL_GPIO_Init+0x23a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a56      	ldr	r2, [pc, #344]	@ (8001844 <HAL_GPIO_Init+0x334>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d02b      	beq.n	8001746 <HAL_GPIO_Init+0x236>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a55      	ldr	r2, [pc, #340]	@ (8001848 <HAL_GPIO_Init+0x338>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d025      	beq.n	8001742 <HAL_GPIO_Init+0x232>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a54      	ldr	r2, [pc, #336]	@ (800184c <HAL_GPIO_Init+0x33c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d01f      	beq.n	800173e <HAL_GPIO_Init+0x22e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a53      	ldr	r2, [pc, #332]	@ (8001850 <HAL_GPIO_Init+0x340>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d019      	beq.n	800173a <HAL_GPIO_Init+0x22a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a52      	ldr	r2, [pc, #328]	@ (8001854 <HAL_GPIO_Init+0x344>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_GPIO_Init+0x226>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a51      	ldr	r2, [pc, #324]	@ (8001858 <HAL_GPIO_Init+0x348>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00d      	beq.n	8001732 <HAL_GPIO_Init+0x222>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a50      	ldr	r2, [pc, #320]	@ (800185c <HAL_GPIO_Init+0x34c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d007      	beq.n	800172e <HAL_GPIO_Init+0x21e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4f      	ldr	r2, [pc, #316]	@ (8001860 <HAL_GPIO_Init+0x350>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d101      	bne.n	800172a <HAL_GPIO_Init+0x21a>
 8001726:	2309      	movs	r3, #9
 8001728:	e012      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800172a:	230a      	movs	r3, #10
 800172c:	e010      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800172e:	2308      	movs	r3, #8
 8001730:	e00e      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001732:	2307      	movs	r3, #7
 8001734:	e00c      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001736:	2306      	movs	r3, #6
 8001738:	e00a      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800173a:	2305      	movs	r3, #5
 800173c:	e008      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800173e:	2304      	movs	r3, #4
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001742:	2303      	movs	r3, #3
 8001744:	e004      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001746:	2302      	movs	r3, #2
 8001748:	e002      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800174e:	2300      	movs	r3, #0
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	f002 0203 	and.w	r2, r2, #3
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	4093      	lsls	r3, r2
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001760:	4935      	ldr	r1, [pc, #212]	@ (8001838 <HAL_GPIO_Init+0x328>)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176e:	4b3d      	ldr	r3, [pc, #244]	@ (8001864 <HAL_GPIO_Init+0x354>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001792:	4a34      	ldr	r2, [pc, #208]	@ (8001864 <HAL_GPIO_Init+0x354>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001798:	4b32      	ldr	r3, [pc, #200]	@ (8001864 <HAL_GPIO_Init+0x354>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017bc:	4a29      	ldr	r2, [pc, #164]	@ (8001864 <HAL_GPIO_Init+0x354>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017c2:	4b28      	ldr	r3, [pc, #160]	@ (8001864 <HAL_GPIO_Init+0x354>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001864 <HAL_GPIO_Init+0x354>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001864 <HAL_GPIO_Init+0x354>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001810:	4a14      	ldr	r2, [pc, #80]	@ (8001864 <HAL_GPIO_Init+0x354>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3301      	adds	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	2b0f      	cmp	r3, #15
 8001820:	f67f ae86 	bls.w	8001530 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3724      	adds	r7, #36	@ 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40013800 	.word	0x40013800
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400
 8001844:	40020800 	.word	0x40020800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40021000 	.word	0x40021000
 8001850:	40021400 	.word	0x40021400
 8001854:	40021800 	.word	0x40021800
 8001858:	40021c00 	.word	0x40021c00
 800185c:	40022000 	.word	0x40022000
 8001860:	40022400 	.word	0x40022400
 8001864:	40013c00 	.word	0x40013c00

08001868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	807b      	strh	r3, [r7, #2]
 8001874:	4613      	mov	r3, r2
 8001876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001878:	787b      	ldrb	r3, [r7, #1]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001884:	e003      	b.n	800188e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001886:	887b      	ldrh	r3, [r7, #2]
 8001888:	041a      	lsls	r2, r3, #16
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	619a      	str	r2, [r3, #24]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e08b      	b.n	80019c6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d106      	bne.n	80018c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f004 fe1a 	bl	80064fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2224      	movs	r2, #36	@ 0x24
 80018cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d107      	bne.n	8001916 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	e006      	b.n	8001924 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001922:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d108      	bne.n	800193e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	e007      	b.n	800194e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800194c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <HAL_I2C_Init+0x134>)
 800195a:	430b      	orrs	r3, r1
 800195c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800196c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69d9      	ldr	r1, [r3, #28]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1a      	ldr	r2, [r3, #32]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2220      	movs	r2, #32
 80019b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	02008000 	.word	0x02008000

080019d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af02      	add	r7, sp, #8
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	460b      	mov	r3, r1
 80019e2:	817b      	strh	r3, [r7, #10]
 80019e4:	4613      	mov	r3, r2
 80019e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b20      	cmp	r3, #32
 80019f2:	f040 80fd 	bne.w	8001bf0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_I2C_Master_Transmit+0x30>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e0f6      	b.n	8001bf2 <HAL_I2C_Master_Transmit+0x21e>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a0c:	f7ff fbac 	bl	8001168 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2319      	movs	r3, #25
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 fbea 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0e1      	b.n	8001bf2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2221      	movs	r2, #33	@ 0x21
 8001a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2210      	movs	r2, #16
 8001a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	893a      	ldrh	r2, [r7, #8]
 8001a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	2bff      	cmp	r3, #255	@ 0xff
 8001a5e:	d906      	bls.n	8001a6e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	22ff      	movs	r2, #255	@ 0xff
 8001a64:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001a66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e007      	b.n	8001a7e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001a78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a7c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d024      	beq.n	8001ad0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	8979      	ldrh	r1, [r7, #10]
 8001ac2:	4b4e      	ldr	r3, [pc, #312]	@ (8001bfc <HAL_I2C_Master_Transmit+0x228>)
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 fd59 	bl	8002580 <I2C_TransferConfig>
 8001ace:	e066      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	8979      	ldrh	r1, [r7, #10]
 8001ad8:	4b48      	ldr	r3, [pc, #288]	@ (8001bfc <HAL_I2C_Master_Transmit+0x228>)
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 fd4e 	bl	8002580 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ae4:	e05b      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	6a39      	ldr	r1, [r7, #32]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fbdd 	bl	80022aa <I2C_WaitOnTXISFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e07b      	b.n	8001bf2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afe:	781a      	ldrb	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d034      	beq.n	8001b9e <HAL_I2C_Master_Transmit+0x1ca>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d130      	bne.n	8001b9e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	2200      	movs	r2, #0
 8001b44:	2180      	movs	r1, #128	@ 0x80
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fb56 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e04d      	b.n	8001bf2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2bff      	cmp	r3, #255	@ 0xff
 8001b5e:	d90e      	bls.n	8001b7e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	22ff      	movs	r2, #255	@ 0xff
 8001b64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	8979      	ldrh	r1, [r7, #10]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 fd02 	bl	8002580 <I2C_TransferConfig>
 8001b7c:	e00f      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	8979      	ldrh	r1, [r7, #10]
 8001b90:	2300      	movs	r3, #0
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 fcf1 	bl	8002580 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d19e      	bne.n	8001ae6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	6a39      	ldr	r1, [r7, #32]
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 fbc3 	bl	8002338 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e01a      	b.n	8001bf2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6859      	ldr	r1, [r3, #4]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <HAL_I2C_Master_Transmit+0x22c>)
 8001bd0:	400b      	ands	r3, r1
 8001bd2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e000      	b.n	8001bf2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001bf0:	2302      	movs	r3, #2
  }
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	80002000 	.word	0x80002000
 8001c00:	fe00e800 	.word	0xfe00e800

08001c04 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	4611      	mov	r1, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	817b      	strh	r3, [r7, #10]
 8001c16:	460b      	mov	r3, r1
 8001c18:	813b      	strh	r3, [r7, #8]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	f040 80f9 	bne.w	8001e1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_I2C_Mem_Write+0x34>
 8001c32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c3e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0ed      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_I2C_Mem_Write+0x4e>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e0e6      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c5a:	f7ff fa85 	bl	8001168 <HAL_GetTick>
 8001c5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2319      	movs	r3, #25
 8001c66:	2201      	movs	r2, #1
 8001c68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fac3 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0d1      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2221      	movs	r2, #33	@ 0x21
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2240      	movs	r2, #64	@ 0x40
 8001c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a3a      	ldr	r2, [r7, #32]
 8001c96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ca4:	88f8      	ldrh	r0, [r7, #6]
 8001ca6:	893a      	ldrh	r2, [r7, #8]
 8001ca8:	8979      	ldrh	r1, [r7, #10]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f9d3 	bl	8002060 <I2C_RequestMemoryWrite>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0a9      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2bff      	cmp	r3, #255	@ 0xff
 8001cd4:	d90e      	bls.n	8001cf4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	22ff      	movs	r2, #255	@ 0xff
 8001cda:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	8979      	ldrh	r1, [r7, #10]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 fc47 	bl	8002580 <I2C_TransferConfig>
 8001cf2:	e00f      	b.n	8001d14 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	8979      	ldrh	r1, [r7, #10]
 8001d06:	2300      	movs	r3, #0
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 fc36 	bl	8002580 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 fac6 	bl	80022aa <I2C_WaitOnTXISFlagUntilTimeout>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e07b      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2c:	781a      	ldrb	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d034      	beq.n	8001dcc <HAL_I2C_Mem_Write+0x1c8>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d130      	bne.n	8001dcc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d70:	2200      	movs	r2, #0
 8001d72:	2180      	movs	r1, #128	@ 0x80
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 fa3f 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e04d      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	2bff      	cmp	r3, #255	@ 0xff
 8001d8c:	d90e      	bls.n	8001dac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	22ff      	movs	r2, #255	@ 0xff
 8001d92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	8979      	ldrh	r1, [r7, #10]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 fbeb 	bl	8002580 <I2C_TransferConfig>
 8001daa:	e00f      	b.n	8001dcc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	8979      	ldrh	r1, [r7, #10]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 fbda 	bl	8002580 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d19e      	bne.n	8001d14 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 faac 	bl	8002338 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e01a      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2220      	movs	r2, #32
 8001df0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <HAL_I2C_Mem_Write+0x224>)
 8001dfe:	400b      	ands	r3, r1
 8001e00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
  }
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	fe00e800 	.word	0xfe00e800

08001e2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	4608      	mov	r0, r1
 8001e36:	4611      	mov	r1, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	817b      	strh	r3, [r7, #10]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	813b      	strh	r3, [r7, #8]
 8001e42:	4613      	mov	r3, r2
 8001e44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b20      	cmp	r3, #32
 8001e50:	f040 80fd 	bne.w	800204e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <HAL_I2C_Mem_Read+0x34>
 8001e5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e66:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0f1      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_I2C_Mem_Read+0x4e>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e0ea      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e82:	f7ff f971 	bl	8001168 <HAL_GetTick>
 8001e86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2319      	movs	r3, #25
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 f9af 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0d5      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2222      	movs	r2, #34	@ 0x22
 8001ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2240      	movs	r2, #64	@ 0x40
 8001eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a3a      	ldr	r2, [r7, #32]
 8001ebe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ecc:	88f8      	ldrh	r0, [r7, #6]
 8001ece:	893a      	ldrh	r2, [r7, #8]
 8001ed0:	8979      	ldrh	r1, [r7, #10]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	4603      	mov	r3, r0
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f913 	bl	8002108 <I2C_RequestMemoryRead>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0ad      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2bff      	cmp	r3, #255	@ 0xff
 8001efc:	d90e      	bls.n	8001f1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	8979      	ldrh	r1, [r7, #10]
 8001f0c:	4b52      	ldr	r3, [pc, #328]	@ (8002058 <HAL_I2C_Mem_Read+0x22c>)
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fb33 	bl	8002580 <I2C_TransferConfig>
 8001f1a:	e00f      	b.n	8001f3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	8979      	ldrh	r1, [r7, #10]
 8001f2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002058 <HAL_I2C_Mem_Read+0x22c>)
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 fb22 	bl	8002580 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f42:	2200      	movs	r2, #0
 8001f44:	2104      	movs	r1, #4
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f956 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e07c      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d034      	beq.n	8001ffc <HAL_I2C_Mem_Read+0x1d0>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d130      	bne.n	8001ffc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2180      	movs	r1, #128	@ 0x80
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 f927 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e04d      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2bff      	cmp	r3, #255	@ 0xff
 8001fbc:	d90e      	bls.n	8001fdc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	8979      	ldrh	r1, [r7, #10]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 fad3 	bl	8002580 <I2C_TransferConfig>
 8001fda:	e00f      	b.n	8001ffc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	8979      	ldrh	r1, [r7, #10]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fac2 	bl	8002580 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d19a      	bne.n	8001f3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f994 	bl	8002338 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e01a      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2220      	movs	r2, #32
 8002020:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <HAL_I2C_Mem_Read+0x230>)
 800202e:	400b      	ands	r3, r1
 8002030:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	e000      	b.n	8002050 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800204e:	2302      	movs	r3, #2
  }
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	80002400 	.word	0x80002400
 800205c:	fe00e800 	.word	0xfe00e800

08002060 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	4608      	mov	r0, r1
 800206a:	4611      	mov	r1, r2
 800206c:	461a      	mov	r2, r3
 800206e:	4603      	mov	r3, r0
 8002070:	817b      	strh	r3, [r7, #10]
 8002072:	460b      	mov	r3, r1
 8002074:	813b      	strh	r3, [r7, #8]
 8002076:	4613      	mov	r3, r2
 8002078:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	8979      	ldrh	r1, [r7, #10]
 8002080:	4b20      	ldr	r3, [pc, #128]	@ (8002104 <I2C_RequestMemoryWrite+0xa4>)
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 fa79 	bl	8002580 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	69b9      	ldr	r1, [r7, #24]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f909 	bl	80022aa <I2C_WaitOnTXISFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e02c      	b.n	80020fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020a8:	893b      	ldrh	r3, [r7, #8]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80020b2:	e015      	b.n	80020e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020b4:	893b      	ldrh	r3, [r7, #8]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	69b9      	ldr	r1, [r7, #24]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f8ef 	bl	80022aa <I2C_WaitOnTXISFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e012      	b.n	80020fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020d6:	893b      	ldrh	r3, [r7, #8]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	2200      	movs	r2, #0
 80020e8:	2180      	movs	r1, #128	@ 0x80
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f884 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	80002000 	.word	0x80002000

08002108 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	4608      	mov	r0, r1
 8002112:	4611      	mov	r1, r2
 8002114:	461a      	mov	r2, r3
 8002116:	4603      	mov	r3, r0
 8002118:	817b      	strh	r3, [r7, #10]
 800211a:	460b      	mov	r3, r1
 800211c:	813b      	strh	r3, [r7, #8]
 800211e:	4613      	mov	r3, r2
 8002120:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	8979      	ldrh	r1, [r7, #10]
 8002128:	4b20      	ldr	r3, [pc, #128]	@ (80021ac <I2C_RequestMemoryRead+0xa4>)
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2300      	movs	r3, #0
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 fa26 	bl	8002580 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 f8b6 	bl	80022aa <I2C_WaitOnTXISFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e02c      	b.n	80021a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d105      	bne.n	800215a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800214e:	893b      	ldrh	r3, [r7, #8]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	629a      	str	r2, [r3, #40]	@ 0x28
 8002158:	e015      	b.n	8002186 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800215a:	893b      	ldrh	r3, [r7, #8]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	b29b      	uxth	r3, r3
 8002160:	b2da      	uxtb	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	69b9      	ldr	r1, [r7, #24]
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f89c 	bl	80022aa <I2C_WaitOnTXISFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e012      	b.n	80021a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800217c:	893b      	ldrh	r3, [r7, #8]
 800217e:	b2da      	uxtb	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	2200      	movs	r2, #0
 800218e:	2140      	movs	r1, #64	@ 0x40
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f831 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	80002000 	.word	0x80002000

080021b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d103      	bne.n	80021ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2200      	movs	r2, #0
 80021cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d007      	beq.n	80021ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	619a      	str	r2, [r3, #24]
  }
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002208:	e03b      	b.n	8002282 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	6839      	ldr	r1, [r7, #0]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f8d6 	bl	80023c0 <I2C_IsErrorOccurred>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e041      	b.n	80022a2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d02d      	beq.n	8002282 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002226:	f7fe ff9f 	bl	8001168 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d302      	bcc.n	800223c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d122      	bne.n	8002282 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	4013      	ands	r3, r2
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	429a      	cmp	r2, r3
 800224a:	bf0c      	ite	eq
 800224c:	2301      	moveq	r3, #1
 800224e:	2300      	movne	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	429a      	cmp	r2, r3
 8002258:	d113      	bne.n	8002282 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f043 0220 	orr.w	r2, r3, #32
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e00f      	b.n	80022a2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4013      	ands	r3, r2
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	bf0c      	ite	eq
 8002292:	2301      	moveq	r3, #1
 8002294:	2300      	movne	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	429a      	cmp	r2, r3
 800229e:	d0b4      	beq.n	800220a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022b6:	e033      	b.n	8002320 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f87f 	bl	80023c0 <I2C_IsErrorOccurred>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e031      	b.n	8002330 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d2:	d025      	beq.n	8002320 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d4:	f7fe ff48 	bl	8001168 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d302      	bcc.n	80022ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d11a      	bne.n	8002320 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d013      	beq.n	8002320 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fc:	f043 0220 	orr.w	r2, r3, #32
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e007      	b.n	8002330 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b02      	cmp	r3, #2
 800232c:	d1c4      	bne.n	80022b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002344:	e02f      	b.n	80023a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f838 	bl	80023c0 <I2C_IsErrorOccurred>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e02d      	b.n	80023b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800235a:	f7fe ff05 	bl	8001168 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	429a      	cmp	r2, r3
 8002368:	d302      	bcc.n	8002370 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d11a      	bne.n	80023a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b20      	cmp	r3, #32
 800237c:	d013      	beq.n	80023a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002382:	f043 0220 	orr.w	r2, r3, #32
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e007      	b.n	80023b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d1c8      	bne.n	8002346 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	@ 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d068      	beq.n	80024be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2210      	movs	r2, #16
 80023f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023f4:	e049      	b.n	800248a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d045      	beq.n	800248a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023fe:	f7fe feb3 	bl	8001168 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	429a      	cmp	r2, r3
 800240c:	d302      	bcc.n	8002414 <I2C_IsErrorOccurred+0x54>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d13a      	bne.n	800248a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800241e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002426:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002436:	d121      	bne.n	800247c <I2C_IsErrorOccurred+0xbc>
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800243e:	d01d      	beq.n	800247c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	2b20      	cmp	r3, #32
 8002444:	d01a      	beq.n	800247c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002454:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002456:	f7fe fe87 	bl	8001168 <HAL_GetTick>
 800245a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800245c:	e00e      	b.n	800247c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800245e:	f7fe fe83 	bl	8001168 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b19      	cmp	r3, #25
 800246a:	d907      	bls.n	800247c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	f043 0320 	orr.w	r3, r3, #32
 8002472:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800247a:	e006      	b.n	800248a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b20      	cmp	r3, #32
 8002488:	d1e9      	bne.n	800245e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b20      	cmp	r3, #32
 8002496:	d003      	beq.n	80024a0 <I2C_IsErrorOccurred+0xe0>
 8002498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0aa      	beq.n	80023f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d103      	bne.n	80024b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2220      	movs	r2, #32
 80024ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00b      	beq.n	80024e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	f043 0308 	orr.w	r3, r3, #8
 80024f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002502:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00b      	beq.n	800252c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002524:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800252c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01c      	beq.n	800256e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff fe3b 	bl	80021b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <I2C_IsErrorOccurred+0x1bc>)
 8002546:	400b      	ands	r3, r1
 8002548:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	431a      	orrs	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800256e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002572:	4618      	mov	r0, r3
 8002574:	3728      	adds	r7, #40	@ 0x28
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	fe00e800 	.word	0xfe00e800

08002580 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	817b      	strh	r3, [r7, #10]
 800258e:	4613      	mov	r3, r2
 8002590:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002592:	897b      	ldrh	r3, [r7, #10]
 8002594:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002598:	7a7b      	ldrb	r3, [r7, #9]
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	0d5b      	lsrs	r3, r3, #21
 80025ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80025be:	4b08      	ldr	r3, [pc, #32]	@ (80025e0 <I2C_TransferConfig+0x60>)
 80025c0:	430b      	orrs	r3, r1
 80025c2:	43db      	mvns	r3, r3
 80025c4:	ea02 0103 	and.w	r1, r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	03ff63ff 	.word	0x03ff63ff

080025e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b20      	cmp	r3, #32
 80025f8:	d138      	bne.n	800266c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002604:	2302      	movs	r3, #2
 8002606:	e032      	b.n	800266e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2224      	movs	r2, #36	@ 0x24
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002636:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6819      	ldr	r1, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e000      	b.n	800266e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800266c:	2302      	movs	r3, #2
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800267a:	b480      	push	{r7}
 800267c:	b085      	sub	sp, #20
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b20      	cmp	r3, #32
 800268e:	d139      	bne.n	8002704 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800269a:	2302      	movs	r3, #2
 800269c:	e033      	b.n	8002706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2224      	movs	r2, #36	@ 0x24
 80026aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0201 	bic.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	e000      	b.n	8002706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002704:	2302      	movs	r3, #2
  }
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002718:	4b05      	ldr	r3, [pc, #20]	@ (8002730 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a04      	ldr	r2, [pc, #16]	@ (8002730 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800271e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002722:	6013      	str	r3, [r2, #0]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40007000 	.word	0x40007000

08002734 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800273c:	2300      	movs	r3, #0
 800273e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e291      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8087 	beq.w	8002866 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002758:	4b96      	ldr	r3, [pc, #600]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b04      	cmp	r3, #4
 8002762:	d00c      	beq.n	800277e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002764:	4b93      	ldr	r3, [pc, #588]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b08      	cmp	r3, #8
 800276e:	d112      	bne.n	8002796 <HAL_RCC_OscConfig+0x62>
 8002770:	4b90      	ldr	r3, [pc, #576]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800277c:	d10b      	bne.n	8002796 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277e:	4b8d      	ldr	r3, [pc, #564]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d06c      	beq.n	8002864 <HAL_RCC_OscConfig+0x130>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d168      	bne.n	8002864 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e26b      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800279e:	d106      	bne.n	80027ae <HAL_RCC_OscConfig+0x7a>
 80027a0:	4b84      	ldr	r3, [pc, #528]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a83      	ldr	r2, [pc, #524]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	e02e      	b.n	800280c <HAL_RCC_OscConfig+0xd8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x9c>
 80027b6:	4b7f      	ldr	r3, [pc, #508]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a7e      	ldr	r2, [pc, #504]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	4b7c      	ldr	r3, [pc, #496]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a7b      	ldr	r2, [pc, #492]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e01d      	b.n	800280c <HAL_RCC_OscConfig+0xd8>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0xc0>
 80027da:	4b76      	ldr	r3, [pc, #472]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a75      	ldr	r2, [pc, #468]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b73      	ldr	r3, [pc, #460]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a72      	ldr	r2, [pc, #456]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e00b      	b.n	800280c <HAL_RCC_OscConfig+0xd8>
 80027f4:	4b6f      	ldr	r3, [pc, #444]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a6e      	ldr	r2, [pc, #440]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80027fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b6c      	ldr	r3, [pc, #432]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a6b      	ldr	r2, [pc, #428]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800280a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fca8 	bl	8001168 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7fe fca4 	bl	8001168 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	@ 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e21f      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b61      	ldr	r3, [pc, #388]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0xe8>
 800283a:	e014      	b.n	8002866 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe fc94 	bl	8001168 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002844:	f7fe fc90 	bl	8001168 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	@ 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e20b      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	4b57      	ldr	r3, [pc, #348]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x110>
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d069      	beq.n	8002946 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002872:	4b50      	ldr	r3, [pc, #320]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287e:	4b4d      	ldr	r3, [pc, #308]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b08      	cmp	r3, #8
 8002888:	d11c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x190>
 800288a:	4b4a      	ldr	r3, [pc, #296]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d116      	bne.n	80028c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	4b47      	ldr	r3, [pc, #284]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_RCC_OscConfig+0x17a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e1df      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ae:	4b41      	ldr	r3, [pc, #260]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	493d      	ldr	r1, [pc, #244]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c2:	e040      	b.n	8002946 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d023      	beq.n	8002914 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028cc:	4b39      	ldr	r3, [pc, #228]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a38      	ldr	r2, [pc, #224]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fc46 	bl	8001168 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e0:	f7fe fc42 	bl	8001168 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1bd      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f2:	4b30      	ldr	r3, [pc, #192]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fe:	4b2d      	ldr	r3, [pc, #180]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4929      	ldr	r1, [pc, #164]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]
 8002912:	e018      	b.n	8002946 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002914:	4b27      	ldr	r3, [pc, #156]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a26      	ldr	r2, [pc, #152]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fc22 	bl	8001168 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002928:	f7fe fc1e 	bl	8001168 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e199      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293a:	4b1e      	ldr	r3, [pc, #120]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d038      	beq.n	80029c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d019      	beq.n	800298e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295a:	4b16      	ldr	r3, [pc, #88]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 800295c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800295e:	4a15      	ldr	r2, [pc, #84]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002966:	f7fe fbff 	bl	8001168 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296e:	f7fe fbfb 	bl	8001168 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e176      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002980:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x23a>
 800298c:	e01a      	b.n	80029c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298e:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002992:	4a08      	ldr	r2, [pc, #32]	@ (80029b4 <HAL_RCC_OscConfig+0x280>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7fe fbe5 	bl	8001168 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a2:	f7fe fbe1 	bl	8001168 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d903      	bls.n	80029b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e15c      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
 80029b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	4b91      	ldr	r3, [pc, #580]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 80029ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ee      	bne.n	80029a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80a4 	beq.w	8002b1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10d      	bne.n	80029fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	4b88      	ldr	r3, [pc, #544]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	4a87      	ldr	r2, [pc, #540]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ea:	4b85      	ldr	r3, [pc, #532]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fa:	4b82      	ldr	r3, [pc, #520]	@ (8002c04 <HAL_RCC_OscConfig+0x4d0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d118      	bne.n	8002a38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a06:	4b7f      	ldr	r3, [pc, #508]	@ (8002c04 <HAL_RCC_OscConfig+0x4d0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c04 <HAL_RCC_OscConfig+0x4d0>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a12:	f7fe fba9 	bl	8001168 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7fe fba5 	bl	8001168 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b64      	cmp	r3, #100	@ 0x64
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e120      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a2c:	4b75      	ldr	r3, [pc, #468]	@ (8002c04 <HAL_RCC_OscConfig+0x4d0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x31a>
 8002a40:	4b6f      	ldr	r3, [pc, #444]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a44:	4a6e      	ldr	r2, [pc, #440]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a4c:	e02d      	b.n	8002aaa <HAL_RCC_OscConfig+0x376>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x33c>
 8002a56:	4b6a      	ldr	r3, [pc, #424]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5a:	4a69      	ldr	r2, [pc, #420]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a62:	4b67      	ldr	r3, [pc, #412]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a66:	4a66      	ldr	r2, [pc, #408]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a68:	f023 0304 	bic.w	r3, r3, #4
 8002a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6e:	e01c      	b.n	8002aaa <HAL_RCC_OscConfig+0x376>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b05      	cmp	r3, #5
 8002a76:	d10c      	bne.n	8002a92 <HAL_RCC_OscConfig+0x35e>
 8002a78:	4b61      	ldr	r3, [pc, #388]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7c:	4a60      	ldr	r2, [pc, #384]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a7e:	f043 0304 	orr.w	r3, r3, #4
 8002a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a84:	4b5e      	ldr	r3, [pc, #376]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a88:	4a5d      	ldr	r2, [pc, #372]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a90:	e00b      	b.n	8002aaa <HAL_RCC_OscConfig+0x376>
 8002a92:	4b5b      	ldr	r3, [pc, #364]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a96:	4a5a      	ldr	r2, [pc, #360]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a9e:	4b58      	ldr	r3, [pc, #352]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa2:	4a57      	ldr	r2, [pc, #348]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002aa4:	f023 0304 	bic.w	r3, r3, #4
 8002aa8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d015      	beq.n	8002ade <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fb59 	bl	8001168 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aba:	f7fe fb55 	bl	8001168 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e0ce      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad0:	4b4b      	ldr	r3, [pc, #300]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ee      	beq.n	8002aba <HAL_RCC_OscConfig+0x386>
 8002adc:	e014      	b.n	8002b08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fe fb43 	bl	8001168 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7fe fb3f 	bl	8001168 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e0b8      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afc:	4b40      	ldr	r3, [pc, #256]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d105      	bne.n	8002b1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	4a3b      	ldr	r2, [pc, #236]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b18:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80a4 	beq.w	8002c6c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b24:	4b36      	ldr	r3, [pc, #216]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d06b      	beq.n	8002c08 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d149      	bne.n	8002bcc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b38:	4b31      	ldr	r3, [pc, #196]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a30      	ldr	r2, [pc, #192]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe fb10 	bl	8001168 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe fb0c 	bl	8001168 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e087      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	4b28      	ldr	r3, [pc, #160]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69da      	ldr	r2, [r3, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	019b      	lsls	r3, r3, #6
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	3b01      	subs	r3, #1
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	4a1b      	ldr	r2, [pc, #108]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b96:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b98:	4b19      	ldr	r3, [pc, #100]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a18      	ldr	r2, [pc, #96]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fae0 	bl	8001168 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe fadc 	bl	8001168 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e057      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x478>
 8002bca:	e04f      	b.n	8002c6c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002bd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fac6 	bl	8001168 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be0:	f7fe fac2 	bl	8001168 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e03d      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf2:	4b03      	ldr	r3, [pc, #12]	@ (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4ac>
 8002bfe:	e035      	b.n	8002c6c <HAL_RCC_OscConfig+0x538>
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c08:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_RCC_OscConfig+0x544>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d028      	beq.n	8002c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d121      	bne.n	8002c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d11a      	bne.n	8002c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c38:	4013      	ands	r3, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d111      	bne.n	8002c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	3b01      	subs	r3, #1
 8002c52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d107      	bne.n	8002c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800

08002c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0d0      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c94:	4b6a      	ldr	r3, [pc, #424]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d910      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b67      	ldr	r3, [pc, #412]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 020f 	bic.w	r2, r3, #15
 8002caa:	4965      	ldr	r1, [pc, #404]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b63      	ldr	r3, [pc, #396]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0b8      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cdc:	4b59      	ldr	r3, [pc, #356]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a58      	ldr	r2, [pc, #352]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ce6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf4:	4b53      	ldr	r3, [pc, #332]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4a52      	ldr	r2, [pc, #328]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b50      	ldr	r3, [pc, #320]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	494d      	ldr	r1, [pc, #308]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d040      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4b47      	ldr	r3, [pc, #284]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d115      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e07f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3e:	4b41      	ldr	r3, [pc, #260]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e073      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e06b      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5e:	4b39      	ldr	r3, [pc, #228]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f023 0203 	bic.w	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4936      	ldr	r1, [pc, #216]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d70:	f7fe f9fa 	bl	8001168 <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d78:	f7fe f9f6 	bl	8001168 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e053      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 020c 	and.w	r2, r3, #12
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d1eb      	bne.n	8002d78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da0:	4b27      	ldr	r3, [pc, #156]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d210      	bcs.n	8002dd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b24      	ldr	r3, [pc, #144]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 020f 	bic.w	r2, r3, #15
 8002db6:	4922      	ldr	r1, [pc, #136]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b20      	ldr	r3, [pc, #128]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e032      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ddc:	4b19      	ldr	r3, [pc, #100]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4916      	ldr	r1, [pc, #88]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dfa:	4b12      	ldr	r3, [pc, #72]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	490e      	ldr	r1, [pc, #56]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e0e:	f000 f821 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002e12:	4602      	mov	r2, r0
 8002e14:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	490a      	ldr	r1, [pc, #40]	@ (8002e48 <HAL_RCC_ClockConfig+0x1cc>)
 8002e20:	5ccb      	ldrb	r3, [r1, r3]
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	4a09      	ldr	r2, [pc, #36]	@ (8002e4c <HAL_RCC_ClockConfig+0x1d0>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e2a:	4b09      	ldr	r3, [pc, #36]	@ (8002e50 <HAL_RCC_ClockConfig+0x1d4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe f956 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023c00 	.word	0x40023c00
 8002e44:	40023800 	.word	0x40023800
 8002e48:	0800b9b4 	.word	0x0800b9b4
 8002e4c:	20000018 	.word	0x20000018
 8002e50:	20000000 	.word	0x20000000

08002e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e58:	b094      	sub	sp, #80	@ 0x50
 8002e5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e60:	2300      	movs	r3, #0
 8002e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e64:	2300      	movs	r3, #0
 8002e66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e6c:	4b79      	ldr	r3, [pc, #484]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d00d      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x40>
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	f200 80e1 	bhi.w	8003040 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x34>
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d003      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e86:	e0db      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4b73      	ldr	r3, [pc, #460]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e8c:	e0db      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e8e:	4b73      	ldr	r3, [pc, #460]	@ (800305c <HAL_RCC_GetSysClockFreq+0x208>)
 8002e90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e92:	e0d8      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e94:	4b6f      	ldr	r3, [pc, #444]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e9e:	4b6d      	ldr	r3, [pc, #436]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d063      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	099b      	lsrs	r3, r3, #6
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002eb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ebc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ec2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ec6:	4622      	mov	r2, r4
 8002ec8:	462b      	mov	r3, r5
 8002eca:	f04f 0000 	mov.w	r0, #0
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	0159      	lsls	r1, r3, #5
 8002ed4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed8:	0150      	lsls	r0, r2, #5
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4621      	mov	r1, r4
 8002ee0:	1a51      	subs	r1, r2, r1
 8002ee2:	6139      	str	r1, [r7, #16]
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ef8:	4659      	mov	r1, fp
 8002efa:	018b      	lsls	r3, r1, #6
 8002efc:	4651      	mov	r1, sl
 8002efe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f02:	4651      	mov	r1, sl
 8002f04:	018a      	lsls	r2, r1, #6
 8002f06:	4651      	mov	r1, sl
 8002f08:	ebb2 0801 	subs.w	r8, r2, r1
 8002f0c:	4659      	mov	r1, fp
 8002f0e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f26:	4690      	mov	r8, r2
 8002f28:	4699      	mov	r9, r3
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	eb18 0303 	adds.w	r3, r8, r3
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	462b      	mov	r3, r5
 8002f34:	eb49 0303 	adc.w	r3, r9, r3
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f46:	4629      	mov	r1, r5
 8002f48:	024b      	lsls	r3, r1, #9
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f50:	4621      	mov	r1, r4
 8002f52:	024a      	lsls	r2, r1, #9
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f64:	f7fd ff00 	bl	8000d68 <__aeabi_uldivmod>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f70:	e058      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f72:	4b38      	ldr	r3, [pc, #224]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	099b      	lsrs	r3, r3, #6
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f82:	623b      	str	r3, [r7, #32]
 8002f84:	2300      	movs	r3, #0
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f8c:	4642      	mov	r2, r8
 8002f8e:	464b      	mov	r3, r9
 8002f90:	f04f 0000 	mov.w	r0, #0
 8002f94:	f04f 0100 	mov.w	r1, #0
 8002f98:	0159      	lsls	r1, r3, #5
 8002f9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f9e:	0150      	lsls	r0, r2, #5
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4641      	mov	r1, r8
 8002fa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002faa:	4649      	mov	r1, r9
 8002fac:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fc4:	ebb2 040a 	subs.w	r4, r2, sl
 8002fc8:	eb63 050b 	sbc.w	r5, r3, fp
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	00eb      	lsls	r3, r5, #3
 8002fd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fda:	00e2      	lsls	r2, r4, #3
 8002fdc:	4614      	mov	r4, r2
 8002fde:	461d      	mov	r5, r3
 8002fe0:	4643      	mov	r3, r8
 8002fe2:	18e3      	adds	r3, r4, r3
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	eb45 0303 	adc.w	r3, r5, r3
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	028b      	lsls	r3, r1, #10
 8002ffe:	4621      	mov	r1, r4
 8003000:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003004:	4621      	mov	r1, r4
 8003006:	028a      	lsls	r2, r1, #10
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800300e:	2200      	movs	r2, #0
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	61fa      	str	r2, [r7, #28]
 8003014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003018:	f7fd fea6 	bl	8000d68 <__aeabi_uldivmod>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4613      	mov	r3, r2
 8003022:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003024:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x200>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	0c1b      	lsrs	r3, r3, #16
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	3301      	adds	r3, #1
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003034:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003038:	fbb2 f3f3 	udiv	r3, r2, r3
 800303c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800303e:	e002      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003040:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x204>)
 8003042:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003048:	4618      	mov	r0, r3
 800304a:	3750      	adds	r7, #80	@ 0x50
 800304c:	46bd      	mov	sp, r7
 800304e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800
 8003058:	00f42400 	.word	0x00f42400
 800305c:	007a1200 	.word	0x007a1200

08003060 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003064:	4b03      	ldr	r3, [pc, #12]	@ (8003074 <HAL_RCC_GetHCLKFreq+0x14>)
 8003066:	681b      	ldr	r3, [r3, #0]
}
 8003068:	4618      	mov	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000018 	.word	0x20000018

08003078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800307c:	f7ff fff0 	bl	8003060 <HAL_RCC_GetHCLKFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	0a9b      	lsrs	r3, r3, #10
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	4903      	ldr	r1, [pc, #12]	@ (800309c <HAL_RCC_GetPCLK1Freq+0x24>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40023800 	.word	0x40023800
 800309c:	0800b9c4 	.word	0x0800b9c4

080030a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030a4:	f7ff ffdc 	bl	8003060 <HAL_RCC_GetHCLKFreq>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	0b5b      	lsrs	r3, r3, #13
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	4903      	ldr	r1, [pc, #12]	@ (80030c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b6:	5ccb      	ldrb	r3, [r1, r3]
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40023800 	.word	0x40023800
 80030c4:	0800b9c4 	.word	0x0800b9c4

080030c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d012      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030f0:	4b69      	ldr	r3, [pc, #420]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a68      	ldr	r2, [pc, #416]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80030fa:	6093      	str	r3, [r2, #8]
 80030fc:	4b66      	ldr	r3, [pc, #408]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003104:	4964      	ldr	r1, [pc, #400]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003112:	2301      	movs	r3, #1
 8003114:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d017      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003122:	4b5d      	ldr	r3, [pc, #372]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003128:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003130:	4959      	ldr	r1, [pc, #356]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003140:	d101      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003142:	2301      	movs	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800314e:	2301      	movs	r3, #1
 8003150:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d017      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800315e:	4b4e      	ldr	r3, [pc, #312]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003164:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	494a      	ldr	r1, [pc, #296]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800317c:	d101      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800317e:	2301      	movs	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800318a:	2301      	movs	r3, #1
 800318c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800319a:	2301      	movs	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 808b 	beq.w	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	4a39      	ldr	r2, [pc, #228]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80031b8:	4b37      	ldr	r3, [pc, #220]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031c4:	4b35      	ldr	r3, [pc, #212]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a34      	ldr	r2, [pc, #208]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d0:	f7fd ffca 	bl	8001168 <HAL_GetTick>
 80031d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d8:	f7fd ffc6 	bl	8001168 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	@ 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e357      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031ea:	4b2c      	ldr	r3, [pc, #176]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031f6:	4b28      	ldr	r3, [pc, #160]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d035      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	429a      	cmp	r2, r3
 8003212:	d02e      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003214:	4b20      	ldr	r3, [pc, #128]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003218:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800321c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800321e:	4b1e      	ldr	r3, [pc, #120]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003222:	4a1d      	ldr	r2, [pc, #116]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003228:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800322a:	4b1b      	ldr	r3, [pc, #108]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322e:	4a1a      	ldr	r2, [pc, #104]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003234:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003236:	4a18      	ldr	r2, [pc, #96]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800323c:	4b16      	ldr	r3, [pc, #88]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b01      	cmp	r3, #1
 8003246:	d114      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fd ff8e 	bl	8001168 <HAL_GetTick>
 800324c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324e:	e00a      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003250:	f7fd ff8a 	bl	8001168 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e319      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003266:	4b0c      	ldr	r3, [pc, #48]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0ee      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800327a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800327e:	d111      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003280:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800328c:	4b04      	ldr	r3, [pc, #16]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800328e:	400b      	ands	r3, r1
 8003290:	4901      	ldr	r1, [pc, #4]	@ (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
 8003296:	e00b      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003298:	40023800 	.word	0x40023800
 800329c:	40007000 	.word	0x40007000
 80032a0:	0ffffcff 	.word	0x0ffffcff
 80032a4:	4baa      	ldr	r3, [pc, #680]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4aa9      	ldr	r2, [pc, #676]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032aa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80032ae:	6093      	str	r3, [r2, #8]
 80032b0:	4ba7      	ldr	r3, [pc, #668]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032bc:	49a4      	ldr	r1, [pc, #656]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d010      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032ce:	4ba0      	ldr	r3, [pc, #640]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032d4:	4a9e      	ldr	r2, [pc, #632]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80032de:	4b9c      	ldr	r3, [pc, #624]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e8:	4999      	ldr	r1, [pc, #612]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032fc:	4b94      	ldr	r3, [pc, #592]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003302:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800330a:	4991      	ldr	r1, [pc, #580]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800331e:	4b8c      	ldr	r3, [pc, #560]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003324:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800332c:	4988      	ldr	r1, [pc, #544]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003340:	4b83      	ldr	r3, [pc, #524]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003346:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800334e:	4980      	ldr	r1, [pc, #512]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003362:	4b7b      	ldr	r3, [pc, #492]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003368:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003370:	4977      	ldr	r1, [pc, #476]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003384:	4b72      	ldr	r3, [pc, #456]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338a:	f023 0203 	bic.w	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003392:	496f      	ldr	r1, [pc, #444]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ac:	f023 020c 	bic.w	r2, r3, #12
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b4:	4966      	ldr	r1, [pc, #408]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033c8:	4b61      	ldr	r3, [pc, #388]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ce:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d6:	495e      	ldr	r1, [pc, #376]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033ea:	4b59      	ldr	r3, [pc, #356]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033f8:	4955      	ldr	r1, [pc, #340]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800340c:	4b50      	ldr	r3, [pc, #320]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003412:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341a:	494d      	ldr	r1, [pc, #308]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800342e:	4b48      	ldr	r3, [pc, #288]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003434:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343c:	4944      	ldr	r1, [pc, #272]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003450:	4b3f      	ldr	r3, [pc, #252]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003456:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345e:	493c      	ldr	r1, [pc, #240]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003472:	4b37      	ldr	r3, [pc, #220]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003478:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003480:	4933      	ldr	r1, [pc, #204]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003494:	4b2e      	ldr	r3, [pc, #184]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034a2:	492b      	ldr	r1, [pc, #172]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d011      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034b6:	4b26      	ldr	r3, [pc, #152]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034bc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034c4:	4922      	ldr	r1, [pc, #136]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034d4:	d101      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80034e6:	2301      	movs	r3, #1
 80034e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034f6:	4b16      	ldr	r3, [pc, #88]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003504:	4912      	ldr	r1, [pc, #72]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00b      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003518:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003528:	4909      	ldr	r1, [pc, #36]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d006      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80d9 	beq.w	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003544:	4b02      	ldr	r3, [pc, #8]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a01      	ldr	r2, [pc, #4]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800354a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800354e:	e001      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003550:	40023800 	.word	0x40023800
 8003554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003556:	f7fd fe07 	bl	8001168 <HAL_GetTick>
 800355a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800355e:	f7fd fe03 	bl	8001168 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b64      	cmp	r3, #100	@ 0x64
 800356a:	d901      	bls.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e194      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003570:	4b6c      	ldr	r3, [pc, #432]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f0      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d021      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358c:	2b00      	cmp	r3, #0
 800358e:	d11d      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003590:	4b64      	ldr	r3, [pc, #400]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003596:	0c1b      	lsrs	r3, r3, #16
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800359e:	4b61      	ldr	r3, [pc, #388]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035a4:	0e1b      	lsrs	r3, r3, #24
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	019a      	lsls	r2, r3, #6
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	431a      	orrs	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	061b      	lsls	r3, r3, #24
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	071b      	lsls	r3, r3, #28
 80035c4:	4957      	ldr	r1, [pc, #348]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d004      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d02e      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035f6:	d129      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035f8:	4b4a      	ldr	r3, [pc, #296]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035fe:	0c1b      	lsrs	r3, r3, #16
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003606:	4b47      	ldr	r3, [pc, #284]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800360c:	0f1b      	lsrs	r3, r3, #28
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	019a      	lsls	r2, r3, #6
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	041b      	lsls	r3, r3, #16
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	061b      	lsls	r3, r3, #24
 8003626:	431a      	orrs	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	071b      	lsls	r3, r3, #28
 800362c:	493d      	ldr	r1, [pc, #244]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003634:	4b3b      	ldr	r3, [pc, #236]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003636:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800363a:	f023 021f 	bic.w	r2, r3, #31
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	3b01      	subs	r3, #1
 8003644:	4937      	ldr	r1, [pc, #220]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01d      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003658:	4b32      	ldr	r3, [pc, #200]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800365a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800365e:	0e1b      	lsrs	r3, r3, #24
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003666:	4b2f      	ldr	r3, [pc, #188]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003668:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800366c:	0f1b      	lsrs	r3, r3, #28
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	019a      	lsls	r2, r3, #6
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	041b      	lsls	r3, r3, #16
 8003680:	431a      	orrs	r2, r3
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	061b      	lsls	r3, r3, #24
 8003686:	431a      	orrs	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	071b      	lsls	r3, r3, #28
 800368c:	4925      	ldr	r1, [pc, #148]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d011      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	019a      	lsls	r2, r3, #6
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	041b      	lsls	r3, r3, #16
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	061b      	lsls	r3, r3, #24
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	071b      	lsls	r3, r3, #28
 80036bc:	4919      	ldr	r1, [pc, #100]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036c4:	4b17      	ldr	r3, [pc, #92]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a16      	ldr	r2, [pc, #88]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d0:	f7fd fd4a 	bl	8001168 <HAL_GetTick>
 80036d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036d8:	f7fd fd46 	bl	8001168 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b64      	cmp	r3, #100	@ 0x64
 80036e4:	d901      	bls.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e0d7      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	f040 80cd 	bne.w	8003898 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80036fe:	4b09      	ldr	r3, [pc, #36]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a08      	ldr	r2, [pc, #32]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003704:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800370a:	f7fd fd2d 	bl	8001168 <HAL_GetTick>
 800370e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003710:	e00a      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003712:	f7fd fd29 	bl	8001168 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b64      	cmp	r3, #100	@ 0x64
 800371e:	d903      	bls.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e0ba      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003724:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003728:	4b5e      	ldr	r3, [pc, #376]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003734:	d0ed      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003752:	2b00      	cmp	r3, #0
 8003754:	d02e      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d12a      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800375e:	4b51      	ldr	r3, [pc, #324]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003764:	0c1b      	lsrs	r3, r3, #16
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800376c:	4b4d      	ldr	r3, [pc, #308]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003772:	0f1b      	lsrs	r3, r3, #28
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	019a      	lsls	r2, r3, #6
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	061b      	lsls	r3, r3, #24
 800378c:	431a      	orrs	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	071b      	lsls	r3, r3, #28
 8003792:	4944      	ldr	r1, [pc, #272]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800379a:	4b42      	ldr	r3, [pc, #264]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800379c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037a0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a8:	3b01      	subs	r3, #1
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	493d      	ldr	r1, [pc, #244]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d022      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037c8:	d11d      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037ca:	4b36      	ldr	r3, [pc, #216]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d0:	0e1b      	lsrs	r3, r3, #24
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037d8:	4b32      	ldr	r3, [pc, #200]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037de:	0f1b      	lsrs	r3, r3, #28
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	019a      	lsls	r2, r3, #6
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	041b      	lsls	r3, r3, #16
 80037f2:	431a      	orrs	r2, r3
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	061b      	lsls	r3, r3, #24
 80037f8:	431a      	orrs	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	071b      	lsls	r3, r3, #28
 80037fe:	4929      	ldr	r1, [pc, #164]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d028      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003812:	4b24      	ldr	r3, [pc, #144]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003818:	0e1b      	lsrs	r3, r3, #24
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003820:	4b20      	ldr	r3, [pc, #128]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003826:	0c1b      	lsrs	r3, r3, #16
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	019a      	lsls	r2, r3, #6
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	041b      	lsls	r3, r3, #16
 8003838:	431a      	orrs	r2, r3
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	061b      	lsls	r3, r3, #24
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	071b      	lsls	r3, r3, #28
 8003846:	4917      	ldr	r1, [pc, #92]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800384e:	4b15      	ldr	r3, [pc, #84]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003854:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	4911      	ldr	r1, [pc, #68]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003864:	4b0f      	ldr	r3, [pc, #60]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a0e      	ldr	r2, [pc, #56]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800386a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800386e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003870:	f7fd fc7a 	bl	8001168 <HAL_GetTick>
 8003874:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003878:	f7fd fc76 	bl	8001168 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	@ 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e007      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800388a:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003896:	d1ef      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800

080038a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e08f      	b.n	80039dc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f002 febb 	bl	800664c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6899      	ldr	r1, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b3e      	ldr	r3, [pc, #248]	@ (80039e4 <HAL_TIM_Encoder_Init+0x13c>)
 80038ea:	400b      	ands	r3, r1
 80038ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3304      	adds	r3, #4
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f000 f909 	bl	8003b10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4b31      	ldr	r3, [pc, #196]	@ (80039e8 <HAL_TIM_Encoder_Init+0x140>)
 8003924:	4013      	ands	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	4313      	orrs	r3, r2
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4b2b      	ldr	r3, [pc, #172]	@ (80039ec <HAL_TIM_Encoder_Init+0x144>)
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4b2a      	ldr	r3, [pc, #168]	@ (80039f0 <HAL_TIM_Encoder_Init+0x148>)
 8003946:	4013      	ands	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	4313      	orrs	r3, r2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	011a      	lsls	r2, r3, #4
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	031b      	lsls	r3, r3, #12
 8003968:	4313      	orrs	r3, r2
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003976:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800397e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	4313      	orrs	r3, r2
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	fffebff8 	.word	0xfffebff8
 80039e8:	fffffcfc 	.word	0xfffffcfc
 80039ec:	fffff3f3 	.word	0xfffff3f3
 80039f0:	ffff0f0f 	.word	0xffff0f0f

080039f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d110      	bne.n	8003a46 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d102      	bne.n	8003a30 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a2a:	7b7b      	ldrb	r3, [r7, #13]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d001      	beq.n	8003a34 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e069      	b.n	8003b08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a44:	e031      	b.n	8003aaa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d110      	bne.n	8003a6e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a4c:	7bbb      	ldrb	r3, [r7, #14]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d102      	bne.n	8003a58 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a52:	7b3b      	ldrb	r3, [r7, #12]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d001      	beq.n	8003a5c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e055      	b.n	8003b08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a6c:	e01d      	b.n	8003aaa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d108      	bne.n	8003a86 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a74:	7bbb      	ldrb	r3, [r7, #14]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a7a:	7b7b      	ldrb	r3, [r7, #13]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d102      	bne.n	8003a86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a80:	7b3b      	ldrb	r3, [r7, #12]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d001      	beq.n	8003a8a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e03e      	b.n	8003b08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_TIM_Encoder_Start+0xc4>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d008      	beq.n	8003ac8 <HAL_TIM_Encoder_Start+0xd4>
 8003ab6:	e00f      	b.n	8003ad8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2201      	movs	r2, #1
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 f8d1 	bl	8003c68 <TIM_CCxChannelCmd>
      break;
 8003ac6:	e016      	b.n	8003af6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2201      	movs	r2, #1
 8003ace:	2104      	movs	r1, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f8c9 	bl	8003c68 <TIM_CCxChannelCmd>
      break;
 8003ad6:	e00e      	b.n	8003af6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2201      	movs	r2, #1
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 f8c1 	bl	8003c68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2201      	movs	r2, #1
 8003aec:	2104      	movs	r1, #4
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 f8ba 	bl	8003c68 <TIM_CCxChannelCmd>
      break;
 8003af4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0201 	orr.w	r2, r2, #1
 8003b04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a46      	ldr	r2, [pc, #280]	@ (8003c3c <TIM_Base_SetConfig+0x12c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <TIM_Base_SetConfig+0x40>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b2e:	d00f      	beq.n	8003b50 <TIM_Base_SetConfig+0x40>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a43      	ldr	r2, [pc, #268]	@ (8003c40 <TIM_Base_SetConfig+0x130>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <TIM_Base_SetConfig+0x40>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a42      	ldr	r2, [pc, #264]	@ (8003c44 <TIM_Base_SetConfig+0x134>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <TIM_Base_SetConfig+0x40>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a41      	ldr	r2, [pc, #260]	@ (8003c48 <TIM_Base_SetConfig+0x138>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_Base_SetConfig+0x40>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a40      	ldr	r2, [pc, #256]	@ (8003c4c <TIM_Base_SetConfig+0x13c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d108      	bne.n	8003b62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a35      	ldr	r2, [pc, #212]	@ (8003c3c <TIM_Base_SetConfig+0x12c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d02b      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b70:	d027      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a32      	ldr	r2, [pc, #200]	@ (8003c40 <TIM_Base_SetConfig+0x130>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d023      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a31      	ldr	r2, [pc, #196]	@ (8003c44 <TIM_Base_SetConfig+0x134>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01f      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a30      	ldr	r2, [pc, #192]	@ (8003c48 <TIM_Base_SetConfig+0x138>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d01b      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a2f      	ldr	r2, [pc, #188]	@ (8003c4c <TIM_Base_SetConfig+0x13c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d017      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a2e      	ldr	r2, [pc, #184]	@ (8003c50 <TIM_Base_SetConfig+0x140>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003c54 <TIM_Base_SetConfig+0x144>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00f      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8003c58 <TIM_Base_SetConfig+0x148>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00b      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a2b      	ldr	r2, [pc, #172]	@ (8003c5c <TIM_Base_SetConfig+0x14c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d007      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a2a      	ldr	r2, [pc, #168]	@ (8003c60 <TIM_Base_SetConfig+0x150>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a29      	ldr	r2, [pc, #164]	@ (8003c64 <TIM_Base_SetConfig+0x154>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d108      	bne.n	8003bd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a10      	ldr	r2, [pc, #64]	@ (8003c3c <TIM_Base_SetConfig+0x12c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_Base_SetConfig+0xf8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a12      	ldr	r2, [pc, #72]	@ (8003c4c <TIM_Base_SetConfig+0x13c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d103      	bne.n	8003c10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d105      	bne.n	8003c2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f023 0201 	bic.w	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	611a      	str	r2, [r3, #16]
  }
}
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40010000 	.word	0x40010000
 8003c40:	40000400 	.word	0x40000400
 8003c44:	40000800 	.word	0x40000800
 8003c48:	40000c00 	.word	0x40000c00
 8003c4c:	40010400 	.word	0x40010400
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40014400 	.word	0x40014400
 8003c58:	40014800 	.word	0x40014800
 8003c5c:	40001800 	.word	0x40001800
 8003c60:	40001c00 	.word	0x40001c00
 8003c64:	40002000 	.word	0x40002000

08003c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1a      	ldr	r2, [r3, #32]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	401a      	ands	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a1a      	ldr	r2, [r3, #32]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	621a      	str	r2, [r3, #32]
}
 8003ca6:	bf00      	nop
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e06d      	b.n	8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a30      	ldr	r2, [pc, #192]	@ (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d004      	beq.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a2f      	ldr	r2, [pc, #188]	@ (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d108      	bne.n	8003d12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003d06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a20      	ldr	r2, [pc, #128]	@ (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d022      	beq.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d3e:	d01d      	beq.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1d      	ldr	r2, [pc, #116]	@ (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d018      	beq.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d013      	beq.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00e      	beq.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a15      	ldr	r2, [pc, #84]	@ (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d009      	beq.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a16      	ldr	r2, [pc, #88]	@ (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a15      	ldr	r2, [pc, #84]	@ (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d10c      	bne.n	8003d96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	40010000 	.word	0x40010000
 8003db8:	40010400 	.word	0x40010400
 8003dbc:	40000400 	.word	0x40000400
 8003dc0:	40000800 	.word	0x40000800
 8003dc4:	40000c00 	.word	0x40000c00
 8003dc8:	40014000 	.word	0x40014000
 8003dcc:	40001800 	.word	0x40001800

08003dd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e040      	b.n	8003e64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f002 fc6e 	bl	80066d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2224      	movs	r2, #36	@ 0x24
 8003dfc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0201 	bic.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fed0 	bl	8004bbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fc69 	bl	80046f4 <UART_SetConfig>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e01b      	b.n	8003e64 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 ff4f 	bl	8004d00 <UART_CheckIdleState>
 8003e62:	4603      	mov	r3, r0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	@ 0x28
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d177      	bne.n	8003f74 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_UART_Transmit+0x24>
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e070      	b.n	8003f76 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2221      	movs	r2, #33	@ 0x21
 8003ea0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ea2:	f7fd f961 	bl	8001168 <HAL_GetTick>
 8003ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	88fa      	ldrh	r2, [r7, #6]
 8003eac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	88fa      	ldrh	r2, [r7, #6]
 8003eb4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec0:	d108      	bne.n	8003ed4 <HAL_UART_Transmit+0x68>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d104      	bne.n	8003ed4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e003      	b.n	8003edc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003edc:	e02f      	b.n	8003f3e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2180      	movs	r1, #128	@ 0x80
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 ff60 	bl	8004dae <UART_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d004      	beq.n	8003efe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e03b      	b.n	8003f76 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10b      	bne.n	8003f1c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f12:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	3302      	adds	r3, #2
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	e007      	b.n	8003f2c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	781a      	ldrb	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1c9      	bne.n	8003ede <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2200      	movs	r2, #0
 8003f52:	2140      	movs	r1, #64	@ 0x40
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 ff2a 	bl	8004dae <UART_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d004      	beq.n	8003f6a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e005      	b.n	8003f76 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b08a      	sub	sp, #40	@ 0x28
 8003f82:	af02      	add	r7, sp, #8
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	f040 80b5 	bne.w	8004104 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <HAL_UART_Receive+0x28>
 8003fa0:	88fb      	ldrh	r3, [r7, #6]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e0ad      	b.n	8004106 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2222      	movs	r2, #34	@ 0x22
 8003fb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fc0:	f7fd f8d2 	bl	8001168 <HAL_GetTick>
 8003fc4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	88fa      	ldrh	r2, [r7, #6]
 8003fca:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	88fa      	ldrh	r2, [r7, #6]
 8003fd2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fde:	d10e      	bne.n	8003ffe <HAL_UART_Receive+0x80>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <HAL_UART_Receive+0x76>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003fee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ff2:	e02d      	b.n	8004050 <HAL_UART_Receive+0xd2>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	22ff      	movs	r2, #255	@ 0xff
 8003ff8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ffc:	e028      	b.n	8004050 <HAL_UART_Receive+0xd2>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10d      	bne.n	8004022 <HAL_UART_Receive+0xa4>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d104      	bne.n	8004018 <HAL_UART_Receive+0x9a>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	22ff      	movs	r2, #255	@ 0xff
 8004012:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004016:	e01b      	b.n	8004050 <HAL_UART_Receive+0xd2>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	227f      	movs	r2, #127	@ 0x7f
 800401c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004020:	e016      	b.n	8004050 <HAL_UART_Receive+0xd2>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800402a:	d10d      	bne.n	8004048 <HAL_UART_Receive+0xca>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <HAL_UART_Receive+0xc0>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	227f      	movs	r2, #127	@ 0x7f
 8004038:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800403c:	e008      	b.n	8004050 <HAL_UART_Receive+0xd2>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	223f      	movs	r2, #63	@ 0x3f
 8004042:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004046:	e003      	b.n	8004050 <HAL_UART_Receive+0xd2>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004056:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004060:	d108      	bne.n	8004074 <HAL_UART_Receive+0xf6>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d104      	bne.n	8004074 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	e003      	b.n	800407c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800407c:	e036      	b.n	80040ec <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2200      	movs	r2, #0
 8004086:	2120      	movs	r1, #32
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 fe90 	bl	8004dae <UART_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e032      	b.n	8004106 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10c      	bne.n	80040c0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	8a7b      	ldrh	r3, [r7, #18]
 80040b0:	4013      	ands	r3, r2
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	3302      	adds	r3, #2
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	e00c      	b.n	80040da <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	8a7b      	ldrh	r3, [r7, #18]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	4013      	ands	r3, r2
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	3301      	adds	r3, #1
 80040d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1c2      	bne.n	800407e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	e000      	b.n	8004106 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004104:	2302      	movs	r3, #2
  }
}
 8004106:	4618      	mov	r0, r3
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b0ba      	sub	sp, #232	@ 0xe8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004136:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800413a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800413e:	4013      	ands	r3, r2
 8004140:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d115      	bne.n	8004178 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800414c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00f      	beq.n	8004178 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d009      	beq.n	8004178 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8297 	beq.w	800469c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4798      	blx	r3
      }
      return;
 8004176:	e291      	b.n	800469c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 8117 	beq.w	80043b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800418e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004192:	4b85      	ldr	r3, [pc, #532]	@ (80043a8 <HAL_UART_IRQHandler+0x298>)
 8004194:	4013      	ands	r3, r2
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 810a 	beq.w	80043b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800419c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d011      	beq.n	80041cc <HAL_UART_IRQHandler+0xbc>
 80041a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00b      	beq.n	80041cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2201      	movs	r2, #1
 80041ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041c2:	f043 0201 	orr.w	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d011      	beq.n	80041fc <HAL_UART_IRQHandler+0xec>
 80041d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00b      	beq.n	80041fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2202      	movs	r2, #2
 80041ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041f2:	f043 0204 	orr.w	r2, r3, #4
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d011      	beq.n	800422c <HAL_UART_IRQHandler+0x11c>
 8004208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00b      	beq.n	800422c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2204      	movs	r2, #4
 800421a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004222:	f043 0202 	orr.w	r2, r3, #2
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800422c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d017      	beq.n	8004268 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004248:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00b      	beq.n	8004268 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2208      	movs	r2, #8
 8004256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800425e:	f043 0208 	orr.w	r2, r3, #8
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004270:	2b00      	cmp	r3, #0
 8004272:	d012      	beq.n	800429a <HAL_UART_IRQHandler+0x18a>
 8004274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004278:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00c      	beq.n	800429a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004290:	f043 0220 	orr.w	r2, r3, #32
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 81fd 	beq.w	80046a0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00d      	beq.n	80042ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e2:	2b40      	cmp	r3, #64	@ 0x40
 80042e4:	d005      	beq.n	80042f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d04f      	beq.n	8004392 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fdc8 	bl	8004e88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004302:	2b40      	cmp	r3, #64	@ 0x40
 8004304:	d141      	bne.n	800438a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3308      	adds	r3, #8
 800430c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800431c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004324:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3308      	adds	r3, #8
 800432e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004332:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004336:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800433e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800434a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1d9      	bne.n	8004306 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004356:	2b00      	cmp	r3, #0
 8004358:	d013      	beq.n	8004382 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800435e:	4a13      	ldr	r2, [pc, #76]	@ (80043ac <HAL_UART_IRQHandler+0x29c>)
 8004360:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004366:	4618      	mov	r0, r3
 8004368:	f7fd f8af 	bl	80014ca <HAL_DMA_Abort_IT>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d017      	beq.n	80043a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800437c:	4610      	mov	r0, r2
 800437e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004380:	e00f      	b.n	80043a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f9a0 	bl	80046c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004388:	e00b      	b.n	80043a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f99c 	bl	80046c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	e007      	b.n	80043a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f998 	bl	80046c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80043a0:	e17e      	b.n	80046a0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a2:	bf00      	nop
    return;
 80043a4:	e17c      	b.n	80046a0 <HAL_UART_IRQHandler+0x590>
 80043a6:	bf00      	nop
 80043a8:	04000120 	.word	0x04000120
 80043ac:	08004f51 	.word	0x08004f51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	f040 814c 	bne.w	8004652 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 8145 	beq.w	8004652 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 813e 	beq.w	8004652 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2210      	movs	r2, #16
 80043dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e8:	2b40      	cmp	r3, #64	@ 0x40
 80043ea:	f040 80b6 	bne.w	800455a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 8150 	beq.w	80046a4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800440a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800440e:	429a      	cmp	r2, r3
 8004410:	f080 8148 	bcs.w	80046a4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800441a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004428:	f000 8086 	beq.w	8004538 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004440:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800445a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004462:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800446e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1da      	bne.n	800442c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3308      	adds	r3, #8
 800447c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3308      	adds	r3, #8
 8004496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800449a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800449e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e1      	bne.n	8004476 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3308      	adds	r3, #8
 80044b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e3      	bne.n	80044b2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004508:	f023 0310 	bic.w	r3, r3, #16
 800450c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800451a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800451c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004520:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e4      	bne.n	80044f8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004532:	4618      	mov	r0, r3
 8004534:	f7fc ff59 	bl	80013ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800454a:	b29b      	uxth	r3, r3
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	b29b      	uxth	r3, r3
 8004550:	4619      	mov	r1, r3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f8c2 	bl	80046dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004558:	e0a4      	b.n	80046a4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004566:	b29b      	uxth	r3, r3
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 8096 	beq.w	80046a8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800457c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8091 	beq.w	80046a8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004596:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800459a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e4      	bne.n	8004586 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3308      	adds	r3, #8
 80045c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	623b      	str	r3, [r7, #32]
   return(result);
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3308      	adds	r3, #8
 80045dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80045e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045e8:	e841 2300 	strex	r3, r2, [r1]
 80045ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e3      	bne.n	80045bc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	60fb      	str	r3, [r7, #12]
   return(result);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f023 0310 	bic.w	r3, r3, #16
 800461c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	69b9      	ldr	r1, [r7, #24]
 8004630:	69fa      	ldr	r2, [r7, #28]
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	617b      	str	r3, [r7, #20]
   return(result);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e4      	bne.n	8004608 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2202      	movs	r2, #2
 8004642:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004648:	4619      	mov	r1, r3
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f846 	bl	80046dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004650:	e02a      	b.n	80046a8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00e      	beq.n	800467c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800465e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004666:	2b00      	cmp	r3, #0
 8004668:	d008      	beq.n	800467c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800466e:	2b00      	cmp	r3, #0
 8004670:	d01c      	beq.n	80046ac <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
    }
    return;
 800467a:	e017      	b.n	80046ac <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800467c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d012      	beq.n	80046ae <HAL_UART_IRQHandler+0x59e>
 8004688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800468c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00c      	beq.n	80046ae <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fc71 	bl	8004f7c <UART_EndTransmit_IT>
    return;
 800469a:	e008      	b.n	80046ae <HAL_UART_IRQHandler+0x59e>
      return;
 800469c:	bf00      	nop
 800469e:	e006      	b.n	80046ae <HAL_UART_IRQHandler+0x59e>
    return;
 80046a0:	bf00      	nop
 80046a2:	e004      	b.n	80046ae <HAL_UART_IRQHandler+0x59e>
      return;
 80046a4:	bf00      	nop
 80046a6:	e002      	b.n	80046ae <HAL_UART_IRQHandler+0x59e>
      return;
 80046a8:	bf00      	nop
 80046aa:	e000      	b.n	80046ae <HAL_UART_IRQHandler+0x59e>
    return;
 80046ac:	bf00      	nop
  }

}
 80046ae:	37e8      	adds	r7, #232	@ 0xe8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4ba6      	ldr	r3, [pc, #664]	@ (80049b8 <UART_SetConfig+0x2c4>)
 8004720:	4013      	ands	r3, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	430b      	orrs	r3, r1
 800472a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	430a      	orrs	r2, r1
 8004764:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a94      	ldr	r2, [pc, #592]	@ (80049bc <UART_SetConfig+0x2c8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d120      	bne.n	80047b2 <UART_SetConfig+0xbe>
 8004770:	4b93      	ldr	r3, [pc, #588]	@ (80049c0 <UART_SetConfig+0x2cc>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b03      	cmp	r3, #3
 800477c:	d816      	bhi.n	80047ac <UART_SetConfig+0xb8>
 800477e:	a201      	add	r2, pc, #4	@ (adr r2, 8004784 <UART_SetConfig+0x90>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	08004795 	.word	0x08004795
 8004788:	080047a1 	.word	0x080047a1
 800478c:	0800479b 	.word	0x0800479b
 8004790:	080047a7 	.word	0x080047a7
 8004794:	2301      	movs	r3, #1
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e150      	b.n	8004a3c <UART_SetConfig+0x348>
 800479a:	2302      	movs	r3, #2
 800479c:	77fb      	strb	r3, [r7, #31]
 800479e:	e14d      	b.n	8004a3c <UART_SetConfig+0x348>
 80047a0:	2304      	movs	r3, #4
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e14a      	b.n	8004a3c <UART_SetConfig+0x348>
 80047a6:	2308      	movs	r3, #8
 80047a8:	77fb      	strb	r3, [r7, #31]
 80047aa:	e147      	b.n	8004a3c <UART_SetConfig+0x348>
 80047ac:	2310      	movs	r3, #16
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e144      	b.n	8004a3c <UART_SetConfig+0x348>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a83      	ldr	r2, [pc, #524]	@ (80049c4 <UART_SetConfig+0x2d0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d132      	bne.n	8004822 <UART_SetConfig+0x12e>
 80047bc:	4b80      	ldr	r3, [pc, #512]	@ (80049c0 <UART_SetConfig+0x2cc>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b0c      	cmp	r3, #12
 80047c8:	d828      	bhi.n	800481c <UART_SetConfig+0x128>
 80047ca:	a201      	add	r2, pc, #4	@ (adr r2, 80047d0 <UART_SetConfig+0xdc>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	08004805 	.word	0x08004805
 80047d4:	0800481d 	.word	0x0800481d
 80047d8:	0800481d 	.word	0x0800481d
 80047dc:	0800481d 	.word	0x0800481d
 80047e0:	08004811 	.word	0x08004811
 80047e4:	0800481d 	.word	0x0800481d
 80047e8:	0800481d 	.word	0x0800481d
 80047ec:	0800481d 	.word	0x0800481d
 80047f0:	0800480b 	.word	0x0800480b
 80047f4:	0800481d 	.word	0x0800481d
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	0800481d 	.word	0x0800481d
 8004800:	08004817 	.word	0x08004817
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e118      	b.n	8004a3c <UART_SetConfig+0x348>
 800480a:	2302      	movs	r3, #2
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e115      	b.n	8004a3c <UART_SetConfig+0x348>
 8004810:	2304      	movs	r3, #4
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e112      	b.n	8004a3c <UART_SetConfig+0x348>
 8004816:	2308      	movs	r3, #8
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e10f      	b.n	8004a3c <UART_SetConfig+0x348>
 800481c:	2310      	movs	r3, #16
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e10c      	b.n	8004a3c <UART_SetConfig+0x348>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a68      	ldr	r2, [pc, #416]	@ (80049c8 <UART_SetConfig+0x2d4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d120      	bne.n	800486e <UART_SetConfig+0x17a>
 800482c:	4b64      	ldr	r3, [pc, #400]	@ (80049c0 <UART_SetConfig+0x2cc>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004836:	2b30      	cmp	r3, #48	@ 0x30
 8004838:	d013      	beq.n	8004862 <UART_SetConfig+0x16e>
 800483a:	2b30      	cmp	r3, #48	@ 0x30
 800483c:	d814      	bhi.n	8004868 <UART_SetConfig+0x174>
 800483e:	2b20      	cmp	r3, #32
 8004840:	d009      	beq.n	8004856 <UART_SetConfig+0x162>
 8004842:	2b20      	cmp	r3, #32
 8004844:	d810      	bhi.n	8004868 <UART_SetConfig+0x174>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <UART_SetConfig+0x15c>
 800484a:	2b10      	cmp	r3, #16
 800484c:	d006      	beq.n	800485c <UART_SetConfig+0x168>
 800484e:	e00b      	b.n	8004868 <UART_SetConfig+0x174>
 8004850:	2300      	movs	r3, #0
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e0f2      	b.n	8004a3c <UART_SetConfig+0x348>
 8004856:	2302      	movs	r3, #2
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e0ef      	b.n	8004a3c <UART_SetConfig+0x348>
 800485c:	2304      	movs	r3, #4
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e0ec      	b.n	8004a3c <UART_SetConfig+0x348>
 8004862:	2308      	movs	r3, #8
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e0e9      	b.n	8004a3c <UART_SetConfig+0x348>
 8004868:	2310      	movs	r3, #16
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e0e6      	b.n	8004a3c <UART_SetConfig+0x348>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a56      	ldr	r2, [pc, #344]	@ (80049cc <UART_SetConfig+0x2d8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d120      	bne.n	80048ba <UART_SetConfig+0x1c6>
 8004878:	4b51      	ldr	r3, [pc, #324]	@ (80049c0 <UART_SetConfig+0x2cc>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004882:	2bc0      	cmp	r3, #192	@ 0xc0
 8004884:	d013      	beq.n	80048ae <UART_SetConfig+0x1ba>
 8004886:	2bc0      	cmp	r3, #192	@ 0xc0
 8004888:	d814      	bhi.n	80048b4 <UART_SetConfig+0x1c0>
 800488a:	2b80      	cmp	r3, #128	@ 0x80
 800488c:	d009      	beq.n	80048a2 <UART_SetConfig+0x1ae>
 800488e:	2b80      	cmp	r3, #128	@ 0x80
 8004890:	d810      	bhi.n	80048b4 <UART_SetConfig+0x1c0>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <UART_SetConfig+0x1a8>
 8004896:	2b40      	cmp	r3, #64	@ 0x40
 8004898:	d006      	beq.n	80048a8 <UART_SetConfig+0x1b4>
 800489a:	e00b      	b.n	80048b4 <UART_SetConfig+0x1c0>
 800489c:	2300      	movs	r3, #0
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e0cc      	b.n	8004a3c <UART_SetConfig+0x348>
 80048a2:	2302      	movs	r3, #2
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e0c9      	b.n	8004a3c <UART_SetConfig+0x348>
 80048a8:	2304      	movs	r3, #4
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e0c6      	b.n	8004a3c <UART_SetConfig+0x348>
 80048ae:	2308      	movs	r3, #8
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e0c3      	b.n	8004a3c <UART_SetConfig+0x348>
 80048b4:	2310      	movs	r3, #16
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e0c0      	b.n	8004a3c <UART_SetConfig+0x348>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a44      	ldr	r2, [pc, #272]	@ (80049d0 <UART_SetConfig+0x2dc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d125      	bne.n	8004910 <UART_SetConfig+0x21c>
 80048c4:	4b3e      	ldr	r3, [pc, #248]	@ (80049c0 <UART_SetConfig+0x2cc>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048d2:	d017      	beq.n	8004904 <UART_SetConfig+0x210>
 80048d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048d8:	d817      	bhi.n	800490a <UART_SetConfig+0x216>
 80048da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048de:	d00b      	beq.n	80048f8 <UART_SetConfig+0x204>
 80048e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048e4:	d811      	bhi.n	800490a <UART_SetConfig+0x216>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <UART_SetConfig+0x1fe>
 80048ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ee:	d006      	beq.n	80048fe <UART_SetConfig+0x20a>
 80048f0:	e00b      	b.n	800490a <UART_SetConfig+0x216>
 80048f2:	2300      	movs	r3, #0
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	e0a1      	b.n	8004a3c <UART_SetConfig+0x348>
 80048f8:	2302      	movs	r3, #2
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e09e      	b.n	8004a3c <UART_SetConfig+0x348>
 80048fe:	2304      	movs	r3, #4
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	e09b      	b.n	8004a3c <UART_SetConfig+0x348>
 8004904:	2308      	movs	r3, #8
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e098      	b.n	8004a3c <UART_SetConfig+0x348>
 800490a:	2310      	movs	r3, #16
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e095      	b.n	8004a3c <UART_SetConfig+0x348>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a2f      	ldr	r2, [pc, #188]	@ (80049d4 <UART_SetConfig+0x2e0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d125      	bne.n	8004966 <UART_SetConfig+0x272>
 800491a:	4b29      	ldr	r3, [pc, #164]	@ (80049c0 <UART_SetConfig+0x2cc>)
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004920:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004924:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004928:	d017      	beq.n	800495a <UART_SetConfig+0x266>
 800492a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800492e:	d817      	bhi.n	8004960 <UART_SetConfig+0x26c>
 8004930:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004934:	d00b      	beq.n	800494e <UART_SetConfig+0x25a>
 8004936:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800493a:	d811      	bhi.n	8004960 <UART_SetConfig+0x26c>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <UART_SetConfig+0x254>
 8004940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004944:	d006      	beq.n	8004954 <UART_SetConfig+0x260>
 8004946:	e00b      	b.n	8004960 <UART_SetConfig+0x26c>
 8004948:	2301      	movs	r3, #1
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e076      	b.n	8004a3c <UART_SetConfig+0x348>
 800494e:	2302      	movs	r3, #2
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e073      	b.n	8004a3c <UART_SetConfig+0x348>
 8004954:	2304      	movs	r3, #4
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e070      	b.n	8004a3c <UART_SetConfig+0x348>
 800495a:	2308      	movs	r3, #8
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e06d      	b.n	8004a3c <UART_SetConfig+0x348>
 8004960:	2310      	movs	r3, #16
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e06a      	b.n	8004a3c <UART_SetConfig+0x348>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1b      	ldr	r2, [pc, #108]	@ (80049d8 <UART_SetConfig+0x2e4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d138      	bne.n	80049e2 <UART_SetConfig+0x2ee>
 8004970:	4b13      	ldr	r3, [pc, #76]	@ (80049c0 <UART_SetConfig+0x2cc>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004976:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800497a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800497e:	d017      	beq.n	80049b0 <UART_SetConfig+0x2bc>
 8004980:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004984:	d82a      	bhi.n	80049dc <UART_SetConfig+0x2e8>
 8004986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800498a:	d00b      	beq.n	80049a4 <UART_SetConfig+0x2b0>
 800498c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004990:	d824      	bhi.n	80049dc <UART_SetConfig+0x2e8>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <UART_SetConfig+0x2aa>
 8004996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800499a:	d006      	beq.n	80049aa <UART_SetConfig+0x2b6>
 800499c:	e01e      	b.n	80049dc <UART_SetConfig+0x2e8>
 800499e:	2300      	movs	r3, #0
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e04b      	b.n	8004a3c <UART_SetConfig+0x348>
 80049a4:	2302      	movs	r3, #2
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e048      	b.n	8004a3c <UART_SetConfig+0x348>
 80049aa:	2304      	movs	r3, #4
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e045      	b.n	8004a3c <UART_SetConfig+0x348>
 80049b0:	2308      	movs	r3, #8
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e042      	b.n	8004a3c <UART_SetConfig+0x348>
 80049b6:	bf00      	nop
 80049b8:	efff69f3 	.word	0xefff69f3
 80049bc:	40011000 	.word	0x40011000
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40004400 	.word	0x40004400
 80049c8:	40004800 	.word	0x40004800
 80049cc:	40004c00 	.word	0x40004c00
 80049d0:	40005000 	.word	0x40005000
 80049d4:	40011400 	.word	0x40011400
 80049d8:	40007800 	.word	0x40007800
 80049dc:	2310      	movs	r3, #16
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e02c      	b.n	8004a3c <UART_SetConfig+0x348>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a72      	ldr	r2, [pc, #456]	@ (8004bb0 <UART_SetConfig+0x4bc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d125      	bne.n	8004a38 <UART_SetConfig+0x344>
 80049ec:	4b71      	ldr	r3, [pc, #452]	@ (8004bb4 <UART_SetConfig+0x4c0>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80049f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80049fa:	d017      	beq.n	8004a2c <UART_SetConfig+0x338>
 80049fc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a00:	d817      	bhi.n	8004a32 <UART_SetConfig+0x33e>
 8004a02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a06:	d00b      	beq.n	8004a20 <UART_SetConfig+0x32c>
 8004a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a0c:	d811      	bhi.n	8004a32 <UART_SetConfig+0x33e>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <UART_SetConfig+0x326>
 8004a12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a16:	d006      	beq.n	8004a26 <UART_SetConfig+0x332>
 8004a18:	e00b      	b.n	8004a32 <UART_SetConfig+0x33e>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	77fb      	strb	r3, [r7, #31]
 8004a1e:	e00d      	b.n	8004a3c <UART_SetConfig+0x348>
 8004a20:	2302      	movs	r3, #2
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e00a      	b.n	8004a3c <UART_SetConfig+0x348>
 8004a26:	2304      	movs	r3, #4
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e007      	b.n	8004a3c <UART_SetConfig+0x348>
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e004      	b.n	8004a3c <UART_SetConfig+0x348>
 8004a32:	2310      	movs	r3, #16
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e001      	b.n	8004a3c <UART_SetConfig+0x348>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a44:	d15b      	bne.n	8004afe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004a46:	7ffb      	ldrb	r3, [r7, #31]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d828      	bhi.n	8004a9e <UART_SetConfig+0x3aa>
 8004a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a54 <UART_SetConfig+0x360>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a89 	.word	0x08004a89
 8004a60:	08004a9f 	.word	0x08004a9f
 8004a64:	08004a8f 	.word	0x08004a8f
 8004a68:	08004a9f 	.word	0x08004a9f
 8004a6c:	08004a9f 	.word	0x08004a9f
 8004a70:	08004a9f 	.word	0x08004a9f
 8004a74:	08004a97 	.word	0x08004a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7fe fafe 	bl	8003078 <HAL_RCC_GetPCLK1Freq>
 8004a7c:	61b8      	str	r0, [r7, #24]
        break;
 8004a7e:	e013      	b.n	8004aa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a80:	f7fe fb0e 	bl	80030a0 <HAL_RCC_GetPCLK2Freq>
 8004a84:	61b8      	str	r0, [r7, #24]
        break;
 8004a86:	e00f      	b.n	8004aa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a88:	4b4b      	ldr	r3, [pc, #300]	@ (8004bb8 <UART_SetConfig+0x4c4>)
 8004a8a:	61bb      	str	r3, [r7, #24]
        break;
 8004a8c:	e00c      	b.n	8004aa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8e:	f7fe f9e1 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8004a92:	61b8      	str	r0, [r7, #24]
        break;
 8004a94:	e008      	b.n	8004aa8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a9a:	61bb      	str	r3, [r7, #24]
        break;
 8004a9c:	e004      	b.n	8004aa8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	77bb      	strb	r3, [r7, #30]
        break;
 8004aa6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d074      	beq.n	8004b98 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	005a      	lsls	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	441a      	add	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b0f      	cmp	r3, #15
 8004ac8:	d916      	bls.n	8004af8 <UART_SetConfig+0x404>
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad0:	d212      	bcs.n	8004af8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f023 030f 	bic.w	r3, r3, #15
 8004ada:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	89fb      	ldrh	r3, [r7, #14]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	89fa      	ldrh	r2, [r7, #14]
 8004af4:	60da      	str	r2, [r3, #12]
 8004af6:	e04f      	b.n	8004b98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	77bb      	strb	r3, [r7, #30]
 8004afc:	e04c      	b.n	8004b98 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004afe:	7ffb      	ldrb	r3, [r7, #31]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d828      	bhi.n	8004b56 <UART_SetConfig+0x462>
 8004b04:	a201      	add	r2, pc, #4	@ (adr r2, 8004b0c <UART_SetConfig+0x418>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b41 	.word	0x08004b41
 8004b18:	08004b57 	.word	0x08004b57
 8004b1c:	08004b47 	.word	0x08004b47
 8004b20:	08004b57 	.word	0x08004b57
 8004b24:	08004b57 	.word	0x08004b57
 8004b28:	08004b57 	.word	0x08004b57
 8004b2c:	08004b4f 	.word	0x08004b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b30:	f7fe faa2 	bl	8003078 <HAL_RCC_GetPCLK1Freq>
 8004b34:	61b8      	str	r0, [r7, #24]
        break;
 8004b36:	e013      	b.n	8004b60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7fe fab2 	bl	80030a0 <HAL_RCC_GetPCLK2Freq>
 8004b3c:	61b8      	str	r0, [r7, #24]
        break;
 8004b3e:	e00f      	b.n	8004b60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b40:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb8 <UART_SetConfig+0x4c4>)
 8004b42:	61bb      	str	r3, [r7, #24]
        break;
 8004b44:	e00c      	b.n	8004b60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b46:	f7fe f985 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8004b4a:	61b8      	str	r0, [r7, #24]
        break;
 8004b4c:	e008      	b.n	8004b60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b52:	61bb      	str	r3, [r7, #24]
        break;
 8004b54:	e004      	b.n	8004b60 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b5e:	bf00      	nop
    }

    if (pclk != 0U)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d018      	beq.n	8004b98 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	085a      	lsrs	r2, r3, #1
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	441a      	add	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b0f      	cmp	r3, #15
 8004b7e:	d909      	bls.n	8004b94 <UART_SetConfig+0x4a0>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b86:	d205      	bcs.n	8004b94 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60da      	str	r2, [r3, #12]
 8004b92:	e001      	b.n	8004b98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ba4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40007c00 	.word	0x40007c00
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	00f42400 	.word	0x00f42400

08004bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01a      	beq.n	8004cd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cba:	d10a      	bne.n	8004cd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	605a      	str	r2, [r3, #4]
  }
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08c      	sub	sp, #48	@ 0x30
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d10:	f7fc fa2a 	bl	8001168 <HAL_GetTick>
 8004d14:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d12e      	bne.n	8004d82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f83b 	bl	8004dae <UART_WaitOnFlagUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d021      	beq.n	8004d82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d52:	623b      	str	r3, [r7, #32]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	69b9      	ldr	r1, [r7, #24]
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	617b      	str	r3, [r7, #20]
   return(result);
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e6      	bne.n	8004d3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e011      	b.n	8004da6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3728      	adds	r7, #40	@ 0x28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	603b      	str	r3, [r7, #0]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dbe:	e04f      	b.n	8004e60 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc6:	d04b      	beq.n	8004e60 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc8:	f7fc f9ce 	bl	8001168 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d302      	bcc.n	8004dde <UART_WaitOnFlagUntilTimeout+0x30>
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e04e      	b.n	8004e80 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d037      	beq.n	8004e60 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b80      	cmp	r3, #128	@ 0x80
 8004df4:	d034      	beq.n	8004e60 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b40      	cmp	r3, #64	@ 0x40
 8004dfa:	d031      	beq.n	8004e60 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d110      	bne.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2208      	movs	r2, #8
 8004e10:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f838 	bl	8004e88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2208      	movs	r2, #8
 8004e1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e029      	b.n	8004e80 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e3a:	d111      	bne.n	8004e60 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f81e 	bl	8004e88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e00f      	b.n	8004e80 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69da      	ldr	r2, [r3, #28]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	79fb      	ldrb	r3, [r7, #7]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d0a0      	beq.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b095      	sub	sp, #84	@ 0x54
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eae:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e6      	bne.n	8004e90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ee2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ee8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e5      	bne.n	8004ec2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d118      	bne.n	8004f30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f023 0310 	bic.w	r3, r3, #16
 8004f12:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	6979      	ldr	r1, [r7, #20]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	613b      	str	r3, [r7, #16]
   return(result);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e6      	bne.n	8004efe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f44:	bf00      	nop
 8004f46:	3754      	adds	r7, #84	@ 0x54
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7ff fbaa 	bl	80046c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f74:	bf00      	nop
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	61bb      	str	r3, [r7, #24]
 8004fa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	6979      	ldr	r1, [r7, #20]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e6      	bne.n	8004f84 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fb76 	bl	80046b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fc8:	bf00      	nop
 8004fca:	3720      	adds	r7, #32
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af04      	add	r7, sp, #16
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8004fde:	4b0a      	ldr	r3, [pc, #40]	@ (8005008 <BMP280_Read8+0x38>)
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	230a      	movs	r3, #10
 8004fe8:	9302      	str	r3, [sp, #8]
 8004fea:	2301      	movs	r3, #1
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	f107 030f 	add.w	r3, r7, #15
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	21ec      	movs	r1, #236	@ 0xec
 8004ff8:	f7fc ff18 	bl	8001e2c <HAL_I2C_Mem_Read>
  return tmp;
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000204 	.word	0x20000204

0800500c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af04      	add	r7, sp, #16
 8005012:	4603      	mov	r3, r0
 8005014:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8005016:	4b0d      	ldr	r3, [pc, #52]	@ (800504c <BMP280_Read16+0x40>)
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	b29a      	uxth	r2, r3
 800501e:	230a      	movs	r3, #10
 8005020:	9302      	str	r3, [sp, #8]
 8005022:	2302      	movs	r3, #2
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	f107 030c 	add.w	r3, r7, #12
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	2301      	movs	r3, #1
 800502e:	21ec      	movs	r1, #236	@ 0xec
 8005030:	f7fc fefc 	bl	8001e2c <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8005034:	7b3b      	ldrb	r3, [r7, #12]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	b21a      	sxth	r2, r3
 800503a:	7b7b      	ldrb	r3, [r7, #13]
 800503c:	b21b      	sxth	r3, r3
 800503e:	4313      	orrs	r3, r2
 8005040:	b21b      	sxth	r3, r3
 8005042:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000204 	.word	0x20000204

08005050 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff ffd5 	bl	800500c <BMP280_Read16>
 8005062:	4603      	mov	r3, r0
 8005064:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8005066:	89fb      	ldrh	r3, [r7, #14]
 8005068:	0a1b      	lsrs	r3, r3, #8
 800506a:	b29b      	uxth	r3, r3
 800506c:	b21a      	sxth	r2, r3
 800506e:	89fb      	ldrh	r3, [r7, #14]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	b21b      	sxth	r3, r3
 8005074:	4313      	orrs	r3, r2
 8005076:	b21b      	sxth	r3, r3
 8005078:	b29b      	uxth	r3, r3
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af04      	add	r7, sp, #16
 800508a:	4603      	mov	r3, r0
 800508c:	460a      	mov	r2, r1
 800508e:	71fb      	strb	r3, [r7, #7]
 8005090:	4613      	mov	r3, r2
 8005092:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8005094:	4b08      	ldr	r3, [pc, #32]	@ (80050b8 <BMP280_Write8+0x34>)
 8005096:	6818      	ldr	r0, [r3, #0]
 8005098:	79fb      	ldrb	r3, [r7, #7]
 800509a:	b29a      	uxth	r2, r3
 800509c:	230a      	movs	r3, #10
 800509e:	9302      	str	r3, [sp, #8]
 80050a0:	2301      	movs	r3, #1
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	1dbb      	adds	r3, r7, #6
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2301      	movs	r3, #1
 80050aa:	21ec      	movs	r1, #236	@ 0xec
 80050ac:	f7fc fdaa 	bl	8001c04 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000204 	.word	0x20000204

080050bc <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af04      	add	r7, sp, #16
 80050c2:	4603      	mov	r3, r0
 80050c4:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 80050c6:	4b0d      	ldr	r3, [pc, #52]	@ (80050fc <BMP280_Read24+0x40>)
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	230a      	movs	r3, #10
 80050d0:	9302      	str	r3, [sp, #8]
 80050d2:	2303      	movs	r3, #3
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	f107 030c 	add.w	r3, r7, #12
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	2301      	movs	r3, #1
 80050de:	21ec      	movs	r1, #236	@ 0xec
 80050e0:	f7fc fea4 	bl	8001e2c <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 80050e4:	7b3b      	ldrb	r3, [r7, #12]
 80050e6:	041a      	lsls	r2, r3, #16
 80050e8:	7b7b      	ldrb	r3, [r7, #13]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	4313      	orrs	r3, r2
 80050ee:	7bba      	ldrb	r2, [r7, #14]
 80050f0:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000204 	.word	0x20000204

08005100 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	4608      	mov	r0, r1
 800510a:	4611      	mov	r1, r2
 800510c:	461a      	mov	r2, r3
 800510e:	4603      	mov	r3, r0
 8005110:	70fb      	strb	r3, [r7, #3]
 8005112:	460b      	mov	r3, r1
 8005114:	70bb      	strb	r3, [r7, #2]
 8005116:	4613      	mov	r3, r2
 8005118:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 800511a:	4a48      	ldr	r2, [pc, #288]	@ (800523c <BMP280_Init+0x13c>)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8005120:	787b      	ldrb	r3, [r7, #1]
 8005122:	2b03      	cmp	r3, #3
 8005124:	d901      	bls.n	800512a <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8005126:	2303      	movs	r3, #3
 8005128:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 800512a:	4a45      	ldr	r2, [pc, #276]	@ (8005240 <BMP280_Init+0x140>)
 800512c:	787b      	ldrb	r3, [r7, #1]
 800512e:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8005130:	787b      	ldrb	r3, [r7, #1]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8005136:	2300      	movs	r3, #0
 8005138:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	2b05      	cmp	r3, #5
 800513e:	d901      	bls.n	8005144 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8005140:	2305      	movs	r3, #5
 8005142:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8005144:	4a3f      	ldr	r2, [pc, #252]	@ (8005244 <BMP280_Init+0x144>)
 8005146:	78fb      	ldrb	r3, [r7, #3]
 8005148:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 800514a:	78bb      	ldrb	r3, [r7, #2]
 800514c:	2b05      	cmp	r3, #5
 800514e:	d901      	bls.n	8005154 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8005150:	2305      	movs	r3, #5
 8005152:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8005154:	4a3c      	ldr	r2, [pc, #240]	@ (8005248 <BMP280_Init+0x148>)
 8005156:	78bb      	ldrb	r3, [r7, #2]
 8005158:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800515a:	bf00      	nop
 800515c:	20d0      	movs	r0, #208	@ 0xd0
 800515e:	f7ff ff37 	bl	8004fd0 <BMP280_Read8>
 8005162:	4603      	mov	r3, r0
 8005164:	2b58      	cmp	r3, #88	@ 0x58
 8005166:	d1f9      	bne.n	800515c <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8005168:	2088      	movs	r0, #136	@ 0x88
 800516a:	f7ff ff71 	bl	8005050 <BMP280_Read16LE>
 800516e:	4603      	mov	r3, r0
 8005170:	461a      	mov	r2, r3
 8005172:	4b36      	ldr	r3, [pc, #216]	@ (800524c <BMP280_Init+0x14c>)
 8005174:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8005176:	208a      	movs	r0, #138	@ 0x8a
 8005178:	f7ff ff6a 	bl	8005050 <BMP280_Read16LE>
 800517c:	4603      	mov	r3, r0
 800517e:	b21a      	sxth	r2, r3
 8005180:	4b33      	ldr	r3, [pc, #204]	@ (8005250 <BMP280_Init+0x150>)
 8005182:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8005184:	208c      	movs	r0, #140	@ 0x8c
 8005186:	f7ff ff63 	bl	8005050 <BMP280_Read16LE>
 800518a:	4603      	mov	r3, r0
 800518c:	b21a      	sxth	r2, r3
 800518e:	4b31      	ldr	r3, [pc, #196]	@ (8005254 <BMP280_Init+0x154>)
 8005190:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8005192:	208e      	movs	r0, #142	@ 0x8e
 8005194:	f7ff ff5c 	bl	8005050 <BMP280_Read16LE>
 8005198:	4603      	mov	r3, r0
 800519a:	461a      	mov	r2, r3
 800519c:	4b2e      	ldr	r3, [pc, #184]	@ (8005258 <BMP280_Init+0x158>)
 800519e:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80051a0:	2090      	movs	r0, #144	@ 0x90
 80051a2:	f7ff ff55 	bl	8005050 <BMP280_Read16LE>
 80051a6:	4603      	mov	r3, r0
 80051a8:	b21a      	sxth	r2, r3
 80051aa:	4b2c      	ldr	r3, [pc, #176]	@ (800525c <BMP280_Init+0x15c>)
 80051ac:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80051ae:	2092      	movs	r0, #146	@ 0x92
 80051b0:	f7ff ff4e 	bl	8005050 <BMP280_Read16LE>
 80051b4:	4603      	mov	r3, r0
 80051b6:	b21a      	sxth	r2, r3
 80051b8:	4b29      	ldr	r3, [pc, #164]	@ (8005260 <BMP280_Init+0x160>)
 80051ba:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 80051bc:	2094      	movs	r0, #148	@ 0x94
 80051be:	f7ff ff47 	bl	8005050 <BMP280_Read16LE>
 80051c2:	4603      	mov	r3, r0
 80051c4:	b21a      	sxth	r2, r3
 80051c6:	4b27      	ldr	r3, [pc, #156]	@ (8005264 <BMP280_Init+0x164>)
 80051c8:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 80051ca:	2096      	movs	r0, #150	@ 0x96
 80051cc:	f7ff ff40 	bl	8005050 <BMP280_Read16LE>
 80051d0:	4603      	mov	r3, r0
 80051d2:	b21a      	sxth	r2, r3
 80051d4:	4b24      	ldr	r3, [pc, #144]	@ (8005268 <BMP280_Init+0x168>)
 80051d6:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 80051d8:	2098      	movs	r0, #152	@ 0x98
 80051da:	f7ff ff39 	bl	8005050 <BMP280_Read16LE>
 80051de:	4603      	mov	r3, r0
 80051e0:	b21a      	sxth	r2, r3
 80051e2:	4b22      	ldr	r3, [pc, #136]	@ (800526c <BMP280_Init+0x16c>)
 80051e4:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 80051e6:	209a      	movs	r0, #154	@ 0x9a
 80051e8:	f7ff ff32 	bl	8005050 <BMP280_Read16LE>
 80051ec:	4603      	mov	r3, r0
 80051ee:	b21a      	sxth	r2, r3
 80051f0:	4b1f      	ldr	r3, [pc, #124]	@ (8005270 <BMP280_Init+0x170>)
 80051f2:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80051f4:	209c      	movs	r0, #156	@ 0x9c
 80051f6:	f7ff ff2b 	bl	8005050 <BMP280_Read16LE>
 80051fa:	4603      	mov	r3, r0
 80051fc:	b21a      	sxth	r2, r3
 80051fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005274 <BMP280_Init+0x174>)
 8005200:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8005202:	209e      	movs	r0, #158	@ 0x9e
 8005204:	f7ff ff24 	bl	8005050 <BMP280_Read16LE>
 8005208:	4603      	mov	r3, r0
 800520a:	b21a      	sxth	r2, r3
 800520c:	4b1a      	ldr	r3, [pc, #104]	@ (8005278 <BMP280_Init+0x178>)
 800520e:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	015b      	lsls	r3, r3, #5
 8005214:	b25a      	sxtb	r2, r3
 8005216:	78bb      	ldrb	r3, [r7, #2]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	b25b      	sxtb	r3, r3
 800521c:	4313      	orrs	r3, r2
 800521e:	b25a      	sxtb	r2, r3
 8005220:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8005224:	4313      	orrs	r3, r2
 8005226:	b25b      	sxtb	r3, r3
 8005228:	b2db      	uxtb	r3, r3
 800522a:	4619      	mov	r1, r3
 800522c:	20f4      	movs	r0, #244	@ 0xf4
 800522e:	f7ff ff29 	bl	8005084 <BMP280_Write8>
}
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000204 	.word	0x20000204
 8005240:	2000020a 	.word	0x2000020a
 8005244:	20000208 	.word	0x20000208
 8005248:	20000209 	.word	0x20000209
 800524c:	20000220 	.word	0x20000220
 8005250:	2000020c 	.word	0x2000020c
 8005254:	2000020e 	.word	0x2000020e
 8005258:	20000222 	.word	0x20000222
 800525c:	20000210 	.word	0x20000210
 8005260:	20000212 	.word	0x20000212
 8005264:	20000214 	.word	0x20000214
 8005268:	20000216 	.word	0x20000216
 800526c:	20000218 	.word	0x20000218
 8005270:	2000021a 	.word	0x2000021a
 8005274:	2000021c 	.word	0x2000021c
 8005278:	2000021e 	.word	0x2000021e

0800527c <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8005282:	4b3d      	ldr	r3, [pc, #244]	@ (8005378 <BMP280_ReadTemperature+0xfc>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d16d      	bne.n	8005366 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800528a:	20f4      	movs	r0, #244	@ 0xf4
 800528c:	f7ff fea0 	bl	8004fd0 <BMP280_Read8>
 8005290:	4603      	mov	r3, r0
 8005292:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8005294:	7dfb      	ldrb	r3, [r7, #23]
 8005296:	f023 0303 	bic.w	r3, r3, #3
 800529a:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 800529c:	7dfb      	ldrb	r3, [r7, #23]
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
 80052a6:	4619      	mov	r1, r3
 80052a8:	20f4      	movs	r0, #244	@ 0xf4
 80052aa:	f7ff feeb 	bl	8005084 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80052ae:	20f4      	movs	r0, #244	@ 0xf4
 80052b0:	f7ff fe8e 	bl	8004fd0 <BMP280_Read8>
 80052b4:	4603      	mov	r3, r0
 80052b6:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80052b8:	7dbb      	ldrb	r3, [r7, #22]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80052c0:	7dbb      	ldrb	r3, [r7, #22]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d14f      	bne.n	8005366 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 80052c6:	20f4      	movs	r0, #244	@ 0xf4
 80052c8:	f7ff fe82 	bl	8004fd0 <BMP280_Read8>
 80052cc:	4603      	mov	r3, r0
 80052ce:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 80052d0:	7dbb      	ldrb	r3, [r7, #22]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 80052d8:	7dbb      	ldrb	r3, [r7, #22]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d000      	beq.n	80052e0 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 80052de:	e7f2      	b.n	80052c6 <BMP280_ReadTemperature+0x4a>
				  break;
 80052e0:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 80052e2:	20fa      	movs	r0, #250	@ 0xfa
 80052e4:	f7ff feea 	bl	80050bc <BMP280_Read24>
 80052e8:	4603      	mov	r3, r0
 80052ea:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	111b      	asrs	r3, r3, #4
 80052f0:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	10da      	asrs	r2, r3, #3
 80052f6:	4b21      	ldr	r3, [pc, #132]	@ (800537c <BMP280_ReadTemperature+0x100>)
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80052fe:	4a20      	ldr	r2, [pc, #128]	@ (8005380 <BMP280_ReadTemperature+0x104>)
 8005300:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8005304:	fb02 f303 	mul.w	r3, r2, r3
 8005308:	12db      	asrs	r3, r3, #11
 800530a:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	111b      	asrs	r3, r3, #4
 8005310:	4a1a      	ldr	r2, [pc, #104]	@ (800537c <BMP280_ReadTemperature+0x100>)
 8005312:	8812      	ldrh	r2, [r2, #0]
 8005314:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	1112      	asrs	r2, r2, #4
 800531a:	4918      	ldr	r1, [pc, #96]	@ (800537c <BMP280_ReadTemperature+0x100>)
 800531c:	8809      	ldrh	r1, [r1, #0]
 800531e:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8005320:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8005324:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8005326:	4a17      	ldr	r2, [pc, #92]	@ (8005384 <BMP280_ReadTemperature+0x108>)
 8005328:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800532c:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8005330:	139b      	asrs	r3, r3, #14
 8005332:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4413      	add	r3, r2
 800533a:	4a13      	ldr	r2, [pc, #76]	@ (8005388 <BMP280_ReadTemperature+0x10c>)
 800533c:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800533e:	4b12      	ldr	r3, [pc, #72]	@ (8005388 <BMP280_ReadTemperature+0x10c>)
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	3380      	adds	r3, #128	@ 0x80
 800534a:	121b      	asrs	r3, r3, #8
 800534c:	ee07 3a90 	vmov	s15, r3
 8005350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005354:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8005358:	edd7 7a01 	vldr	s15, [r7, #4]
 800535c:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800538c <BMP280_ReadTemperature+0x110>
 8005360:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005364:	e001      	b.n	800536a <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8005366:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005390 <BMP280_ReadTemperature+0x114>
}
 800536a:	eef0 7a47 	vmov.f32	s15, s14
 800536e:	eeb0 0a67 	vmov.f32	s0, s15
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	2000020a 	.word	0x2000020a
 800537c:	20000220 	.word	0x20000220
 8005380:	2000020c 	.word	0x2000020c
 8005384:	2000020e 	.word	0x2000020e
 8005388:	20000224 	.word	0x20000224
 800538c:	42c80000 	.word	0x42c80000
 8005390:	c2c60000 	.word	0xc2c60000

08005394 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8005394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005398:	b0cc      	sub	sp, #304	@ 0x130
 800539a:	af00      	add	r7, sp, #0
 800539c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 80053a0:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80053a4:	f7ff ff6a 	bl	800527c <BMP280_ReadTemperature>
 80053a8:	eef0 7a40 	vmov.f32	s15, s0
 80053ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053b0:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80053b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053b8:	edd3 7a00 	vldr	s15, [r3]
 80053bc:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 800568c <BMP280_ReadTemperatureAndPressure+0x2f8>
 80053c0:	eef4 7a47 	vcmp.f32	s15, s14
 80053c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c8:	d101      	bne.n	80053ce <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 80053ca:	23ff      	movs	r3, #255	@ 0xff
 80053cc:	e2bf      	b.n	800594e <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 80053ce:	20f7      	movs	r0, #247	@ 0xf7
 80053d0:	f7ff fe74 	bl	80050bc <BMP280_Read24>
 80053d4:	4603      	mov	r3, r0
 80053d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	  adc_P >>= 4;
 80053da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80053de:	111b      	asrs	r3, r3, #4
 80053e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 80053e4:	4baa      	ldr	r3, [pc, #680]	@ (8005690 <BMP280_ReadTemperatureAndPressure+0x2fc>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	17da      	asrs	r2, r3, #31
 80053ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053ee:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80053f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80053f6:	460b      	mov	r3, r1
 80053f8:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80053fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053fe:	4613      	mov	r3, r2
 8005400:	f143 33ff 	adc.w	r3, r3, #4294967295
 8005404:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005406:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800540a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 800540e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8005412:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005416:	fb03 f102 	mul.w	r1, r3, r2
 800541a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800541e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005422:	fb02 f303 	mul.w	r3, r2, r3
 8005426:	18ca      	adds	r2, r1, r3
 8005428:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800542c:	fba3 4503 	umull	r4, r5, r3, r3
 8005430:	1953      	adds	r3, r2, r5
 8005432:	461d      	mov	r5, r3
 8005434:	4b97      	ldr	r3, [pc, #604]	@ (8005694 <BMP280_ReadTemperatureAndPressure+0x300>)
 8005436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800543a:	b21b      	sxth	r3, r3
 800543c:	17da      	asrs	r2, r3, #31
 800543e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005442:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005446:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800544a:	4603      	mov	r3, r0
 800544c:	fb03 f205 	mul.w	r2, r3, r5
 8005450:	460b      	mov	r3, r1
 8005452:	fb04 f303 	mul.w	r3, r4, r3
 8005456:	4413      	add	r3, r2
 8005458:	4602      	mov	r2, r0
 800545a:	fba4 8902 	umull	r8, r9, r4, r2
 800545e:	444b      	add	r3, r9
 8005460:	4699      	mov	r9, r3
 8005462:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 8005466:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 800546a:	4b8b      	ldr	r3, [pc, #556]	@ (8005698 <BMP280_ReadTemperatureAndPressure+0x304>)
 800546c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005470:	b21b      	sxth	r3, r3
 8005472:	17da      	asrs	r2, r3, #31
 8005474:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005478:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800547c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005480:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8005484:	462a      	mov	r2, r5
 8005486:	fb02 f203 	mul.w	r2, r2, r3
 800548a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800548e:	4621      	mov	r1, r4
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	441a      	add	r2, r3
 8005496:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800549a:	4621      	mov	r1, r4
 800549c:	fba3 ab01 	umull	sl, fp, r3, r1
 80054a0:	eb02 030b 	add.w	r3, r2, fp
 80054a4:	469b      	mov	fp, r3
 80054a6:	f04f 0000 	mov.w	r0, #0
 80054aa:	f04f 0100 	mov.w	r1, #0
 80054ae:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80054b2:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80054b6:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80054ba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80054be:	1814      	adds	r4, r2, r0
 80054c0:	643c      	str	r4, [r7, #64]	@ 0x40
 80054c2:	414b      	adcs	r3, r1
 80054c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80054c6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80054ca:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 80054ce:	4b73      	ldr	r3, [pc, #460]	@ (800569c <BMP280_ReadTemperatureAndPressure+0x308>)
 80054d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054d4:	b21b      	sxth	r3, r3
 80054d6:	17da      	asrs	r2, r3, #31
 80054d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054dc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80054e0:	f04f 0000 	mov.w	r0, #0
 80054e4:	f04f 0100 	mov.w	r1, #0
 80054e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80054ec:	00d9      	lsls	r1, r3, #3
 80054ee:	2000      	movs	r0, #0
 80054f0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80054f4:	1814      	adds	r4, r2, r0
 80054f6:	63bc      	str	r4, [r7, #56]	@ 0x38
 80054f8:	414b      	adcs	r3, r1
 80054fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054fc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8005500:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8005504:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8005508:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800550c:	fb03 f102 	mul.w	r1, r3, r2
 8005510:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8005514:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005518:	fb02 f303 	mul.w	r3, r2, r3
 800551c:	18ca      	adds	r2, r1, r3
 800551e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005522:	fba3 1303 	umull	r1, r3, r3, r3
 8005526:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800552a:	460b      	mov	r3, r1
 800552c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005534:	18d3      	adds	r3, r2, r3
 8005536:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800553a:	4b59      	ldr	r3, [pc, #356]	@ (80056a0 <BMP280_ReadTemperatureAndPressure+0x30c>)
 800553c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005540:	b21b      	sxth	r3, r3
 8005542:	17da      	asrs	r2, r3, #31
 8005544:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005548:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800554c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8005550:	462b      	mov	r3, r5
 8005552:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8005556:	4642      	mov	r2, r8
 8005558:	fb02 f203 	mul.w	r2, r2, r3
 800555c:	464b      	mov	r3, r9
 800555e:	4621      	mov	r1, r4
 8005560:	fb01 f303 	mul.w	r3, r1, r3
 8005564:	4413      	add	r3, r2
 8005566:	4622      	mov	r2, r4
 8005568:	4641      	mov	r1, r8
 800556a:	fba2 1201 	umull	r1, r2, r2, r1
 800556e:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8005572:	460a      	mov	r2, r1
 8005574:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8005578:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800557c:	4413      	add	r3, r2
 800557e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005582:	f04f 0000 	mov.w	r0, #0
 8005586:	f04f 0100 	mov.w	r1, #0
 800558a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800558e:	4623      	mov	r3, r4
 8005590:	0a18      	lsrs	r0, r3, #8
 8005592:	462b      	mov	r3, r5
 8005594:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8005598:	462b      	mov	r3, r5
 800559a:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 800559c:	4b41      	ldr	r3, [pc, #260]	@ (80056a4 <BMP280_ReadTemperatureAndPressure+0x310>)
 800559e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055a2:	b21b      	sxth	r3, r3
 80055a4:	17da      	asrs	r2, r3, #31
 80055a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80055b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055b6:	464a      	mov	r2, r9
 80055b8:	fb02 f203 	mul.w	r2, r2, r3
 80055bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80055c0:	4644      	mov	r4, r8
 80055c2:	fb04 f303 	mul.w	r3, r4, r3
 80055c6:	441a      	add	r2, r3
 80055c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80055cc:	4644      	mov	r4, r8
 80055ce:	fba3 4304 	umull	r4, r3, r3, r4
 80055d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80055d6:	4623      	mov	r3, r4
 80055d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e0:	18d3      	adds	r3, r2, r3
 80055e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 80055f2:	464c      	mov	r4, r9
 80055f4:	0323      	lsls	r3, r4, #12
 80055f6:	4644      	mov	r4, r8
 80055f8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80055fc:	4644      	mov	r4, r8
 80055fe:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8005600:	1884      	adds	r4, r0, r2
 8005602:	633c      	str	r4, [r7, #48]	@ 0x30
 8005604:	eb41 0303 	adc.w	r3, r1, r3
 8005608:	637b      	str	r3, [r7, #52]	@ 0x34
 800560a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800560e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8005612:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8005616:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800561a:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 800561e:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8005622:	4b21      	ldr	r3, [pc, #132]	@ (80056a8 <BMP280_ReadTemperatureAndPressure+0x314>)
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	b29b      	uxth	r3, r3
 8005628:	2200      	movs	r2, #0
 800562a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800562e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005632:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8005636:	462b      	mov	r3, r5
 8005638:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800563c:	4642      	mov	r2, r8
 800563e:	fb02 f203 	mul.w	r2, r2, r3
 8005642:	464b      	mov	r3, r9
 8005644:	4621      	mov	r1, r4
 8005646:	fb01 f303 	mul.w	r3, r1, r3
 800564a:	4413      	add	r3, r2
 800564c:	4622      	mov	r2, r4
 800564e:	4641      	mov	r1, r8
 8005650:	fba2 1201 	umull	r1, r2, r2, r1
 8005654:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005658:	460a      	mov	r2, r1
 800565a:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 800565e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005662:	4413      	add	r3, r2
 8005664:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005674:	4629      	mov	r1, r5
 8005676:	104a      	asrs	r2, r1, #1
 8005678:	4629      	mov	r1, r5
 800567a:	17cb      	asrs	r3, r1, #31
 800567c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	  if (var1 == 0) {
 8005680:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8005684:	4313      	orrs	r3, r2
 8005686:	d111      	bne.n	80056ac <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8005688:	2300      	movs	r3, #0
 800568a:	e160      	b.n	800594e <BMP280_ReadTemperatureAndPressure+0x5ba>
 800568c:	c2c60000 	.word	0xc2c60000
 8005690:	20000224 	.word	0x20000224
 8005694:	20000218 	.word	0x20000218
 8005698:	20000216 	.word	0x20000216
 800569c:	20000214 	.word	0x20000214
 80056a0:	20000212 	.word	0x20000212
 80056a4:	20000210 	.word	0x20000210
 80056a8:	20000222 	.word	0x20000222
	  }
	  p = 1048576 - adc_P;
 80056ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056b0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80056b4:	17da      	asrs	r2, r3, #31
 80056b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056ba:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80056be:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 80056c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80056c6:	105b      	asrs	r3, r3, #1
 80056c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80056cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80056d0:	07db      	lsls	r3, r3, #31
 80056d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056d6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80056da:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80056de:	4621      	mov	r1, r4
 80056e0:	1a89      	subs	r1, r1, r2
 80056e2:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80056e6:	4629      	mov	r1, r5
 80056e8:	eb61 0303 	sbc.w	r3, r1, r3
 80056ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056f0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80056f4:	4622      	mov	r2, r4
 80056f6:	462b      	mov	r3, r5
 80056f8:	1891      	adds	r1, r2, r2
 80056fa:	6239      	str	r1, [r7, #32]
 80056fc:	415b      	adcs	r3, r3
 80056fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005700:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005704:	4621      	mov	r1, r4
 8005706:	1851      	adds	r1, r2, r1
 8005708:	61b9      	str	r1, [r7, #24]
 800570a:	4629      	mov	r1, r5
 800570c:	414b      	adcs	r3, r1
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800571c:	4649      	mov	r1, r9
 800571e:	018b      	lsls	r3, r1, #6
 8005720:	4641      	mov	r1, r8
 8005722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005726:	4641      	mov	r1, r8
 8005728:	018a      	lsls	r2, r1, #6
 800572a:	4641      	mov	r1, r8
 800572c:	1889      	adds	r1, r1, r2
 800572e:	6139      	str	r1, [r7, #16]
 8005730:	4649      	mov	r1, r9
 8005732:	eb43 0101 	adc.w	r1, r3, r1
 8005736:	6179      	str	r1, [r7, #20]
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8005744:	4649      	mov	r1, r9
 8005746:	008b      	lsls	r3, r1, #2
 8005748:	4641      	mov	r1, r8
 800574a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800574e:	4641      	mov	r1, r8
 8005750:	008a      	lsls	r2, r1, #2
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	4603      	mov	r3, r0
 8005758:	4622      	mov	r2, r4
 800575a:	189b      	adds	r3, r3, r2
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	460b      	mov	r3, r1
 8005760:	462a      	mov	r2, r5
 8005762:	eb42 0303 	adc.w	r3, r2, r3
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8005774:	4649      	mov	r1, r9
 8005776:	008b      	lsls	r3, r1, #2
 8005778:	4641      	mov	r1, r8
 800577a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800577e:	4641      	mov	r1, r8
 8005780:	008a      	lsls	r2, r1, #2
 8005782:	4610      	mov	r0, r2
 8005784:	4619      	mov	r1, r3
 8005786:	4603      	mov	r3, r0
 8005788:	4622      	mov	r2, r4
 800578a:	189b      	adds	r3, r3, r2
 800578c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800578e:	462b      	mov	r3, r5
 8005790:	460a      	mov	r2, r1
 8005792:	eb42 0303 	adc.w	r3, r2, r3
 8005796:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005798:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800579c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80057a0:	f7fb fa92 	bl	8000cc8 <__aeabi_ldivmod>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80057ac:	4b6b      	ldr	r3, [pc, #428]	@ (800595c <BMP280_ReadTemperatureAndPressure+0x5c8>)
 80057ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057b2:	b21b      	sxth	r3, r3
 80057b4:	17da      	asrs	r2, r3, #31
 80057b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80057b8:	677a      	str	r2, [r7, #116]	@ 0x74
 80057ba:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80057be:	f04f 0000 	mov.w	r0, #0
 80057c2:	f04f 0100 	mov.w	r1, #0
 80057c6:	0b50      	lsrs	r0, r2, #13
 80057c8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80057cc:	1359      	asrs	r1, r3, #13
 80057ce:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80057d2:	462b      	mov	r3, r5
 80057d4:	fb00 f203 	mul.w	r2, r0, r3
 80057d8:	4623      	mov	r3, r4
 80057da:	fb03 f301 	mul.w	r3, r3, r1
 80057de:	4413      	add	r3, r2
 80057e0:	4622      	mov	r2, r4
 80057e2:	fba2 1200 	umull	r1, r2, r2, r0
 80057e6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80057ea:	460a      	mov	r2, r1
 80057ec:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80057f0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80057f4:	4413      	add	r3, r2
 80057f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057fa:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80057fe:	f04f 0000 	mov.w	r0, #0
 8005802:	f04f 0100 	mov.w	r1, #0
 8005806:	0b50      	lsrs	r0, r2, #13
 8005808:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800580c:	1359      	asrs	r1, r3, #13
 800580e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8005812:	462b      	mov	r3, r5
 8005814:	fb00 f203 	mul.w	r2, r0, r3
 8005818:	4623      	mov	r3, r4
 800581a:	fb03 f301 	mul.w	r3, r3, r1
 800581e:	4413      	add	r3, r2
 8005820:	4622      	mov	r2, r4
 8005822:	fba2 1200 	umull	r1, r2, r2, r0
 8005826:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800582a:	460a      	mov	r2, r1
 800582c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8005830:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005834:	4413      	add	r3, r2
 8005836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8005846:	4621      	mov	r1, r4
 8005848:	0e4a      	lsrs	r2, r1, #25
 800584a:	4629      	mov	r1, r5
 800584c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8005850:	4629      	mov	r1, r5
 8005852:	164b      	asrs	r3, r1, #25
 8005854:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 8005858:	4b41      	ldr	r3, [pc, #260]	@ (8005960 <BMP280_ReadTemperatureAndPressure+0x5cc>)
 800585a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800585e:	b21b      	sxth	r3, r3
 8005860:	17da      	asrs	r2, r3, #31
 8005862:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005864:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005866:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800586a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800586e:	462a      	mov	r2, r5
 8005870:	fb02 f203 	mul.w	r2, r2, r3
 8005874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005878:	4621      	mov	r1, r4
 800587a:	fb01 f303 	mul.w	r3, r1, r3
 800587e:	4413      	add	r3, r2
 8005880:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8005884:	4621      	mov	r1, r4
 8005886:	fba2 1201 	umull	r1, r2, r2, r1
 800588a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800588e:	460a      	mov	r2, r1
 8005890:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8005894:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8005898:	4413      	add	r3, r2
 800589a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80058aa:	4621      	mov	r1, r4
 80058ac:	0cca      	lsrs	r2, r1, #19
 80058ae:	4629      	mov	r1, r5
 80058b0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80058b4:	4629      	mov	r1, r5
 80058b6:	14cb      	asrs	r3, r1, #19
 80058b8:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 80058bc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80058c0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80058c4:	1884      	adds	r4, r0, r2
 80058c6:	663c      	str	r4, [r7, #96]	@ 0x60
 80058c8:	eb41 0303 	adc.w	r3, r1, r3
 80058cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80058ce:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80058d2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80058d6:	4621      	mov	r1, r4
 80058d8:	1889      	adds	r1, r1, r2
 80058da:	65b9      	str	r1, [r7, #88]	@ 0x58
 80058dc:	4629      	mov	r1, r5
 80058de:	eb43 0101 	adc.w	r1, r3, r1
 80058e2:	65f9      	str	r1, [r7, #92]	@ 0x5c
 80058e4:	f04f 0000 	mov.w	r0, #0
 80058e8:	f04f 0100 	mov.w	r1, #0
 80058ec:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80058f0:	4623      	mov	r3, r4
 80058f2:	0a18      	lsrs	r0, r3, #8
 80058f4:	462b      	mov	r3, r5
 80058f6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80058fa:	462b      	mov	r3, r5
 80058fc:	1219      	asrs	r1, r3, #8
 80058fe:	4b19      	ldr	r3, [pc, #100]	@ (8005964 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8005900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005904:	b21b      	sxth	r3, r3
 8005906:	17da      	asrs	r2, r3, #31
 8005908:	653b      	str	r3, [r7, #80]	@ 0x50
 800590a:	657a      	str	r2, [r7, #84]	@ 0x54
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005918:	464c      	mov	r4, r9
 800591a:	0123      	lsls	r3, r4, #4
 800591c:	4644      	mov	r4, r8
 800591e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8005922:	4644      	mov	r4, r8
 8005924:	0122      	lsls	r2, r4, #4
 8005926:	1884      	adds	r4, r0, r2
 8005928:	603c      	str	r4, [r7, #0]
 800592a:	eb41 0303 	adc.w	r3, r1, r3
 800592e:	607b      	str	r3, [r7, #4]
 8005930:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005934:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  *pressure = (int32_t)p/256;
 8005938:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800593c:	2b00      	cmp	r3, #0
 800593e:	da00      	bge.n	8005942 <BMP280_ReadTemperatureAndPressure+0x5ae>
 8005940:	33ff      	adds	r3, #255	@ 0xff
 8005942:	121b      	asrs	r3, r3, #8
 8005944:	461a      	mov	r2, r3
 8005946:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800594a:	601a      	str	r2, [r3, #0]

	  return 0;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005954:	46bd      	mov	sp, r7
 8005956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800595a:	bf00      	nop
 800595c:	2000021e 	.word	0x2000021e
 8005960:	2000021c 	.word	0x2000021c
 8005964:	2000021a 	.word	0x2000021a

08005968 <lcd_send_cmd>:

//#define SLAVE_ADDRESS_LCD 0x70 // change this according to ur setup
#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af02      	add	r7, sp, #8
 800596e:	4603      	mov	r3, r0
 8005970:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	f023 030f 	bic.w	r3, r3, #15
 8005978:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8005980:	7bfb      	ldrb	r3, [r7, #15]
 8005982:	f043 030c 	orr.w	r3, r3, #12
 8005986:	b2db      	uxtb	r3, r3
 8005988:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	f043 0308 	orr.w	r3, r3, #8
 8005990:	b2db      	uxtb	r3, r3
 8005992:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	f043 030c 	orr.w	r3, r3, #12
 800599a:	b2db      	uxtb	r3, r3
 800599c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800599e:	7bbb      	ldrb	r3, [r7, #14]
 80059a0:	f043 0308 	orr.w	r3, r3, #8
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80059a8:	f107 0208 	add.w	r2, r7, #8
 80059ac:	2364      	movs	r3, #100	@ 0x64
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	2304      	movs	r3, #4
 80059b2:	214e      	movs	r1, #78	@ 0x4e
 80059b4:	4803      	ldr	r0, [pc, #12]	@ (80059c4 <lcd_send_cmd+0x5c>)
 80059b6:	f7fc f80d 	bl	80019d4 <HAL_I2C_Master_Transmit>
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	2000027c 	.word	0x2000027c

080059c8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	4603      	mov	r3, r0
 80059d0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	f023 030f 	bic.w	r3, r3, #15
 80059d8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	f043 030d 	orr.w	r3, r3, #13
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	f043 0309 	orr.w	r3, r3, #9
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
 80059f6:	f043 030d 	orr.w	r3, r3, #13
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80059fe:	7bbb      	ldrb	r3, [r7, #14]
 8005a00:	f043 0309 	orr.w	r3, r3, #9
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8005a08:	f107 0208 	add.w	r2, r7, #8
 8005a0c:	2364      	movs	r3, #100	@ 0x64
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	2304      	movs	r3, #4
 8005a12:	214e      	movs	r1, #78	@ 0x4e
 8005a14:	4803      	ldr	r0, [pc, #12]	@ (8005a24 <lcd_send_data+0x5c>)
 8005a16:	f7fb ffdd 	bl	80019d4 <HAL_I2C_Master_Transmit>
}
 8005a1a:	bf00      	nop
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	2000027c 	.word	0x2000027c

08005a28 <lcd_clear>:

void lcd_clear (void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8005a2e:	2080      	movs	r0, #128	@ 0x80
 8005a30:	f7ff ff9a 	bl	8005968 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8005a34:	2300      	movs	r3, #0
 8005a36:	607b      	str	r3, [r7, #4]
 8005a38:	e005      	b.n	8005a46 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8005a3a:	2020      	movs	r0, #32
 8005a3c:	f7ff ffc4 	bl	80059c8 <lcd_send_data>
	for (int i=0; i<70; i++)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3301      	adds	r3, #1
 8005a44:	607b      	str	r3, [r7, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b45      	cmp	r3, #69	@ 0x45
 8005a4a:	ddf6      	ble.n	8005a3a <lcd_clear+0x12>
	}
	lcd_put_cur(0, 0); //Dopisane ustawienie kursora na 0,0
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	2000      	movs	r0, #0
 8005a50:	f000 f804 	bl	8005a5c <lcd_put_cur>
}
 8005a54:	bf00      	nop
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
    switch (row)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <lcd_put_cur+0x18>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d005      	beq.n	8005a7e <lcd_put_cur+0x22>
 8005a72:	e009      	b.n	8005a88 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a7a:	603b      	str	r3, [r7, #0]
            break;
 8005a7c:	e004      	b.n	8005a88 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a84:	603b      	str	r3, [r7, #0]
            break;
 8005a86:	bf00      	nop
    }

    lcd_send_cmd (col);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff ff6b 	bl	8005968 <lcd_send_cmd>
}
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <lcd_init>:


void lcd_init (void)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8005a9e:	2032      	movs	r0, #50	@ 0x32
 8005aa0:	f7fb fb6e 	bl	8001180 <HAL_Delay>
	lcd_send_cmd (0x30);
 8005aa4:	2030      	movs	r0, #48	@ 0x30
 8005aa6:	f7ff ff5f 	bl	8005968 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8005aaa:	2005      	movs	r0, #5
 8005aac:	f7fb fb68 	bl	8001180 <HAL_Delay>
	lcd_send_cmd (0x30);
 8005ab0:	2030      	movs	r0, #48	@ 0x30
 8005ab2:	f7ff ff59 	bl	8005968 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	f7fb fb62 	bl	8001180 <HAL_Delay>
	lcd_send_cmd (0x30);
 8005abc:	2030      	movs	r0, #48	@ 0x30
 8005abe:	f7ff ff53 	bl	8005968 <lcd_send_cmd>
	HAL_Delay(10);
 8005ac2:	200a      	movs	r0, #10
 8005ac4:	f7fb fb5c 	bl	8001180 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8005ac8:	2020      	movs	r0, #32
 8005aca:	f7ff ff4d 	bl	8005968 <lcd_send_cmd>
	HAL_Delay(10);
 8005ace:	200a      	movs	r0, #10
 8005ad0:	f7fb fb56 	bl	8001180 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8005ad4:	2028      	movs	r0, #40	@ 0x28
 8005ad6:	f7ff ff47 	bl	8005968 <lcd_send_cmd>
	HAL_Delay(1);
 8005ada:	2001      	movs	r0, #1
 8005adc:	f7fb fb50 	bl	8001180 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8005ae0:	2008      	movs	r0, #8
 8005ae2:	f7ff ff41 	bl	8005968 <lcd_send_cmd>
	HAL_Delay(1);
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	f7fb fb4a 	bl	8001180 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8005aec:	2001      	movs	r0, #1
 8005aee:	f7ff ff3b 	bl	8005968 <lcd_send_cmd>
	HAL_Delay(1);
 8005af2:	2001      	movs	r0, #1
 8005af4:	f7fb fb44 	bl	8001180 <HAL_Delay>
	HAL_Delay(1);
 8005af8:	2001      	movs	r0, #1
 8005afa:	f7fb fb41 	bl	8001180 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8005afe:	2006      	movs	r0, #6
 8005b00:	f7ff ff32 	bl	8005968 <lcd_send_cmd>
	HAL_Delay(1);
 8005b04:	2001      	movs	r0, #1
 8005b06:	f7fb fb3b 	bl	8001180 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8005b0a:	200c      	movs	r0, #12
 8005b0c:	f7ff ff2c 	bl	8005968 <lcd_send_cmd>
}
 8005b10:	bf00      	nop
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
	while (*str)
 8005b1c:	e006      	b.n	8005b2c <lcd_send_string+0x18>
	{
		lcd_send_data (*str++);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff ff4e 	bl	80059c8 <lcd_send_data>
	while (*str)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1f4      	bne.n	8005b1e <lcd_send_string+0xa>
	}
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <UART_Receive_Temperature.0>:
  HAL_Delay(2000);

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);

  void UART_Receive_Temperature(void)
  {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	f8c7 c004 	str.w	ip, [r7, #4]
      // Oczekujemy na dane przez UART
      HAL_UART_Receive(&huart3, (uint8_t*)uart_buffer, MAX_UART_LENGTH, 1000);
 8005b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005b4e:	2214      	movs	r2, #20
 8005b50:	491a      	ldr	r1, [pc, #104]	@ (8005bbc <UART_Receive_Temperature.0+0x7c>)
 8005b52:	481b      	ldr	r0, [pc, #108]	@ (8005bc0 <UART_Receive_Temperature.0+0x80>)
 8005b54:	f7fe fa13 	bl	8003f7e <HAL_UART_Receive>

      // Konwertujemy odebrany tekst na zmienną float
      sscanf(uart_buffer, "%f", &temp_from_uart);
 8005b58:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc4 <UART_Receive_Temperature.0+0x84>)
 8005b5a:	491b      	ldr	r1, [pc, #108]	@ (8005bc8 <UART_Receive_Temperature.0+0x88>)
 8005b5c:	4817      	ldr	r0, [pc, #92]	@ (8005bbc <UART_Receive_Temperature.0+0x7c>)
 8005b5e:	f001 fea9 	bl	80078b4 <siscanf>

      // Sprawdzamy, czy wartość jest w dopuszczalnym zakresie (np. 20-35°C) i czy różni się od poprzedniej wartości
      if (temp_from_uart >= 20.0 && temp_from_uart <= 35.0 && temp_from_uart != last_temp_from_uart)
 8005b62:	4b18      	ldr	r3, [pc, #96]	@ (8005bc4 <UART_Receive_Temperature.0+0x84>)
 8005b64:	edd3 7a00 	vldr	s15, [r3]
 8005b68:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8005b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b74:	da00      	bge.n	8005b78 <UART_Receive_Temperature.0+0x38>
      {
          temp_zadana = temp_from_uart;  // Zmieniamy zadaną temperaturę tylko, jeśli różni się od poprzedniej
          last_temp_from_uart = temp_from_uart;  // Zapamiętujemy nową wartość
      }
  }
 8005b76:	e01d      	b.n	8005bb4 <UART_Receive_Temperature.0+0x74>
      if (temp_from_uart >= 20.0 && temp_from_uart <= 35.0 && temp_from_uart != last_temp_from_uart)
 8005b78:	4b12      	ldr	r3, [pc, #72]	@ (8005bc4 <UART_Receive_Temperature.0+0x84>)
 8005b7a:	edd3 7a00 	vldr	s15, [r3]
 8005b7e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8005bcc <UART_Receive_Temperature.0+0x8c>
 8005b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8a:	d900      	bls.n	8005b8e <UART_Receive_Temperature.0+0x4e>
  }
 8005b8c:	e012      	b.n	8005bb4 <UART_Receive_Temperature.0+0x74>
      if (temp_from_uart >= 20.0 && temp_from_uart <= 35.0 && temp_from_uart != last_temp_from_uart)
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc4 <UART_Receive_Temperature.0+0x84>)
 8005b90:	ed93 7a00 	vldr	s14, [r3]
 8005b94:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd0 <UART_Receive_Temperature.0+0x90>)
 8005b96:	edd3 7a00 	vldr	s15, [r3]
 8005b9a:	eeb4 7a67 	vcmp.f32	s14, s15
 8005b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba2:	d007      	beq.n	8005bb4 <UART_Receive_Temperature.0+0x74>
          temp_zadana = temp_from_uart;  // Zmieniamy zadaną temperaturę tylko, jeśli różni się od poprzedniej
 8005ba4:	4b07      	ldr	r3, [pc, #28]	@ (8005bc4 <UART_Receive_Temperature.0+0x84>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8005bd4 <UART_Receive_Temperature.0+0x94>)
 8005baa:	6013      	str	r3, [r2, #0]
          last_temp_from_uart = temp_from_uart;  // Zapamiętujemy nową wartość
 8005bac:	4b05      	ldr	r3, [pc, #20]	@ (8005bc4 <UART_Receive_Temperature.0+0x84>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a07      	ldr	r2, [pc, #28]	@ (8005bd0 <UART_Receive_Temperature.0+0x90>)
 8005bb2:	6013      	str	r3, [r2, #0]
  }
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	200003b8 	.word	0x200003b8
 8005bc0:	2000031c 	.word	0x2000031c
 8005bc4:	200003cc 	.word	0x200003cc
 8005bc8:	0800b958 	.word	0x0800b958
 8005bcc:	420c0000 	.word	0x420c0000
 8005bd0:	200003d8 	.word	0x200003d8
 8005bd4:	20000008 	.word	0x20000008

08005bd8 <main>:
{
 8005bd8:	b5b0      	push	{r4, r5, r7, lr}
 8005bda:	b08e      	sub	sp, #56	@ 0x38
 8005bdc:	af00      	add	r7, sp, #0
int main(void)
 8005bde:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_Init();
 8005be4:	f7fb fa6e 	bl	80010c4 <HAL_Init>
  SystemClock_Config();
 8005be8:	f000 f9c8 	bl	8005f7c <SystemClock_Config>
  MX_GPIO_Init();
 8005bec:	f000 fb38 	bl	8006260 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8005bf0:	f000 fb06 	bl	8006200 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8005bf4:	f000 fa2a 	bl	800604c <MX_I2C1_Init>
  MX_I2C4_Init();
 8005bf8:	f000 fa68 	bl	80060cc <MX_I2C4_Init>
  MX_TIM1_Init();
 8005bfc:	f000 faa6 	bl	800614c <MX_TIM1_Init>
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8005c00:	2301      	movs	r3, #1
 8005c02:	2203      	movs	r2, #3
 8005c04:	2101      	movs	r1, #1
 8005c06:	48b8      	ldr	r0, [pc, #736]	@ (8005ee8 <main+0x310>)
 8005c08:	f7ff fa7a 	bl	8005100 <BMP280_Init>
  lcd_init ();
 8005c0c:	f7ff ff45 	bl	8005a9a <lcd_init>
  lcd_send_string ("Czujnik BMP280");
 8005c10:	48b6      	ldr	r0, [pc, #728]	@ (8005eec <main+0x314>)
 8005c12:	f7ff ff7f 	bl	8005b14 <lcd_send_string>
  HAL_Delay(100);
 8005c16:	2064      	movs	r0, #100	@ 0x64
 8005c18:	f7fb fab2 	bl	8001180 <HAL_Delay>
  lcd_put_cur(1, 0);
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	2001      	movs	r0, #1
 8005c20:	f7ff ff1c 	bl	8005a5c <lcd_put_cur>
  lcd_send_string("I2C1-BMP,I2C4-LCD");
 8005c24:	48b2      	ldr	r0, [pc, #712]	@ (8005ef0 <main+0x318>)
 8005c26:	f7ff ff75 	bl	8005b14 <lcd_send_string>
  HAL_Delay(2000);
 8005c2a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8005c2e:	f7fb faa7 	bl	8001180 <HAL_Delay>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8005c32:	213c      	movs	r1, #60	@ 0x3c
 8005c34:	48af      	ldr	r0, [pc, #700]	@ (8005ef4 <main+0x31c>)
 8005c36:	f7fd fedd 	bl	80039f4 <HAL_TIM_Encoder_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Odbiór nowej temperatury przez UART
	  UART_Receive_Temperature();
 8005c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c3e:	469c      	mov	ip, r3
 8005c40:	f7ff ff7e 	bl	8005b40 <UART_Receive_Temperature.0>

	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8005c44:	49ac      	ldr	r1, [pc, #688]	@ (8005ef8 <main+0x320>)
 8005c46:	48ad      	ldr	r0, [pc, #692]	@ (8005efc <main+0x324>)
 8005c48:	f7ff fba4 	bl	8005394 <BMP280_ReadTemperatureAndPressure>
	  sprintf((char*)text, "%.2f, ", temperature);
 8005c4c:	4bab      	ldr	r3, [pc, #684]	@ (8005efc <main+0x324>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fa fc99 	bl	8000588 <__aeabi_f2d>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	1d38      	adds	r0, r7, #4
 8005c5c:	49a8      	ldr	r1, [pc, #672]	@ (8005f00 <main+0x328>)
 8005c5e:	f001 fe09 	bl	8007874 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 1000);
 8005c62:	1d3b      	adds	r3, r7, #4
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fa fb23 	bl	80002b0 <strlen>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	1d39      	adds	r1, r7, #4
 8005c70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005c74:	48a3      	ldr	r0, [pc, #652]	@ (8005f04 <main+0x32c>)
 8005c76:	f7fe f8f9 	bl	8003e6c <HAL_UART_Transmit>

	  lcd_clear ();
 8005c7a:	f7ff fed5 	bl	8005a28 <lcd_clear>
	  lcd_put_cur(0, 0);
 8005c7e:	2100      	movs	r1, #0
 8005c80:	2000      	movs	r0, #0
 8005c82:	f7ff feeb 	bl	8005a5c <lcd_put_cur>
	  sprintf((char*)text, "Temp.  %.2f  C", temperature);
 8005c86:	4b9d      	ldr	r3, [pc, #628]	@ (8005efc <main+0x324>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fa fc7c 	bl	8000588 <__aeabi_f2d>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	1d38      	adds	r0, r7, #4
 8005c96:	499c      	ldr	r1, [pc, #624]	@ (8005f08 <main+0x330>)
 8005c98:	f001 fdec 	bl	8007874 <siprintf>
	  lcd_send_string(text);
 8005c9c:	1d3b      	adds	r3, r7, #4
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff ff38 	bl	8005b14 <lcd_send_string>
	  lcd_put_cur(1, 0);
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	2001      	movs	r0, #1
 8005ca8:	f7ff fed8 	bl	8005a5c <lcd_put_cur>

	  if (HAL_GetTick() - last_encoder_time > 1000) {  // Po 1 sekundzie (1000 ms)
 8005cac:	f7fb fa5c 	bl	8001168 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	4b96      	ldr	r3, [pc, #600]	@ (8005f0c <main+0x334>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cbc:	d902      	bls.n	8005cc4 <main+0xec>
	      encoder_adjusted = 0;  // Resetujemy flagę, umożliwiając UART zmianę temperatury
 8005cbe:	4b94      	ldr	r3, [pc, #592]	@ (8005f10 <main+0x338>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
	  }

	  // Odczytujemy wartość z enkodera
	  int encoder_value = __HAL_TIM_GET_COUNTER(&htim1);
 8005cc4:	4b8b      	ldr	r3, [pc, #556]	@ (8005ef4 <main+0x31c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cca:	637b      	str	r3, [r7, #52]	@ 0x34

	  // Sprawdzamy kierunek obrotu enkodera
	  static int previous_encoder_value = 0;  // Zmienna do przechowywania poprzedniej wartości
	  int encoder_delta = encoder_value - previous_encoder_value;  // Różnica między aktualnym i poprzednim odczytem
 8005ccc:	4b91      	ldr	r3, [pc, #580]	@ (8005f14 <main+0x33c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	633b      	str	r3, [r7, #48]	@ 0x30

	  // Jeśli obracamy w jedną stronę (wartość rośnie), zwiększamy temp_zadana
	  if (encoder_delta > 0) {
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	dd28      	ble.n	8005d2e <main+0x156>
	      if (temp_zadana < 34.90) {
 8005cdc:	4b8e      	ldr	r3, [pc, #568]	@ (8005f18 <main+0x340>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fa fc51 	bl	8000588 <__aeabi_f2d>
 8005ce6:	a37c      	add	r3, pc, #496	@ (adr r3, 8005ed8 <main+0x300>)
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f7fa ff16 	bl	8000b1c <__aeabi_dcmplt>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d043      	beq.n	8005d7e <main+0x1a6>
	          temp_zadana += 0.1;  // Zwiększamy o 0.1 stopnia
 8005cf6:	4b88      	ldr	r3, [pc, #544]	@ (8005f18 <main+0x340>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fa fc44 	bl	8000588 <__aeabi_f2d>
 8005d00:	a377      	add	r3, pc, #476	@ (adr r3, 8005ee0 <main+0x308>)
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	f7fa fae1 	bl	80002cc <__adddf3>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4610      	mov	r0, r2
 8005d10:	4619      	mov	r1, r3
 8005d12:	f7fa ff89 	bl	8000c28 <__aeabi_d2f>
 8005d16:	4603      	mov	r3, r0
 8005d18:	4a7f      	ldr	r2, [pc, #508]	@ (8005f18 <main+0x340>)
 8005d1a:	6013      	str	r3, [r2, #0]
	          encoder_adjusted = 1;  // Zmieniono temperaturę przez enkoder
 8005d1c:	4b7c      	ldr	r3, [pc, #496]	@ (8005f10 <main+0x338>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
	          last_encoder_time = HAL_GetTick();  // Zapamiętujemy czas zmiany
 8005d22:	f7fb fa21 	bl	8001168 <HAL_GetTick>
 8005d26:	4603      	mov	r3, r0
 8005d28:	4a78      	ldr	r2, [pc, #480]	@ (8005f0c <main+0x334>)
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	e027      	b.n	8005d7e <main+0x1a6>
	      }
	  }
	  else if (encoder_delta < 0) {
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	da24      	bge.n	8005d7e <main+0x1a6>
	      if (temp_zadana > 20.00) {
 8005d34:	4b78      	ldr	r3, [pc, #480]	@ (8005f18 <main+0x340>)
 8005d36:	edd3 7a00 	vldr	s15, [r3]
 8005d3a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8005d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d46:	dd1a      	ble.n	8005d7e <main+0x1a6>
	          temp_zadana -= 0.1;  // Zmniejszamy o 0.1 stopnia
 8005d48:	4b73      	ldr	r3, [pc, #460]	@ (8005f18 <main+0x340>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fa fc1b 	bl	8000588 <__aeabi_f2d>
 8005d52:	a363      	add	r3, pc, #396	@ (adr r3, 8005ee0 <main+0x308>)
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	f7fa fab6 	bl	80002c8 <__aeabi_dsub>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4610      	mov	r0, r2
 8005d62:	4619      	mov	r1, r3
 8005d64:	f7fa ff60 	bl	8000c28 <__aeabi_d2f>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	4a6b      	ldr	r2, [pc, #428]	@ (8005f18 <main+0x340>)
 8005d6c:	6013      	str	r3, [r2, #0]
	          encoder_adjusted = 1;  // Zmieniono temperaturę przez enkoder
 8005d6e:	4b68      	ldr	r3, [pc, #416]	@ (8005f10 <main+0x338>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
	          last_encoder_time = HAL_GetTick();  // Zapamiętujemy czas zmiany
 8005d74:	f7fb f9f8 	bl	8001168 <HAL_GetTick>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	4a64      	ldr	r2, [pc, #400]	@ (8005f0c <main+0x334>)
 8005d7c:	6013      	str	r3, [r2, #0]
	      }
	  }

	  // Aktualizujemy poprzednią wartość enkodera
	  previous_encoder_value = encoder_value;
 8005d7e:	4a65      	ldr	r2, [pc, #404]	@ (8005f14 <main+0x33c>)
 8005d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d82:	6013      	str	r3, [r2, #0]

	  sprintf((char*)text, "T_zad. %.2f  C", temp_zadana);
 8005d84:	4b64      	ldr	r3, [pc, #400]	@ (8005f18 <main+0x340>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fa fbfd 	bl	8000588 <__aeabi_f2d>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	1d38      	adds	r0, r7, #4
 8005d94:	4961      	ldr	r1, [pc, #388]	@ (8005f1c <main+0x344>)
 8005d96:	f001 fd6d 	bl	8007874 <siprintf>
	  lcd_send_string(text);
 8005d9a:	1d3b      	adds	r3, r7, #4
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff feb9 	bl	8005b14 <lcd_send_string>

	  // PID Control Logic
	          float error = temp_zadana - temperature;  // Obliczenie błędu
 8005da2:	4b5d      	ldr	r3, [pc, #372]	@ (8005f18 <main+0x340>)
 8005da4:	ed93 7a00 	vldr	s14, [r3]
 8005da8:	4b54      	ldr	r3, [pc, #336]	@ (8005efc <main+0x324>)
 8005daa:	edd3 7a00 	vldr	s15, [r3]
 8005dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005db2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	          integral += error * 0.5;                  // Całkowanie (przemnożone przez 0.5, aby ograniczyć czas trwania)
 8005db6:	4b5a      	ldr	r3, [pc, #360]	@ (8005f20 <main+0x348>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fa fbe4 	bl	8000588 <__aeabi_f2d>
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	460d      	mov	r5, r1
 8005dc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005dc6:	f7fa fbdf 	bl	8000588 <__aeabi_f2d>
 8005dca:	f04f 0200 	mov.w	r2, #0
 8005dce:	4b55      	ldr	r3, [pc, #340]	@ (8005f24 <main+0x34c>)
 8005dd0:	f7fa fc32 	bl	8000638 <__aeabi_dmul>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4620      	mov	r0, r4
 8005dda:	4629      	mov	r1, r5
 8005ddc:	f7fa fa76 	bl	80002cc <__adddf3>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4610      	mov	r0, r2
 8005de6:	4619      	mov	r1, r3
 8005de8:	f7fa ff1e 	bl	8000c28 <__aeabi_d2f>
 8005dec:	4603      	mov	r3, r0
 8005dee:	4a4c      	ldr	r2, [pc, #304]	@ (8005f20 <main+0x348>)
 8005df0:	6013      	str	r3, [r2, #0]
	          if (integral > 5.0) integral = 5.0;      // Ograniczenie całki, aby uniknąć jej zbytniego wzrostu
 8005df2:	4b4b      	ldr	r3, [pc, #300]	@ (8005f20 <main+0x348>)
 8005df4:	edd3 7a00 	vldr	s15, [r3]
 8005df8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8005dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e04:	dd02      	ble.n	8005e0c <main+0x234>
 8005e06:	4b46      	ldr	r3, [pc, #280]	@ (8005f20 <main+0x348>)
 8005e08:	4a47      	ldr	r2, [pc, #284]	@ (8005f28 <main+0x350>)
 8005e0a:	601a      	str	r2, [r3, #0]
	          if (integral < -5.0) integral = -5.0;    // Ograniczenie całki w drugą stronę
 8005e0c:	4b44      	ldr	r3, [pc, #272]	@ (8005f20 <main+0x348>)
 8005e0e:	edd3 7a00 	vldr	s15, [r3]
 8005e12:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 8005e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e1e:	d502      	bpl.n	8005e26 <main+0x24e>
 8005e20:	4b3f      	ldr	r3, [pc, #252]	@ (8005f20 <main+0x348>)
 8005e22:	4a42      	ldr	r2, [pc, #264]	@ (8005f2c <main+0x354>)
 8005e24:	601a      	str	r2, [r3, #0]

	          float derivative = (error - previous_error) / 0.5; // Różniczkowanie (przemnożone przez 0.5, aby ograniczyć zmienność)
 8005e26:	4b42      	ldr	r3, [pc, #264]	@ (8005f30 <main+0x358>)
 8005e28:	edd3 7a00 	vldr	s15, [r3]
 8005e2c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8005e30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e34:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8005e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e3c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	          output = Kp * error + Ki * integral + Kd * derivative; // Obliczenie wyjścia PID
 8005e40:	4b3c      	ldr	r3, [pc, #240]	@ (8005f34 <main+0x35c>)
 8005e42:	ed93 7a00 	vldr	s14, [r3]
 8005e46:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005e4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8005f38 <main+0x360>)
 8005e50:	edd3 6a00 	vldr	s13, [r3]
 8005e54:	4b32      	ldr	r3, [pc, #200]	@ (8005f20 <main+0x348>)
 8005e56:	edd3 7a00 	vldr	s15, [r3]
 8005e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e62:	4b36      	ldr	r3, [pc, #216]	@ (8005f3c <main+0x364>)
 8005e64:	edd3 6a00 	vldr	s13, [r3]
 8005e68:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e74:	4b32      	ldr	r3, [pc, #200]	@ (8005f40 <main+0x368>)
 8005e76:	edc3 7a00 	vstr	s15, [r3]

	          // Ograniczamy wyjście
	          if (output > 1.0) output = 1.0;
 8005e7a:	4b31      	ldr	r3, [pc, #196]	@ (8005f40 <main+0x368>)
 8005e7c:	edd3 7a00 	vldr	s15, [r3]
 8005e80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e8c:	dd03      	ble.n	8005e96 <main+0x2be>
 8005e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8005f40 <main+0x368>)
 8005e90:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005e94:	601a      	str	r2, [r3, #0]
	          if (output < 0.0) output = 0.0;
 8005e96:	4b2a      	ldr	r3, [pc, #168]	@ (8005f40 <main+0x368>)
 8005e98:	edd3 7a00 	vldr	s15, [r3]
 8005e9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea4:	d503      	bpl.n	8005eae <main+0x2d6>
 8005ea6:	4b26      	ldr	r3, [pc, #152]	@ (8005f40 <main+0x368>)
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]

	          // Ustawiamy stan grzałki w zależności od wyjścia PID
	          if (output > 0.5) {
 8005eae:	4b24      	ldr	r3, [pc, #144]	@ (8005f40 <main+0x368>)
 8005eb0:	edd3 7a00 	vldr	s15, [r3]
 8005eb4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec0:	dd44      	ble.n	8005f4c <main+0x374>
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	2180      	movs	r1, #128	@ 0x80
 8005ec6:	481f      	ldr	r0, [pc, #124]	@ (8005f44 <main+0x36c>)
 8005ec8:	f7fb fcce 	bl	8001868 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8005ecc:	2201      	movs	r2, #1
 8005ece:	2101      	movs	r1, #1
 8005ed0:	481d      	ldr	r0, [pc, #116]	@ (8005f48 <main+0x370>)
 8005ed2:	f7fb fcc9 	bl	8001868 <HAL_GPIO_WritePin>
 8005ed6:	e043      	b.n	8005f60 <main+0x388>
 8005ed8:	33333333 	.word	0x33333333
 8005edc:	40417333 	.word	0x40417333
 8005ee0:	9999999a 	.word	0x9999999a
 8005ee4:	3fb99999 	.word	0x3fb99999
 8005ee8:	20000228 	.word	0x20000228
 8005eec:	0800b95c 	.word	0x0800b95c
 8005ef0:	0800b96c 	.word	0x0800b96c
 8005ef4:	200002d0 	.word	0x200002d0
 8005ef8:	200003a8 	.word	0x200003a8
 8005efc:	200003a4 	.word	0x200003a4
 8005f00:	0800b980 	.word	0x0800b980
 8005f04:	2000031c 	.word	0x2000031c
 8005f08:	0800b988 	.word	0x0800b988
 8005f0c:	200003d4 	.word	0x200003d4
 8005f10:	200003d0 	.word	0x200003d0
 8005f14:	200003dc 	.word	0x200003dc
 8005f18:	20000008 	.word	0x20000008
 8005f1c:	0800b998 	.word	0x0800b998
 8005f20:	200003ac 	.word	0x200003ac
 8005f24:	3fe00000 	.word	0x3fe00000
 8005f28:	40a00000 	.word	0x40a00000
 8005f2c:	c0a00000 	.word	0xc0a00000
 8005f30:	200003b0 	.word	0x200003b0
 8005f34:	2000000c 	.word	0x2000000c
 8005f38:	20000010 	.word	0x20000010
 8005f3c:	20000014 	.word	0x20000014
 8005f40:	200003b4 	.word	0x200003b4
 8005f44:	40020c00 	.word	0x40020c00
 8005f48:	40020400 	.word	0x40020400
	          } else {
	              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2180      	movs	r1, #128	@ 0x80
 8005f50:	4807      	ldr	r0, [pc, #28]	@ (8005f70 <main+0x398>)
 8005f52:	f7fb fc89 	bl	8001868 <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8005f56:	2200      	movs	r2, #0
 8005f58:	2101      	movs	r1, #1
 8005f5a:	4806      	ldr	r0, [pc, #24]	@ (8005f74 <main+0x39c>)
 8005f5c:	f7fb fc84 	bl	8001868 <HAL_GPIO_WritePin>
	          }

	          // Przechowywanie poprzedniego błędu do obliczeń różniczkowych
	          previous_error = error;
 8005f60:	4a05      	ldr	r2, [pc, #20]	@ (8005f78 <main+0x3a0>)
 8005f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f64:	6013      	str	r3, [r2, #0]

	  HAL_Delay(500);
 8005f66:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005f6a:	f7fb f909 	bl	8001180 <HAL_Delay>
  {
 8005f6e:	e664      	b.n	8005c3a <main+0x62>
 8005f70:	40020c00 	.word	0x40020c00
 8005f74:	40020400 	.word	0x40020400
 8005f78:	200003b0 	.word	0x200003b0

08005f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b094      	sub	sp, #80	@ 0x50
 8005f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f82:	f107 0320 	add.w	r3, r7, #32
 8005f86:	2230      	movs	r2, #48	@ 0x30
 8005f88:	2100      	movs	r1, #0
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f001 fd01 	bl	8007992 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f90:	f107 030c 	add.w	r3, r7, #12
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	605a      	str	r2, [r3, #4]
 8005f9a:	609a      	str	r2, [r3, #8]
 8005f9c:	60da      	str	r2, [r3, #12]
 8005f9e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005fa0:	f7fc fbb8 	bl	8002714 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005fa4:	4b27      	ldr	r3, [pc, #156]	@ (8006044 <SystemClock_Config+0xc8>)
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa8:	4a26      	ldr	r2, [pc, #152]	@ (8006044 <SystemClock_Config+0xc8>)
 8005faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fb0:	4b24      	ldr	r3, [pc, #144]	@ (8006044 <SystemClock_Config+0xc8>)
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fb8:	60bb      	str	r3, [r7, #8]
 8005fba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005fbc:	4b22      	ldr	r3, [pc, #136]	@ (8006048 <SystemClock_Config+0xcc>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005fc4:	4a20      	ldr	r2, [pc, #128]	@ (8006048 <SystemClock_Config+0xcc>)
 8005fc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8006048 <SystemClock_Config+0xcc>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005fd4:	607b      	str	r3, [r7, #4]
 8005fd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005fdc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8005fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005fe6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005fec:	2304      	movs	r3, #4
 8005fee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005ff0:	2348      	movs	r3, #72	@ 0x48
 8005ff2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ffc:	f107 0320 	add.w	r3, r7, #32
 8006000:	4618      	mov	r0, r3
 8006002:	f7fc fb97 	bl	8002734 <HAL_RCC_OscConfig>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800600c:	f000 fa4c 	bl	80064a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006010:	230f      	movs	r3, #15
 8006012:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006014:	2302      	movs	r3, #2
 8006016:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800601c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006020:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006026:	f107 030c 	add.w	r3, r7, #12
 800602a:	2102      	movs	r1, #2
 800602c:	4618      	mov	r0, r3
 800602e:	f7fc fe25 	bl	8002c7c <HAL_RCC_ClockConfig>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8006038:	f000 fa36 	bl	80064a8 <Error_Handler>
  }
}
 800603c:	bf00      	nop
 800603e:	3750      	adds	r7, #80	@ 0x50
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40023800 	.word	0x40023800
 8006048:	40007000 	.word	0x40007000

0800604c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006050:	4b1b      	ldr	r3, [pc, #108]	@ (80060c0 <MX_I2C1_Init+0x74>)
 8006052:	4a1c      	ldr	r2, [pc, #112]	@ (80060c4 <MX_I2C1_Init+0x78>)
 8006054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8006056:	4b1a      	ldr	r3, [pc, #104]	@ (80060c0 <MX_I2C1_Init+0x74>)
 8006058:	4a1b      	ldr	r2, [pc, #108]	@ (80060c8 <MX_I2C1_Init+0x7c>)
 800605a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800605c:	4b18      	ldr	r3, [pc, #96]	@ (80060c0 <MX_I2C1_Init+0x74>)
 800605e:	2200      	movs	r2, #0
 8006060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006062:	4b17      	ldr	r3, [pc, #92]	@ (80060c0 <MX_I2C1_Init+0x74>)
 8006064:	2201      	movs	r2, #1
 8006066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006068:	4b15      	ldr	r3, [pc, #84]	@ (80060c0 <MX_I2C1_Init+0x74>)
 800606a:	2200      	movs	r2, #0
 800606c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800606e:	4b14      	ldr	r3, [pc, #80]	@ (80060c0 <MX_I2C1_Init+0x74>)
 8006070:	2200      	movs	r2, #0
 8006072:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006074:	4b12      	ldr	r3, [pc, #72]	@ (80060c0 <MX_I2C1_Init+0x74>)
 8006076:	2200      	movs	r2, #0
 8006078:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800607a:	4b11      	ldr	r3, [pc, #68]	@ (80060c0 <MX_I2C1_Init+0x74>)
 800607c:	2200      	movs	r2, #0
 800607e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006080:	4b0f      	ldr	r3, [pc, #60]	@ (80060c0 <MX_I2C1_Init+0x74>)
 8006082:	2200      	movs	r2, #0
 8006084:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006086:	480e      	ldr	r0, [pc, #56]	@ (80060c0 <MX_I2C1_Init+0x74>)
 8006088:	f7fb fc08 	bl	800189c <HAL_I2C_Init>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006092:	f000 fa09 	bl	80064a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006096:	2100      	movs	r1, #0
 8006098:	4809      	ldr	r0, [pc, #36]	@ (80060c0 <MX_I2C1_Init+0x74>)
 800609a:	f7fc faa3 	bl	80025e4 <HAL_I2CEx_ConfigAnalogFilter>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80060a4:	f000 fa00 	bl	80064a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80060a8:	2100      	movs	r1, #0
 80060aa:	4805      	ldr	r0, [pc, #20]	@ (80060c0 <MX_I2C1_Init+0x74>)
 80060ac:	f7fc fae5 	bl	800267a <HAL_I2CEx_ConfigDigitalFilter>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80060b6:	f000 f9f7 	bl	80064a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80060ba:	bf00      	nop
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000228 	.word	0x20000228
 80060c4:	40005400 	.word	0x40005400
 80060c8:	00808cd2 	.word	0x00808cd2

080060cc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80060d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006140 <MX_I2C4_Init+0x74>)
 80060d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006144 <MX_I2C4_Init+0x78>)
 80060d4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 80060d6:	4b1a      	ldr	r3, [pc, #104]	@ (8006140 <MX_I2C4_Init+0x74>)
 80060d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006148 <MX_I2C4_Init+0x7c>)
 80060da:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80060dc:	4b18      	ldr	r3, [pc, #96]	@ (8006140 <MX_I2C4_Init+0x74>)
 80060de:	2200      	movs	r2, #0
 80060e0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80060e2:	4b17      	ldr	r3, [pc, #92]	@ (8006140 <MX_I2C4_Init+0x74>)
 80060e4:	2201      	movs	r2, #1
 80060e6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80060e8:	4b15      	ldr	r3, [pc, #84]	@ (8006140 <MX_I2C4_Init+0x74>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80060ee:	4b14      	ldr	r3, [pc, #80]	@ (8006140 <MX_I2C4_Init+0x74>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80060f4:	4b12      	ldr	r3, [pc, #72]	@ (8006140 <MX_I2C4_Init+0x74>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80060fa:	4b11      	ldr	r3, [pc, #68]	@ (8006140 <MX_I2C4_Init+0x74>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006100:	4b0f      	ldr	r3, [pc, #60]	@ (8006140 <MX_I2C4_Init+0x74>)
 8006102:	2200      	movs	r2, #0
 8006104:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8006106:	480e      	ldr	r0, [pc, #56]	@ (8006140 <MX_I2C4_Init+0x74>)
 8006108:	f7fb fbc8 	bl	800189c <HAL_I2C_Init>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8006112:	f000 f9c9 	bl	80064a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006116:	2100      	movs	r1, #0
 8006118:	4809      	ldr	r0, [pc, #36]	@ (8006140 <MX_I2C4_Init+0x74>)
 800611a:	f7fc fa63 	bl	80025e4 <HAL_I2CEx_ConfigAnalogFilter>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8006124:	f000 f9c0 	bl	80064a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8006128:	2100      	movs	r1, #0
 800612a:	4805      	ldr	r0, [pc, #20]	@ (8006140 <MX_I2C4_Init+0x74>)
 800612c:	f7fc faa5 	bl	800267a <HAL_I2CEx_ConfigDigitalFilter>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8006136:	f000 f9b7 	bl	80064a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800613a:	bf00      	nop
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	2000027c 	.word	0x2000027c
 8006144:	40006000 	.word	0x40006000
 8006148:	00808cd2 	.word	0x00808cd2

0800614c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08c      	sub	sp, #48	@ 0x30
 8006150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006152:	f107 030c 	add.w	r3, r7, #12
 8006156:	2224      	movs	r2, #36	@ 0x24
 8006158:	2100      	movs	r1, #0
 800615a:	4618      	mov	r0, r3
 800615c:	f001 fc19 	bl	8007992 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006160:	463b      	mov	r3, r7
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	605a      	str	r2, [r3, #4]
 8006168:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800616a:	4b23      	ldr	r3, [pc, #140]	@ (80061f8 <MX_TIM1_Init+0xac>)
 800616c:	4a23      	ldr	r2, [pc, #140]	@ (80061fc <MX_TIM1_Init+0xb0>)
 800616e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006170:	4b21      	ldr	r3, [pc, #132]	@ (80061f8 <MX_TIM1_Init+0xac>)
 8006172:	2200      	movs	r2, #0
 8006174:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006176:	4b20      	ldr	r3, [pc, #128]	@ (80061f8 <MX_TIM1_Init+0xac>)
 8006178:	2200      	movs	r2, #0
 800617a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 800617c:	4b1e      	ldr	r3, [pc, #120]	@ (80061f8 <MX_TIM1_Init+0xac>)
 800617e:	2214      	movs	r2, #20
 8006180:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006182:	4b1d      	ldr	r3, [pc, #116]	@ (80061f8 <MX_TIM1_Init+0xac>)
 8006184:	2200      	movs	r2, #0
 8006186:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006188:	4b1b      	ldr	r3, [pc, #108]	@ (80061f8 <MX_TIM1_Init+0xac>)
 800618a:	2200      	movs	r2, #0
 800618c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800618e:	4b1a      	ldr	r3, [pc, #104]	@ (80061f8 <MX_TIM1_Init+0xac>)
 8006190:	2200      	movs	r2, #0
 8006192:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006194:	2301      	movs	r3, #1
 8006196:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006198:	2300      	movs	r3, #0
 800619a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800619c:	2301      	movs	r3, #1
 800619e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80061a0:	2300      	movs	r3, #0
 80061a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 80061a4:	2303      	movs	r3, #3
 80061a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80061a8:	2300      	movs	r3, #0
 80061aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80061ac:	2301      	movs	r3, #1
 80061ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80061b0:	2300      	movs	r3, #0
 80061b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 3;
 80061b4:	2303      	movs	r3, #3
 80061b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80061b8:	f107 030c 	add.w	r3, r7, #12
 80061bc:	4619      	mov	r1, r3
 80061be:	480e      	ldr	r0, [pc, #56]	@ (80061f8 <MX_TIM1_Init+0xac>)
 80061c0:	f7fd fb72 	bl	80038a8 <HAL_TIM_Encoder_Init>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80061ca:	f000 f96d 	bl	80064a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061ce:	2300      	movs	r3, #0
 80061d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80061d2:	2300      	movs	r3, #0
 80061d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80061da:	463b      	mov	r3, r7
 80061dc:	4619      	mov	r1, r3
 80061de:	4806      	ldr	r0, [pc, #24]	@ (80061f8 <MX_TIM1_Init+0xac>)
 80061e0:	f7fd fd68 	bl	8003cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80061ea:	f000 f95d 	bl	80064a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80061ee:	bf00      	nop
 80061f0:	3730      	adds	r7, #48	@ 0x30
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	200002d0 	.word	0x200002d0
 80061fc:	40010000 	.word	0x40010000

08006200 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006204:	4b14      	ldr	r3, [pc, #80]	@ (8006258 <MX_USART3_UART_Init+0x58>)
 8006206:	4a15      	ldr	r2, [pc, #84]	@ (800625c <MX_USART3_UART_Init+0x5c>)
 8006208:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800620a:	4b13      	ldr	r3, [pc, #76]	@ (8006258 <MX_USART3_UART_Init+0x58>)
 800620c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006210:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006212:	4b11      	ldr	r3, [pc, #68]	@ (8006258 <MX_USART3_UART_Init+0x58>)
 8006214:	2200      	movs	r2, #0
 8006216:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006218:	4b0f      	ldr	r3, [pc, #60]	@ (8006258 <MX_USART3_UART_Init+0x58>)
 800621a:	2200      	movs	r2, #0
 800621c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800621e:	4b0e      	ldr	r3, [pc, #56]	@ (8006258 <MX_USART3_UART_Init+0x58>)
 8006220:	2200      	movs	r2, #0
 8006222:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006224:	4b0c      	ldr	r3, [pc, #48]	@ (8006258 <MX_USART3_UART_Init+0x58>)
 8006226:	220c      	movs	r2, #12
 8006228:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800622a:	4b0b      	ldr	r3, [pc, #44]	@ (8006258 <MX_USART3_UART_Init+0x58>)
 800622c:	2200      	movs	r2, #0
 800622e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006230:	4b09      	ldr	r3, [pc, #36]	@ (8006258 <MX_USART3_UART_Init+0x58>)
 8006232:	2200      	movs	r2, #0
 8006234:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006236:	4b08      	ldr	r3, [pc, #32]	@ (8006258 <MX_USART3_UART_Init+0x58>)
 8006238:	2200      	movs	r2, #0
 800623a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800623c:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <MX_USART3_UART_Init+0x58>)
 800623e:	2200      	movs	r2, #0
 8006240:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006242:	4805      	ldr	r0, [pc, #20]	@ (8006258 <MX_USART3_UART_Init+0x58>)
 8006244:	f7fd fdc4 	bl	8003dd0 <HAL_UART_Init>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800624e:	f000 f92b 	bl	80064a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006252:	bf00      	nop
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	2000031c 	.word	0x2000031c
 800625c:	40004800 	.word	0x40004800

08006260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08c      	sub	sp, #48	@ 0x30
 8006264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006266:	f107 031c 	add.w	r3, r7, #28
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	605a      	str	r2, [r3, #4]
 8006270:	609a      	str	r2, [r3, #8]
 8006272:	60da      	str	r2, [r3, #12]
 8006274:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006276:	4b86      	ldr	r3, [pc, #536]	@ (8006490 <MX_GPIO_Init+0x230>)
 8006278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800627a:	4a85      	ldr	r2, [pc, #532]	@ (8006490 <MX_GPIO_Init+0x230>)
 800627c:	f043 0304 	orr.w	r3, r3, #4
 8006280:	6313      	str	r3, [r2, #48]	@ 0x30
 8006282:	4b83      	ldr	r3, [pc, #524]	@ (8006490 <MX_GPIO_Init+0x230>)
 8006284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	61bb      	str	r3, [r7, #24]
 800628c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800628e:	4b80      	ldr	r3, [pc, #512]	@ (8006490 <MX_GPIO_Init+0x230>)
 8006290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006292:	4a7f      	ldr	r2, [pc, #508]	@ (8006490 <MX_GPIO_Init+0x230>)
 8006294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006298:	6313      	str	r3, [r2, #48]	@ 0x30
 800629a:	4b7d      	ldr	r3, [pc, #500]	@ (8006490 <MX_GPIO_Init+0x230>)
 800629c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80062a6:	4b7a      	ldr	r3, [pc, #488]	@ (8006490 <MX_GPIO_Init+0x230>)
 80062a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062aa:	4a79      	ldr	r2, [pc, #484]	@ (8006490 <MX_GPIO_Init+0x230>)
 80062ac:	f043 0301 	orr.w	r3, r3, #1
 80062b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80062b2:	4b77      	ldr	r3, [pc, #476]	@ (8006490 <MX_GPIO_Init+0x230>)
 80062b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80062be:	4b74      	ldr	r3, [pc, #464]	@ (8006490 <MX_GPIO_Init+0x230>)
 80062c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c2:	4a73      	ldr	r2, [pc, #460]	@ (8006490 <MX_GPIO_Init+0x230>)
 80062c4:	f043 0302 	orr.w	r3, r3, #2
 80062c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80062ca:	4b71      	ldr	r3, [pc, #452]	@ (8006490 <MX_GPIO_Init+0x230>)
 80062cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80062d6:	4b6e      	ldr	r3, [pc, #440]	@ (8006490 <MX_GPIO_Init+0x230>)
 80062d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062da:	4a6d      	ldr	r2, [pc, #436]	@ (8006490 <MX_GPIO_Init+0x230>)
 80062dc:	f043 0310 	orr.w	r3, r3, #16
 80062e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80062e2:	4b6b      	ldr	r3, [pc, #428]	@ (8006490 <MX_GPIO_Init+0x230>)
 80062e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	60bb      	str	r3, [r7, #8]
 80062ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80062ee:	4b68      	ldr	r3, [pc, #416]	@ (8006490 <MX_GPIO_Init+0x230>)
 80062f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f2:	4a67      	ldr	r2, [pc, #412]	@ (8006490 <MX_GPIO_Init+0x230>)
 80062f4:	f043 0308 	orr.w	r3, r3, #8
 80062f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80062fa:	4b65      	ldr	r3, [pc, #404]	@ (8006490 <MX_GPIO_Init+0x230>)
 80062fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	607b      	str	r3, [r7, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006306:	4b62      	ldr	r3, [pc, #392]	@ (8006490 <MX_GPIO_Init+0x230>)
 8006308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630a:	4a61      	ldr	r2, [pc, #388]	@ (8006490 <MX_GPIO_Init+0x230>)
 800630c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006310:	6313      	str	r3, [r2, #48]	@ 0x30
 8006312:	4b5f      	ldr	r3, [pc, #380]	@ (8006490 <MX_GPIO_Init+0x230>)
 8006314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631a:	603b      	str	r3, [r7, #0]
 800631c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800631e:	2200      	movs	r2, #0
 8006320:	f244 0181 	movw	r1, #16513	@ 0x4081
 8006324:	485b      	ldr	r0, [pc, #364]	@ (8006494 <MX_GPIO_Init+0x234>)
 8006326:	f7fb fa9f 	bl	8001868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800632a:	2200      	movs	r2, #0
 800632c:	2140      	movs	r1, #64	@ 0x40
 800632e:	485a      	ldr	r0, [pc, #360]	@ (8006498 <MX_GPIO_Init+0x238>)
 8006330:	f7fb fa9a 	bl	8001868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8006334:	2200      	movs	r2, #0
 8006336:	2180      	movs	r1, #128	@ 0x80
 8006338:	4858      	ldr	r0, [pc, #352]	@ (800649c <MX_GPIO_Init+0x23c>)
 800633a:	f7fb fa95 	bl	8001868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800633e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006344:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800634a:	2300      	movs	r3, #0
 800634c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800634e:	f107 031c 	add.w	r3, r7, #28
 8006352:	4619      	mov	r1, r3
 8006354:	4852      	ldr	r0, [pc, #328]	@ (80064a0 <MX_GPIO_Init+0x240>)
 8006356:	f7fb f8db 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800635a:	2332      	movs	r3, #50	@ 0x32
 800635c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800635e:	2302      	movs	r3, #2
 8006360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006362:	2300      	movs	r3, #0
 8006364:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006366:	2303      	movs	r3, #3
 8006368:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800636a:	230b      	movs	r3, #11
 800636c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800636e:	f107 031c 	add.w	r3, r7, #28
 8006372:	4619      	mov	r1, r3
 8006374:	484a      	ldr	r0, [pc, #296]	@ (80064a0 <MX_GPIO_Init+0x240>)
 8006376:	f7fb f8cb 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800637a:	2386      	movs	r3, #134	@ 0x86
 800637c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800637e:	2302      	movs	r3, #2
 8006380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006382:	2300      	movs	r3, #0
 8006384:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006386:	2303      	movs	r3, #3
 8006388:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800638a:	230b      	movs	r3, #11
 800638c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800638e:	f107 031c 	add.w	r3, r7, #28
 8006392:	4619      	mov	r1, r3
 8006394:	4843      	ldr	r0, [pc, #268]	@ (80064a4 <MX_GPIO_Init+0x244>)
 8006396:	f7fb f8bb 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800639a:	f244 0381 	movw	r3, #16513	@ 0x4081
 800639e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063a0:	2301      	movs	r3, #1
 80063a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063a8:	2300      	movs	r3, #0
 80063aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063ac:	f107 031c 	add.w	r3, r7, #28
 80063b0:	4619      	mov	r1, r3
 80063b2:	4838      	ldr	r0, [pc, #224]	@ (8006494 <MX_GPIO_Init+0x234>)
 80063b4:	f7fb f8ac 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80063b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80063bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063be:	2302      	movs	r3, #2
 80063c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063c6:	2303      	movs	r3, #3
 80063c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80063ca:	230b      	movs	r3, #11
 80063cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80063ce:	f107 031c 	add.w	r3, r7, #28
 80063d2:	4619      	mov	r1, r3
 80063d4:	482f      	ldr	r0, [pc, #188]	@ (8006494 <MX_GPIO_Init+0x234>)
 80063d6:	f7fb f89b 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80063da:	2340      	movs	r3, #64	@ 0x40
 80063dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063de:	2301      	movs	r3, #1
 80063e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063e6:	2300      	movs	r3, #0
 80063e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80063ea:	f107 031c 	add.w	r3, r7, #28
 80063ee:	4619      	mov	r1, r3
 80063f0:	4829      	ldr	r0, [pc, #164]	@ (8006498 <MX_GPIO_Init+0x238>)
 80063f2:	f7fb f88d 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80063f6:	2380      	movs	r3, #128	@ 0x80
 80063f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80063fa:	2300      	movs	r3, #0
 80063fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006402:	f107 031c 	add.w	r3, r7, #28
 8006406:	4619      	mov	r1, r3
 8006408:	4823      	ldr	r0, [pc, #140]	@ (8006498 <MX_GPIO_Init+0x238>)
 800640a:	f7fb f881 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800640e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8006412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006414:	2302      	movs	r3, #2
 8006416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006418:	2300      	movs	r3, #0
 800641a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800641c:	2303      	movs	r3, #3
 800641e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006420:	230a      	movs	r3, #10
 8006422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006424:	f107 031c 	add.w	r3, r7, #28
 8006428:	4619      	mov	r1, r3
 800642a:	481e      	ldr	r0, [pc, #120]	@ (80064a4 <MX_GPIO_Init+0x244>)
 800642c:	f7fb f870 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006430:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006436:	2300      	movs	r3, #0
 8006438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800643a:	2300      	movs	r3, #0
 800643c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800643e:	f107 031c 	add.w	r3, r7, #28
 8006442:	4619      	mov	r1, r3
 8006444:	4817      	ldr	r0, [pc, #92]	@ (80064a4 <MX_GPIO_Init+0x244>)
 8006446:	f7fb f863 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800644a:	2380      	movs	r3, #128	@ 0x80
 800644c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800644e:	2301      	movs	r3, #1
 8006450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006452:	2300      	movs	r3, #0
 8006454:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006456:	2300      	movs	r3, #0
 8006458:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800645a:	f107 031c 	add.w	r3, r7, #28
 800645e:	4619      	mov	r1, r3
 8006460:	480e      	ldr	r0, [pc, #56]	@ (800649c <MX_GPIO_Init+0x23c>)
 8006462:	f7fb f855 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006466:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800646a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800646c:	2302      	movs	r3, #2
 800646e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006470:	2300      	movs	r3, #0
 8006472:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006474:	2303      	movs	r3, #3
 8006476:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006478:	230b      	movs	r3, #11
 800647a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800647c:	f107 031c 	add.w	r3, r7, #28
 8006480:	4619      	mov	r1, r3
 8006482:	4805      	ldr	r0, [pc, #20]	@ (8006498 <MX_GPIO_Init+0x238>)
 8006484:	f7fb f844 	bl	8001510 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006488:	bf00      	nop
 800648a:	3730      	adds	r7, #48	@ 0x30
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	40023800 	.word	0x40023800
 8006494:	40020400 	.word	0x40020400
 8006498:	40021800 	.word	0x40021800
 800649c:	40020c00 	.word	0x40020c00
 80064a0:	40020800 	.word	0x40020800
 80064a4:	40020000 	.word	0x40020000

080064a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80064ac:	b672      	cpsid	i
}
 80064ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80064b0:	bf00      	nop
 80064b2:	e7fd      	b.n	80064b0 <Error_Handler+0x8>

080064b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80064ba:	4b0f      	ldr	r3, [pc, #60]	@ (80064f8 <HAL_MspInit+0x44>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064be:	4a0e      	ldr	r2, [pc, #56]	@ (80064f8 <HAL_MspInit+0x44>)
 80064c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80064c6:	4b0c      	ldr	r3, [pc, #48]	@ (80064f8 <HAL_MspInit+0x44>)
 80064c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064ce:	607b      	str	r3, [r7, #4]
 80064d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064d2:	4b09      	ldr	r3, [pc, #36]	@ (80064f8 <HAL_MspInit+0x44>)
 80064d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d6:	4a08      	ldr	r2, [pc, #32]	@ (80064f8 <HAL_MspInit+0x44>)
 80064d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80064de:	4b06      	ldr	r3, [pc, #24]	@ (80064f8 <HAL_MspInit+0x44>)
 80064e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064e6:	603b      	str	r3, [r7, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40023800 	.word	0x40023800

080064fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b0ac      	sub	sp, #176	@ 0xb0
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006504:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	605a      	str	r2, [r3, #4]
 800650e:	609a      	str	r2, [r3, #8]
 8006510:	60da      	str	r2, [r3, #12]
 8006512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006514:	f107 0318 	add.w	r3, r7, #24
 8006518:	2284      	movs	r2, #132	@ 0x84
 800651a:	2100      	movs	r1, #0
 800651c:	4618      	mov	r0, r3
 800651e:	f001 fa38 	bl	8007992 <memset>
  if(hi2c->Instance==I2C1)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a44      	ldr	r2, [pc, #272]	@ (8006638 <HAL_I2C_MspInit+0x13c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d13d      	bne.n	80065a8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800652c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006530:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006532:	2300      	movs	r3, #0
 8006534:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006536:	f107 0318 	add.w	r3, r7, #24
 800653a:	4618      	mov	r0, r3
 800653c:	f7fc fdc4 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8006546:	f7ff ffaf 	bl	80064a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800654a:	4b3c      	ldr	r3, [pc, #240]	@ (800663c <HAL_I2C_MspInit+0x140>)
 800654c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654e:	4a3b      	ldr	r2, [pc, #236]	@ (800663c <HAL_I2C_MspInit+0x140>)
 8006550:	f043 0302 	orr.w	r3, r3, #2
 8006554:	6313      	str	r3, [r2, #48]	@ 0x30
 8006556:	4b39      	ldr	r3, [pc, #228]	@ (800663c <HAL_I2C_MspInit+0x140>)
 8006558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006562:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006566:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800656a:	2312      	movs	r3, #18
 800656c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006570:	2300      	movs	r3, #0
 8006572:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006576:	2303      	movs	r3, #3
 8006578:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800657c:	2304      	movs	r3, #4
 800657e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006582:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006586:	4619      	mov	r1, r3
 8006588:	482d      	ldr	r0, [pc, #180]	@ (8006640 <HAL_I2C_MspInit+0x144>)
 800658a:	f7fa ffc1 	bl	8001510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800658e:	4b2b      	ldr	r3, [pc, #172]	@ (800663c <HAL_I2C_MspInit+0x140>)
 8006590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006592:	4a2a      	ldr	r2, [pc, #168]	@ (800663c <HAL_I2C_MspInit+0x140>)
 8006594:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006598:	6413      	str	r3, [r2, #64]	@ 0x40
 800659a:	4b28      	ldr	r3, [pc, #160]	@ (800663c <HAL_I2C_MspInit+0x140>)
 800659c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80065a6:	e042      	b.n	800662e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C4)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a25      	ldr	r2, [pc, #148]	@ (8006644 <HAL_I2C_MspInit+0x148>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d13d      	bne.n	800662e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80065b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80065b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80065b8:	2300      	movs	r3, #0
 80065ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065be:	f107 0318 	add.w	r3, r7, #24
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fc fd80 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80065ce:	f7ff ff6b 	bl	80064a8 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065d2:	4b1a      	ldr	r3, [pc, #104]	@ (800663c <HAL_I2C_MspInit+0x140>)
 80065d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d6:	4a19      	ldr	r2, [pc, #100]	@ (800663c <HAL_I2C_MspInit+0x140>)
 80065d8:	f043 0308 	orr.w	r3, r3, #8
 80065dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80065de:	4b17      	ldr	r3, [pc, #92]	@ (800663c <HAL_I2C_MspInit+0x140>)
 80065e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80065ea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80065ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065f2:	2312      	movs	r3, #18
 80065f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f8:	2300      	movs	r3, #0
 80065fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065fe:	2303      	movs	r3, #3
 8006600:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8006604:	2304      	movs	r3, #4
 8006606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800660a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800660e:	4619      	mov	r1, r3
 8006610:	480d      	ldr	r0, [pc, #52]	@ (8006648 <HAL_I2C_MspInit+0x14c>)
 8006612:	f7fa ff7d 	bl	8001510 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8006616:	4b09      	ldr	r3, [pc, #36]	@ (800663c <HAL_I2C_MspInit+0x140>)
 8006618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661a:	4a08      	ldr	r2, [pc, #32]	@ (800663c <HAL_I2C_MspInit+0x140>)
 800661c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006620:	6413      	str	r3, [r2, #64]	@ 0x40
 8006622:	4b06      	ldr	r3, [pc, #24]	@ (800663c <HAL_I2C_MspInit+0x140>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006626:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800662a:	60bb      	str	r3, [r7, #8]
 800662c:	68bb      	ldr	r3, [r7, #8]
}
 800662e:	bf00      	nop
 8006630:	37b0      	adds	r7, #176	@ 0xb0
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	40005400 	.word	0x40005400
 800663c:	40023800 	.word	0x40023800
 8006640:	40020400 	.word	0x40020400
 8006644:	40006000 	.word	0x40006000
 8006648:	40020c00 	.word	0x40020c00

0800664c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08a      	sub	sp, #40	@ 0x28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006654:	f107 0314 	add.w	r3, r7, #20
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	605a      	str	r2, [r3, #4]
 800665e:	609a      	str	r2, [r3, #8]
 8006660:	60da      	str	r2, [r3, #12]
 8006662:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a17      	ldr	r2, [pc, #92]	@ (80066c8 <HAL_TIM_Encoder_MspInit+0x7c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d128      	bne.n	80066c0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800666e:	4b17      	ldr	r3, [pc, #92]	@ (80066cc <HAL_TIM_Encoder_MspInit+0x80>)
 8006670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006672:	4a16      	ldr	r2, [pc, #88]	@ (80066cc <HAL_TIM_Encoder_MspInit+0x80>)
 8006674:	f043 0301 	orr.w	r3, r3, #1
 8006678:	6453      	str	r3, [r2, #68]	@ 0x44
 800667a:	4b14      	ldr	r3, [pc, #80]	@ (80066cc <HAL_TIM_Encoder_MspInit+0x80>)
 800667c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	613b      	str	r3, [r7, #16]
 8006684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006686:	4b11      	ldr	r3, [pc, #68]	@ (80066cc <HAL_TIM_Encoder_MspInit+0x80>)
 8006688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668a:	4a10      	ldr	r2, [pc, #64]	@ (80066cc <HAL_TIM_Encoder_MspInit+0x80>)
 800668c:	f043 0310 	orr.w	r3, r3, #16
 8006690:	6313      	str	r3, [r2, #48]	@ 0x30
 8006692:	4b0e      	ldr	r3, [pc, #56]	@ (80066cc <HAL_TIM_Encoder_MspInit+0x80>)
 8006694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800669e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80066a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066a4:	2302      	movs	r3, #2
 80066a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a8:	2300      	movs	r3, #0
 80066aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ac:	2300      	movs	r3, #0
 80066ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80066b0:	2301      	movs	r3, #1
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80066b4:	f107 0314 	add.w	r3, r7, #20
 80066b8:	4619      	mov	r1, r3
 80066ba:	4805      	ldr	r0, [pc, #20]	@ (80066d0 <HAL_TIM_Encoder_MspInit+0x84>)
 80066bc:	f7fa ff28 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80066c0:	bf00      	nop
 80066c2:	3728      	adds	r7, #40	@ 0x28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40010000 	.word	0x40010000
 80066cc:	40023800 	.word	0x40023800
 80066d0:	40021000 	.word	0x40021000

080066d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b0aa      	sub	sp, #168	@ 0xa8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066dc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	605a      	str	r2, [r3, #4]
 80066e6:	609a      	str	r2, [r3, #8]
 80066e8:	60da      	str	r2, [r3, #12]
 80066ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80066ec:	f107 0310 	add.w	r3, r7, #16
 80066f0:	2284      	movs	r2, #132	@ 0x84
 80066f2:	2100      	movs	r1, #0
 80066f4:	4618      	mov	r0, r3
 80066f6:	f001 f94c 	bl	8007992 <memset>
  if(huart->Instance==USART3)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a26      	ldr	r2, [pc, #152]	@ (8006798 <HAL_UART_MspInit+0xc4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d144      	bne.n	800678e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006704:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006708:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800670a:	2300      	movs	r3, #0
 800670c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800670e:	f107 0310 	add.w	r3, r7, #16
 8006712:	4618      	mov	r0, r3
 8006714:	f7fc fcd8 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800671e:	f7ff fec3 	bl	80064a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006722:	4b1e      	ldr	r3, [pc, #120]	@ (800679c <HAL_UART_MspInit+0xc8>)
 8006724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006726:	4a1d      	ldr	r2, [pc, #116]	@ (800679c <HAL_UART_MspInit+0xc8>)
 8006728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800672c:	6413      	str	r3, [r2, #64]	@ 0x40
 800672e:	4b1b      	ldr	r3, [pc, #108]	@ (800679c <HAL_UART_MspInit+0xc8>)
 8006730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800673a:	4b18      	ldr	r3, [pc, #96]	@ (800679c <HAL_UART_MspInit+0xc8>)
 800673c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800673e:	4a17      	ldr	r2, [pc, #92]	@ (800679c <HAL_UART_MspInit+0xc8>)
 8006740:	f043 0308 	orr.w	r3, r3, #8
 8006744:	6313      	str	r3, [r2, #48]	@ 0x30
 8006746:	4b15      	ldr	r3, [pc, #84]	@ (800679c <HAL_UART_MspInit+0xc8>)
 8006748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	60bb      	str	r3, [r7, #8]
 8006750:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006752:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006756:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800675a:	2302      	movs	r3, #2
 800675c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006760:	2300      	movs	r3, #0
 8006762:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006766:	2303      	movs	r3, #3
 8006768:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800676c:	2307      	movs	r3, #7
 800676e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006772:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8006776:	4619      	mov	r1, r3
 8006778:	4809      	ldr	r0, [pc, #36]	@ (80067a0 <HAL_UART_MspInit+0xcc>)
 800677a:	f7fa fec9 	bl	8001510 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800677e:	2200      	movs	r2, #0
 8006780:	2100      	movs	r1, #0
 8006782:	2027      	movs	r0, #39	@ 0x27
 8006784:	f7fa fdfb 	bl	800137e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006788:	2027      	movs	r0, #39	@ 0x27
 800678a:	f7fa fe14 	bl	80013b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800678e:	bf00      	nop
 8006790:	37a8      	adds	r7, #168	@ 0xa8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	40004800 	.word	0x40004800
 800679c:	40023800 	.word	0x40023800
 80067a0:	40020c00 	.word	0x40020c00

080067a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80067a8:	bf00      	nop
 80067aa:	e7fd      	b.n	80067a8 <NMI_Handler+0x4>

080067ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80067b0:	bf00      	nop
 80067b2:	e7fd      	b.n	80067b0 <HardFault_Handler+0x4>

080067b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80067b8:	bf00      	nop
 80067ba:	e7fd      	b.n	80067b8 <MemManage_Handler+0x4>

080067bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80067c0:	bf00      	nop
 80067c2:	e7fd      	b.n	80067c0 <BusFault_Handler+0x4>

080067c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80067c8:	bf00      	nop
 80067ca:	e7fd      	b.n	80067c8 <UsageFault_Handler+0x4>

080067cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80067d0:	bf00      	nop
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80067da:	b480      	push	{r7}
 80067dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80067de:	bf00      	nop
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80067ec:	bf00      	nop
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80067fa:	f7fa fca1 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80067fe:	bf00      	nop
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006808:	4802      	ldr	r0, [pc, #8]	@ (8006814 <USART3_IRQHandler+0x10>)
 800680a:	f7fd fc81 	bl	8004110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800680e:	bf00      	nop
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	2000031c 	.word	0x2000031c

08006818 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0
  return 1;
 800681c:	2301      	movs	r3, #1
}
 800681e:	4618      	mov	r0, r3
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <_kill>:

int _kill(int pid, int sig)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006832:	f001 f901 	bl	8007a38 <__errno>
 8006836:	4603      	mov	r3, r0
 8006838:	2216      	movs	r2, #22
 800683a:	601a      	str	r2, [r3, #0]
  return -1;
 800683c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <_exit>:

void _exit (int status)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006850:	f04f 31ff 	mov.w	r1, #4294967295
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff ffe7 	bl	8006828 <_kill>
  while (1) {}    /* Make sure we hang here */
 800685a:	bf00      	nop
 800685c:	e7fd      	b.n	800685a <_exit+0x12>

0800685e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b086      	sub	sp, #24
 8006862:	af00      	add	r7, sp, #0
 8006864:	60f8      	str	r0, [r7, #12]
 8006866:	60b9      	str	r1, [r7, #8]
 8006868:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800686a:	2300      	movs	r3, #0
 800686c:	617b      	str	r3, [r7, #20]
 800686e:	e00a      	b.n	8006886 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006870:	f3af 8000 	nop.w
 8006874:	4601      	mov	r1, r0
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	60ba      	str	r2, [r7, #8]
 800687c:	b2ca      	uxtb	r2, r1
 800687e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	3301      	adds	r3, #1
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	429a      	cmp	r2, r3
 800688c:	dbf0      	blt.n	8006870 <_read+0x12>
  }

  return len;
 800688e:	687b      	ldr	r3, [r7, #4]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3718      	adds	r7, #24
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068a4:	2300      	movs	r3, #0
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	e009      	b.n	80068be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	60ba      	str	r2, [r7, #8]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	3301      	adds	r3, #1
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	dbf1      	blt.n	80068aa <_write+0x12>
  }
  return len;
 80068c6:	687b      	ldr	r3, [r7, #4]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <_close>:

int _close(int file)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80068d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068dc:	4618      	mov	r0, r3
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80068f8:	605a      	str	r2, [r3, #4]
  return 0;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <_isatty>:

int _isatty(int file)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006910:	2301      	movs	r3, #1
}
 8006912:	4618      	mov	r0, r3
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800691e:	b480      	push	{r7}
 8006920:	b085      	sub	sp, #20
 8006922:	af00      	add	r7, sp, #0
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	60b9      	str	r1, [r7, #8]
 8006928:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006940:	4a14      	ldr	r2, [pc, #80]	@ (8006994 <_sbrk+0x5c>)
 8006942:	4b15      	ldr	r3, [pc, #84]	@ (8006998 <_sbrk+0x60>)
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800694c:	4b13      	ldr	r3, [pc, #76]	@ (800699c <_sbrk+0x64>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d102      	bne.n	800695a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006954:	4b11      	ldr	r3, [pc, #68]	@ (800699c <_sbrk+0x64>)
 8006956:	4a12      	ldr	r2, [pc, #72]	@ (80069a0 <_sbrk+0x68>)
 8006958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800695a:	4b10      	ldr	r3, [pc, #64]	@ (800699c <_sbrk+0x64>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4413      	add	r3, r2
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	429a      	cmp	r2, r3
 8006966:	d207      	bcs.n	8006978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006968:	f001 f866 	bl	8007a38 <__errno>
 800696c:	4603      	mov	r3, r0
 800696e:	220c      	movs	r2, #12
 8006970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006972:	f04f 33ff 	mov.w	r3, #4294967295
 8006976:	e009      	b.n	800698c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006978:	4b08      	ldr	r3, [pc, #32]	@ (800699c <_sbrk+0x64>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800697e:	4b07      	ldr	r3, [pc, #28]	@ (800699c <_sbrk+0x64>)
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4413      	add	r3, r2
 8006986:	4a05      	ldr	r2, [pc, #20]	@ (800699c <_sbrk+0x64>)
 8006988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800698a:	68fb      	ldr	r3, [r7, #12]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20050000 	.word	0x20050000
 8006998:	00000400 	.word	0x00000400
 800699c:	200003e0 	.word	0x200003e0
 80069a0:	20000530 	.word	0x20000530

080069a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80069a8:	4b06      	ldr	r3, [pc, #24]	@ (80069c4 <SystemInit+0x20>)
 80069aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ae:	4a05      	ldr	r2, [pc, #20]	@ (80069c4 <SystemInit+0x20>)
 80069b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80069b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80069b8:	bf00      	nop
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	e000ed00 	.word	0xe000ed00

080069c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80069c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006a00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80069cc:	f7ff ffea 	bl	80069a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80069d0:	480c      	ldr	r0, [pc, #48]	@ (8006a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80069d2:	490d      	ldr	r1, [pc, #52]	@ (8006a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80069d4:	4a0d      	ldr	r2, [pc, #52]	@ (8006a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80069d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80069d8:	e002      	b.n	80069e0 <LoopCopyDataInit>

080069da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80069da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80069dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80069de:	3304      	adds	r3, #4

080069e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80069e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80069e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80069e4:	d3f9      	bcc.n	80069da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80069e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80069e8:	4c0a      	ldr	r4, [pc, #40]	@ (8006a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80069ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80069ec:	e001      	b.n	80069f2 <LoopFillZerobss>

080069ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80069ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80069f0:	3204      	adds	r2, #4

080069f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80069f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80069f4:	d3fb      	bcc.n	80069ee <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80069f6:	f001 f825 	bl	8007a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80069fa:	f7ff f8ed 	bl	8005bd8 <main>
  bx  lr    
 80069fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006a00:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a08:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8006a0c:	0800be24 	.word	0x0800be24
  ldr r2, =_sbss
 8006a10:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8006a14:	20000530 	.word	0x20000530

08006a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a18:	e7fe      	b.n	8006a18 <ADC_IRQHandler>

08006a1a <__cvt>:
 8006a1a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a1e:	ec57 6b10 	vmov	r6, r7, d0
 8006a22:	2f00      	cmp	r7, #0
 8006a24:	460c      	mov	r4, r1
 8006a26:	4619      	mov	r1, r3
 8006a28:	463b      	mov	r3, r7
 8006a2a:	bfbb      	ittet	lt
 8006a2c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006a30:	461f      	movlt	r7, r3
 8006a32:	2300      	movge	r3, #0
 8006a34:	232d      	movlt	r3, #45	@ 0x2d
 8006a36:	700b      	strb	r3, [r1, #0]
 8006a38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a3a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006a3e:	4691      	mov	r9, r2
 8006a40:	f023 0820 	bic.w	r8, r3, #32
 8006a44:	bfbc      	itt	lt
 8006a46:	4632      	movlt	r2, r6
 8006a48:	4616      	movlt	r6, r2
 8006a4a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a4e:	d005      	beq.n	8006a5c <__cvt+0x42>
 8006a50:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006a54:	d100      	bne.n	8006a58 <__cvt+0x3e>
 8006a56:	3401      	adds	r4, #1
 8006a58:	2102      	movs	r1, #2
 8006a5a:	e000      	b.n	8006a5e <__cvt+0x44>
 8006a5c:	2103      	movs	r1, #3
 8006a5e:	ab03      	add	r3, sp, #12
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	ab02      	add	r3, sp, #8
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	ec47 6b10 	vmov	d0, r6, r7
 8006a6a:	4653      	mov	r3, sl
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	f001 f89f 	bl	8007bb0 <_dtoa_r>
 8006a72:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006a76:	4605      	mov	r5, r0
 8006a78:	d119      	bne.n	8006aae <__cvt+0x94>
 8006a7a:	f019 0f01 	tst.w	r9, #1
 8006a7e:	d00e      	beq.n	8006a9e <__cvt+0x84>
 8006a80:	eb00 0904 	add.w	r9, r0, r4
 8006a84:	2200      	movs	r2, #0
 8006a86:	2300      	movs	r3, #0
 8006a88:	4630      	mov	r0, r6
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	f7fa f83c 	bl	8000b08 <__aeabi_dcmpeq>
 8006a90:	b108      	cbz	r0, 8006a96 <__cvt+0x7c>
 8006a92:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a96:	2230      	movs	r2, #48	@ 0x30
 8006a98:	9b03      	ldr	r3, [sp, #12]
 8006a9a:	454b      	cmp	r3, r9
 8006a9c:	d31e      	bcc.n	8006adc <__cvt+0xc2>
 8006a9e:	9b03      	ldr	r3, [sp, #12]
 8006aa0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006aa2:	1b5b      	subs	r3, r3, r5
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	6013      	str	r3, [r2, #0]
 8006aa8:	b004      	add	sp, #16
 8006aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ab2:	eb00 0904 	add.w	r9, r0, r4
 8006ab6:	d1e5      	bne.n	8006a84 <__cvt+0x6a>
 8006ab8:	7803      	ldrb	r3, [r0, #0]
 8006aba:	2b30      	cmp	r3, #48	@ 0x30
 8006abc:	d10a      	bne.n	8006ad4 <__cvt+0xba>
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	f7fa f81f 	bl	8000b08 <__aeabi_dcmpeq>
 8006aca:	b918      	cbnz	r0, 8006ad4 <__cvt+0xba>
 8006acc:	f1c4 0401 	rsb	r4, r4, #1
 8006ad0:	f8ca 4000 	str.w	r4, [sl]
 8006ad4:	f8da 3000 	ldr.w	r3, [sl]
 8006ad8:	4499      	add	r9, r3
 8006ada:	e7d3      	b.n	8006a84 <__cvt+0x6a>
 8006adc:	1c59      	adds	r1, r3, #1
 8006ade:	9103      	str	r1, [sp, #12]
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	e7d9      	b.n	8006a98 <__cvt+0x7e>

08006ae4 <__exponent>:
 8006ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ae6:	2900      	cmp	r1, #0
 8006ae8:	bfba      	itte	lt
 8006aea:	4249      	neglt	r1, r1
 8006aec:	232d      	movlt	r3, #45	@ 0x2d
 8006aee:	232b      	movge	r3, #43	@ 0x2b
 8006af0:	2909      	cmp	r1, #9
 8006af2:	7002      	strb	r2, [r0, #0]
 8006af4:	7043      	strb	r3, [r0, #1]
 8006af6:	dd29      	ble.n	8006b4c <__exponent+0x68>
 8006af8:	f10d 0307 	add.w	r3, sp, #7
 8006afc:	461d      	mov	r5, r3
 8006afe:	270a      	movs	r7, #10
 8006b00:	461a      	mov	r2, r3
 8006b02:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b06:	fb07 1416 	mls	r4, r7, r6, r1
 8006b0a:	3430      	adds	r4, #48	@ 0x30
 8006b0c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b10:	460c      	mov	r4, r1
 8006b12:	2c63      	cmp	r4, #99	@ 0x63
 8006b14:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b18:	4631      	mov	r1, r6
 8006b1a:	dcf1      	bgt.n	8006b00 <__exponent+0x1c>
 8006b1c:	3130      	adds	r1, #48	@ 0x30
 8006b1e:	1e94      	subs	r4, r2, #2
 8006b20:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b24:	1c41      	adds	r1, r0, #1
 8006b26:	4623      	mov	r3, r4
 8006b28:	42ab      	cmp	r3, r5
 8006b2a:	d30a      	bcc.n	8006b42 <__exponent+0x5e>
 8006b2c:	f10d 0309 	add.w	r3, sp, #9
 8006b30:	1a9b      	subs	r3, r3, r2
 8006b32:	42ac      	cmp	r4, r5
 8006b34:	bf88      	it	hi
 8006b36:	2300      	movhi	r3, #0
 8006b38:	3302      	adds	r3, #2
 8006b3a:	4403      	add	r3, r0
 8006b3c:	1a18      	subs	r0, r3, r0
 8006b3e:	b003      	add	sp, #12
 8006b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b42:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b46:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b4a:	e7ed      	b.n	8006b28 <__exponent+0x44>
 8006b4c:	2330      	movs	r3, #48	@ 0x30
 8006b4e:	3130      	adds	r1, #48	@ 0x30
 8006b50:	7083      	strb	r3, [r0, #2]
 8006b52:	70c1      	strb	r1, [r0, #3]
 8006b54:	1d03      	adds	r3, r0, #4
 8006b56:	e7f1      	b.n	8006b3c <__exponent+0x58>

08006b58 <_printf_float>:
 8006b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	b08d      	sub	sp, #52	@ 0x34
 8006b5e:	460c      	mov	r4, r1
 8006b60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006b64:	4616      	mov	r6, r2
 8006b66:	461f      	mov	r7, r3
 8006b68:	4605      	mov	r5, r0
 8006b6a:	f000 ff1b 	bl	80079a4 <_localeconv_r>
 8006b6e:	6803      	ldr	r3, [r0, #0]
 8006b70:	9304      	str	r3, [sp, #16]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7f9 fb9c 	bl	80002b0 <strlen>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b80:	9005      	str	r0, [sp, #20]
 8006b82:	3307      	adds	r3, #7
 8006b84:	f023 0307 	bic.w	r3, r3, #7
 8006b88:	f103 0208 	add.w	r2, r3, #8
 8006b8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b90:	f8d4 b000 	ldr.w	fp, [r4]
 8006b94:	f8c8 2000 	str.w	r2, [r8]
 8006b98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006ba0:	9307      	str	r3, [sp, #28]
 8006ba2:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ba6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006baa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bae:	4b9c      	ldr	r3, [pc, #624]	@ (8006e20 <_printf_float+0x2c8>)
 8006bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb4:	f7f9 ffda 	bl	8000b6c <__aeabi_dcmpun>
 8006bb8:	bb70      	cbnz	r0, 8006c18 <_printf_float+0xc0>
 8006bba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bbe:	4b98      	ldr	r3, [pc, #608]	@ (8006e20 <_printf_float+0x2c8>)
 8006bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc4:	f7f9 ffb4 	bl	8000b30 <__aeabi_dcmple>
 8006bc8:	bb30      	cbnz	r0, 8006c18 <_printf_float+0xc0>
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4640      	mov	r0, r8
 8006bd0:	4649      	mov	r1, r9
 8006bd2:	f7f9 ffa3 	bl	8000b1c <__aeabi_dcmplt>
 8006bd6:	b110      	cbz	r0, 8006bde <_printf_float+0x86>
 8006bd8:	232d      	movs	r3, #45	@ 0x2d
 8006bda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bde:	4a91      	ldr	r2, [pc, #580]	@ (8006e24 <_printf_float+0x2cc>)
 8006be0:	4b91      	ldr	r3, [pc, #580]	@ (8006e28 <_printf_float+0x2d0>)
 8006be2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006be6:	bf94      	ite	ls
 8006be8:	4690      	movls	r8, r2
 8006bea:	4698      	movhi	r8, r3
 8006bec:	2303      	movs	r3, #3
 8006bee:	6123      	str	r3, [r4, #16]
 8006bf0:	f02b 0304 	bic.w	r3, fp, #4
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	f04f 0900 	mov.w	r9, #0
 8006bfa:	9700      	str	r7, [sp, #0]
 8006bfc:	4633      	mov	r3, r6
 8006bfe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c00:	4621      	mov	r1, r4
 8006c02:	4628      	mov	r0, r5
 8006c04:	f000 f9d2 	bl	8006fac <_printf_common>
 8006c08:	3001      	adds	r0, #1
 8006c0a:	f040 808d 	bne.w	8006d28 <_printf_float+0x1d0>
 8006c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c12:	b00d      	add	sp, #52	@ 0x34
 8006c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c18:	4642      	mov	r2, r8
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	4640      	mov	r0, r8
 8006c1e:	4649      	mov	r1, r9
 8006c20:	f7f9 ffa4 	bl	8000b6c <__aeabi_dcmpun>
 8006c24:	b140      	cbz	r0, 8006c38 <_printf_float+0xe0>
 8006c26:	464b      	mov	r3, r9
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	bfbc      	itt	lt
 8006c2c:	232d      	movlt	r3, #45	@ 0x2d
 8006c2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c32:	4a7e      	ldr	r2, [pc, #504]	@ (8006e2c <_printf_float+0x2d4>)
 8006c34:	4b7e      	ldr	r3, [pc, #504]	@ (8006e30 <_printf_float+0x2d8>)
 8006c36:	e7d4      	b.n	8006be2 <_printf_float+0x8a>
 8006c38:	6863      	ldr	r3, [r4, #4]
 8006c3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006c3e:	9206      	str	r2, [sp, #24]
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	d13b      	bne.n	8006cbc <_printf_float+0x164>
 8006c44:	2306      	movs	r3, #6
 8006c46:	6063      	str	r3, [r4, #4]
 8006c48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	6022      	str	r2, [r4, #0]
 8006c50:	9303      	str	r3, [sp, #12]
 8006c52:	ab0a      	add	r3, sp, #40	@ 0x28
 8006c54:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006c58:	ab09      	add	r3, sp, #36	@ 0x24
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	6861      	ldr	r1, [r4, #4]
 8006c5e:	ec49 8b10 	vmov	d0, r8, r9
 8006c62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006c66:	4628      	mov	r0, r5
 8006c68:	f7ff fed7 	bl	8006a1a <__cvt>
 8006c6c:	9b06      	ldr	r3, [sp, #24]
 8006c6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c70:	2b47      	cmp	r3, #71	@ 0x47
 8006c72:	4680      	mov	r8, r0
 8006c74:	d129      	bne.n	8006cca <_printf_float+0x172>
 8006c76:	1cc8      	adds	r0, r1, #3
 8006c78:	db02      	blt.n	8006c80 <_printf_float+0x128>
 8006c7a:	6863      	ldr	r3, [r4, #4]
 8006c7c:	4299      	cmp	r1, r3
 8006c7e:	dd41      	ble.n	8006d04 <_printf_float+0x1ac>
 8006c80:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c84:	fa5f fa8a 	uxtb.w	sl, sl
 8006c88:	3901      	subs	r1, #1
 8006c8a:	4652      	mov	r2, sl
 8006c8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c90:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c92:	f7ff ff27 	bl	8006ae4 <__exponent>
 8006c96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c98:	1813      	adds	r3, r2, r0
 8006c9a:	2a01      	cmp	r2, #1
 8006c9c:	4681      	mov	r9, r0
 8006c9e:	6123      	str	r3, [r4, #16]
 8006ca0:	dc02      	bgt.n	8006ca8 <_printf_float+0x150>
 8006ca2:	6822      	ldr	r2, [r4, #0]
 8006ca4:	07d2      	lsls	r2, r2, #31
 8006ca6:	d501      	bpl.n	8006cac <_printf_float+0x154>
 8006ca8:	3301      	adds	r3, #1
 8006caa:	6123      	str	r3, [r4, #16]
 8006cac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0a2      	beq.n	8006bfa <_printf_float+0xa2>
 8006cb4:	232d      	movs	r3, #45	@ 0x2d
 8006cb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cba:	e79e      	b.n	8006bfa <_printf_float+0xa2>
 8006cbc:	9a06      	ldr	r2, [sp, #24]
 8006cbe:	2a47      	cmp	r2, #71	@ 0x47
 8006cc0:	d1c2      	bne.n	8006c48 <_printf_float+0xf0>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1c0      	bne.n	8006c48 <_printf_float+0xf0>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e7bd      	b.n	8006c46 <_printf_float+0xee>
 8006cca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006cce:	d9db      	bls.n	8006c88 <_printf_float+0x130>
 8006cd0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006cd4:	d118      	bne.n	8006d08 <_printf_float+0x1b0>
 8006cd6:	2900      	cmp	r1, #0
 8006cd8:	6863      	ldr	r3, [r4, #4]
 8006cda:	dd0b      	ble.n	8006cf4 <_printf_float+0x19c>
 8006cdc:	6121      	str	r1, [r4, #16]
 8006cde:	b913      	cbnz	r3, 8006ce6 <_printf_float+0x18e>
 8006ce0:	6822      	ldr	r2, [r4, #0]
 8006ce2:	07d0      	lsls	r0, r2, #31
 8006ce4:	d502      	bpl.n	8006cec <_printf_float+0x194>
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	440b      	add	r3, r1
 8006cea:	6123      	str	r3, [r4, #16]
 8006cec:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006cee:	f04f 0900 	mov.w	r9, #0
 8006cf2:	e7db      	b.n	8006cac <_printf_float+0x154>
 8006cf4:	b913      	cbnz	r3, 8006cfc <_printf_float+0x1a4>
 8006cf6:	6822      	ldr	r2, [r4, #0]
 8006cf8:	07d2      	lsls	r2, r2, #31
 8006cfa:	d501      	bpl.n	8006d00 <_printf_float+0x1a8>
 8006cfc:	3302      	adds	r3, #2
 8006cfe:	e7f4      	b.n	8006cea <_printf_float+0x192>
 8006d00:	2301      	movs	r3, #1
 8006d02:	e7f2      	b.n	8006cea <_printf_float+0x192>
 8006d04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d0a:	4299      	cmp	r1, r3
 8006d0c:	db05      	blt.n	8006d1a <_printf_float+0x1c2>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	6121      	str	r1, [r4, #16]
 8006d12:	07d8      	lsls	r0, r3, #31
 8006d14:	d5ea      	bpl.n	8006cec <_printf_float+0x194>
 8006d16:	1c4b      	adds	r3, r1, #1
 8006d18:	e7e7      	b.n	8006cea <_printf_float+0x192>
 8006d1a:	2900      	cmp	r1, #0
 8006d1c:	bfd4      	ite	le
 8006d1e:	f1c1 0202 	rsble	r2, r1, #2
 8006d22:	2201      	movgt	r2, #1
 8006d24:	4413      	add	r3, r2
 8006d26:	e7e0      	b.n	8006cea <_printf_float+0x192>
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	055a      	lsls	r2, r3, #21
 8006d2c:	d407      	bmi.n	8006d3e <_printf_float+0x1e6>
 8006d2e:	6923      	ldr	r3, [r4, #16]
 8006d30:	4642      	mov	r2, r8
 8006d32:	4631      	mov	r1, r6
 8006d34:	4628      	mov	r0, r5
 8006d36:	47b8      	blx	r7
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d12b      	bne.n	8006d94 <_printf_float+0x23c>
 8006d3c:	e767      	b.n	8006c0e <_printf_float+0xb6>
 8006d3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d42:	f240 80dd 	bls.w	8006f00 <_printf_float+0x3a8>
 8006d46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f7f9 fedb 	bl	8000b08 <__aeabi_dcmpeq>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d033      	beq.n	8006dbe <_printf_float+0x266>
 8006d56:	4a37      	ldr	r2, [pc, #220]	@ (8006e34 <_printf_float+0x2dc>)
 8006d58:	2301      	movs	r3, #1
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	47b8      	blx	r7
 8006d60:	3001      	adds	r0, #1
 8006d62:	f43f af54 	beq.w	8006c0e <_printf_float+0xb6>
 8006d66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006d6a:	4543      	cmp	r3, r8
 8006d6c:	db02      	blt.n	8006d74 <_printf_float+0x21c>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	07d8      	lsls	r0, r3, #31
 8006d72:	d50f      	bpl.n	8006d94 <_printf_float+0x23c>
 8006d74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d78:	4631      	mov	r1, r6
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	47b8      	blx	r7
 8006d7e:	3001      	adds	r0, #1
 8006d80:	f43f af45 	beq.w	8006c0e <_printf_float+0xb6>
 8006d84:	f04f 0900 	mov.w	r9, #0
 8006d88:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d8c:	f104 0a1a 	add.w	sl, r4, #26
 8006d90:	45c8      	cmp	r8, r9
 8006d92:	dc09      	bgt.n	8006da8 <_printf_float+0x250>
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	079b      	lsls	r3, r3, #30
 8006d98:	f100 8103 	bmi.w	8006fa2 <_printf_float+0x44a>
 8006d9c:	68e0      	ldr	r0, [r4, #12]
 8006d9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006da0:	4298      	cmp	r0, r3
 8006da2:	bfb8      	it	lt
 8006da4:	4618      	movlt	r0, r3
 8006da6:	e734      	b.n	8006c12 <_printf_float+0xba>
 8006da8:	2301      	movs	r3, #1
 8006daa:	4652      	mov	r2, sl
 8006dac:	4631      	mov	r1, r6
 8006dae:	4628      	mov	r0, r5
 8006db0:	47b8      	blx	r7
 8006db2:	3001      	adds	r0, #1
 8006db4:	f43f af2b 	beq.w	8006c0e <_printf_float+0xb6>
 8006db8:	f109 0901 	add.w	r9, r9, #1
 8006dbc:	e7e8      	b.n	8006d90 <_printf_float+0x238>
 8006dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	dc39      	bgt.n	8006e38 <_printf_float+0x2e0>
 8006dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8006e34 <_printf_float+0x2dc>)
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4631      	mov	r1, r6
 8006dca:	4628      	mov	r0, r5
 8006dcc:	47b8      	blx	r7
 8006dce:	3001      	adds	r0, #1
 8006dd0:	f43f af1d 	beq.w	8006c0e <_printf_float+0xb6>
 8006dd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006dd8:	ea59 0303 	orrs.w	r3, r9, r3
 8006ddc:	d102      	bne.n	8006de4 <_printf_float+0x28c>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	07d9      	lsls	r1, r3, #31
 8006de2:	d5d7      	bpl.n	8006d94 <_printf_float+0x23c>
 8006de4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006de8:	4631      	mov	r1, r6
 8006dea:	4628      	mov	r0, r5
 8006dec:	47b8      	blx	r7
 8006dee:	3001      	adds	r0, #1
 8006df0:	f43f af0d 	beq.w	8006c0e <_printf_float+0xb6>
 8006df4:	f04f 0a00 	mov.w	sl, #0
 8006df8:	f104 0b1a 	add.w	fp, r4, #26
 8006dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dfe:	425b      	negs	r3, r3
 8006e00:	4553      	cmp	r3, sl
 8006e02:	dc01      	bgt.n	8006e08 <_printf_float+0x2b0>
 8006e04:	464b      	mov	r3, r9
 8006e06:	e793      	b.n	8006d30 <_printf_float+0x1d8>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	465a      	mov	r2, fp
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b8      	blx	r7
 8006e12:	3001      	adds	r0, #1
 8006e14:	f43f aefb 	beq.w	8006c0e <_printf_float+0xb6>
 8006e18:	f10a 0a01 	add.w	sl, sl, #1
 8006e1c:	e7ee      	b.n	8006dfc <_printf_float+0x2a4>
 8006e1e:	bf00      	nop
 8006e20:	7fefffff 	.word	0x7fefffff
 8006e24:	0800b9cc 	.word	0x0800b9cc
 8006e28:	0800b9d0 	.word	0x0800b9d0
 8006e2c:	0800b9d4 	.word	0x0800b9d4
 8006e30:	0800b9d8 	.word	0x0800b9d8
 8006e34:	0800bd68 	.word	0x0800bd68
 8006e38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e3e:	4553      	cmp	r3, sl
 8006e40:	bfa8      	it	ge
 8006e42:	4653      	movge	r3, sl
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	4699      	mov	r9, r3
 8006e48:	dc36      	bgt.n	8006eb8 <_printf_float+0x360>
 8006e4a:	f04f 0b00 	mov.w	fp, #0
 8006e4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e52:	f104 021a 	add.w	r2, r4, #26
 8006e56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e58:	9306      	str	r3, [sp, #24]
 8006e5a:	eba3 0309 	sub.w	r3, r3, r9
 8006e5e:	455b      	cmp	r3, fp
 8006e60:	dc31      	bgt.n	8006ec6 <_printf_float+0x36e>
 8006e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e64:	459a      	cmp	sl, r3
 8006e66:	dc3a      	bgt.n	8006ede <_printf_float+0x386>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	07da      	lsls	r2, r3, #31
 8006e6c:	d437      	bmi.n	8006ede <_printf_float+0x386>
 8006e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e70:	ebaa 0903 	sub.w	r9, sl, r3
 8006e74:	9b06      	ldr	r3, [sp, #24]
 8006e76:	ebaa 0303 	sub.w	r3, sl, r3
 8006e7a:	4599      	cmp	r9, r3
 8006e7c:	bfa8      	it	ge
 8006e7e:	4699      	movge	r9, r3
 8006e80:	f1b9 0f00 	cmp.w	r9, #0
 8006e84:	dc33      	bgt.n	8006eee <_printf_float+0x396>
 8006e86:	f04f 0800 	mov.w	r8, #0
 8006e8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e8e:	f104 0b1a 	add.w	fp, r4, #26
 8006e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e94:	ebaa 0303 	sub.w	r3, sl, r3
 8006e98:	eba3 0309 	sub.w	r3, r3, r9
 8006e9c:	4543      	cmp	r3, r8
 8006e9e:	f77f af79 	ble.w	8006d94 <_printf_float+0x23c>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	465a      	mov	r2, fp
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b8      	blx	r7
 8006eac:	3001      	adds	r0, #1
 8006eae:	f43f aeae 	beq.w	8006c0e <_printf_float+0xb6>
 8006eb2:	f108 0801 	add.w	r8, r8, #1
 8006eb6:	e7ec      	b.n	8006e92 <_printf_float+0x33a>
 8006eb8:	4642      	mov	r2, r8
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	47b8      	blx	r7
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	d1c2      	bne.n	8006e4a <_printf_float+0x2f2>
 8006ec4:	e6a3      	b.n	8006c0e <_printf_float+0xb6>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4628      	mov	r0, r5
 8006ecc:	9206      	str	r2, [sp, #24]
 8006ece:	47b8      	blx	r7
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	f43f ae9c 	beq.w	8006c0e <_printf_float+0xb6>
 8006ed6:	9a06      	ldr	r2, [sp, #24]
 8006ed8:	f10b 0b01 	add.w	fp, fp, #1
 8006edc:	e7bb      	b.n	8006e56 <_printf_float+0x2fe>
 8006ede:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d1c0      	bne.n	8006e6e <_printf_float+0x316>
 8006eec:	e68f      	b.n	8006c0e <_printf_float+0xb6>
 8006eee:	9a06      	ldr	r2, [sp, #24]
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	4442      	add	r2, r8
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	47b8      	blx	r7
 8006efa:	3001      	adds	r0, #1
 8006efc:	d1c3      	bne.n	8006e86 <_printf_float+0x32e>
 8006efe:	e686      	b.n	8006c0e <_printf_float+0xb6>
 8006f00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f04:	f1ba 0f01 	cmp.w	sl, #1
 8006f08:	dc01      	bgt.n	8006f0e <_printf_float+0x3b6>
 8006f0a:	07db      	lsls	r3, r3, #31
 8006f0c:	d536      	bpl.n	8006f7c <_printf_float+0x424>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	4642      	mov	r2, r8
 8006f12:	4631      	mov	r1, r6
 8006f14:	4628      	mov	r0, r5
 8006f16:	47b8      	blx	r7
 8006f18:	3001      	adds	r0, #1
 8006f1a:	f43f ae78 	beq.w	8006c0e <_printf_float+0xb6>
 8006f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f22:	4631      	mov	r1, r6
 8006f24:	4628      	mov	r0, r5
 8006f26:	47b8      	blx	r7
 8006f28:	3001      	adds	r0, #1
 8006f2a:	f43f ae70 	beq.w	8006c0e <_printf_float+0xb6>
 8006f2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f32:	2200      	movs	r2, #0
 8006f34:	2300      	movs	r3, #0
 8006f36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f3a:	f7f9 fde5 	bl	8000b08 <__aeabi_dcmpeq>
 8006f3e:	b9c0      	cbnz	r0, 8006f72 <_printf_float+0x41a>
 8006f40:	4653      	mov	r3, sl
 8006f42:	f108 0201 	add.w	r2, r8, #1
 8006f46:	4631      	mov	r1, r6
 8006f48:	4628      	mov	r0, r5
 8006f4a:	47b8      	blx	r7
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	d10c      	bne.n	8006f6a <_printf_float+0x412>
 8006f50:	e65d      	b.n	8006c0e <_printf_float+0xb6>
 8006f52:	2301      	movs	r3, #1
 8006f54:	465a      	mov	r2, fp
 8006f56:	4631      	mov	r1, r6
 8006f58:	4628      	mov	r0, r5
 8006f5a:	47b8      	blx	r7
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	f43f ae56 	beq.w	8006c0e <_printf_float+0xb6>
 8006f62:	f108 0801 	add.w	r8, r8, #1
 8006f66:	45d0      	cmp	r8, sl
 8006f68:	dbf3      	blt.n	8006f52 <_printf_float+0x3fa>
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006f70:	e6df      	b.n	8006d32 <_printf_float+0x1da>
 8006f72:	f04f 0800 	mov.w	r8, #0
 8006f76:	f104 0b1a 	add.w	fp, r4, #26
 8006f7a:	e7f4      	b.n	8006f66 <_printf_float+0x40e>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	4642      	mov	r2, r8
 8006f80:	e7e1      	b.n	8006f46 <_printf_float+0x3ee>
 8006f82:	2301      	movs	r3, #1
 8006f84:	464a      	mov	r2, r9
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	f43f ae3e 	beq.w	8006c0e <_printf_float+0xb6>
 8006f92:	f108 0801 	add.w	r8, r8, #1
 8006f96:	68e3      	ldr	r3, [r4, #12]
 8006f98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f9a:	1a5b      	subs	r3, r3, r1
 8006f9c:	4543      	cmp	r3, r8
 8006f9e:	dcf0      	bgt.n	8006f82 <_printf_float+0x42a>
 8006fa0:	e6fc      	b.n	8006d9c <_printf_float+0x244>
 8006fa2:	f04f 0800 	mov.w	r8, #0
 8006fa6:	f104 0919 	add.w	r9, r4, #25
 8006faa:	e7f4      	b.n	8006f96 <_printf_float+0x43e>

08006fac <_printf_common>:
 8006fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb0:	4616      	mov	r6, r2
 8006fb2:	4698      	mov	r8, r3
 8006fb4:	688a      	ldr	r2, [r1, #8]
 8006fb6:	690b      	ldr	r3, [r1, #16]
 8006fb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	bfb8      	it	lt
 8006fc0:	4613      	movlt	r3, r2
 8006fc2:	6033      	str	r3, [r6, #0]
 8006fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006fc8:	4607      	mov	r7, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	b10a      	cbz	r2, 8006fd2 <_printf_common+0x26>
 8006fce:	3301      	adds	r3, #1
 8006fd0:	6033      	str	r3, [r6, #0]
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	0699      	lsls	r1, r3, #26
 8006fd6:	bf42      	ittt	mi
 8006fd8:	6833      	ldrmi	r3, [r6, #0]
 8006fda:	3302      	addmi	r3, #2
 8006fdc:	6033      	strmi	r3, [r6, #0]
 8006fde:	6825      	ldr	r5, [r4, #0]
 8006fe0:	f015 0506 	ands.w	r5, r5, #6
 8006fe4:	d106      	bne.n	8006ff4 <_printf_common+0x48>
 8006fe6:	f104 0a19 	add.w	sl, r4, #25
 8006fea:	68e3      	ldr	r3, [r4, #12]
 8006fec:	6832      	ldr	r2, [r6, #0]
 8006fee:	1a9b      	subs	r3, r3, r2
 8006ff0:	42ab      	cmp	r3, r5
 8006ff2:	dc26      	bgt.n	8007042 <_printf_common+0x96>
 8006ff4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ff8:	6822      	ldr	r2, [r4, #0]
 8006ffa:	3b00      	subs	r3, #0
 8006ffc:	bf18      	it	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	0692      	lsls	r2, r2, #26
 8007002:	d42b      	bmi.n	800705c <_printf_common+0xb0>
 8007004:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007008:	4641      	mov	r1, r8
 800700a:	4638      	mov	r0, r7
 800700c:	47c8      	blx	r9
 800700e:	3001      	adds	r0, #1
 8007010:	d01e      	beq.n	8007050 <_printf_common+0xa4>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	6922      	ldr	r2, [r4, #16]
 8007016:	f003 0306 	and.w	r3, r3, #6
 800701a:	2b04      	cmp	r3, #4
 800701c:	bf02      	ittt	eq
 800701e:	68e5      	ldreq	r5, [r4, #12]
 8007020:	6833      	ldreq	r3, [r6, #0]
 8007022:	1aed      	subeq	r5, r5, r3
 8007024:	68a3      	ldr	r3, [r4, #8]
 8007026:	bf0c      	ite	eq
 8007028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800702c:	2500      	movne	r5, #0
 800702e:	4293      	cmp	r3, r2
 8007030:	bfc4      	itt	gt
 8007032:	1a9b      	subgt	r3, r3, r2
 8007034:	18ed      	addgt	r5, r5, r3
 8007036:	2600      	movs	r6, #0
 8007038:	341a      	adds	r4, #26
 800703a:	42b5      	cmp	r5, r6
 800703c:	d11a      	bne.n	8007074 <_printf_common+0xc8>
 800703e:	2000      	movs	r0, #0
 8007040:	e008      	b.n	8007054 <_printf_common+0xa8>
 8007042:	2301      	movs	r3, #1
 8007044:	4652      	mov	r2, sl
 8007046:	4641      	mov	r1, r8
 8007048:	4638      	mov	r0, r7
 800704a:	47c8      	blx	r9
 800704c:	3001      	adds	r0, #1
 800704e:	d103      	bne.n	8007058 <_printf_common+0xac>
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007058:	3501      	adds	r5, #1
 800705a:	e7c6      	b.n	8006fea <_printf_common+0x3e>
 800705c:	18e1      	adds	r1, r4, r3
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	2030      	movs	r0, #48	@ 0x30
 8007062:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007066:	4422      	add	r2, r4
 8007068:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800706c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007070:	3302      	adds	r3, #2
 8007072:	e7c7      	b.n	8007004 <_printf_common+0x58>
 8007074:	2301      	movs	r3, #1
 8007076:	4622      	mov	r2, r4
 8007078:	4641      	mov	r1, r8
 800707a:	4638      	mov	r0, r7
 800707c:	47c8      	blx	r9
 800707e:	3001      	adds	r0, #1
 8007080:	d0e6      	beq.n	8007050 <_printf_common+0xa4>
 8007082:	3601      	adds	r6, #1
 8007084:	e7d9      	b.n	800703a <_printf_common+0x8e>
	...

08007088 <_printf_i>:
 8007088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800708c:	7e0f      	ldrb	r7, [r1, #24]
 800708e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007090:	2f78      	cmp	r7, #120	@ 0x78
 8007092:	4691      	mov	r9, r2
 8007094:	4680      	mov	r8, r0
 8007096:	460c      	mov	r4, r1
 8007098:	469a      	mov	sl, r3
 800709a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800709e:	d807      	bhi.n	80070b0 <_printf_i+0x28>
 80070a0:	2f62      	cmp	r7, #98	@ 0x62
 80070a2:	d80a      	bhi.n	80070ba <_printf_i+0x32>
 80070a4:	2f00      	cmp	r7, #0
 80070a6:	f000 80d2 	beq.w	800724e <_printf_i+0x1c6>
 80070aa:	2f58      	cmp	r7, #88	@ 0x58
 80070ac:	f000 80b9 	beq.w	8007222 <_printf_i+0x19a>
 80070b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070b8:	e03a      	b.n	8007130 <_printf_i+0xa8>
 80070ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070be:	2b15      	cmp	r3, #21
 80070c0:	d8f6      	bhi.n	80070b0 <_printf_i+0x28>
 80070c2:	a101      	add	r1, pc, #4	@ (adr r1, 80070c8 <_printf_i+0x40>)
 80070c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070c8:	08007121 	.word	0x08007121
 80070cc:	08007135 	.word	0x08007135
 80070d0:	080070b1 	.word	0x080070b1
 80070d4:	080070b1 	.word	0x080070b1
 80070d8:	080070b1 	.word	0x080070b1
 80070dc:	080070b1 	.word	0x080070b1
 80070e0:	08007135 	.word	0x08007135
 80070e4:	080070b1 	.word	0x080070b1
 80070e8:	080070b1 	.word	0x080070b1
 80070ec:	080070b1 	.word	0x080070b1
 80070f0:	080070b1 	.word	0x080070b1
 80070f4:	08007235 	.word	0x08007235
 80070f8:	0800715f 	.word	0x0800715f
 80070fc:	080071ef 	.word	0x080071ef
 8007100:	080070b1 	.word	0x080070b1
 8007104:	080070b1 	.word	0x080070b1
 8007108:	08007257 	.word	0x08007257
 800710c:	080070b1 	.word	0x080070b1
 8007110:	0800715f 	.word	0x0800715f
 8007114:	080070b1 	.word	0x080070b1
 8007118:	080070b1 	.word	0x080070b1
 800711c:	080071f7 	.word	0x080071f7
 8007120:	6833      	ldr	r3, [r6, #0]
 8007122:	1d1a      	adds	r2, r3, #4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6032      	str	r2, [r6, #0]
 8007128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800712c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007130:	2301      	movs	r3, #1
 8007132:	e09d      	b.n	8007270 <_printf_i+0x1e8>
 8007134:	6833      	ldr	r3, [r6, #0]
 8007136:	6820      	ldr	r0, [r4, #0]
 8007138:	1d19      	adds	r1, r3, #4
 800713a:	6031      	str	r1, [r6, #0]
 800713c:	0606      	lsls	r6, r0, #24
 800713e:	d501      	bpl.n	8007144 <_printf_i+0xbc>
 8007140:	681d      	ldr	r5, [r3, #0]
 8007142:	e003      	b.n	800714c <_printf_i+0xc4>
 8007144:	0645      	lsls	r5, r0, #25
 8007146:	d5fb      	bpl.n	8007140 <_printf_i+0xb8>
 8007148:	f9b3 5000 	ldrsh.w	r5, [r3]
 800714c:	2d00      	cmp	r5, #0
 800714e:	da03      	bge.n	8007158 <_printf_i+0xd0>
 8007150:	232d      	movs	r3, #45	@ 0x2d
 8007152:	426d      	negs	r5, r5
 8007154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007158:	4859      	ldr	r0, [pc, #356]	@ (80072c0 <_printf_i+0x238>)
 800715a:	230a      	movs	r3, #10
 800715c:	e011      	b.n	8007182 <_printf_i+0xfa>
 800715e:	6821      	ldr	r1, [r4, #0]
 8007160:	6833      	ldr	r3, [r6, #0]
 8007162:	0608      	lsls	r0, r1, #24
 8007164:	f853 5b04 	ldr.w	r5, [r3], #4
 8007168:	d402      	bmi.n	8007170 <_printf_i+0xe8>
 800716a:	0649      	lsls	r1, r1, #25
 800716c:	bf48      	it	mi
 800716e:	b2ad      	uxthmi	r5, r5
 8007170:	2f6f      	cmp	r7, #111	@ 0x6f
 8007172:	4853      	ldr	r0, [pc, #332]	@ (80072c0 <_printf_i+0x238>)
 8007174:	6033      	str	r3, [r6, #0]
 8007176:	bf14      	ite	ne
 8007178:	230a      	movne	r3, #10
 800717a:	2308      	moveq	r3, #8
 800717c:	2100      	movs	r1, #0
 800717e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007182:	6866      	ldr	r6, [r4, #4]
 8007184:	60a6      	str	r6, [r4, #8]
 8007186:	2e00      	cmp	r6, #0
 8007188:	bfa2      	ittt	ge
 800718a:	6821      	ldrge	r1, [r4, #0]
 800718c:	f021 0104 	bicge.w	r1, r1, #4
 8007190:	6021      	strge	r1, [r4, #0]
 8007192:	b90d      	cbnz	r5, 8007198 <_printf_i+0x110>
 8007194:	2e00      	cmp	r6, #0
 8007196:	d04b      	beq.n	8007230 <_printf_i+0x1a8>
 8007198:	4616      	mov	r6, r2
 800719a:	fbb5 f1f3 	udiv	r1, r5, r3
 800719e:	fb03 5711 	mls	r7, r3, r1, r5
 80071a2:	5dc7      	ldrb	r7, [r0, r7]
 80071a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071a8:	462f      	mov	r7, r5
 80071aa:	42bb      	cmp	r3, r7
 80071ac:	460d      	mov	r5, r1
 80071ae:	d9f4      	bls.n	800719a <_printf_i+0x112>
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d10b      	bne.n	80071cc <_printf_i+0x144>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	07df      	lsls	r7, r3, #31
 80071b8:	d508      	bpl.n	80071cc <_printf_i+0x144>
 80071ba:	6923      	ldr	r3, [r4, #16]
 80071bc:	6861      	ldr	r1, [r4, #4]
 80071be:	4299      	cmp	r1, r3
 80071c0:	bfde      	ittt	le
 80071c2:	2330      	movle	r3, #48	@ 0x30
 80071c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071cc:	1b92      	subs	r2, r2, r6
 80071ce:	6122      	str	r2, [r4, #16]
 80071d0:	f8cd a000 	str.w	sl, [sp]
 80071d4:	464b      	mov	r3, r9
 80071d6:	aa03      	add	r2, sp, #12
 80071d8:	4621      	mov	r1, r4
 80071da:	4640      	mov	r0, r8
 80071dc:	f7ff fee6 	bl	8006fac <_printf_common>
 80071e0:	3001      	adds	r0, #1
 80071e2:	d14a      	bne.n	800727a <_printf_i+0x1f2>
 80071e4:	f04f 30ff 	mov.w	r0, #4294967295
 80071e8:	b004      	add	sp, #16
 80071ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	f043 0320 	orr.w	r3, r3, #32
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	4833      	ldr	r0, [pc, #204]	@ (80072c4 <_printf_i+0x23c>)
 80071f8:	2778      	movs	r7, #120	@ 0x78
 80071fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	6831      	ldr	r1, [r6, #0]
 8007202:	061f      	lsls	r7, r3, #24
 8007204:	f851 5b04 	ldr.w	r5, [r1], #4
 8007208:	d402      	bmi.n	8007210 <_printf_i+0x188>
 800720a:	065f      	lsls	r7, r3, #25
 800720c:	bf48      	it	mi
 800720e:	b2ad      	uxthmi	r5, r5
 8007210:	6031      	str	r1, [r6, #0]
 8007212:	07d9      	lsls	r1, r3, #31
 8007214:	bf44      	itt	mi
 8007216:	f043 0320 	orrmi.w	r3, r3, #32
 800721a:	6023      	strmi	r3, [r4, #0]
 800721c:	b11d      	cbz	r5, 8007226 <_printf_i+0x19e>
 800721e:	2310      	movs	r3, #16
 8007220:	e7ac      	b.n	800717c <_printf_i+0xf4>
 8007222:	4827      	ldr	r0, [pc, #156]	@ (80072c0 <_printf_i+0x238>)
 8007224:	e7e9      	b.n	80071fa <_printf_i+0x172>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	f023 0320 	bic.w	r3, r3, #32
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	e7f6      	b.n	800721e <_printf_i+0x196>
 8007230:	4616      	mov	r6, r2
 8007232:	e7bd      	b.n	80071b0 <_printf_i+0x128>
 8007234:	6833      	ldr	r3, [r6, #0]
 8007236:	6825      	ldr	r5, [r4, #0]
 8007238:	6961      	ldr	r1, [r4, #20]
 800723a:	1d18      	adds	r0, r3, #4
 800723c:	6030      	str	r0, [r6, #0]
 800723e:	062e      	lsls	r6, r5, #24
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	d501      	bpl.n	8007248 <_printf_i+0x1c0>
 8007244:	6019      	str	r1, [r3, #0]
 8007246:	e002      	b.n	800724e <_printf_i+0x1c6>
 8007248:	0668      	lsls	r0, r5, #25
 800724a:	d5fb      	bpl.n	8007244 <_printf_i+0x1bc>
 800724c:	8019      	strh	r1, [r3, #0]
 800724e:	2300      	movs	r3, #0
 8007250:	6123      	str	r3, [r4, #16]
 8007252:	4616      	mov	r6, r2
 8007254:	e7bc      	b.n	80071d0 <_printf_i+0x148>
 8007256:	6833      	ldr	r3, [r6, #0]
 8007258:	1d1a      	adds	r2, r3, #4
 800725a:	6032      	str	r2, [r6, #0]
 800725c:	681e      	ldr	r6, [r3, #0]
 800725e:	6862      	ldr	r2, [r4, #4]
 8007260:	2100      	movs	r1, #0
 8007262:	4630      	mov	r0, r6
 8007264:	f7f8 ffd4 	bl	8000210 <memchr>
 8007268:	b108      	cbz	r0, 800726e <_printf_i+0x1e6>
 800726a:	1b80      	subs	r0, r0, r6
 800726c:	6060      	str	r0, [r4, #4]
 800726e:	6863      	ldr	r3, [r4, #4]
 8007270:	6123      	str	r3, [r4, #16]
 8007272:	2300      	movs	r3, #0
 8007274:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007278:	e7aa      	b.n	80071d0 <_printf_i+0x148>
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	4632      	mov	r2, r6
 800727e:	4649      	mov	r1, r9
 8007280:	4640      	mov	r0, r8
 8007282:	47d0      	blx	sl
 8007284:	3001      	adds	r0, #1
 8007286:	d0ad      	beq.n	80071e4 <_printf_i+0x15c>
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	079b      	lsls	r3, r3, #30
 800728c:	d413      	bmi.n	80072b6 <_printf_i+0x22e>
 800728e:	68e0      	ldr	r0, [r4, #12]
 8007290:	9b03      	ldr	r3, [sp, #12]
 8007292:	4298      	cmp	r0, r3
 8007294:	bfb8      	it	lt
 8007296:	4618      	movlt	r0, r3
 8007298:	e7a6      	b.n	80071e8 <_printf_i+0x160>
 800729a:	2301      	movs	r3, #1
 800729c:	4632      	mov	r2, r6
 800729e:	4649      	mov	r1, r9
 80072a0:	4640      	mov	r0, r8
 80072a2:	47d0      	blx	sl
 80072a4:	3001      	adds	r0, #1
 80072a6:	d09d      	beq.n	80071e4 <_printf_i+0x15c>
 80072a8:	3501      	adds	r5, #1
 80072aa:	68e3      	ldr	r3, [r4, #12]
 80072ac:	9903      	ldr	r1, [sp, #12]
 80072ae:	1a5b      	subs	r3, r3, r1
 80072b0:	42ab      	cmp	r3, r5
 80072b2:	dcf2      	bgt.n	800729a <_printf_i+0x212>
 80072b4:	e7eb      	b.n	800728e <_printf_i+0x206>
 80072b6:	2500      	movs	r5, #0
 80072b8:	f104 0619 	add.w	r6, r4, #25
 80072bc:	e7f5      	b.n	80072aa <_printf_i+0x222>
 80072be:	bf00      	nop
 80072c0:	0800b9dc 	.word	0x0800b9dc
 80072c4:	0800b9ed 	.word	0x0800b9ed

080072c8 <_scanf_float>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	b087      	sub	sp, #28
 80072ce:	4617      	mov	r7, r2
 80072d0:	9303      	str	r3, [sp, #12]
 80072d2:	688b      	ldr	r3, [r1, #8]
 80072d4:	1e5a      	subs	r2, r3, #1
 80072d6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80072da:	bf81      	itttt	hi
 80072dc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80072e0:	eb03 0b05 	addhi.w	fp, r3, r5
 80072e4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80072e8:	608b      	strhi	r3, [r1, #8]
 80072ea:	680b      	ldr	r3, [r1, #0]
 80072ec:	460a      	mov	r2, r1
 80072ee:	f04f 0500 	mov.w	r5, #0
 80072f2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80072f6:	f842 3b1c 	str.w	r3, [r2], #28
 80072fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80072fe:	4680      	mov	r8, r0
 8007300:	460c      	mov	r4, r1
 8007302:	bf98      	it	ls
 8007304:	f04f 0b00 	movls.w	fp, #0
 8007308:	9201      	str	r2, [sp, #4]
 800730a:	4616      	mov	r6, r2
 800730c:	46aa      	mov	sl, r5
 800730e:	46a9      	mov	r9, r5
 8007310:	9502      	str	r5, [sp, #8]
 8007312:	68a2      	ldr	r2, [r4, #8]
 8007314:	b152      	cbz	r2, 800732c <_scanf_float+0x64>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b4e      	cmp	r3, #78	@ 0x4e
 800731c:	d864      	bhi.n	80073e8 <_scanf_float+0x120>
 800731e:	2b40      	cmp	r3, #64	@ 0x40
 8007320:	d83c      	bhi.n	800739c <_scanf_float+0xd4>
 8007322:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007326:	b2c8      	uxtb	r0, r1
 8007328:	280e      	cmp	r0, #14
 800732a:	d93a      	bls.n	80073a2 <_scanf_float+0xda>
 800732c:	f1b9 0f00 	cmp.w	r9, #0
 8007330:	d003      	beq.n	800733a <_scanf_float+0x72>
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800733e:	f1ba 0f01 	cmp.w	sl, #1
 8007342:	f200 8117 	bhi.w	8007574 <_scanf_float+0x2ac>
 8007346:	9b01      	ldr	r3, [sp, #4]
 8007348:	429e      	cmp	r6, r3
 800734a:	f200 8108 	bhi.w	800755e <_scanf_float+0x296>
 800734e:	2001      	movs	r0, #1
 8007350:	b007      	add	sp, #28
 8007352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007356:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800735a:	2a0d      	cmp	r2, #13
 800735c:	d8e6      	bhi.n	800732c <_scanf_float+0x64>
 800735e:	a101      	add	r1, pc, #4	@ (adr r1, 8007364 <_scanf_float+0x9c>)
 8007360:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007364:	080074ab 	.word	0x080074ab
 8007368:	0800732d 	.word	0x0800732d
 800736c:	0800732d 	.word	0x0800732d
 8007370:	0800732d 	.word	0x0800732d
 8007374:	0800750b 	.word	0x0800750b
 8007378:	080074e3 	.word	0x080074e3
 800737c:	0800732d 	.word	0x0800732d
 8007380:	0800732d 	.word	0x0800732d
 8007384:	080074b9 	.word	0x080074b9
 8007388:	0800732d 	.word	0x0800732d
 800738c:	0800732d 	.word	0x0800732d
 8007390:	0800732d 	.word	0x0800732d
 8007394:	0800732d 	.word	0x0800732d
 8007398:	08007471 	.word	0x08007471
 800739c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80073a0:	e7db      	b.n	800735a <_scanf_float+0x92>
 80073a2:	290e      	cmp	r1, #14
 80073a4:	d8c2      	bhi.n	800732c <_scanf_float+0x64>
 80073a6:	a001      	add	r0, pc, #4	@ (adr r0, 80073ac <_scanf_float+0xe4>)
 80073a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80073ac:	08007461 	.word	0x08007461
 80073b0:	0800732d 	.word	0x0800732d
 80073b4:	08007461 	.word	0x08007461
 80073b8:	080074f7 	.word	0x080074f7
 80073bc:	0800732d 	.word	0x0800732d
 80073c0:	08007409 	.word	0x08007409
 80073c4:	08007447 	.word	0x08007447
 80073c8:	08007447 	.word	0x08007447
 80073cc:	08007447 	.word	0x08007447
 80073d0:	08007447 	.word	0x08007447
 80073d4:	08007447 	.word	0x08007447
 80073d8:	08007447 	.word	0x08007447
 80073dc:	08007447 	.word	0x08007447
 80073e0:	08007447 	.word	0x08007447
 80073e4:	08007447 	.word	0x08007447
 80073e8:	2b6e      	cmp	r3, #110	@ 0x6e
 80073ea:	d809      	bhi.n	8007400 <_scanf_float+0x138>
 80073ec:	2b60      	cmp	r3, #96	@ 0x60
 80073ee:	d8b2      	bhi.n	8007356 <_scanf_float+0x8e>
 80073f0:	2b54      	cmp	r3, #84	@ 0x54
 80073f2:	d07b      	beq.n	80074ec <_scanf_float+0x224>
 80073f4:	2b59      	cmp	r3, #89	@ 0x59
 80073f6:	d199      	bne.n	800732c <_scanf_float+0x64>
 80073f8:	2d07      	cmp	r5, #7
 80073fa:	d197      	bne.n	800732c <_scanf_float+0x64>
 80073fc:	2508      	movs	r5, #8
 80073fe:	e02c      	b.n	800745a <_scanf_float+0x192>
 8007400:	2b74      	cmp	r3, #116	@ 0x74
 8007402:	d073      	beq.n	80074ec <_scanf_float+0x224>
 8007404:	2b79      	cmp	r3, #121	@ 0x79
 8007406:	e7f6      	b.n	80073f6 <_scanf_float+0x12e>
 8007408:	6821      	ldr	r1, [r4, #0]
 800740a:	05c8      	lsls	r0, r1, #23
 800740c:	d51b      	bpl.n	8007446 <_scanf_float+0x17e>
 800740e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007412:	6021      	str	r1, [r4, #0]
 8007414:	f109 0901 	add.w	r9, r9, #1
 8007418:	f1bb 0f00 	cmp.w	fp, #0
 800741c:	d003      	beq.n	8007426 <_scanf_float+0x15e>
 800741e:	3201      	adds	r2, #1
 8007420:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007424:	60a2      	str	r2, [r4, #8]
 8007426:	68a3      	ldr	r3, [r4, #8]
 8007428:	3b01      	subs	r3, #1
 800742a:	60a3      	str	r3, [r4, #8]
 800742c:	6923      	ldr	r3, [r4, #16]
 800742e:	3301      	adds	r3, #1
 8007430:	6123      	str	r3, [r4, #16]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3b01      	subs	r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	607b      	str	r3, [r7, #4]
 800743a:	f340 8087 	ble.w	800754c <_scanf_float+0x284>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	3301      	adds	r3, #1
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	e765      	b.n	8007312 <_scanf_float+0x4a>
 8007446:	eb1a 0105 	adds.w	r1, sl, r5
 800744a:	f47f af6f 	bne.w	800732c <_scanf_float+0x64>
 800744e:	6822      	ldr	r2, [r4, #0]
 8007450:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007454:	6022      	str	r2, [r4, #0]
 8007456:	460d      	mov	r5, r1
 8007458:	468a      	mov	sl, r1
 800745a:	f806 3b01 	strb.w	r3, [r6], #1
 800745e:	e7e2      	b.n	8007426 <_scanf_float+0x15e>
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	0610      	lsls	r0, r2, #24
 8007464:	f57f af62 	bpl.w	800732c <_scanf_float+0x64>
 8007468:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800746c:	6022      	str	r2, [r4, #0]
 800746e:	e7f4      	b.n	800745a <_scanf_float+0x192>
 8007470:	f1ba 0f00 	cmp.w	sl, #0
 8007474:	d10e      	bne.n	8007494 <_scanf_float+0x1cc>
 8007476:	f1b9 0f00 	cmp.w	r9, #0
 800747a:	d10e      	bne.n	800749a <_scanf_float+0x1d2>
 800747c:	6822      	ldr	r2, [r4, #0]
 800747e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007482:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007486:	d108      	bne.n	800749a <_scanf_float+0x1d2>
 8007488:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800748c:	6022      	str	r2, [r4, #0]
 800748e:	f04f 0a01 	mov.w	sl, #1
 8007492:	e7e2      	b.n	800745a <_scanf_float+0x192>
 8007494:	f1ba 0f02 	cmp.w	sl, #2
 8007498:	d055      	beq.n	8007546 <_scanf_float+0x27e>
 800749a:	2d01      	cmp	r5, #1
 800749c:	d002      	beq.n	80074a4 <_scanf_float+0x1dc>
 800749e:	2d04      	cmp	r5, #4
 80074a0:	f47f af44 	bne.w	800732c <_scanf_float+0x64>
 80074a4:	3501      	adds	r5, #1
 80074a6:	b2ed      	uxtb	r5, r5
 80074a8:	e7d7      	b.n	800745a <_scanf_float+0x192>
 80074aa:	f1ba 0f01 	cmp.w	sl, #1
 80074ae:	f47f af3d 	bne.w	800732c <_scanf_float+0x64>
 80074b2:	f04f 0a02 	mov.w	sl, #2
 80074b6:	e7d0      	b.n	800745a <_scanf_float+0x192>
 80074b8:	b97d      	cbnz	r5, 80074da <_scanf_float+0x212>
 80074ba:	f1b9 0f00 	cmp.w	r9, #0
 80074be:	f47f af38 	bne.w	8007332 <_scanf_float+0x6a>
 80074c2:	6822      	ldr	r2, [r4, #0]
 80074c4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80074c8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80074cc:	f040 8108 	bne.w	80076e0 <_scanf_float+0x418>
 80074d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074d4:	6022      	str	r2, [r4, #0]
 80074d6:	2501      	movs	r5, #1
 80074d8:	e7bf      	b.n	800745a <_scanf_float+0x192>
 80074da:	2d03      	cmp	r5, #3
 80074dc:	d0e2      	beq.n	80074a4 <_scanf_float+0x1dc>
 80074de:	2d05      	cmp	r5, #5
 80074e0:	e7de      	b.n	80074a0 <_scanf_float+0x1d8>
 80074e2:	2d02      	cmp	r5, #2
 80074e4:	f47f af22 	bne.w	800732c <_scanf_float+0x64>
 80074e8:	2503      	movs	r5, #3
 80074ea:	e7b6      	b.n	800745a <_scanf_float+0x192>
 80074ec:	2d06      	cmp	r5, #6
 80074ee:	f47f af1d 	bne.w	800732c <_scanf_float+0x64>
 80074f2:	2507      	movs	r5, #7
 80074f4:	e7b1      	b.n	800745a <_scanf_float+0x192>
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	0591      	lsls	r1, r2, #22
 80074fa:	f57f af17 	bpl.w	800732c <_scanf_float+0x64>
 80074fe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007502:	6022      	str	r2, [r4, #0]
 8007504:	f8cd 9008 	str.w	r9, [sp, #8]
 8007508:	e7a7      	b.n	800745a <_scanf_float+0x192>
 800750a:	6822      	ldr	r2, [r4, #0]
 800750c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007510:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007514:	d006      	beq.n	8007524 <_scanf_float+0x25c>
 8007516:	0550      	lsls	r0, r2, #21
 8007518:	f57f af08 	bpl.w	800732c <_scanf_float+0x64>
 800751c:	f1b9 0f00 	cmp.w	r9, #0
 8007520:	f000 80de 	beq.w	80076e0 <_scanf_float+0x418>
 8007524:	0591      	lsls	r1, r2, #22
 8007526:	bf58      	it	pl
 8007528:	9902      	ldrpl	r1, [sp, #8]
 800752a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800752e:	bf58      	it	pl
 8007530:	eba9 0101 	subpl.w	r1, r9, r1
 8007534:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007538:	bf58      	it	pl
 800753a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800753e:	6022      	str	r2, [r4, #0]
 8007540:	f04f 0900 	mov.w	r9, #0
 8007544:	e789      	b.n	800745a <_scanf_float+0x192>
 8007546:	f04f 0a03 	mov.w	sl, #3
 800754a:	e786      	b.n	800745a <_scanf_float+0x192>
 800754c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007550:	4639      	mov	r1, r7
 8007552:	4640      	mov	r0, r8
 8007554:	4798      	blx	r3
 8007556:	2800      	cmp	r0, #0
 8007558:	f43f aedb 	beq.w	8007312 <_scanf_float+0x4a>
 800755c:	e6e6      	b.n	800732c <_scanf_float+0x64>
 800755e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007562:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007566:	463a      	mov	r2, r7
 8007568:	4640      	mov	r0, r8
 800756a:	4798      	blx	r3
 800756c:	6923      	ldr	r3, [r4, #16]
 800756e:	3b01      	subs	r3, #1
 8007570:	6123      	str	r3, [r4, #16]
 8007572:	e6e8      	b.n	8007346 <_scanf_float+0x7e>
 8007574:	1e6b      	subs	r3, r5, #1
 8007576:	2b06      	cmp	r3, #6
 8007578:	d824      	bhi.n	80075c4 <_scanf_float+0x2fc>
 800757a:	2d02      	cmp	r5, #2
 800757c:	d836      	bhi.n	80075ec <_scanf_float+0x324>
 800757e:	9b01      	ldr	r3, [sp, #4]
 8007580:	429e      	cmp	r6, r3
 8007582:	f67f aee4 	bls.w	800734e <_scanf_float+0x86>
 8007586:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800758a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800758e:	463a      	mov	r2, r7
 8007590:	4640      	mov	r0, r8
 8007592:	4798      	blx	r3
 8007594:	6923      	ldr	r3, [r4, #16]
 8007596:	3b01      	subs	r3, #1
 8007598:	6123      	str	r3, [r4, #16]
 800759a:	e7f0      	b.n	800757e <_scanf_float+0x2b6>
 800759c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075a0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80075a4:	463a      	mov	r2, r7
 80075a6:	4640      	mov	r0, r8
 80075a8:	4798      	blx	r3
 80075aa:	6923      	ldr	r3, [r4, #16]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	6123      	str	r3, [r4, #16]
 80075b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075b4:	fa5f fa8a 	uxtb.w	sl, sl
 80075b8:	f1ba 0f02 	cmp.w	sl, #2
 80075bc:	d1ee      	bne.n	800759c <_scanf_float+0x2d4>
 80075be:	3d03      	subs	r5, #3
 80075c0:	b2ed      	uxtb	r5, r5
 80075c2:	1b76      	subs	r6, r6, r5
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	05da      	lsls	r2, r3, #23
 80075c8:	d530      	bpl.n	800762c <_scanf_float+0x364>
 80075ca:	055b      	lsls	r3, r3, #21
 80075cc:	d511      	bpl.n	80075f2 <_scanf_float+0x32a>
 80075ce:	9b01      	ldr	r3, [sp, #4]
 80075d0:	429e      	cmp	r6, r3
 80075d2:	f67f aebc 	bls.w	800734e <_scanf_float+0x86>
 80075d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075de:	463a      	mov	r2, r7
 80075e0:	4640      	mov	r0, r8
 80075e2:	4798      	blx	r3
 80075e4:	6923      	ldr	r3, [r4, #16]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	6123      	str	r3, [r4, #16]
 80075ea:	e7f0      	b.n	80075ce <_scanf_float+0x306>
 80075ec:	46aa      	mov	sl, r5
 80075ee:	46b3      	mov	fp, r6
 80075f0:	e7de      	b.n	80075b0 <_scanf_float+0x2e8>
 80075f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	2965      	cmp	r1, #101	@ 0x65
 80075fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80075fe:	f106 35ff 	add.w	r5, r6, #4294967295
 8007602:	6123      	str	r3, [r4, #16]
 8007604:	d00c      	beq.n	8007620 <_scanf_float+0x358>
 8007606:	2945      	cmp	r1, #69	@ 0x45
 8007608:	d00a      	beq.n	8007620 <_scanf_float+0x358>
 800760a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800760e:	463a      	mov	r2, r7
 8007610:	4640      	mov	r0, r8
 8007612:	4798      	blx	r3
 8007614:	6923      	ldr	r3, [r4, #16]
 8007616:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800761a:	3b01      	subs	r3, #1
 800761c:	1eb5      	subs	r5, r6, #2
 800761e:	6123      	str	r3, [r4, #16]
 8007620:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007624:	463a      	mov	r2, r7
 8007626:	4640      	mov	r0, r8
 8007628:	4798      	blx	r3
 800762a:	462e      	mov	r6, r5
 800762c:	6822      	ldr	r2, [r4, #0]
 800762e:	f012 0210 	ands.w	r2, r2, #16
 8007632:	d001      	beq.n	8007638 <_scanf_float+0x370>
 8007634:	2000      	movs	r0, #0
 8007636:	e68b      	b.n	8007350 <_scanf_float+0x88>
 8007638:	7032      	strb	r2, [r6, #0]
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007644:	d11c      	bne.n	8007680 <_scanf_float+0x3b8>
 8007646:	9b02      	ldr	r3, [sp, #8]
 8007648:	454b      	cmp	r3, r9
 800764a:	eba3 0209 	sub.w	r2, r3, r9
 800764e:	d123      	bne.n	8007698 <_scanf_float+0x3d0>
 8007650:	9901      	ldr	r1, [sp, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	4640      	mov	r0, r8
 8007656:	f002 fc23 	bl	8009ea0 <_strtod_r>
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	6821      	ldr	r1, [r4, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f011 0f02 	tst.w	r1, #2
 8007664:	ec57 6b10 	vmov	r6, r7, d0
 8007668:	f103 0204 	add.w	r2, r3, #4
 800766c:	d01f      	beq.n	80076ae <_scanf_float+0x3e6>
 800766e:	9903      	ldr	r1, [sp, #12]
 8007670:	600a      	str	r2, [r1, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	e9c3 6700 	strd	r6, r7, [r3]
 8007678:	68e3      	ldr	r3, [r4, #12]
 800767a:	3301      	adds	r3, #1
 800767c:	60e3      	str	r3, [r4, #12]
 800767e:	e7d9      	b.n	8007634 <_scanf_float+0x36c>
 8007680:	9b04      	ldr	r3, [sp, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0e4      	beq.n	8007650 <_scanf_float+0x388>
 8007686:	9905      	ldr	r1, [sp, #20]
 8007688:	230a      	movs	r3, #10
 800768a:	3101      	adds	r1, #1
 800768c:	4640      	mov	r0, r8
 800768e:	f002 fc87 	bl	8009fa0 <_strtol_r>
 8007692:	9b04      	ldr	r3, [sp, #16]
 8007694:	9e05      	ldr	r6, [sp, #20]
 8007696:	1ac2      	subs	r2, r0, r3
 8007698:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800769c:	429e      	cmp	r6, r3
 800769e:	bf28      	it	cs
 80076a0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80076a4:	4910      	ldr	r1, [pc, #64]	@ (80076e8 <_scanf_float+0x420>)
 80076a6:	4630      	mov	r0, r6
 80076a8:	f000 f8e4 	bl	8007874 <siprintf>
 80076ac:	e7d0      	b.n	8007650 <_scanf_float+0x388>
 80076ae:	f011 0f04 	tst.w	r1, #4
 80076b2:	9903      	ldr	r1, [sp, #12]
 80076b4:	600a      	str	r2, [r1, #0]
 80076b6:	d1dc      	bne.n	8007672 <_scanf_float+0x3aa>
 80076b8:	681d      	ldr	r5, [r3, #0]
 80076ba:	4632      	mov	r2, r6
 80076bc:	463b      	mov	r3, r7
 80076be:	4630      	mov	r0, r6
 80076c0:	4639      	mov	r1, r7
 80076c2:	f7f9 fa53 	bl	8000b6c <__aeabi_dcmpun>
 80076c6:	b128      	cbz	r0, 80076d4 <_scanf_float+0x40c>
 80076c8:	4808      	ldr	r0, [pc, #32]	@ (80076ec <_scanf_float+0x424>)
 80076ca:	f000 f9e3 	bl	8007a94 <nanf>
 80076ce:	ed85 0a00 	vstr	s0, [r5]
 80076d2:	e7d1      	b.n	8007678 <_scanf_float+0x3b0>
 80076d4:	4630      	mov	r0, r6
 80076d6:	4639      	mov	r1, r7
 80076d8:	f7f9 faa6 	bl	8000c28 <__aeabi_d2f>
 80076dc:	6028      	str	r0, [r5, #0]
 80076de:	e7cb      	b.n	8007678 <_scanf_float+0x3b0>
 80076e0:	f04f 0900 	mov.w	r9, #0
 80076e4:	e629      	b.n	800733a <_scanf_float+0x72>
 80076e6:	bf00      	nop
 80076e8:	0800b9fe 	.word	0x0800b9fe
 80076ec:	0800bdb0 	.word	0x0800bdb0

080076f0 <std>:
 80076f0:	2300      	movs	r3, #0
 80076f2:	b510      	push	{r4, lr}
 80076f4:	4604      	mov	r4, r0
 80076f6:	e9c0 3300 	strd	r3, r3, [r0]
 80076fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076fe:	6083      	str	r3, [r0, #8]
 8007700:	8181      	strh	r1, [r0, #12]
 8007702:	6643      	str	r3, [r0, #100]	@ 0x64
 8007704:	81c2      	strh	r2, [r0, #14]
 8007706:	6183      	str	r3, [r0, #24]
 8007708:	4619      	mov	r1, r3
 800770a:	2208      	movs	r2, #8
 800770c:	305c      	adds	r0, #92	@ 0x5c
 800770e:	f000 f940 	bl	8007992 <memset>
 8007712:	4b0d      	ldr	r3, [pc, #52]	@ (8007748 <std+0x58>)
 8007714:	6263      	str	r3, [r4, #36]	@ 0x24
 8007716:	4b0d      	ldr	r3, [pc, #52]	@ (800774c <std+0x5c>)
 8007718:	62a3      	str	r3, [r4, #40]	@ 0x28
 800771a:	4b0d      	ldr	r3, [pc, #52]	@ (8007750 <std+0x60>)
 800771c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800771e:	4b0d      	ldr	r3, [pc, #52]	@ (8007754 <std+0x64>)
 8007720:	6323      	str	r3, [r4, #48]	@ 0x30
 8007722:	4b0d      	ldr	r3, [pc, #52]	@ (8007758 <std+0x68>)
 8007724:	6224      	str	r4, [r4, #32]
 8007726:	429c      	cmp	r4, r3
 8007728:	d006      	beq.n	8007738 <std+0x48>
 800772a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800772e:	4294      	cmp	r4, r2
 8007730:	d002      	beq.n	8007738 <std+0x48>
 8007732:	33d0      	adds	r3, #208	@ 0xd0
 8007734:	429c      	cmp	r4, r3
 8007736:	d105      	bne.n	8007744 <std+0x54>
 8007738:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800773c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007740:	f000 b9a4 	b.w	8007a8c <__retarget_lock_init_recursive>
 8007744:	bd10      	pop	{r4, pc}
 8007746:	bf00      	nop
 8007748:	08007909 	.word	0x08007909
 800774c:	0800792f 	.word	0x0800792f
 8007750:	08007967 	.word	0x08007967
 8007754:	0800798b 	.word	0x0800798b
 8007758:	200003e4 	.word	0x200003e4

0800775c <stdio_exit_handler>:
 800775c:	4a02      	ldr	r2, [pc, #8]	@ (8007768 <stdio_exit_handler+0xc>)
 800775e:	4903      	ldr	r1, [pc, #12]	@ (800776c <stdio_exit_handler+0x10>)
 8007760:	4803      	ldr	r0, [pc, #12]	@ (8007770 <stdio_exit_handler+0x14>)
 8007762:	f000 b869 	b.w	8007838 <_fwalk_sglue>
 8007766:	bf00      	nop
 8007768:	2000001c 	.word	0x2000001c
 800776c:	0800a991 	.word	0x0800a991
 8007770:	2000002c 	.word	0x2000002c

08007774 <cleanup_stdio>:
 8007774:	6841      	ldr	r1, [r0, #4]
 8007776:	4b0c      	ldr	r3, [pc, #48]	@ (80077a8 <cleanup_stdio+0x34>)
 8007778:	4299      	cmp	r1, r3
 800777a:	b510      	push	{r4, lr}
 800777c:	4604      	mov	r4, r0
 800777e:	d001      	beq.n	8007784 <cleanup_stdio+0x10>
 8007780:	f003 f906 	bl	800a990 <_fflush_r>
 8007784:	68a1      	ldr	r1, [r4, #8]
 8007786:	4b09      	ldr	r3, [pc, #36]	@ (80077ac <cleanup_stdio+0x38>)
 8007788:	4299      	cmp	r1, r3
 800778a:	d002      	beq.n	8007792 <cleanup_stdio+0x1e>
 800778c:	4620      	mov	r0, r4
 800778e:	f003 f8ff 	bl	800a990 <_fflush_r>
 8007792:	68e1      	ldr	r1, [r4, #12]
 8007794:	4b06      	ldr	r3, [pc, #24]	@ (80077b0 <cleanup_stdio+0x3c>)
 8007796:	4299      	cmp	r1, r3
 8007798:	d004      	beq.n	80077a4 <cleanup_stdio+0x30>
 800779a:	4620      	mov	r0, r4
 800779c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a0:	f003 b8f6 	b.w	800a990 <_fflush_r>
 80077a4:	bd10      	pop	{r4, pc}
 80077a6:	bf00      	nop
 80077a8:	200003e4 	.word	0x200003e4
 80077ac:	2000044c 	.word	0x2000044c
 80077b0:	200004b4 	.word	0x200004b4

080077b4 <global_stdio_init.part.0>:
 80077b4:	b510      	push	{r4, lr}
 80077b6:	4b0b      	ldr	r3, [pc, #44]	@ (80077e4 <global_stdio_init.part.0+0x30>)
 80077b8:	4c0b      	ldr	r4, [pc, #44]	@ (80077e8 <global_stdio_init.part.0+0x34>)
 80077ba:	4a0c      	ldr	r2, [pc, #48]	@ (80077ec <global_stdio_init.part.0+0x38>)
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	4620      	mov	r0, r4
 80077c0:	2200      	movs	r2, #0
 80077c2:	2104      	movs	r1, #4
 80077c4:	f7ff ff94 	bl	80076f0 <std>
 80077c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077cc:	2201      	movs	r2, #1
 80077ce:	2109      	movs	r1, #9
 80077d0:	f7ff ff8e 	bl	80076f0 <std>
 80077d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077d8:	2202      	movs	r2, #2
 80077da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077de:	2112      	movs	r1, #18
 80077e0:	f7ff bf86 	b.w	80076f0 <std>
 80077e4:	2000051c 	.word	0x2000051c
 80077e8:	200003e4 	.word	0x200003e4
 80077ec:	0800775d 	.word	0x0800775d

080077f0 <__sfp_lock_acquire>:
 80077f0:	4801      	ldr	r0, [pc, #4]	@ (80077f8 <__sfp_lock_acquire+0x8>)
 80077f2:	f000 b94c 	b.w	8007a8e <__retarget_lock_acquire_recursive>
 80077f6:	bf00      	nop
 80077f8:	20000525 	.word	0x20000525

080077fc <__sfp_lock_release>:
 80077fc:	4801      	ldr	r0, [pc, #4]	@ (8007804 <__sfp_lock_release+0x8>)
 80077fe:	f000 b947 	b.w	8007a90 <__retarget_lock_release_recursive>
 8007802:	bf00      	nop
 8007804:	20000525 	.word	0x20000525

08007808 <__sinit>:
 8007808:	b510      	push	{r4, lr}
 800780a:	4604      	mov	r4, r0
 800780c:	f7ff fff0 	bl	80077f0 <__sfp_lock_acquire>
 8007810:	6a23      	ldr	r3, [r4, #32]
 8007812:	b11b      	cbz	r3, 800781c <__sinit+0x14>
 8007814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007818:	f7ff bff0 	b.w	80077fc <__sfp_lock_release>
 800781c:	4b04      	ldr	r3, [pc, #16]	@ (8007830 <__sinit+0x28>)
 800781e:	6223      	str	r3, [r4, #32]
 8007820:	4b04      	ldr	r3, [pc, #16]	@ (8007834 <__sinit+0x2c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1f5      	bne.n	8007814 <__sinit+0xc>
 8007828:	f7ff ffc4 	bl	80077b4 <global_stdio_init.part.0>
 800782c:	e7f2      	b.n	8007814 <__sinit+0xc>
 800782e:	bf00      	nop
 8007830:	08007775 	.word	0x08007775
 8007834:	2000051c 	.word	0x2000051c

08007838 <_fwalk_sglue>:
 8007838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800783c:	4607      	mov	r7, r0
 800783e:	4688      	mov	r8, r1
 8007840:	4614      	mov	r4, r2
 8007842:	2600      	movs	r6, #0
 8007844:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007848:	f1b9 0901 	subs.w	r9, r9, #1
 800784c:	d505      	bpl.n	800785a <_fwalk_sglue+0x22>
 800784e:	6824      	ldr	r4, [r4, #0]
 8007850:	2c00      	cmp	r4, #0
 8007852:	d1f7      	bne.n	8007844 <_fwalk_sglue+0xc>
 8007854:	4630      	mov	r0, r6
 8007856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800785a:	89ab      	ldrh	r3, [r5, #12]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d907      	bls.n	8007870 <_fwalk_sglue+0x38>
 8007860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007864:	3301      	adds	r3, #1
 8007866:	d003      	beq.n	8007870 <_fwalk_sglue+0x38>
 8007868:	4629      	mov	r1, r5
 800786a:	4638      	mov	r0, r7
 800786c:	47c0      	blx	r8
 800786e:	4306      	orrs	r6, r0
 8007870:	3568      	adds	r5, #104	@ 0x68
 8007872:	e7e9      	b.n	8007848 <_fwalk_sglue+0x10>

08007874 <siprintf>:
 8007874:	b40e      	push	{r1, r2, r3}
 8007876:	b500      	push	{lr}
 8007878:	b09c      	sub	sp, #112	@ 0x70
 800787a:	ab1d      	add	r3, sp, #116	@ 0x74
 800787c:	9002      	str	r0, [sp, #8]
 800787e:	9006      	str	r0, [sp, #24]
 8007880:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007884:	4809      	ldr	r0, [pc, #36]	@ (80078ac <siprintf+0x38>)
 8007886:	9107      	str	r1, [sp, #28]
 8007888:	9104      	str	r1, [sp, #16]
 800788a:	4909      	ldr	r1, [pc, #36]	@ (80078b0 <siprintf+0x3c>)
 800788c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007890:	9105      	str	r1, [sp, #20]
 8007892:	6800      	ldr	r0, [r0, #0]
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	a902      	add	r1, sp, #8
 8007898:	f002 fbe0 	bl	800a05c <_svfiprintf_r>
 800789c:	9b02      	ldr	r3, [sp, #8]
 800789e:	2200      	movs	r2, #0
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	b01c      	add	sp, #112	@ 0x70
 80078a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078a8:	b003      	add	sp, #12
 80078aa:	4770      	bx	lr
 80078ac:	20000028 	.word	0x20000028
 80078b0:	ffff0208 	.word	0xffff0208

080078b4 <siscanf>:
 80078b4:	b40e      	push	{r1, r2, r3}
 80078b6:	b530      	push	{r4, r5, lr}
 80078b8:	b09c      	sub	sp, #112	@ 0x70
 80078ba:	ac1f      	add	r4, sp, #124	@ 0x7c
 80078bc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80078c0:	f854 5b04 	ldr.w	r5, [r4], #4
 80078c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80078c8:	9002      	str	r0, [sp, #8]
 80078ca:	9006      	str	r0, [sp, #24]
 80078cc:	f7f8 fcf0 	bl	80002b0 <strlen>
 80078d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007900 <siscanf+0x4c>)
 80078d2:	9003      	str	r0, [sp, #12]
 80078d4:	9007      	str	r0, [sp, #28]
 80078d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078d8:	480a      	ldr	r0, [pc, #40]	@ (8007904 <siscanf+0x50>)
 80078da:	9401      	str	r4, [sp, #4]
 80078dc:	2300      	movs	r3, #0
 80078de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078e0:	9314      	str	r3, [sp, #80]	@ 0x50
 80078e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80078e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078ea:	462a      	mov	r2, r5
 80078ec:	4623      	mov	r3, r4
 80078ee:	a902      	add	r1, sp, #8
 80078f0:	6800      	ldr	r0, [r0, #0]
 80078f2:	f002 fd07 	bl	800a304 <__ssvfiscanf_r>
 80078f6:	b01c      	add	sp, #112	@ 0x70
 80078f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078fc:	b003      	add	sp, #12
 80078fe:	4770      	bx	lr
 8007900:	0800792b 	.word	0x0800792b
 8007904:	20000028 	.word	0x20000028

08007908 <__sread>:
 8007908:	b510      	push	{r4, lr}
 800790a:	460c      	mov	r4, r1
 800790c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007910:	f000 f86e 	bl	80079f0 <_read_r>
 8007914:	2800      	cmp	r0, #0
 8007916:	bfab      	itete	ge
 8007918:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800791a:	89a3      	ldrhlt	r3, [r4, #12]
 800791c:	181b      	addge	r3, r3, r0
 800791e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007922:	bfac      	ite	ge
 8007924:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007926:	81a3      	strhlt	r3, [r4, #12]
 8007928:	bd10      	pop	{r4, pc}

0800792a <__seofread>:
 800792a:	2000      	movs	r0, #0
 800792c:	4770      	bx	lr

0800792e <__swrite>:
 800792e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007932:	461f      	mov	r7, r3
 8007934:	898b      	ldrh	r3, [r1, #12]
 8007936:	05db      	lsls	r3, r3, #23
 8007938:	4605      	mov	r5, r0
 800793a:	460c      	mov	r4, r1
 800793c:	4616      	mov	r6, r2
 800793e:	d505      	bpl.n	800794c <__swrite+0x1e>
 8007940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007944:	2302      	movs	r3, #2
 8007946:	2200      	movs	r2, #0
 8007948:	f000 f840 	bl	80079cc <_lseek_r>
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007952:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007956:	81a3      	strh	r3, [r4, #12]
 8007958:	4632      	mov	r2, r6
 800795a:	463b      	mov	r3, r7
 800795c:	4628      	mov	r0, r5
 800795e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007962:	f000 b857 	b.w	8007a14 <_write_r>

08007966 <__sseek>:
 8007966:	b510      	push	{r4, lr}
 8007968:	460c      	mov	r4, r1
 800796a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796e:	f000 f82d 	bl	80079cc <_lseek_r>
 8007972:	1c43      	adds	r3, r0, #1
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	bf15      	itete	ne
 8007978:	6560      	strne	r0, [r4, #84]	@ 0x54
 800797a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800797e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007982:	81a3      	strheq	r3, [r4, #12]
 8007984:	bf18      	it	ne
 8007986:	81a3      	strhne	r3, [r4, #12]
 8007988:	bd10      	pop	{r4, pc}

0800798a <__sclose>:
 800798a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798e:	f000 b80d 	b.w	80079ac <_close_r>

08007992 <memset>:
 8007992:	4402      	add	r2, r0
 8007994:	4603      	mov	r3, r0
 8007996:	4293      	cmp	r3, r2
 8007998:	d100      	bne.n	800799c <memset+0xa>
 800799a:	4770      	bx	lr
 800799c:	f803 1b01 	strb.w	r1, [r3], #1
 80079a0:	e7f9      	b.n	8007996 <memset+0x4>
	...

080079a4 <_localeconv_r>:
 80079a4:	4800      	ldr	r0, [pc, #0]	@ (80079a8 <_localeconv_r+0x4>)
 80079a6:	4770      	bx	lr
 80079a8:	20000168 	.word	0x20000168

080079ac <_close_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4d06      	ldr	r5, [pc, #24]	@ (80079c8 <_close_r+0x1c>)
 80079b0:	2300      	movs	r3, #0
 80079b2:	4604      	mov	r4, r0
 80079b4:	4608      	mov	r0, r1
 80079b6:	602b      	str	r3, [r5, #0]
 80079b8:	f7fe ff8a 	bl	80068d0 <_close>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d102      	bne.n	80079c6 <_close_r+0x1a>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	b103      	cbz	r3, 80079c6 <_close_r+0x1a>
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
 80079c8:	20000520 	.word	0x20000520

080079cc <_lseek_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	4d07      	ldr	r5, [pc, #28]	@ (80079ec <_lseek_r+0x20>)
 80079d0:	4604      	mov	r4, r0
 80079d2:	4608      	mov	r0, r1
 80079d4:	4611      	mov	r1, r2
 80079d6:	2200      	movs	r2, #0
 80079d8:	602a      	str	r2, [r5, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	f7fe ff9f 	bl	800691e <_lseek>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d102      	bne.n	80079ea <_lseek_r+0x1e>
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	b103      	cbz	r3, 80079ea <_lseek_r+0x1e>
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	bd38      	pop	{r3, r4, r5, pc}
 80079ec:	20000520 	.word	0x20000520

080079f0 <_read_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	4d07      	ldr	r5, [pc, #28]	@ (8007a10 <_read_r+0x20>)
 80079f4:	4604      	mov	r4, r0
 80079f6:	4608      	mov	r0, r1
 80079f8:	4611      	mov	r1, r2
 80079fa:	2200      	movs	r2, #0
 80079fc:	602a      	str	r2, [r5, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	f7fe ff2d 	bl	800685e <_read>
 8007a04:	1c43      	adds	r3, r0, #1
 8007a06:	d102      	bne.n	8007a0e <_read_r+0x1e>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	b103      	cbz	r3, 8007a0e <_read_r+0x1e>
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	bd38      	pop	{r3, r4, r5, pc}
 8007a10:	20000520 	.word	0x20000520

08007a14 <_write_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	4d07      	ldr	r5, [pc, #28]	@ (8007a34 <_write_r+0x20>)
 8007a18:	4604      	mov	r4, r0
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	2200      	movs	r2, #0
 8007a20:	602a      	str	r2, [r5, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f7fe ff38 	bl	8006898 <_write>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d102      	bne.n	8007a32 <_write_r+0x1e>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	b103      	cbz	r3, 8007a32 <_write_r+0x1e>
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	20000520 	.word	0x20000520

08007a38 <__errno>:
 8007a38:	4b01      	ldr	r3, [pc, #4]	@ (8007a40 <__errno+0x8>)
 8007a3a:	6818      	ldr	r0, [r3, #0]
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	20000028 	.word	0x20000028

08007a44 <__libc_init_array>:
 8007a44:	b570      	push	{r4, r5, r6, lr}
 8007a46:	4d0d      	ldr	r5, [pc, #52]	@ (8007a7c <__libc_init_array+0x38>)
 8007a48:	4c0d      	ldr	r4, [pc, #52]	@ (8007a80 <__libc_init_array+0x3c>)
 8007a4a:	1b64      	subs	r4, r4, r5
 8007a4c:	10a4      	asrs	r4, r4, #2
 8007a4e:	2600      	movs	r6, #0
 8007a50:	42a6      	cmp	r6, r4
 8007a52:	d109      	bne.n	8007a68 <__libc_init_array+0x24>
 8007a54:	4d0b      	ldr	r5, [pc, #44]	@ (8007a84 <__libc_init_array+0x40>)
 8007a56:	4c0c      	ldr	r4, [pc, #48]	@ (8007a88 <__libc_init_array+0x44>)
 8007a58:	f003 ff72 	bl	800b940 <_init>
 8007a5c:	1b64      	subs	r4, r4, r5
 8007a5e:	10a4      	asrs	r4, r4, #2
 8007a60:	2600      	movs	r6, #0
 8007a62:	42a6      	cmp	r6, r4
 8007a64:	d105      	bne.n	8007a72 <__libc_init_array+0x2e>
 8007a66:	bd70      	pop	{r4, r5, r6, pc}
 8007a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a6c:	4798      	blx	r3
 8007a6e:	3601      	adds	r6, #1
 8007a70:	e7ee      	b.n	8007a50 <__libc_init_array+0xc>
 8007a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a76:	4798      	blx	r3
 8007a78:	3601      	adds	r6, #1
 8007a7a:	e7f2      	b.n	8007a62 <__libc_init_array+0x1e>
 8007a7c:	0800be1c 	.word	0x0800be1c
 8007a80:	0800be1c 	.word	0x0800be1c
 8007a84:	0800be1c 	.word	0x0800be1c
 8007a88:	0800be20 	.word	0x0800be20

08007a8c <__retarget_lock_init_recursive>:
 8007a8c:	4770      	bx	lr

08007a8e <__retarget_lock_acquire_recursive>:
 8007a8e:	4770      	bx	lr

08007a90 <__retarget_lock_release_recursive>:
 8007a90:	4770      	bx	lr
	...

08007a94 <nanf>:
 8007a94:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007a9c <nanf+0x8>
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	7fc00000 	.word	0x7fc00000

08007aa0 <quorem>:
 8007aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	6903      	ldr	r3, [r0, #16]
 8007aa6:	690c      	ldr	r4, [r1, #16]
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	4607      	mov	r7, r0
 8007aac:	db7e      	blt.n	8007bac <quorem+0x10c>
 8007aae:	3c01      	subs	r4, #1
 8007ab0:	f101 0814 	add.w	r8, r1, #20
 8007ab4:	00a3      	lsls	r3, r4, #2
 8007ab6:	f100 0514 	add.w	r5, r0, #20
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ac0:	9301      	str	r3, [sp, #4]
 8007ac2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ac6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aca:	3301      	adds	r3, #1
 8007acc:	429a      	cmp	r2, r3
 8007ace:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ad2:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ad6:	d32e      	bcc.n	8007b36 <quorem+0x96>
 8007ad8:	f04f 0a00 	mov.w	sl, #0
 8007adc:	46c4      	mov	ip, r8
 8007ade:	46ae      	mov	lr, r5
 8007ae0:	46d3      	mov	fp, sl
 8007ae2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ae6:	b298      	uxth	r0, r3
 8007ae8:	fb06 a000 	mla	r0, r6, r0, sl
 8007aec:	0c02      	lsrs	r2, r0, #16
 8007aee:	0c1b      	lsrs	r3, r3, #16
 8007af0:	fb06 2303 	mla	r3, r6, r3, r2
 8007af4:	f8de 2000 	ldr.w	r2, [lr]
 8007af8:	b280      	uxth	r0, r0
 8007afa:	b292      	uxth	r2, r2
 8007afc:	1a12      	subs	r2, r2, r0
 8007afe:	445a      	add	r2, fp
 8007b00:	f8de 0000 	ldr.w	r0, [lr]
 8007b04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007b0e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007b12:	b292      	uxth	r2, r2
 8007b14:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b18:	45e1      	cmp	r9, ip
 8007b1a:	f84e 2b04 	str.w	r2, [lr], #4
 8007b1e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007b22:	d2de      	bcs.n	8007ae2 <quorem+0x42>
 8007b24:	9b00      	ldr	r3, [sp, #0]
 8007b26:	58eb      	ldr	r3, [r5, r3]
 8007b28:	b92b      	cbnz	r3, 8007b36 <quorem+0x96>
 8007b2a:	9b01      	ldr	r3, [sp, #4]
 8007b2c:	3b04      	subs	r3, #4
 8007b2e:	429d      	cmp	r5, r3
 8007b30:	461a      	mov	r2, r3
 8007b32:	d32f      	bcc.n	8007b94 <quorem+0xf4>
 8007b34:	613c      	str	r4, [r7, #16]
 8007b36:	4638      	mov	r0, r7
 8007b38:	f001 f9c2 	bl	8008ec0 <__mcmp>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	db25      	blt.n	8007b8c <quorem+0xec>
 8007b40:	4629      	mov	r1, r5
 8007b42:	2000      	movs	r0, #0
 8007b44:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b48:	f8d1 c000 	ldr.w	ip, [r1]
 8007b4c:	fa1f fe82 	uxth.w	lr, r2
 8007b50:	fa1f f38c 	uxth.w	r3, ip
 8007b54:	eba3 030e 	sub.w	r3, r3, lr
 8007b58:	4403      	add	r3, r0
 8007b5a:	0c12      	lsrs	r2, r2, #16
 8007b5c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b60:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b6a:	45c1      	cmp	r9, r8
 8007b6c:	f841 3b04 	str.w	r3, [r1], #4
 8007b70:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b74:	d2e6      	bcs.n	8007b44 <quorem+0xa4>
 8007b76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b7e:	b922      	cbnz	r2, 8007b8a <quorem+0xea>
 8007b80:	3b04      	subs	r3, #4
 8007b82:	429d      	cmp	r5, r3
 8007b84:	461a      	mov	r2, r3
 8007b86:	d30b      	bcc.n	8007ba0 <quorem+0x100>
 8007b88:	613c      	str	r4, [r7, #16]
 8007b8a:	3601      	adds	r6, #1
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	b003      	add	sp, #12
 8007b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b94:	6812      	ldr	r2, [r2, #0]
 8007b96:	3b04      	subs	r3, #4
 8007b98:	2a00      	cmp	r2, #0
 8007b9a:	d1cb      	bne.n	8007b34 <quorem+0x94>
 8007b9c:	3c01      	subs	r4, #1
 8007b9e:	e7c6      	b.n	8007b2e <quorem+0x8e>
 8007ba0:	6812      	ldr	r2, [r2, #0]
 8007ba2:	3b04      	subs	r3, #4
 8007ba4:	2a00      	cmp	r2, #0
 8007ba6:	d1ef      	bne.n	8007b88 <quorem+0xe8>
 8007ba8:	3c01      	subs	r4, #1
 8007baa:	e7ea      	b.n	8007b82 <quorem+0xe2>
 8007bac:	2000      	movs	r0, #0
 8007bae:	e7ee      	b.n	8007b8e <quorem+0xee>

08007bb0 <_dtoa_r>:
 8007bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	69c7      	ldr	r7, [r0, #28]
 8007bb6:	b099      	sub	sp, #100	@ 0x64
 8007bb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007bbc:	ec55 4b10 	vmov	r4, r5, d0
 8007bc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007bc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8007bc4:	4683      	mov	fp, r0
 8007bc6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bca:	b97f      	cbnz	r7, 8007bec <_dtoa_r+0x3c>
 8007bcc:	2010      	movs	r0, #16
 8007bce:	f000 fdfd 	bl	80087cc <malloc>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007bd8:	b920      	cbnz	r0, 8007be4 <_dtoa_r+0x34>
 8007bda:	4ba7      	ldr	r3, [pc, #668]	@ (8007e78 <_dtoa_r+0x2c8>)
 8007bdc:	21ef      	movs	r1, #239	@ 0xef
 8007bde:	48a7      	ldr	r0, [pc, #668]	@ (8007e7c <_dtoa_r+0x2cc>)
 8007be0:	f002 ffc6 	bl	800ab70 <__assert_func>
 8007be4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007be8:	6007      	str	r7, [r0, #0]
 8007bea:	60c7      	str	r7, [r0, #12]
 8007bec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007bf0:	6819      	ldr	r1, [r3, #0]
 8007bf2:	b159      	cbz	r1, 8007c0c <_dtoa_r+0x5c>
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	604a      	str	r2, [r1, #4]
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	4093      	lsls	r3, r2
 8007bfc:	608b      	str	r3, [r1, #8]
 8007bfe:	4658      	mov	r0, fp
 8007c00:	f000 feda 	bl	80089b8 <_Bfree>
 8007c04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	1e2b      	subs	r3, r5, #0
 8007c0e:	bfb9      	ittee	lt
 8007c10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007c14:	9303      	strlt	r3, [sp, #12]
 8007c16:	2300      	movge	r3, #0
 8007c18:	6033      	strge	r3, [r6, #0]
 8007c1a:	9f03      	ldr	r7, [sp, #12]
 8007c1c:	4b98      	ldr	r3, [pc, #608]	@ (8007e80 <_dtoa_r+0x2d0>)
 8007c1e:	bfbc      	itt	lt
 8007c20:	2201      	movlt	r2, #1
 8007c22:	6032      	strlt	r2, [r6, #0]
 8007c24:	43bb      	bics	r3, r7
 8007c26:	d112      	bne.n	8007c4e <_dtoa_r+0x9e>
 8007c28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c34:	4323      	orrs	r3, r4
 8007c36:	f000 854d 	beq.w	80086d4 <_dtoa_r+0xb24>
 8007c3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007e94 <_dtoa_r+0x2e4>
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 854f 	beq.w	80086e4 <_dtoa_r+0xb34>
 8007c46:	f10a 0303 	add.w	r3, sl, #3
 8007c4a:	f000 bd49 	b.w	80086e0 <_dtoa_r+0xb30>
 8007c4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c52:	2200      	movs	r2, #0
 8007c54:	ec51 0b17 	vmov	r0, r1, d7
 8007c58:	2300      	movs	r3, #0
 8007c5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007c5e:	f7f8 ff53 	bl	8000b08 <__aeabi_dcmpeq>
 8007c62:	4680      	mov	r8, r0
 8007c64:	b158      	cbz	r0, 8007c7e <_dtoa_r+0xce>
 8007c66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c68:	2301      	movs	r3, #1
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c6e:	b113      	cbz	r3, 8007c76 <_dtoa_r+0xc6>
 8007c70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c72:	4b84      	ldr	r3, [pc, #528]	@ (8007e84 <_dtoa_r+0x2d4>)
 8007c74:	6013      	str	r3, [r2, #0]
 8007c76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007e98 <_dtoa_r+0x2e8>
 8007c7a:	f000 bd33 	b.w	80086e4 <_dtoa_r+0xb34>
 8007c7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007c82:	aa16      	add	r2, sp, #88	@ 0x58
 8007c84:	a917      	add	r1, sp, #92	@ 0x5c
 8007c86:	4658      	mov	r0, fp
 8007c88:	f001 fa3a 	bl	8009100 <__d2b>
 8007c8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007c90:	4681      	mov	r9, r0
 8007c92:	2e00      	cmp	r6, #0
 8007c94:	d077      	beq.n	8007d86 <_dtoa_r+0x1d6>
 8007c96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ca0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ca4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ca8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007cac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	4b74      	ldr	r3, [pc, #464]	@ (8007e88 <_dtoa_r+0x2d8>)
 8007cb6:	f7f8 fb07 	bl	80002c8 <__aeabi_dsub>
 8007cba:	a369      	add	r3, pc, #420	@ (adr r3, 8007e60 <_dtoa_r+0x2b0>)
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f7f8 fcba 	bl	8000638 <__aeabi_dmul>
 8007cc4:	a368      	add	r3, pc, #416	@ (adr r3, 8007e68 <_dtoa_r+0x2b8>)
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	f7f8 faff 	bl	80002cc <__adddf3>
 8007cce:	4604      	mov	r4, r0
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	460d      	mov	r5, r1
 8007cd4:	f7f8 fc46 	bl	8000564 <__aeabi_i2d>
 8007cd8:	a365      	add	r3, pc, #404	@ (adr r3, 8007e70 <_dtoa_r+0x2c0>)
 8007cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cde:	f7f8 fcab 	bl	8000638 <__aeabi_dmul>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	4629      	mov	r1, r5
 8007cea:	f7f8 faef 	bl	80002cc <__adddf3>
 8007cee:	4604      	mov	r4, r0
 8007cf0:	460d      	mov	r5, r1
 8007cf2:	f7f8 ff51 	bl	8000b98 <__aeabi_d2iz>
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	4607      	mov	r7, r0
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	4629      	mov	r1, r5
 8007d00:	f7f8 ff0c 	bl	8000b1c <__aeabi_dcmplt>
 8007d04:	b140      	cbz	r0, 8007d18 <_dtoa_r+0x168>
 8007d06:	4638      	mov	r0, r7
 8007d08:	f7f8 fc2c 	bl	8000564 <__aeabi_i2d>
 8007d0c:	4622      	mov	r2, r4
 8007d0e:	462b      	mov	r3, r5
 8007d10:	f7f8 fefa 	bl	8000b08 <__aeabi_dcmpeq>
 8007d14:	b900      	cbnz	r0, 8007d18 <_dtoa_r+0x168>
 8007d16:	3f01      	subs	r7, #1
 8007d18:	2f16      	cmp	r7, #22
 8007d1a:	d851      	bhi.n	8007dc0 <_dtoa_r+0x210>
 8007d1c:	4b5b      	ldr	r3, [pc, #364]	@ (8007e8c <_dtoa_r+0x2dc>)
 8007d1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d2a:	f7f8 fef7 	bl	8000b1c <__aeabi_dcmplt>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	d048      	beq.n	8007dc4 <_dtoa_r+0x214>
 8007d32:	3f01      	subs	r7, #1
 8007d34:	2300      	movs	r3, #0
 8007d36:	9312      	str	r3, [sp, #72]	@ 0x48
 8007d38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007d3a:	1b9b      	subs	r3, r3, r6
 8007d3c:	1e5a      	subs	r2, r3, #1
 8007d3e:	bf44      	itt	mi
 8007d40:	f1c3 0801 	rsbmi	r8, r3, #1
 8007d44:	2300      	movmi	r3, #0
 8007d46:	9208      	str	r2, [sp, #32]
 8007d48:	bf54      	ite	pl
 8007d4a:	f04f 0800 	movpl.w	r8, #0
 8007d4e:	9308      	strmi	r3, [sp, #32]
 8007d50:	2f00      	cmp	r7, #0
 8007d52:	db39      	blt.n	8007dc8 <_dtoa_r+0x218>
 8007d54:	9b08      	ldr	r3, [sp, #32]
 8007d56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007d58:	443b      	add	r3, r7
 8007d5a:	9308      	str	r3, [sp, #32]
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d62:	2b09      	cmp	r3, #9
 8007d64:	d864      	bhi.n	8007e30 <_dtoa_r+0x280>
 8007d66:	2b05      	cmp	r3, #5
 8007d68:	bfc4      	itt	gt
 8007d6a:	3b04      	subgt	r3, #4
 8007d6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d70:	f1a3 0302 	sub.w	r3, r3, #2
 8007d74:	bfcc      	ite	gt
 8007d76:	2400      	movgt	r4, #0
 8007d78:	2401      	movle	r4, #1
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d863      	bhi.n	8007e46 <_dtoa_r+0x296>
 8007d7e:	e8df f003 	tbb	[pc, r3]
 8007d82:	372a      	.short	0x372a
 8007d84:	5535      	.short	0x5535
 8007d86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007d8a:	441e      	add	r6, r3
 8007d8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d90:	2b20      	cmp	r3, #32
 8007d92:	bfc1      	itttt	gt
 8007d94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007d98:	409f      	lslgt	r7, r3
 8007d9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007d9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007da2:	bfd6      	itet	le
 8007da4:	f1c3 0320 	rsble	r3, r3, #32
 8007da8:	ea47 0003 	orrgt.w	r0, r7, r3
 8007dac:	fa04 f003 	lslle.w	r0, r4, r3
 8007db0:	f7f8 fbc8 	bl	8000544 <__aeabi_ui2d>
 8007db4:	2201      	movs	r2, #1
 8007db6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007dba:	3e01      	subs	r6, #1
 8007dbc:	9214      	str	r2, [sp, #80]	@ 0x50
 8007dbe:	e777      	b.n	8007cb0 <_dtoa_r+0x100>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e7b8      	b.n	8007d36 <_dtoa_r+0x186>
 8007dc4:	9012      	str	r0, [sp, #72]	@ 0x48
 8007dc6:	e7b7      	b.n	8007d38 <_dtoa_r+0x188>
 8007dc8:	427b      	negs	r3, r7
 8007dca:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dcc:	2300      	movs	r3, #0
 8007dce:	eba8 0807 	sub.w	r8, r8, r7
 8007dd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007dd4:	e7c4      	b.n	8007d60 <_dtoa_r+0x1b0>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	dc35      	bgt.n	8007e4c <_dtoa_r+0x29c>
 8007de0:	2301      	movs	r3, #1
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	9307      	str	r3, [sp, #28]
 8007de6:	461a      	mov	r2, r3
 8007de8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007dea:	e00b      	b.n	8007e04 <_dtoa_r+0x254>
 8007dec:	2301      	movs	r3, #1
 8007dee:	e7f3      	b.n	8007dd8 <_dtoa_r+0x228>
 8007df0:	2300      	movs	r3, #0
 8007df2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007df4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007df6:	18fb      	adds	r3, r7, r3
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	9307      	str	r3, [sp, #28]
 8007e00:	bfb8      	it	lt
 8007e02:	2301      	movlt	r3, #1
 8007e04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007e08:	2100      	movs	r1, #0
 8007e0a:	2204      	movs	r2, #4
 8007e0c:	f102 0514 	add.w	r5, r2, #20
 8007e10:	429d      	cmp	r5, r3
 8007e12:	d91f      	bls.n	8007e54 <_dtoa_r+0x2a4>
 8007e14:	6041      	str	r1, [r0, #4]
 8007e16:	4658      	mov	r0, fp
 8007e18:	f000 fd8e 	bl	8008938 <_Balloc>
 8007e1c:	4682      	mov	sl, r0
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d13c      	bne.n	8007e9c <_dtoa_r+0x2ec>
 8007e22:	4b1b      	ldr	r3, [pc, #108]	@ (8007e90 <_dtoa_r+0x2e0>)
 8007e24:	4602      	mov	r2, r0
 8007e26:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e2a:	e6d8      	b.n	8007bde <_dtoa_r+0x2e>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e7e0      	b.n	8007df2 <_dtoa_r+0x242>
 8007e30:	2401      	movs	r4, #1
 8007e32:	2300      	movs	r3, #0
 8007e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007e38:	f04f 33ff 	mov.w	r3, #4294967295
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	9307      	str	r3, [sp, #28]
 8007e40:	2200      	movs	r2, #0
 8007e42:	2312      	movs	r3, #18
 8007e44:	e7d0      	b.n	8007de8 <_dtoa_r+0x238>
 8007e46:	2301      	movs	r3, #1
 8007e48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e4a:	e7f5      	b.n	8007e38 <_dtoa_r+0x288>
 8007e4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	9307      	str	r3, [sp, #28]
 8007e52:	e7d7      	b.n	8007e04 <_dtoa_r+0x254>
 8007e54:	3101      	adds	r1, #1
 8007e56:	0052      	lsls	r2, r2, #1
 8007e58:	e7d8      	b.n	8007e0c <_dtoa_r+0x25c>
 8007e5a:	bf00      	nop
 8007e5c:	f3af 8000 	nop.w
 8007e60:	636f4361 	.word	0x636f4361
 8007e64:	3fd287a7 	.word	0x3fd287a7
 8007e68:	8b60c8b3 	.word	0x8b60c8b3
 8007e6c:	3fc68a28 	.word	0x3fc68a28
 8007e70:	509f79fb 	.word	0x509f79fb
 8007e74:	3fd34413 	.word	0x3fd34413
 8007e78:	0800ba10 	.word	0x0800ba10
 8007e7c:	0800ba27 	.word	0x0800ba27
 8007e80:	7ff00000 	.word	0x7ff00000
 8007e84:	0800bd69 	.word	0x0800bd69
 8007e88:	3ff80000 	.word	0x3ff80000
 8007e8c:	0800bb20 	.word	0x0800bb20
 8007e90:	0800ba7f 	.word	0x0800ba7f
 8007e94:	0800ba0c 	.word	0x0800ba0c
 8007e98:	0800bd68 	.word	0x0800bd68
 8007e9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ea0:	6018      	str	r0, [r3, #0]
 8007ea2:	9b07      	ldr	r3, [sp, #28]
 8007ea4:	2b0e      	cmp	r3, #14
 8007ea6:	f200 80a4 	bhi.w	8007ff2 <_dtoa_r+0x442>
 8007eaa:	2c00      	cmp	r4, #0
 8007eac:	f000 80a1 	beq.w	8007ff2 <_dtoa_r+0x442>
 8007eb0:	2f00      	cmp	r7, #0
 8007eb2:	dd33      	ble.n	8007f1c <_dtoa_r+0x36c>
 8007eb4:	4bad      	ldr	r3, [pc, #692]	@ (800816c <_dtoa_r+0x5bc>)
 8007eb6:	f007 020f 	and.w	r2, r7, #15
 8007eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ebe:	ed93 7b00 	vldr	d7, [r3]
 8007ec2:	05f8      	lsls	r0, r7, #23
 8007ec4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007ec8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007ecc:	d516      	bpl.n	8007efc <_dtoa_r+0x34c>
 8007ece:	4ba8      	ldr	r3, [pc, #672]	@ (8008170 <_dtoa_r+0x5c0>)
 8007ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ed4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ed8:	f7f8 fcd8 	bl	800088c <__aeabi_ddiv>
 8007edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ee0:	f004 040f 	and.w	r4, r4, #15
 8007ee4:	2603      	movs	r6, #3
 8007ee6:	4da2      	ldr	r5, [pc, #648]	@ (8008170 <_dtoa_r+0x5c0>)
 8007ee8:	b954      	cbnz	r4, 8007f00 <_dtoa_r+0x350>
 8007eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ef2:	f7f8 fccb 	bl	800088c <__aeabi_ddiv>
 8007ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007efa:	e028      	b.n	8007f4e <_dtoa_r+0x39e>
 8007efc:	2602      	movs	r6, #2
 8007efe:	e7f2      	b.n	8007ee6 <_dtoa_r+0x336>
 8007f00:	07e1      	lsls	r1, r4, #31
 8007f02:	d508      	bpl.n	8007f16 <_dtoa_r+0x366>
 8007f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f0c:	f7f8 fb94 	bl	8000638 <__aeabi_dmul>
 8007f10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f14:	3601      	adds	r6, #1
 8007f16:	1064      	asrs	r4, r4, #1
 8007f18:	3508      	adds	r5, #8
 8007f1a:	e7e5      	b.n	8007ee8 <_dtoa_r+0x338>
 8007f1c:	f000 80d2 	beq.w	80080c4 <_dtoa_r+0x514>
 8007f20:	427c      	negs	r4, r7
 8007f22:	4b92      	ldr	r3, [pc, #584]	@ (800816c <_dtoa_r+0x5bc>)
 8007f24:	4d92      	ldr	r5, [pc, #584]	@ (8008170 <_dtoa_r+0x5c0>)
 8007f26:	f004 020f 	and.w	r2, r4, #15
 8007f2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f36:	f7f8 fb7f 	bl	8000638 <__aeabi_dmul>
 8007f3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f3e:	1124      	asrs	r4, r4, #4
 8007f40:	2300      	movs	r3, #0
 8007f42:	2602      	movs	r6, #2
 8007f44:	2c00      	cmp	r4, #0
 8007f46:	f040 80b2 	bne.w	80080ae <_dtoa_r+0x4fe>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1d3      	bne.n	8007ef6 <_dtoa_r+0x346>
 8007f4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 80b7 	beq.w	80080c8 <_dtoa_r+0x518>
 8007f5a:	4b86      	ldr	r3, [pc, #536]	@ (8008174 <_dtoa_r+0x5c4>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	4620      	mov	r0, r4
 8007f60:	4629      	mov	r1, r5
 8007f62:	f7f8 fddb 	bl	8000b1c <__aeabi_dcmplt>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	f000 80ae 	beq.w	80080c8 <_dtoa_r+0x518>
 8007f6c:	9b07      	ldr	r3, [sp, #28]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 80aa 	beq.w	80080c8 <_dtoa_r+0x518>
 8007f74:	9b00      	ldr	r3, [sp, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	dd37      	ble.n	8007fea <_dtoa_r+0x43a>
 8007f7a:	1e7b      	subs	r3, r7, #1
 8007f7c:	9304      	str	r3, [sp, #16]
 8007f7e:	4620      	mov	r0, r4
 8007f80:	4b7d      	ldr	r3, [pc, #500]	@ (8008178 <_dtoa_r+0x5c8>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	4629      	mov	r1, r5
 8007f86:	f7f8 fb57 	bl	8000638 <__aeabi_dmul>
 8007f8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f8e:	9c00      	ldr	r4, [sp, #0]
 8007f90:	3601      	adds	r6, #1
 8007f92:	4630      	mov	r0, r6
 8007f94:	f7f8 fae6 	bl	8000564 <__aeabi_i2d>
 8007f98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f9c:	f7f8 fb4c 	bl	8000638 <__aeabi_dmul>
 8007fa0:	4b76      	ldr	r3, [pc, #472]	@ (800817c <_dtoa_r+0x5cc>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f7f8 f992 	bl	80002cc <__adddf3>
 8007fa8:	4605      	mov	r5, r0
 8007faa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007fae:	2c00      	cmp	r4, #0
 8007fb0:	f040 808d 	bne.w	80080ce <_dtoa_r+0x51e>
 8007fb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fb8:	4b71      	ldr	r3, [pc, #452]	@ (8008180 <_dtoa_r+0x5d0>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f7f8 f984 	bl	80002c8 <__aeabi_dsub>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fc8:	462a      	mov	r2, r5
 8007fca:	4633      	mov	r3, r6
 8007fcc:	f7f8 fdc4 	bl	8000b58 <__aeabi_dcmpgt>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	f040 828b 	bne.w	80084ec <_dtoa_r+0x93c>
 8007fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fda:	462a      	mov	r2, r5
 8007fdc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007fe0:	f7f8 fd9c 	bl	8000b1c <__aeabi_dcmplt>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	f040 8128 	bne.w	800823a <_dtoa_r+0x68a>
 8007fea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007fee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007ff2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f2c0 815a 	blt.w	80082ae <_dtoa_r+0x6fe>
 8007ffa:	2f0e      	cmp	r7, #14
 8007ffc:	f300 8157 	bgt.w	80082ae <_dtoa_r+0x6fe>
 8008000:	4b5a      	ldr	r3, [pc, #360]	@ (800816c <_dtoa_r+0x5bc>)
 8008002:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008006:	ed93 7b00 	vldr	d7, [r3]
 800800a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800800c:	2b00      	cmp	r3, #0
 800800e:	ed8d 7b00 	vstr	d7, [sp]
 8008012:	da03      	bge.n	800801c <_dtoa_r+0x46c>
 8008014:	9b07      	ldr	r3, [sp, #28]
 8008016:	2b00      	cmp	r3, #0
 8008018:	f340 8101 	ble.w	800821e <_dtoa_r+0x66e>
 800801c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008020:	4656      	mov	r6, sl
 8008022:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008026:	4620      	mov	r0, r4
 8008028:	4629      	mov	r1, r5
 800802a:	f7f8 fc2f 	bl	800088c <__aeabi_ddiv>
 800802e:	f7f8 fdb3 	bl	8000b98 <__aeabi_d2iz>
 8008032:	4680      	mov	r8, r0
 8008034:	f7f8 fa96 	bl	8000564 <__aeabi_i2d>
 8008038:	e9dd 2300 	ldrd	r2, r3, [sp]
 800803c:	f7f8 fafc 	bl	8000638 <__aeabi_dmul>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	4620      	mov	r0, r4
 8008046:	4629      	mov	r1, r5
 8008048:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800804c:	f7f8 f93c 	bl	80002c8 <__aeabi_dsub>
 8008050:	f806 4b01 	strb.w	r4, [r6], #1
 8008054:	9d07      	ldr	r5, [sp, #28]
 8008056:	eba6 040a 	sub.w	r4, r6, sl
 800805a:	42a5      	cmp	r5, r4
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	f040 8117 	bne.w	8008292 <_dtoa_r+0x6e2>
 8008064:	f7f8 f932 	bl	80002cc <__adddf3>
 8008068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800806c:	4604      	mov	r4, r0
 800806e:	460d      	mov	r5, r1
 8008070:	f7f8 fd72 	bl	8000b58 <__aeabi_dcmpgt>
 8008074:	2800      	cmp	r0, #0
 8008076:	f040 80f9 	bne.w	800826c <_dtoa_r+0x6bc>
 800807a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800807e:	4620      	mov	r0, r4
 8008080:	4629      	mov	r1, r5
 8008082:	f7f8 fd41 	bl	8000b08 <__aeabi_dcmpeq>
 8008086:	b118      	cbz	r0, 8008090 <_dtoa_r+0x4e0>
 8008088:	f018 0f01 	tst.w	r8, #1
 800808c:	f040 80ee 	bne.w	800826c <_dtoa_r+0x6bc>
 8008090:	4649      	mov	r1, r9
 8008092:	4658      	mov	r0, fp
 8008094:	f000 fc90 	bl	80089b8 <_Bfree>
 8008098:	2300      	movs	r3, #0
 800809a:	7033      	strb	r3, [r6, #0]
 800809c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800809e:	3701      	adds	r7, #1
 80080a0:	601f      	str	r7, [r3, #0]
 80080a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 831d 	beq.w	80086e4 <_dtoa_r+0xb34>
 80080aa:	601e      	str	r6, [r3, #0]
 80080ac:	e31a      	b.n	80086e4 <_dtoa_r+0xb34>
 80080ae:	07e2      	lsls	r2, r4, #31
 80080b0:	d505      	bpl.n	80080be <_dtoa_r+0x50e>
 80080b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080b6:	f7f8 fabf 	bl	8000638 <__aeabi_dmul>
 80080ba:	3601      	adds	r6, #1
 80080bc:	2301      	movs	r3, #1
 80080be:	1064      	asrs	r4, r4, #1
 80080c0:	3508      	adds	r5, #8
 80080c2:	e73f      	b.n	8007f44 <_dtoa_r+0x394>
 80080c4:	2602      	movs	r6, #2
 80080c6:	e742      	b.n	8007f4e <_dtoa_r+0x39e>
 80080c8:	9c07      	ldr	r4, [sp, #28]
 80080ca:	9704      	str	r7, [sp, #16]
 80080cc:	e761      	b.n	8007f92 <_dtoa_r+0x3e2>
 80080ce:	4b27      	ldr	r3, [pc, #156]	@ (800816c <_dtoa_r+0x5bc>)
 80080d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080da:	4454      	add	r4, sl
 80080dc:	2900      	cmp	r1, #0
 80080de:	d053      	beq.n	8008188 <_dtoa_r+0x5d8>
 80080e0:	4928      	ldr	r1, [pc, #160]	@ (8008184 <_dtoa_r+0x5d4>)
 80080e2:	2000      	movs	r0, #0
 80080e4:	f7f8 fbd2 	bl	800088c <__aeabi_ddiv>
 80080e8:	4633      	mov	r3, r6
 80080ea:	462a      	mov	r2, r5
 80080ec:	f7f8 f8ec 	bl	80002c8 <__aeabi_dsub>
 80080f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080f4:	4656      	mov	r6, sl
 80080f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080fa:	f7f8 fd4d 	bl	8000b98 <__aeabi_d2iz>
 80080fe:	4605      	mov	r5, r0
 8008100:	f7f8 fa30 	bl	8000564 <__aeabi_i2d>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800810c:	f7f8 f8dc 	bl	80002c8 <__aeabi_dsub>
 8008110:	3530      	adds	r5, #48	@ 0x30
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800811a:	f806 5b01 	strb.w	r5, [r6], #1
 800811e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008122:	f7f8 fcfb 	bl	8000b1c <__aeabi_dcmplt>
 8008126:	2800      	cmp	r0, #0
 8008128:	d171      	bne.n	800820e <_dtoa_r+0x65e>
 800812a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800812e:	4911      	ldr	r1, [pc, #68]	@ (8008174 <_dtoa_r+0x5c4>)
 8008130:	2000      	movs	r0, #0
 8008132:	f7f8 f8c9 	bl	80002c8 <__aeabi_dsub>
 8008136:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800813a:	f7f8 fcef 	bl	8000b1c <__aeabi_dcmplt>
 800813e:	2800      	cmp	r0, #0
 8008140:	f040 8095 	bne.w	800826e <_dtoa_r+0x6be>
 8008144:	42a6      	cmp	r6, r4
 8008146:	f43f af50 	beq.w	8007fea <_dtoa_r+0x43a>
 800814a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800814e:	4b0a      	ldr	r3, [pc, #40]	@ (8008178 <_dtoa_r+0x5c8>)
 8008150:	2200      	movs	r2, #0
 8008152:	f7f8 fa71 	bl	8000638 <__aeabi_dmul>
 8008156:	4b08      	ldr	r3, [pc, #32]	@ (8008178 <_dtoa_r+0x5c8>)
 8008158:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800815c:	2200      	movs	r2, #0
 800815e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008162:	f7f8 fa69 	bl	8000638 <__aeabi_dmul>
 8008166:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800816a:	e7c4      	b.n	80080f6 <_dtoa_r+0x546>
 800816c:	0800bb20 	.word	0x0800bb20
 8008170:	0800baf8 	.word	0x0800baf8
 8008174:	3ff00000 	.word	0x3ff00000
 8008178:	40240000 	.word	0x40240000
 800817c:	401c0000 	.word	0x401c0000
 8008180:	40140000 	.word	0x40140000
 8008184:	3fe00000 	.word	0x3fe00000
 8008188:	4631      	mov	r1, r6
 800818a:	4628      	mov	r0, r5
 800818c:	f7f8 fa54 	bl	8000638 <__aeabi_dmul>
 8008190:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008194:	9415      	str	r4, [sp, #84]	@ 0x54
 8008196:	4656      	mov	r6, sl
 8008198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800819c:	f7f8 fcfc 	bl	8000b98 <__aeabi_d2iz>
 80081a0:	4605      	mov	r5, r0
 80081a2:	f7f8 f9df 	bl	8000564 <__aeabi_i2d>
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ae:	f7f8 f88b 	bl	80002c8 <__aeabi_dsub>
 80081b2:	3530      	adds	r5, #48	@ 0x30
 80081b4:	f806 5b01 	strb.w	r5, [r6], #1
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	42a6      	cmp	r6, r4
 80081be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081c2:	f04f 0200 	mov.w	r2, #0
 80081c6:	d124      	bne.n	8008212 <_dtoa_r+0x662>
 80081c8:	4bac      	ldr	r3, [pc, #688]	@ (800847c <_dtoa_r+0x8cc>)
 80081ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80081ce:	f7f8 f87d 	bl	80002cc <__adddf3>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081da:	f7f8 fcbd 	bl	8000b58 <__aeabi_dcmpgt>
 80081de:	2800      	cmp	r0, #0
 80081e0:	d145      	bne.n	800826e <_dtoa_r+0x6be>
 80081e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081e6:	49a5      	ldr	r1, [pc, #660]	@ (800847c <_dtoa_r+0x8cc>)
 80081e8:	2000      	movs	r0, #0
 80081ea:	f7f8 f86d 	bl	80002c8 <__aeabi_dsub>
 80081ee:	4602      	mov	r2, r0
 80081f0:	460b      	mov	r3, r1
 80081f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081f6:	f7f8 fc91 	bl	8000b1c <__aeabi_dcmplt>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	f43f aef5 	beq.w	8007fea <_dtoa_r+0x43a>
 8008200:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008202:	1e73      	subs	r3, r6, #1
 8008204:	9315      	str	r3, [sp, #84]	@ 0x54
 8008206:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800820a:	2b30      	cmp	r3, #48	@ 0x30
 800820c:	d0f8      	beq.n	8008200 <_dtoa_r+0x650>
 800820e:	9f04      	ldr	r7, [sp, #16]
 8008210:	e73e      	b.n	8008090 <_dtoa_r+0x4e0>
 8008212:	4b9b      	ldr	r3, [pc, #620]	@ (8008480 <_dtoa_r+0x8d0>)
 8008214:	f7f8 fa10 	bl	8000638 <__aeabi_dmul>
 8008218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800821c:	e7bc      	b.n	8008198 <_dtoa_r+0x5e8>
 800821e:	d10c      	bne.n	800823a <_dtoa_r+0x68a>
 8008220:	4b98      	ldr	r3, [pc, #608]	@ (8008484 <_dtoa_r+0x8d4>)
 8008222:	2200      	movs	r2, #0
 8008224:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008228:	f7f8 fa06 	bl	8000638 <__aeabi_dmul>
 800822c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008230:	f7f8 fc88 	bl	8000b44 <__aeabi_dcmpge>
 8008234:	2800      	cmp	r0, #0
 8008236:	f000 8157 	beq.w	80084e8 <_dtoa_r+0x938>
 800823a:	2400      	movs	r4, #0
 800823c:	4625      	mov	r5, r4
 800823e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008240:	43db      	mvns	r3, r3
 8008242:	9304      	str	r3, [sp, #16]
 8008244:	4656      	mov	r6, sl
 8008246:	2700      	movs	r7, #0
 8008248:	4621      	mov	r1, r4
 800824a:	4658      	mov	r0, fp
 800824c:	f000 fbb4 	bl	80089b8 <_Bfree>
 8008250:	2d00      	cmp	r5, #0
 8008252:	d0dc      	beq.n	800820e <_dtoa_r+0x65e>
 8008254:	b12f      	cbz	r7, 8008262 <_dtoa_r+0x6b2>
 8008256:	42af      	cmp	r7, r5
 8008258:	d003      	beq.n	8008262 <_dtoa_r+0x6b2>
 800825a:	4639      	mov	r1, r7
 800825c:	4658      	mov	r0, fp
 800825e:	f000 fbab 	bl	80089b8 <_Bfree>
 8008262:	4629      	mov	r1, r5
 8008264:	4658      	mov	r0, fp
 8008266:	f000 fba7 	bl	80089b8 <_Bfree>
 800826a:	e7d0      	b.n	800820e <_dtoa_r+0x65e>
 800826c:	9704      	str	r7, [sp, #16]
 800826e:	4633      	mov	r3, r6
 8008270:	461e      	mov	r6, r3
 8008272:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008276:	2a39      	cmp	r2, #57	@ 0x39
 8008278:	d107      	bne.n	800828a <_dtoa_r+0x6da>
 800827a:	459a      	cmp	sl, r3
 800827c:	d1f8      	bne.n	8008270 <_dtoa_r+0x6c0>
 800827e:	9a04      	ldr	r2, [sp, #16]
 8008280:	3201      	adds	r2, #1
 8008282:	9204      	str	r2, [sp, #16]
 8008284:	2230      	movs	r2, #48	@ 0x30
 8008286:	f88a 2000 	strb.w	r2, [sl]
 800828a:	781a      	ldrb	r2, [r3, #0]
 800828c:	3201      	adds	r2, #1
 800828e:	701a      	strb	r2, [r3, #0]
 8008290:	e7bd      	b.n	800820e <_dtoa_r+0x65e>
 8008292:	4b7b      	ldr	r3, [pc, #492]	@ (8008480 <_dtoa_r+0x8d0>)
 8008294:	2200      	movs	r2, #0
 8008296:	f7f8 f9cf 	bl	8000638 <__aeabi_dmul>
 800829a:	2200      	movs	r2, #0
 800829c:	2300      	movs	r3, #0
 800829e:	4604      	mov	r4, r0
 80082a0:	460d      	mov	r5, r1
 80082a2:	f7f8 fc31 	bl	8000b08 <__aeabi_dcmpeq>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	f43f aebb 	beq.w	8008022 <_dtoa_r+0x472>
 80082ac:	e6f0      	b.n	8008090 <_dtoa_r+0x4e0>
 80082ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80082b0:	2a00      	cmp	r2, #0
 80082b2:	f000 80db 	beq.w	800846c <_dtoa_r+0x8bc>
 80082b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082b8:	2a01      	cmp	r2, #1
 80082ba:	f300 80bf 	bgt.w	800843c <_dtoa_r+0x88c>
 80082be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80082c0:	2a00      	cmp	r2, #0
 80082c2:	f000 80b7 	beq.w	8008434 <_dtoa_r+0x884>
 80082c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80082ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80082cc:	4646      	mov	r6, r8
 80082ce:	9a08      	ldr	r2, [sp, #32]
 80082d0:	2101      	movs	r1, #1
 80082d2:	441a      	add	r2, r3
 80082d4:	4658      	mov	r0, fp
 80082d6:	4498      	add	r8, r3
 80082d8:	9208      	str	r2, [sp, #32]
 80082da:	f000 fc6b 	bl	8008bb4 <__i2b>
 80082de:	4605      	mov	r5, r0
 80082e0:	b15e      	cbz	r6, 80082fa <_dtoa_r+0x74a>
 80082e2:	9b08      	ldr	r3, [sp, #32]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	dd08      	ble.n	80082fa <_dtoa_r+0x74a>
 80082e8:	42b3      	cmp	r3, r6
 80082ea:	9a08      	ldr	r2, [sp, #32]
 80082ec:	bfa8      	it	ge
 80082ee:	4633      	movge	r3, r6
 80082f0:	eba8 0803 	sub.w	r8, r8, r3
 80082f4:	1af6      	subs	r6, r6, r3
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	9308      	str	r3, [sp, #32]
 80082fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082fc:	b1f3      	cbz	r3, 800833c <_dtoa_r+0x78c>
 80082fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 80b7 	beq.w	8008474 <_dtoa_r+0x8c4>
 8008306:	b18c      	cbz	r4, 800832c <_dtoa_r+0x77c>
 8008308:	4629      	mov	r1, r5
 800830a:	4622      	mov	r2, r4
 800830c:	4658      	mov	r0, fp
 800830e:	f000 fd11 	bl	8008d34 <__pow5mult>
 8008312:	464a      	mov	r2, r9
 8008314:	4601      	mov	r1, r0
 8008316:	4605      	mov	r5, r0
 8008318:	4658      	mov	r0, fp
 800831a:	f000 fc61 	bl	8008be0 <__multiply>
 800831e:	4649      	mov	r1, r9
 8008320:	9004      	str	r0, [sp, #16]
 8008322:	4658      	mov	r0, fp
 8008324:	f000 fb48 	bl	80089b8 <_Bfree>
 8008328:	9b04      	ldr	r3, [sp, #16]
 800832a:	4699      	mov	r9, r3
 800832c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800832e:	1b1a      	subs	r2, r3, r4
 8008330:	d004      	beq.n	800833c <_dtoa_r+0x78c>
 8008332:	4649      	mov	r1, r9
 8008334:	4658      	mov	r0, fp
 8008336:	f000 fcfd 	bl	8008d34 <__pow5mult>
 800833a:	4681      	mov	r9, r0
 800833c:	2101      	movs	r1, #1
 800833e:	4658      	mov	r0, fp
 8008340:	f000 fc38 	bl	8008bb4 <__i2b>
 8008344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008346:	4604      	mov	r4, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 81cf 	beq.w	80086ec <_dtoa_r+0xb3c>
 800834e:	461a      	mov	r2, r3
 8008350:	4601      	mov	r1, r0
 8008352:	4658      	mov	r0, fp
 8008354:	f000 fcee 	bl	8008d34 <__pow5mult>
 8008358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800835a:	2b01      	cmp	r3, #1
 800835c:	4604      	mov	r4, r0
 800835e:	f300 8095 	bgt.w	800848c <_dtoa_r+0x8dc>
 8008362:	9b02      	ldr	r3, [sp, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	f040 8087 	bne.w	8008478 <_dtoa_r+0x8c8>
 800836a:	9b03      	ldr	r3, [sp, #12]
 800836c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008370:	2b00      	cmp	r3, #0
 8008372:	f040 8089 	bne.w	8008488 <_dtoa_r+0x8d8>
 8008376:	9b03      	ldr	r3, [sp, #12]
 8008378:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800837c:	0d1b      	lsrs	r3, r3, #20
 800837e:	051b      	lsls	r3, r3, #20
 8008380:	b12b      	cbz	r3, 800838e <_dtoa_r+0x7de>
 8008382:	9b08      	ldr	r3, [sp, #32]
 8008384:	3301      	adds	r3, #1
 8008386:	9308      	str	r3, [sp, #32]
 8008388:	f108 0801 	add.w	r8, r8, #1
 800838c:	2301      	movs	r3, #1
 800838e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008390:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 81b0 	beq.w	80086f8 <_dtoa_r+0xb48>
 8008398:	6923      	ldr	r3, [r4, #16]
 800839a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800839e:	6918      	ldr	r0, [r3, #16]
 80083a0:	f000 fbbc 	bl	8008b1c <__hi0bits>
 80083a4:	f1c0 0020 	rsb	r0, r0, #32
 80083a8:	9b08      	ldr	r3, [sp, #32]
 80083aa:	4418      	add	r0, r3
 80083ac:	f010 001f 	ands.w	r0, r0, #31
 80083b0:	d077      	beq.n	80084a2 <_dtoa_r+0x8f2>
 80083b2:	f1c0 0320 	rsb	r3, r0, #32
 80083b6:	2b04      	cmp	r3, #4
 80083b8:	dd6b      	ble.n	8008492 <_dtoa_r+0x8e2>
 80083ba:	9b08      	ldr	r3, [sp, #32]
 80083bc:	f1c0 001c 	rsb	r0, r0, #28
 80083c0:	4403      	add	r3, r0
 80083c2:	4480      	add	r8, r0
 80083c4:	4406      	add	r6, r0
 80083c6:	9308      	str	r3, [sp, #32]
 80083c8:	f1b8 0f00 	cmp.w	r8, #0
 80083cc:	dd05      	ble.n	80083da <_dtoa_r+0x82a>
 80083ce:	4649      	mov	r1, r9
 80083d0:	4642      	mov	r2, r8
 80083d2:	4658      	mov	r0, fp
 80083d4:	f000 fd08 	bl	8008de8 <__lshift>
 80083d8:	4681      	mov	r9, r0
 80083da:	9b08      	ldr	r3, [sp, #32]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	dd05      	ble.n	80083ec <_dtoa_r+0x83c>
 80083e0:	4621      	mov	r1, r4
 80083e2:	461a      	mov	r2, r3
 80083e4:	4658      	mov	r0, fp
 80083e6:	f000 fcff 	bl	8008de8 <__lshift>
 80083ea:	4604      	mov	r4, r0
 80083ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d059      	beq.n	80084a6 <_dtoa_r+0x8f6>
 80083f2:	4621      	mov	r1, r4
 80083f4:	4648      	mov	r0, r9
 80083f6:	f000 fd63 	bl	8008ec0 <__mcmp>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	da53      	bge.n	80084a6 <_dtoa_r+0x8f6>
 80083fe:	1e7b      	subs	r3, r7, #1
 8008400:	9304      	str	r3, [sp, #16]
 8008402:	4649      	mov	r1, r9
 8008404:	2300      	movs	r3, #0
 8008406:	220a      	movs	r2, #10
 8008408:	4658      	mov	r0, fp
 800840a:	f000 faf7 	bl	80089fc <__multadd>
 800840e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008410:	4681      	mov	r9, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 8172 	beq.w	80086fc <_dtoa_r+0xb4c>
 8008418:	2300      	movs	r3, #0
 800841a:	4629      	mov	r1, r5
 800841c:	220a      	movs	r2, #10
 800841e:	4658      	mov	r0, fp
 8008420:	f000 faec 	bl	80089fc <__multadd>
 8008424:	9b00      	ldr	r3, [sp, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	4605      	mov	r5, r0
 800842a:	dc67      	bgt.n	80084fc <_dtoa_r+0x94c>
 800842c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800842e:	2b02      	cmp	r3, #2
 8008430:	dc41      	bgt.n	80084b6 <_dtoa_r+0x906>
 8008432:	e063      	b.n	80084fc <_dtoa_r+0x94c>
 8008434:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008436:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800843a:	e746      	b.n	80082ca <_dtoa_r+0x71a>
 800843c:	9b07      	ldr	r3, [sp, #28]
 800843e:	1e5c      	subs	r4, r3, #1
 8008440:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008442:	42a3      	cmp	r3, r4
 8008444:	bfbf      	itttt	lt
 8008446:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008448:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800844a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800844c:	1ae3      	sublt	r3, r4, r3
 800844e:	bfb4      	ite	lt
 8008450:	18d2      	addlt	r2, r2, r3
 8008452:	1b1c      	subge	r4, r3, r4
 8008454:	9b07      	ldr	r3, [sp, #28]
 8008456:	bfbc      	itt	lt
 8008458:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800845a:	2400      	movlt	r4, #0
 800845c:	2b00      	cmp	r3, #0
 800845e:	bfb5      	itete	lt
 8008460:	eba8 0603 	sublt.w	r6, r8, r3
 8008464:	9b07      	ldrge	r3, [sp, #28]
 8008466:	2300      	movlt	r3, #0
 8008468:	4646      	movge	r6, r8
 800846a:	e730      	b.n	80082ce <_dtoa_r+0x71e>
 800846c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800846e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008470:	4646      	mov	r6, r8
 8008472:	e735      	b.n	80082e0 <_dtoa_r+0x730>
 8008474:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008476:	e75c      	b.n	8008332 <_dtoa_r+0x782>
 8008478:	2300      	movs	r3, #0
 800847a:	e788      	b.n	800838e <_dtoa_r+0x7de>
 800847c:	3fe00000 	.word	0x3fe00000
 8008480:	40240000 	.word	0x40240000
 8008484:	40140000 	.word	0x40140000
 8008488:	9b02      	ldr	r3, [sp, #8]
 800848a:	e780      	b.n	800838e <_dtoa_r+0x7de>
 800848c:	2300      	movs	r3, #0
 800848e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008490:	e782      	b.n	8008398 <_dtoa_r+0x7e8>
 8008492:	d099      	beq.n	80083c8 <_dtoa_r+0x818>
 8008494:	9a08      	ldr	r2, [sp, #32]
 8008496:	331c      	adds	r3, #28
 8008498:	441a      	add	r2, r3
 800849a:	4498      	add	r8, r3
 800849c:	441e      	add	r6, r3
 800849e:	9208      	str	r2, [sp, #32]
 80084a0:	e792      	b.n	80083c8 <_dtoa_r+0x818>
 80084a2:	4603      	mov	r3, r0
 80084a4:	e7f6      	b.n	8008494 <_dtoa_r+0x8e4>
 80084a6:	9b07      	ldr	r3, [sp, #28]
 80084a8:	9704      	str	r7, [sp, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	dc20      	bgt.n	80084f0 <_dtoa_r+0x940>
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	dd1e      	ble.n	80084f4 <_dtoa_r+0x944>
 80084b6:	9b00      	ldr	r3, [sp, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f47f aec0 	bne.w	800823e <_dtoa_r+0x68e>
 80084be:	4621      	mov	r1, r4
 80084c0:	2205      	movs	r2, #5
 80084c2:	4658      	mov	r0, fp
 80084c4:	f000 fa9a 	bl	80089fc <__multadd>
 80084c8:	4601      	mov	r1, r0
 80084ca:	4604      	mov	r4, r0
 80084cc:	4648      	mov	r0, r9
 80084ce:	f000 fcf7 	bl	8008ec0 <__mcmp>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	f77f aeb3 	ble.w	800823e <_dtoa_r+0x68e>
 80084d8:	4656      	mov	r6, sl
 80084da:	2331      	movs	r3, #49	@ 0x31
 80084dc:	f806 3b01 	strb.w	r3, [r6], #1
 80084e0:	9b04      	ldr	r3, [sp, #16]
 80084e2:	3301      	adds	r3, #1
 80084e4:	9304      	str	r3, [sp, #16]
 80084e6:	e6ae      	b.n	8008246 <_dtoa_r+0x696>
 80084e8:	9c07      	ldr	r4, [sp, #28]
 80084ea:	9704      	str	r7, [sp, #16]
 80084ec:	4625      	mov	r5, r4
 80084ee:	e7f3      	b.n	80084d8 <_dtoa_r+0x928>
 80084f0:	9b07      	ldr	r3, [sp, #28]
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 8104 	beq.w	8008704 <_dtoa_r+0xb54>
 80084fc:	2e00      	cmp	r6, #0
 80084fe:	dd05      	ble.n	800850c <_dtoa_r+0x95c>
 8008500:	4629      	mov	r1, r5
 8008502:	4632      	mov	r2, r6
 8008504:	4658      	mov	r0, fp
 8008506:	f000 fc6f 	bl	8008de8 <__lshift>
 800850a:	4605      	mov	r5, r0
 800850c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800850e:	2b00      	cmp	r3, #0
 8008510:	d05a      	beq.n	80085c8 <_dtoa_r+0xa18>
 8008512:	6869      	ldr	r1, [r5, #4]
 8008514:	4658      	mov	r0, fp
 8008516:	f000 fa0f 	bl	8008938 <_Balloc>
 800851a:	4606      	mov	r6, r0
 800851c:	b928      	cbnz	r0, 800852a <_dtoa_r+0x97a>
 800851e:	4b84      	ldr	r3, [pc, #528]	@ (8008730 <_dtoa_r+0xb80>)
 8008520:	4602      	mov	r2, r0
 8008522:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008526:	f7ff bb5a 	b.w	8007bde <_dtoa_r+0x2e>
 800852a:	692a      	ldr	r2, [r5, #16]
 800852c:	3202      	adds	r2, #2
 800852e:	0092      	lsls	r2, r2, #2
 8008530:	f105 010c 	add.w	r1, r5, #12
 8008534:	300c      	adds	r0, #12
 8008536:	f002 fb03 	bl	800ab40 <memcpy>
 800853a:	2201      	movs	r2, #1
 800853c:	4631      	mov	r1, r6
 800853e:	4658      	mov	r0, fp
 8008540:	f000 fc52 	bl	8008de8 <__lshift>
 8008544:	f10a 0301 	add.w	r3, sl, #1
 8008548:	9307      	str	r3, [sp, #28]
 800854a:	9b00      	ldr	r3, [sp, #0]
 800854c:	4453      	add	r3, sl
 800854e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008550:	9b02      	ldr	r3, [sp, #8]
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	462f      	mov	r7, r5
 8008558:	930a      	str	r3, [sp, #40]	@ 0x28
 800855a:	4605      	mov	r5, r0
 800855c:	9b07      	ldr	r3, [sp, #28]
 800855e:	4621      	mov	r1, r4
 8008560:	3b01      	subs	r3, #1
 8008562:	4648      	mov	r0, r9
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	f7ff fa9b 	bl	8007aa0 <quorem>
 800856a:	4639      	mov	r1, r7
 800856c:	9002      	str	r0, [sp, #8]
 800856e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008572:	4648      	mov	r0, r9
 8008574:	f000 fca4 	bl	8008ec0 <__mcmp>
 8008578:	462a      	mov	r2, r5
 800857a:	9008      	str	r0, [sp, #32]
 800857c:	4621      	mov	r1, r4
 800857e:	4658      	mov	r0, fp
 8008580:	f000 fcba 	bl	8008ef8 <__mdiff>
 8008584:	68c2      	ldr	r2, [r0, #12]
 8008586:	4606      	mov	r6, r0
 8008588:	bb02      	cbnz	r2, 80085cc <_dtoa_r+0xa1c>
 800858a:	4601      	mov	r1, r0
 800858c:	4648      	mov	r0, r9
 800858e:	f000 fc97 	bl	8008ec0 <__mcmp>
 8008592:	4602      	mov	r2, r0
 8008594:	4631      	mov	r1, r6
 8008596:	4658      	mov	r0, fp
 8008598:	920e      	str	r2, [sp, #56]	@ 0x38
 800859a:	f000 fa0d 	bl	80089b8 <_Bfree>
 800859e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085a2:	9e07      	ldr	r6, [sp, #28]
 80085a4:	ea43 0102 	orr.w	r1, r3, r2
 80085a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085aa:	4319      	orrs	r1, r3
 80085ac:	d110      	bne.n	80085d0 <_dtoa_r+0xa20>
 80085ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085b2:	d029      	beq.n	8008608 <_dtoa_r+0xa58>
 80085b4:	9b08      	ldr	r3, [sp, #32]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	dd02      	ble.n	80085c0 <_dtoa_r+0xa10>
 80085ba:	9b02      	ldr	r3, [sp, #8]
 80085bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80085c0:	9b00      	ldr	r3, [sp, #0]
 80085c2:	f883 8000 	strb.w	r8, [r3]
 80085c6:	e63f      	b.n	8008248 <_dtoa_r+0x698>
 80085c8:	4628      	mov	r0, r5
 80085ca:	e7bb      	b.n	8008544 <_dtoa_r+0x994>
 80085cc:	2201      	movs	r2, #1
 80085ce:	e7e1      	b.n	8008594 <_dtoa_r+0x9e4>
 80085d0:	9b08      	ldr	r3, [sp, #32]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	db04      	blt.n	80085e0 <_dtoa_r+0xa30>
 80085d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085d8:	430b      	orrs	r3, r1
 80085da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085dc:	430b      	orrs	r3, r1
 80085de:	d120      	bne.n	8008622 <_dtoa_r+0xa72>
 80085e0:	2a00      	cmp	r2, #0
 80085e2:	dded      	ble.n	80085c0 <_dtoa_r+0xa10>
 80085e4:	4649      	mov	r1, r9
 80085e6:	2201      	movs	r2, #1
 80085e8:	4658      	mov	r0, fp
 80085ea:	f000 fbfd 	bl	8008de8 <__lshift>
 80085ee:	4621      	mov	r1, r4
 80085f0:	4681      	mov	r9, r0
 80085f2:	f000 fc65 	bl	8008ec0 <__mcmp>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	dc03      	bgt.n	8008602 <_dtoa_r+0xa52>
 80085fa:	d1e1      	bne.n	80085c0 <_dtoa_r+0xa10>
 80085fc:	f018 0f01 	tst.w	r8, #1
 8008600:	d0de      	beq.n	80085c0 <_dtoa_r+0xa10>
 8008602:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008606:	d1d8      	bne.n	80085ba <_dtoa_r+0xa0a>
 8008608:	9a00      	ldr	r2, [sp, #0]
 800860a:	2339      	movs	r3, #57	@ 0x39
 800860c:	7013      	strb	r3, [r2, #0]
 800860e:	4633      	mov	r3, r6
 8008610:	461e      	mov	r6, r3
 8008612:	3b01      	subs	r3, #1
 8008614:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008618:	2a39      	cmp	r2, #57	@ 0x39
 800861a:	d052      	beq.n	80086c2 <_dtoa_r+0xb12>
 800861c:	3201      	adds	r2, #1
 800861e:	701a      	strb	r2, [r3, #0]
 8008620:	e612      	b.n	8008248 <_dtoa_r+0x698>
 8008622:	2a00      	cmp	r2, #0
 8008624:	dd07      	ble.n	8008636 <_dtoa_r+0xa86>
 8008626:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800862a:	d0ed      	beq.n	8008608 <_dtoa_r+0xa58>
 800862c:	9a00      	ldr	r2, [sp, #0]
 800862e:	f108 0301 	add.w	r3, r8, #1
 8008632:	7013      	strb	r3, [r2, #0]
 8008634:	e608      	b.n	8008248 <_dtoa_r+0x698>
 8008636:	9b07      	ldr	r3, [sp, #28]
 8008638:	9a07      	ldr	r2, [sp, #28]
 800863a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800863e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008640:	4293      	cmp	r3, r2
 8008642:	d028      	beq.n	8008696 <_dtoa_r+0xae6>
 8008644:	4649      	mov	r1, r9
 8008646:	2300      	movs	r3, #0
 8008648:	220a      	movs	r2, #10
 800864a:	4658      	mov	r0, fp
 800864c:	f000 f9d6 	bl	80089fc <__multadd>
 8008650:	42af      	cmp	r7, r5
 8008652:	4681      	mov	r9, r0
 8008654:	f04f 0300 	mov.w	r3, #0
 8008658:	f04f 020a 	mov.w	r2, #10
 800865c:	4639      	mov	r1, r7
 800865e:	4658      	mov	r0, fp
 8008660:	d107      	bne.n	8008672 <_dtoa_r+0xac2>
 8008662:	f000 f9cb 	bl	80089fc <__multadd>
 8008666:	4607      	mov	r7, r0
 8008668:	4605      	mov	r5, r0
 800866a:	9b07      	ldr	r3, [sp, #28]
 800866c:	3301      	adds	r3, #1
 800866e:	9307      	str	r3, [sp, #28]
 8008670:	e774      	b.n	800855c <_dtoa_r+0x9ac>
 8008672:	f000 f9c3 	bl	80089fc <__multadd>
 8008676:	4629      	mov	r1, r5
 8008678:	4607      	mov	r7, r0
 800867a:	2300      	movs	r3, #0
 800867c:	220a      	movs	r2, #10
 800867e:	4658      	mov	r0, fp
 8008680:	f000 f9bc 	bl	80089fc <__multadd>
 8008684:	4605      	mov	r5, r0
 8008686:	e7f0      	b.n	800866a <_dtoa_r+0xaba>
 8008688:	9b00      	ldr	r3, [sp, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	bfcc      	ite	gt
 800868e:	461e      	movgt	r6, r3
 8008690:	2601      	movle	r6, #1
 8008692:	4456      	add	r6, sl
 8008694:	2700      	movs	r7, #0
 8008696:	4649      	mov	r1, r9
 8008698:	2201      	movs	r2, #1
 800869a:	4658      	mov	r0, fp
 800869c:	f000 fba4 	bl	8008de8 <__lshift>
 80086a0:	4621      	mov	r1, r4
 80086a2:	4681      	mov	r9, r0
 80086a4:	f000 fc0c 	bl	8008ec0 <__mcmp>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	dcb0      	bgt.n	800860e <_dtoa_r+0xa5e>
 80086ac:	d102      	bne.n	80086b4 <_dtoa_r+0xb04>
 80086ae:	f018 0f01 	tst.w	r8, #1
 80086b2:	d1ac      	bne.n	800860e <_dtoa_r+0xa5e>
 80086b4:	4633      	mov	r3, r6
 80086b6:	461e      	mov	r6, r3
 80086b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086bc:	2a30      	cmp	r2, #48	@ 0x30
 80086be:	d0fa      	beq.n	80086b6 <_dtoa_r+0xb06>
 80086c0:	e5c2      	b.n	8008248 <_dtoa_r+0x698>
 80086c2:	459a      	cmp	sl, r3
 80086c4:	d1a4      	bne.n	8008610 <_dtoa_r+0xa60>
 80086c6:	9b04      	ldr	r3, [sp, #16]
 80086c8:	3301      	adds	r3, #1
 80086ca:	9304      	str	r3, [sp, #16]
 80086cc:	2331      	movs	r3, #49	@ 0x31
 80086ce:	f88a 3000 	strb.w	r3, [sl]
 80086d2:	e5b9      	b.n	8008248 <_dtoa_r+0x698>
 80086d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008734 <_dtoa_r+0xb84>
 80086da:	b11b      	cbz	r3, 80086e4 <_dtoa_r+0xb34>
 80086dc:	f10a 0308 	add.w	r3, sl, #8
 80086e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80086e2:	6013      	str	r3, [r2, #0]
 80086e4:	4650      	mov	r0, sl
 80086e6:	b019      	add	sp, #100	@ 0x64
 80086e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	f77f ae37 	ble.w	8008362 <_dtoa_r+0x7b2>
 80086f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80086f8:	2001      	movs	r0, #1
 80086fa:	e655      	b.n	80083a8 <_dtoa_r+0x7f8>
 80086fc:	9b00      	ldr	r3, [sp, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f77f aed6 	ble.w	80084b0 <_dtoa_r+0x900>
 8008704:	4656      	mov	r6, sl
 8008706:	4621      	mov	r1, r4
 8008708:	4648      	mov	r0, r9
 800870a:	f7ff f9c9 	bl	8007aa0 <quorem>
 800870e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008712:	f806 8b01 	strb.w	r8, [r6], #1
 8008716:	9b00      	ldr	r3, [sp, #0]
 8008718:	eba6 020a 	sub.w	r2, r6, sl
 800871c:	4293      	cmp	r3, r2
 800871e:	ddb3      	ble.n	8008688 <_dtoa_r+0xad8>
 8008720:	4649      	mov	r1, r9
 8008722:	2300      	movs	r3, #0
 8008724:	220a      	movs	r2, #10
 8008726:	4658      	mov	r0, fp
 8008728:	f000 f968 	bl	80089fc <__multadd>
 800872c:	4681      	mov	r9, r0
 800872e:	e7ea      	b.n	8008706 <_dtoa_r+0xb56>
 8008730:	0800ba7f 	.word	0x0800ba7f
 8008734:	0800ba03 	.word	0x0800ba03

08008738 <_free_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4605      	mov	r5, r0
 800873c:	2900      	cmp	r1, #0
 800873e:	d041      	beq.n	80087c4 <_free_r+0x8c>
 8008740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008744:	1f0c      	subs	r4, r1, #4
 8008746:	2b00      	cmp	r3, #0
 8008748:	bfb8      	it	lt
 800874a:	18e4      	addlt	r4, r4, r3
 800874c:	f000 f8e8 	bl	8008920 <__malloc_lock>
 8008750:	4a1d      	ldr	r2, [pc, #116]	@ (80087c8 <_free_r+0x90>)
 8008752:	6813      	ldr	r3, [r2, #0]
 8008754:	b933      	cbnz	r3, 8008764 <_free_r+0x2c>
 8008756:	6063      	str	r3, [r4, #4]
 8008758:	6014      	str	r4, [r2, #0]
 800875a:	4628      	mov	r0, r5
 800875c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008760:	f000 b8e4 	b.w	800892c <__malloc_unlock>
 8008764:	42a3      	cmp	r3, r4
 8008766:	d908      	bls.n	800877a <_free_r+0x42>
 8008768:	6820      	ldr	r0, [r4, #0]
 800876a:	1821      	adds	r1, r4, r0
 800876c:	428b      	cmp	r3, r1
 800876e:	bf01      	itttt	eq
 8008770:	6819      	ldreq	r1, [r3, #0]
 8008772:	685b      	ldreq	r3, [r3, #4]
 8008774:	1809      	addeq	r1, r1, r0
 8008776:	6021      	streq	r1, [r4, #0]
 8008778:	e7ed      	b.n	8008756 <_free_r+0x1e>
 800877a:	461a      	mov	r2, r3
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	b10b      	cbz	r3, 8008784 <_free_r+0x4c>
 8008780:	42a3      	cmp	r3, r4
 8008782:	d9fa      	bls.n	800877a <_free_r+0x42>
 8008784:	6811      	ldr	r1, [r2, #0]
 8008786:	1850      	adds	r0, r2, r1
 8008788:	42a0      	cmp	r0, r4
 800878a:	d10b      	bne.n	80087a4 <_free_r+0x6c>
 800878c:	6820      	ldr	r0, [r4, #0]
 800878e:	4401      	add	r1, r0
 8008790:	1850      	adds	r0, r2, r1
 8008792:	4283      	cmp	r3, r0
 8008794:	6011      	str	r1, [r2, #0]
 8008796:	d1e0      	bne.n	800875a <_free_r+0x22>
 8008798:	6818      	ldr	r0, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	6053      	str	r3, [r2, #4]
 800879e:	4408      	add	r0, r1
 80087a0:	6010      	str	r0, [r2, #0]
 80087a2:	e7da      	b.n	800875a <_free_r+0x22>
 80087a4:	d902      	bls.n	80087ac <_free_r+0x74>
 80087a6:	230c      	movs	r3, #12
 80087a8:	602b      	str	r3, [r5, #0]
 80087aa:	e7d6      	b.n	800875a <_free_r+0x22>
 80087ac:	6820      	ldr	r0, [r4, #0]
 80087ae:	1821      	adds	r1, r4, r0
 80087b0:	428b      	cmp	r3, r1
 80087b2:	bf04      	itt	eq
 80087b4:	6819      	ldreq	r1, [r3, #0]
 80087b6:	685b      	ldreq	r3, [r3, #4]
 80087b8:	6063      	str	r3, [r4, #4]
 80087ba:	bf04      	itt	eq
 80087bc:	1809      	addeq	r1, r1, r0
 80087be:	6021      	streq	r1, [r4, #0]
 80087c0:	6054      	str	r4, [r2, #4]
 80087c2:	e7ca      	b.n	800875a <_free_r+0x22>
 80087c4:	bd38      	pop	{r3, r4, r5, pc}
 80087c6:	bf00      	nop
 80087c8:	2000052c 	.word	0x2000052c

080087cc <malloc>:
 80087cc:	4b02      	ldr	r3, [pc, #8]	@ (80087d8 <malloc+0xc>)
 80087ce:	4601      	mov	r1, r0
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	f000 b825 	b.w	8008820 <_malloc_r>
 80087d6:	bf00      	nop
 80087d8:	20000028 	.word	0x20000028

080087dc <sbrk_aligned>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	4e0f      	ldr	r6, [pc, #60]	@ (800881c <sbrk_aligned+0x40>)
 80087e0:	460c      	mov	r4, r1
 80087e2:	6831      	ldr	r1, [r6, #0]
 80087e4:	4605      	mov	r5, r0
 80087e6:	b911      	cbnz	r1, 80087ee <sbrk_aligned+0x12>
 80087e8:	f002 f99a 	bl	800ab20 <_sbrk_r>
 80087ec:	6030      	str	r0, [r6, #0]
 80087ee:	4621      	mov	r1, r4
 80087f0:	4628      	mov	r0, r5
 80087f2:	f002 f995 	bl	800ab20 <_sbrk_r>
 80087f6:	1c43      	adds	r3, r0, #1
 80087f8:	d103      	bne.n	8008802 <sbrk_aligned+0x26>
 80087fa:	f04f 34ff 	mov.w	r4, #4294967295
 80087fe:	4620      	mov	r0, r4
 8008800:	bd70      	pop	{r4, r5, r6, pc}
 8008802:	1cc4      	adds	r4, r0, #3
 8008804:	f024 0403 	bic.w	r4, r4, #3
 8008808:	42a0      	cmp	r0, r4
 800880a:	d0f8      	beq.n	80087fe <sbrk_aligned+0x22>
 800880c:	1a21      	subs	r1, r4, r0
 800880e:	4628      	mov	r0, r5
 8008810:	f002 f986 	bl	800ab20 <_sbrk_r>
 8008814:	3001      	adds	r0, #1
 8008816:	d1f2      	bne.n	80087fe <sbrk_aligned+0x22>
 8008818:	e7ef      	b.n	80087fa <sbrk_aligned+0x1e>
 800881a:	bf00      	nop
 800881c:	20000528 	.word	0x20000528

08008820 <_malloc_r>:
 8008820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008824:	1ccd      	adds	r5, r1, #3
 8008826:	f025 0503 	bic.w	r5, r5, #3
 800882a:	3508      	adds	r5, #8
 800882c:	2d0c      	cmp	r5, #12
 800882e:	bf38      	it	cc
 8008830:	250c      	movcc	r5, #12
 8008832:	2d00      	cmp	r5, #0
 8008834:	4606      	mov	r6, r0
 8008836:	db01      	blt.n	800883c <_malloc_r+0x1c>
 8008838:	42a9      	cmp	r1, r5
 800883a:	d904      	bls.n	8008846 <_malloc_r+0x26>
 800883c:	230c      	movs	r3, #12
 800883e:	6033      	str	r3, [r6, #0]
 8008840:	2000      	movs	r0, #0
 8008842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008846:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800891c <_malloc_r+0xfc>
 800884a:	f000 f869 	bl	8008920 <__malloc_lock>
 800884e:	f8d8 3000 	ldr.w	r3, [r8]
 8008852:	461c      	mov	r4, r3
 8008854:	bb44      	cbnz	r4, 80088a8 <_malloc_r+0x88>
 8008856:	4629      	mov	r1, r5
 8008858:	4630      	mov	r0, r6
 800885a:	f7ff ffbf 	bl	80087dc <sbrk_aligned>
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	4604      	mov	r4, r0
 8008862:	d158      	bne.n	8008916 <_malloc_r+0xf6>
 8008864:	f8d8 4000 	ldr.w	r4, [r8]
 8008868:	4627      	mov	r7, r4
 800886a:	2f00      	cmp	r7, #0
 800886c:	d143      	bne.n	80088f6 <_malloc_r+0xd6>
 800886e:	2c00      	cmp	r4, #0
 8008870:	d04b      	beq.n	800890a <_malloc_r+0xea>
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	4639      	mov	r1, r7
 8008876:	4630      	mov	r0, r6
 8008878:	eb04 0903 	add.w	r9, r4, r3
 800887c:	f002 f950 	bl	800ab20 <_sbrk_r>
 8008880:	4581      	cmp	r9, r0
 8008882:	d142      	bne.n	800890a <_malloc_r+0xea>
 8008884:	6821      	ldr	r1, [r4, #0]
 8008886:	1a6d      	subs	r5, r5, r1
 8008888:	4629      	mov	r1, r5
 800888a:	4630      	mov	r0, r6
 800888c:	f7ff ffa6 	bl	80087dc <sbrk_aligned>
 8008890:	3001      	adds	r0, #1
 8008892:	d03a      	beq.n	800890a <_malloc_r+0xea>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	442b      	add	r3, r5
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	f8d8 3000 	ldr.w	r3, [r8]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	bb62      	cbnz	r2, 80088fc <_malloc_r+0xdc>
 80088a2:	f8c8 7000 	str.w	r7, [r8]
 80088a6:	e00f      	b.n	80088c8 <_malloc_r+0xa8>
 80088a8:	6822      	ldr	r2, [r4, #0]
 80088aa:	1b52      	subs	r2, r2, r5
 80088ac:	d420      	bmi.n	80088f0 <_malloc_r+0xd0>
 80088ae:	2a0b      	cmp	r2, #11
 80088b0:	d917      	bls.n	80088e2 <_malloc_r+0xc2>
 80088b2:	1961      	adds	r1, r4, r5
 80088b4:	42a3      	cmp	r3, r4
 80088b6:	6025      	str	r5, [r4, #0]
 80088b8:	bf18      	it	ne
 80088ba:	6059      	strne	r1, [r3, #4]
 80088bc:	6863      	ldr	r3, [r4, #4]
 80088be:	bf08      	it	eq
 80088c0:	f8c8 1000 	streq.w	r1, [r8]
 80088c4:	5162      	str	r2, [r4, r5]
 80088c6:	604b      	str	r3, [r1, #4]
 80088c8:	4630      	mov	r0, r6
 80088ca:	f000 f82f 	bl	800892c <__malloc_unlock>
 80088ce:	f104 000b 	add.w	r0, r4, #11
 80088d2:	1d23      	adds	r3, r4, #4
 80088d4:	f020 0007 	bic.w	r0, r0, #7
 80088d8:	1ac2      	subs	r2, r0, r3
 80088da:	bf1c      	itt	ne
 80088dc:	1a1b      	subne	r3, r3, r0
 80088de:	50a3      	strne	r3, [r4, r2]
 80088e0:	e7af      	b.n	8008842 <_malloc_r+0x22>
 80088e2:	6862      	ldr	r2, [r4, #4]
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	bf0c      	ite	eq
 80088e8:	f8c8 2000 	streq.w	r2, [r8]
 80088ec:	605a      	strne	r2, [r3, #4]
 80088ee:	e7eb      	b.n	80088c8 <_malloc_r+0xa8>
 80088f0:	4623      	mov	r3, r4
 80088f2:	6864      	ldr	r4, [r4, #4]
 80088f4:	e7ae      	b.n	8008854 <_malloc_r+0x34>
 80088f6:	463c      	mov	r4, r7
 80088f8:	687f      	ldr	r7, [r7, #4]
 80088fa:	e7b6      	b.n	800886a <_malloc_r+0x4a>
 80088fc:	461a      	mov	r2, r3
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	42a3      	cmp	r3, r4
 8008902:	d1fb      	bne.n	80088fc <_malloc_r+0xdc>
 8008904:	2300      	movs	r3, #0
 8008906:	6053      	str	r3, [r2, #4]
 8008908:	e7de      	b.n	80088c8 <_malloc_r+0xa8>
 800890a:	230c      	movs	r3, #12
 800890c:	6033      	str	r3, [r6, #0]
 800890e:	4630      	mov	r0, r6
 8008910:	f000 f80c 	bl	800892c <__malloc_unlock>
 8008914:	e794      	b.n	8008840 <_malloc_r+0x20>
 8008916:	6005      	str	r5, [r0, #0]
 8008918:	e7d6      	b.n	80088c8 <_malloc_r+0xa8>
 800891a:	bf00      	nop
 800891c:	2000052c 	.word	0x2000052c

08008920 <__malloc_lock>:
 8008920:	4801      	ldr	r0, [pc, #4]	@ (8008928 <__malloc_lock+0x8>)
 8008922:	f7ff b8b4 	b.w	8007a8e <__retarget_lock_acquire_recursive>
 8008926:	bf00      	nop
 8008928:	20000524 	.word	0x20000524

0800892c <__malloc_unlock>:
 800892c:	4801      	ldr	r0, [pc, #4]	@ (8008934 <__malloc_unlock+0x8>)
 800892e:	f7ff b8af 	b.w	8007a90 <__retarget_lock_release_recursive>
 8008932:	bf00      	nop
 8008934:	20000524 	.word	0x20000524

08008938 <_Balloc>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	69c6      	ldr	r6, [r0, #28]
 800893c:	4604      	mov	r4, r0
 800893e:	460d      	mov	r5, r1
 8008940:	b976      	cbnz	r6, 8008960 <_Balloc+0x28>
 8008942:	2010      	movs	r0, #16
 8008944:	f7ff ff42 	bl	80087cc <malloc>
 8008948:	4602      	mov	r2, r0
 800894a:	61e0      	str	r0, [r4, #28]
 800894c:	b920      	cbnz	r0, 8008958 <_Balloc+0x20>
 800894e:	4b18      	ldr	r3, [pc, #96]	@ (80089b0 <_Balloc+0x78>)
 8008950:	4818      	ldr	r0, [pc, #96]	@ (80089b4 <_Balloc+0x7c>)
 8008952:	216b      	movs	r1, #107	@ 0x6b
 8008954:	f002 f90c 	bl	800ab70 <__assert_func>
 8008958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800895c:	6006      	str	r6, [r0, #0]
 800895e:	60c6      	str	r6, [r0, #12]
 8008960:	69e6      	ldr	r6, [r4, #28]
 8008962:	68f3      	ldr	r3, [r6, #12]
 8008964:	b183      	cbz	r3, 8008988 <_Balloc+0x50>
 8008966:	69e3      	ldr	r3, [r4, #28]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800896e:	b9b8      	cbnz	r0, 80089a0 <_Balloc+0x68>
 8008970:	2101      	movs	r1, #1
 8008972:	fa01 f605 	lsl.w	r6, r1, r5
 8008976:	1d72      	adds	r2, r6, #5
 8008978:	0092      	lsls	r2, r2, #2
 800897a:	4620      	mov	r0, r4
 800897c:	f002 f916 	bl	800abac <_calloc_r>
 8008980:	b160      	cbz	r0, 800899c <_Balloc+0x64>
 8008982:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008986:	e00e      	b.n	80089a6 <_Balloc+0x6e>
 8008988:	2221      	movs	r2, #33	@ 0x21
 800898a:	2104      	movs	r1, #4
 800898c:	4620      	mov	r0, r4
 800898e:	f002 f90d 	bl	800abac <_calloc_r>
 8008992:	69e3      	ldr	r3, [r4, #28]
 8008994:	60f0      	str	r0, [r6, #12]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e4      	bne.n	8008966 <_Balloc+0x2e>
 800899c:	2000      	movs	r0, #0
 800899e:	bd70      	pop	{r4, r5, r6, pc}
 80089a0:	6802      	ldr	r2, [r0, #0]
 80089a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089a6:	2300      	movs	r3, #0
 80089a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089ac:	e7f7      	b.n	800899e <_Balloc+0x66>
 80089ae:	bf00      	nop
 80089b0:	0800ba10 	.word	0x0800ba10
 80089b4:	0800ba90 	.word	0x0800ba90

080089b8 <_Bfree>:
 80089b8:	b570      	push	{r4, r5, r6, lr}
 80089ba:	69c6      	ldr	r6, [r0, #28]
 80089bc:	4605      	mov	r5, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	b976      	cbnz	r6, 80089e0 <_Bfree+0x28>
 80089c2:	2010      	movs	r0, #16
 80089c4:	f7ff ff02 	bl	80087cc <malloc>
 80089c8:	4602      	mov	r2, r0
 80089ca:	61e8      	str	r0, [r5, #28]
 80089cc:	b920      	cbnz	r0, 80089d8 <_Bfree+0x20>
 80089ce:	4b09      	ldr	r3, [pc, #36]	@ (80089f4 <_Bfree+0x3c>)
 80089d0:	4809      	ldr	r0, [pc, #36]	@ (80089f8 <_Bfree+0x40>)
 80089d2:	218f      	movs	r1, #143	@ 0x8f
 80089d4:	f002 f8cc 	bl	800ab70 <__assert_func>
 80089d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089dc:	6006      	str	r6, [r0, #0]
 80089de:	60c6      	str	r6, [r0, #12]
 80089e0:	b13c      	cbz	r4, 80089f2 <_Bfree+0x3a>
 80089e2:	69eb      	ldr	r3, [r5, #28]
 80089e4:	6862      	ldr	r2, [r4, #4]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089ec:	6021      	str	r1, [r4, #0]
 80089ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089f2:	bd70      	pop	{r4, r5, r6, pc}
 80089f4:	0800ba10 	.word	0x0800ba10
 80089f8:	0800ba90 	.word	0x0800ba90

080089fc <__multadd>:
 80089fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a00:	690d      	ldr	r5, [r1, #16]
 8008a02:	4607      	mov	r7, r0
 8008a04:	460c      	mov	r4, r1
 8008a06:	461e      	mov	r6, r3
 8008a08:	f101 0c14 	add.w	ip, r1, #20
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	f8dc 3000 	ldr.w	r3, [ip]
 8008a12:	b299      	uxth	r1, r3
 8008a14:	fb02 6101 	mla	r1, r2, r1, r6
 8008a18:	0c1e      	lsrs	r6, r3, #16
 8008a1a:	0c0b      	lsrs	r3, r1, #16
 8008a1c:	fb02 3306 	mla	r3, r2, r6, r3
 8008a20:	b289      	uxth	r1, r1
 8008a22:	3001      	adds	r0, #1
 8008a24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a28:	4285      	cmp	r5, r0
 8008a2a:	f84c 1b04 	str.w	r1, [ip], #4
 8008a2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a32:	dcec      	bgt.n	8008a0e <__multadd+0x12>
 8008a34:	b30e      	cbz	r6, 8008a7a <__multadd+0x7e>
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	42ab      	cmp	r3, r5
 8008a3a:	dc19      	bgt.n	8008a70 <__multadd+0x74>
 8008a3c:	6861      	ldr	r1, [r4, #4]
 8008a3e:	4638      	mov	r0, r7
 8008a40:	3101      	adds	r1, #1
 8008a42:	f7ff ff79 	bl	8008938 <_Balloc>
 8008a46:	4680      	mov	r8, r0
 8008a48:	b928      	cbnz	r0, 8008a56 <__multadd+0x5a>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008a80 <__multadd+0x84>)
 8008a4e:	480d      	ldr	r0, [pc, #52]	@ (8008a84 <__multadd+0x88>)
 8008a50:	21ba      	movs	r1, #186	@ 0xba
 8008a52:	f002 f88d 	bl	800ab70 <__assert_func>
 8008a56:	6922      	ldr	r2, [r4, #16]
 8008a58:	3202      	adds	r2, #2
 8008a5a:	f104 010c 	add.w	r1, r4, #12
 8008a5e:	0092      	lsls	r2, r2, #2
 8008a60:	300c      	adds	r0, #12
 8008a62:	f002 f86d 	bl	800ab40 <memcpy>
 8008a66:	4621      	mov	r1, r4
 8008a68:	4638      	mov	r0, r7
 8008a6a:	f7ff ffa5 	bl	80089b8 <_Bfree>
 8008a6e:	4644      	mov	r4, r8
 8008a70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a74:	3501      	adds	r5, #1
 8008a76:	615e      	str	r6, [r3, #20]
 8008a78:	6125      	str	r5, [r4, #16]
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a80:	0800ba7f 	.word	0x0800ba7f
 8008a84:	0800ba90 	.word	0x0800ba90

08008a88 <__s2b>:
 8008a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	4615      	mov	r5, r2
 8008a90:	461f      	mov	r7, r3
 8008a92:	2209      	movs	r2, #9
 8008a94:	3308      	adds	r3, #8
 8008a96:	4606      	mov	r6, r0
 8008a98:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	db09      	blt.n	8008ab8 <__s2b+0x30>
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f7ff ff47 	bl	8008938 <_Balloc>
 8008aaa:	b940      	cbnz	r0, 8008abe <__s2b+0x36>
 8008aac:	4602      	mov	r2, r0
 8008aae:	4b19      	ldr	r3, [pc, #100]	@ (8008b14 <__s2b+0x8c>)
 8008ab0:	4819      	ldr	r0, [pc, #100]	@ (8008b18 <__s2b+0x90>)
 8008ab2:	21d3      	movs	r1, #211	@ 0xd3
 8008ab4:	f002 f85c 	bl	800ab70 <__assert_func>
 8008ab8:	0052      	lsls	r2, r2, #1
 8008aba:	3101      	adds	r1, #1
 8008abc:	e7f0      	b.n	8008aa0 <__s2b+0x18>
 8008abe:	9b08      	ldr	r3, [sp, #32]
 8008ac0:	6143      	str	r3, [r0, #20]
 8008ac2:	2d09      	cmp	r5, #9
 8008ac4:	f04f 0301 	mov.w	r3, #1
 8008ac8:	6103      	str	r3, [r0, #16]
 8008aca:	dd16      	ble.n	8008afa <__s2b+0x72>
 8008acc:	f104 0909 	add.w	r9, r4, #9
 8008ad0:	46c8      	mov	r8, r9
 8008ad2:	442c      	add	r4, r5
 8008ad4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ad8:	4601      	mov	r1, r0
 8008ada:	3b30      	subs	r3, #48	@ 0x30
 8008adc:	220a      	movs	r2, #10
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f7ff ff8c 	bl	80089fc <__multadd>
 8008ae4:	45a0      	cmp	r8, r4
 8008ae6:	d1f5      	bne.n	8008ad4 <__s2b+0x4c>
 8008ae8:	f1a5 0408 	sub.w	r4, r5, #8
 8008aec:	444c      	add	r4, r9
 8008aee:	1b2d      	subs	r5, r5, r4
 8008af0:	1963      	adds	r3, r4, r5
 8008af2:	42bb      	cmp	r3, r7
 8008af4:	db04      	blt.n	8008b00 <__s2b+0x78>
 8008af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008afa:	340a      	adds	r4, #10
 8008afc:	2509      	movs	r5, #9
 8008afe:	e7f6      	b.n	8008aee <__s2b+0x66>
 8008b00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b04:	4601      	mov	r1, r0
 8008b06:	3b30      	subs	r3, #48	@ 0x30
 8008b08:	220a      	movs	r2, #10
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f7ff ff76 	bl	80089fc <__multadd>
 8008b10:	e7ee      	b.n	8008af0 <__s2b+0x68>
 8008b12:	bf00      	nop
 8008b14:	0800ba7f 	.word	0x0800ba7f
 8008b18:	0800ba90 	.word	0x0800ba90

08008b1c <__hi0bits>:
 8008b1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b20:	4603      	mov	r3, r0
 8008b22:	bf36      	itet	cc
 8008b24:	0403      	lslcc	r3, r0, #16
 8008b26:	2000      	movcs	r0, #0
 8008b28:	2010      	movcc	r0, #16
 8008b2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b2e:	bf3c      	itt	cc
 8008b30:	021b      	lslcc	r3, r3, #8
 8008b32:	3008      	addcc	r0, #8
 8008b34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b38:	bf3c      	itt	cc
 8008b3a:	011b      	lslcc	r3, r3, #4
 8008b3c:	3004      	addcc	r0, #4
 8008b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b42:	bf3c      	itt	cc
 8008b44:	009b      	lslcc	r3, r3, #2
 8008b46:	3002      	addcc	r0, #2
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	db05      	blt.n	8008b58 <__hi0bits+0x3c>
 8008b4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b50:	f100 0001 	add.w	r0, r0, #1
 8008b54:	bf08      	it	eq
 8008b56:	2020      	moveq	r0, #32
 8008b58:	4770      	bx	lr

08008b5a <__lo0bits>:
 8008b5a:	6803      	ldr	r3, [r0, #0]
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	f013 0007 	ands.w	r0, r3, #7
 8008b62:	d00b      	beq.n	8008b7c <__lo0bits+0x22>
 8008b64:	07d9      	lsls	r1, r3, #31
 8008b66:	d421      	bmi.n	8008bac <__lo0bits+0x52>
 8008b68:	0798      	lsls	r0, r3, #30
 8008b6a:	bf49      	itett	mi
 8008b6c:	085b      	lsrmi	r3, r3, #1
 8008b6e:	089b      	lsrpl	r3, r3, #2
 8008b70:	2001      	movmi	r0, #1
 8008b72:	6013      	strmi	r3, [r2, #0]
 8008b74:	bf5c      	itt	pl
 8008b76:	6013      	strpl	r3, [r2, #0]
 8008b78:	2002      	movpl	r0, #2
 8008b7a:	4770      	bx	lr
 8008b7c:	b299      	uxth	r1, r3
 8008b7e:	b909      	cbnz	r1, 8008b84 <__lo0bits+0x2a>
 8008b80:	0c1b      	lsrs	r3, r3, #16
 8008b82:	2010      	movs	r0, #16
 8008b84:	b2d9      	uxtb	r1, r3
 8008b86:	b909      	cbnz	r1, 8008b8c <__lo0bits+0x32>
 8008b88:	3008      	adds	r0, #8
 8008b8a:	0a1b      	lsrs	r3, r3, #8
 8008b8c:	0719      	lsls	r1, r3, #28
 8008b8e:	bf04      	itt	eq
 8008b90:	091b      	lsreq	r3, r3, #4
 8008b92:	3004      	addeq	r0, #4
 8008b94:	0799      	lsls	r1, r3, #30
 8008b96:	bf04      	itt	eq
 8008b98:	089b      	lsreq	r3, r3, #2
 8008b9a:	3002      	addeq	r0, #2
 8008b9c:	07d9      	lsls	r1, r3, #31
 8008b9e:	d403      	bmi.n	8008ba8 <__lo0bits+0x4e>
 8008ba0:	085b      	lsrs	r3, r3, #1
 8008ba2:	f100 0001 	add.w	r0, r0, #1
 8008ba6:	d003      	beq.n	8008bb0 <__lo0bits+0x56>
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	4770      	bx	lr
 8008bac:	2000      	movs	r0, #0
 8008bae:	4770      	bx	lr
 8008bb0:	2020      	movs	r0, #32
 8008bb2:	4770      	bx	lr

08008bb4 <__i2b>:
 8008bb4:	b510      	push	{r4, lr}
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	2101      	movs	r1, #1
 8008bba:	f7ff febd 	bl	8008938 <_Balloc>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	b928      	cbnz	r0, 8008bce <__i2b+0x1a>
 8008bc2:	4b05      	ldr	r3, [pc, #20]	@ (8008bd8 <__i2b+0x24>)
 8008bc4:	4805      	ldr	r0, [pc, #20]	@ (8008bdc <__i2b+0x28>)
 8008bc6:	f240 1145 	movw	r1, #325	@ 0x145
 8008bca:	f001 ffd1 	bl	800ab70 <__assert_func>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	6144      	str	r4, [r0, #20]
 8008bd2:	6103      	str	r3, [r0, #16]
 8008bd4:	bd10      	pop	{r4, pc}
 8008bd6:	bf00      	nop
 8008bd8:	0800ba7f 	.word	0x0800ba7f
 8008bdc:	0800ba90 	.word	0x0800ba90

08008be0 <__multiply>:
 8008be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	4614      	mov	r4, r2
 8008be6:	690a      	ldr	r2, [r1, #16]
 8008be8:	6923      	ldr	r3, [r4, #16]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	bfa8      	it	ge
 8008bee:	4623      	movge	r3, r4
 8008bf0:	460f      	mov	r7, r1
 8008bf2:	bfa4      	itt	ge
 8008bf4:	460c      	movge	r4, r1
 8008bf6:	461f      	movge	r7, r3
 8008bf8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008bfc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008c00:	68a3      	ldr	r3, [r4, #8]
 8008c02:	6861      	ldr	r1, [r4, #4]
 8008c04:	eb0a 0609 	add.w	r6, sl, r9
 8008c08:	42b3      	cmp	r3, r6
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	bfb8      	it	lt
 8008c0e:	3101      	addlt	r1, #1
 8008c10:	f7ff fe92 	bl	8008938 <_Balloc>
 8008c14:	b930      	cbnz	r0, 8008c24 <__multiply+0x44>
 8008c16:	4602      	mov	r2, r0
 8008c18:	4b44      	ldr	r3, [pc, #272]	@ (8008d2c <__multiply+0x14c>)
 8008c1a:	4845      	ldr	r0, [pc, #276]	@ (8008d30 <__multiply+0x150>)
 8008c1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c20:	f001 ffa6 	bl	800ab70 <__assert_func>
 8008c24:	f100 0514 	add.w	r5, r0, #20
 8008c28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c2c:	462b      	mov	r3, r5
 8008c2e:	2200      	movs	r2, #0
 8008c30:	4543      	cmp	r3, r8
 8008c32:	d321      	bcc.n	8008c78 <__multiply+0x98>
 8008c34:	f107 0114 	add.w	r1, r7, #20
 8008c38:	f104 0214 	add.w	r2, r4, #20
 8008c3c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008c40:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008c44:	9302      	str	r3, [sp, #8]
 8008c46:	1b13      	subs	r3, r2, r4
 8008c48:	3b15      	subs	r3, #21
 8008c4a:	f023 0303 	bic.w	r3, r3, #3
 8008c4e:	3304      	adds	r3, #4
 8008c50:	f104 0715 	add.w	r7, r4, #21
 8008c54:	42ba      	cmp	r2, r7
 8008c56:	bf38      	it	cc
 8008c58:	2304      	movcc	r3, #4
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	9b02      	ldr	r3, [sp, #8]
 8008c5e:	9103      	str	r1, [sp, #12]
 8008c60:	428b      	cmp	r3, r1
 8008c62:	d80c      	bhi.n	8008c7e <__multiply+0x9e>
 8008c64:	2e00      	cmp	r6, #0
 8008c66:	dd03      	ble.n	8008c70 <__multiply+0x90>
 8008c68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d05b      	beq.n	8008d28 <__multiply+0x148>
 8008c70:	6106      	str	r6, [r0, #16]
 8008c72:	b005      	add	sp, #20
 8008c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c78:	f843 2b04 	str.w	r2, [r3], #4
 8008c7c:	e7d8      	b.n	8008c30 <__multiply+0x50>
 8008c7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c82:	f1ba 0f00 	cmp.w	sl, #0
 8008c86:	d024      	beq.n	8008cd2 <__multiply+0xf2>
 8008c88:	f104 0e14 	add.w	lr, r4, #20
 8008c8c:	46a9      	mov	r9, r5
 8008c8e:	f04f 0c00 	mov.w	ip, #0
 8008c92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c96:	f8d9 3000 	ldr.w	r3, [r9]
 8008c9a:	fa1f fb87 	uxth.w	fp, r7
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ca4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008ca8:	f8d9 7000 	ldr.w	r7, [r9]
 8008cac:	4463      	add	r3, ip
 8008cae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008cb2:	fb0a c70b 	mla	r7, sl, fp, ip
 8008cb6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008cc0:	4572      	cmp	r2, lr
 8008cc2:	f849 3b04 	str.w	r3, [r9], #4
 8008cc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008cca:	d8e2      	bhi.n	8008c92 <__multiply+0xb2>
 8008ccc:	9b01      	ldr	r3, [sp, #4]
 8008cce:	f845 c003 	str.w	ip, [r5, r3]
 8008cd2:	9b03      	ldr	r3, [sp, #12]
 8008cd4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008cd8:	3104      	adds	r1, #4
 8008cda:	f1b9 0f00 	cmp.w	r9, #0
 8008cde:	d021      	beq.n	8008d24 <__multiply+0x144>
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	f104 0c14 	add.w	ip, r4, #20
 8008ce6:	46ae      	mov	lr, r5
 8008ce8:	f04f 0a00 	mov.w	sl, #0
 8008cec:	f8bc b000 	ldrh.w	fp, [ip]
 8008cf0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008cf4:	fb09 770b 	mla	r7, r9, fp, r7
 8008cf8:	4457      	add	r7, sl
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d00:	f84e 3b04 	str.w	r3, [lr], #4
 8008d04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d0c:	f8be 3000 	ldrh.w	r3, [lr]
 8008d10:	fb09 330a 	mla	r3, r9, sl, r3
 8008d14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008d18:	4562      	cmp	r2, ip
 8008d1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d1e:	d8e5      	bhi.n	8008cec <__multiply+0x10c>
 8008d20:	9f01      	ldr	r7, [sp, #4]
 8008d22:	51eb      	str	r3, [r5, r7]
 8008d24:	3504      	adds	r5, #4
 8008d26:	e799      	b.n	8008c5c <__multiply+0x7c>
 8008d28:	3e01      	subs	r6, #1
 8008d2a:	e79b      	b.n	8008c64 <__multiply+0x84>
 8008d2c:	0800ba7f 	.word	0x0800ba7f
 8008d30:	0800ba90 	.word	0x0800ba90

08008d34 <__pow5mult>:
 8008d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d38:	4615      	mov	r5, r2
 8008d3a:	f012 0203 	ands.w	r2, r2, #3
 8008d3e:	4607      	mov	r7, r0
 8008d40:	460e      	mov	r6, r1
 8008d42:	d007      	beq.n	8008d54 <__pow5mult+0x20>
 8008d44:	4c25      	ldr	r4, [pc, #148]	@ (8008ddc <__pow5mult+0xa8>)
 8008d46:	3a01      	subs	r2, #1
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d4e:	f7ff fe55 	bl	80089fc <__multadd>
 8008d52:	4606      	mov	r6, r0
 8008d54:	10ad      	asrs	r5, r5, #2
 8008d56:	d03d      	beq.n	8008dd4 <__pow5mult+0xa0>
 8008d58:	69fc      	ldr	r4, [r7, #28]
 8008d5a:	b97c      	cbnz	r4, 8008d7c <__pow5mult+0x48>
 8008d5c:	2010      	movs	r0, #16
 8008d5e:	f7ff fd35 	bl	80087cc <malloc>
 8008d62:	4602      	mov	r2, r0
 8008d64:	61f8      	str	r0, [r7, #28]
 8008d66:	b928      	cbnz	r0, 8008d74 <__pow5mult+0x40>
 8008d68:	4b1d      	ldr	r3, [pc, #116]	@ (8008de0 <__pow5mult+0xac>)
 8008d6a:	481e      	ldr	r0, [pc, #120]	@ (8008de4 <__pow5mult+0xb0>)
 8008d6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008d70:	f001 fefe 	bl	800ab70 <__assert_func>
 8008d74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d78:	6004      	str	r4, [r0, #0]
 8008d7a:	60c4      	str	r4, [r0, #12]
 8008d7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d84:	b94c      	cbnz	r4, 8008d9a <__pow5mult+0x66>
 8008d86:	f240 2171 	movw	r1, #625	@ 0x271
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	f7ff ff12 	bl	8008bb4 <__i2b>
 8008d90:	2300      	movs	r3, #0
 8008d92:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d96:	4604      	mov	r4, r0
 8008d98:	6003      	str	r3, [r0, #0]
 8008d9a:	f04f 0900 	mov.w	r9, #0
 8008d9e:	07eb      	lsls	r3, r5, #31
 8008da0:	d50a      	bpl.n	8008db8 <__pow5mult+0x84>
 8008da2:	4631      	mov	r1, r6
 8008da4:	4622      	mov	r2, r4
 8008da6:	4638      	mov	r0, r7
 8008da8:	f7ff ff1a 	bl	8008be0 <__multiply>
 8008dac:	4631      	mov	r1, r6
 8008dae:	4680      	mov	r8, r0
 8008db0:	4638      	mov	r0, r7
 8008db2:	f7ff fe01 	bl	80089b8 <_Bfree>
 8008db6:	4646      	mov	r6, r8
 8008db8:	106d      	asrs	r5, r5, #1
 8008dba:	d00b      	beq.n	8008dd4 <__pow5mult+0xa0>
 8008dbc:	6820      	ldr	r0, [r4, #0]
 8008dbe:	b938      	cbnz	r0, 8008dd0 <__pow5mult+0x9c>
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	4638      	mov	r0, r7
 8008dc6:	f7ff ff0b 	bl	8008be0 <__multiply>
 8008dca:	6020      	str	r0, [r4, #0]
 8008dcc:	f8c0 9000 	str.w	r9, [r0]
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	e7e4      	b.n	8008d9e <__pow5mult+0x6a>
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dda:	bf00      	nop
 8008ddc:	0800baec 	.word	0x0800baec
 8008de0:	0800ba10 	.word	0x0800ba10
 8008de4:	0800ba90 	.word	0x0800ba90

08008de8 <__lshift>:
 8008de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dec:	460c      	mov	r4, r1
 8008dee:	6849      	ldr	r1, [r1, #4]
 8008df0:	6923      	ldr	r3, [r4, #16]
 8008df2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008df6:	68a3      	ldr	r3, [r4, #8]
 8008df8:	4607      	mov	r7, r0
 8008dfa:	4691      	mov	r9, r2
 8008dfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e00:	f108 0601 	add.w	r6, r8, #1
 8008e04:	42b3      	cmp	r3, r6
 8008e06:	db0b      	blt.n	8008e20 <__lshift+0x38>
 8008e08:	4638      	mov	r0, r7
 8008e0a:	f7ff fd95 	bl	8008938 <_Balloc>
 8008e0e:	4605      	mov	r5, r0
 8008e10:	b948      	cbnz	r0, 8008e26 <__lshift+0x3e>
 8008e12:	4602      	mov	r2, r0
 8008e14:	4b28      	ldr	r3, [pc, #160]	@ (8008eb8 <__lshift+0xd0>)
 8008e16:	4829      	ldr	r0, [pc, #164]	@ (8008ebc <__lshift+0xd4>)
 8008e18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e1c:	f001 fea8 	bl	800ab70 <__assert_func>
 8008e20:	3101      	adds	r1, #1
 8008e22:	005b      	lsls	r3, r3, #1
 8008e24:	e7ee      	b.n	8008e04 <__lshift+0x1c>
 8008e26:	2300      	movs	r3, #0
 8008e28:	f100 0114 	add.w	r1, r0, #20
 8008e2c:	f100 0210 	add.w	r2, r0, #16
 8008e30:	4618      	mov	r0, r3
 8008e32:	4553      	cmp	r3, sl
 8008e34:	db33      	blt.n	8008e9e <__lshift+0xb6>
 8008e36:	6920      	ldr	r0, [r4, #16]
 8008e38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e3c:	f104 0314 	add.w	r3, r4, #20
 8008e40:	f019 091f 	ands.w	r9, r9, #31
 8008e44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e4c:	d02b      	beq.n	8008ea6 <__lshift+0xbe>
 8008e4e:	f1c9 0e20 	rsb	lr, r9, #32
 8008e52:	468a      	mov	sl, r1
 8008e54:	2200      	movs	r2, #0
 8008e56:	6818      	ldr	r0, [r3, #0]
 8008e58:	fa00 f009 	lsl.w	r0, r0, r9
 8008e5c:	4310      	orrs	r0, r2
 8008e5e:	f84a 0b04 	str.w	r0, [sl], #4
 8008e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e66:	459c      	cmp	ip, r3
 8008e68:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e6c:	d8f3      	bhi.n	8008e56 <__lshift+0x6e>
 8008e6e:	ebac 0304 	sub.w	r3, ip, r4
 8008e72:	3b15      	subs	r3, #21
 8008e74:	f023 0303 	bic.w	r3, r3, #3
 8008e78:	3304      	adds	r3, #4
 8008e7a:	f104 0015 	add.w	r0, r4, #21
 8008e7e:	4584      	cmp	ip, r0
 8008e80:	bf38      	it	cc
 8008e82:	2304      	movcc	r3, #4
 8008e84:	50ca      	str	r2, [r1, r3]
 8008e86:	b10a      	cbz	r2, 8008e8c <__lshift+0xa4>
 8008e88:	f108 0602 	add.w	r6, r8, #2
 8008e8c:	3e01      	subs	r6, #1
 8008e8e:	4638      	mov	r0, r7
 8008e90:	612e      	str	r6, [r5, #16]
 8008e92:	4621      	mov	r1, r4
 8008e94:	f7ff fd90 	bl	80089b8 <_Bfree>
 8008e98:	4628      	mov	r0, r5
 8008e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	e7c5      	b.n	8008e32 <__lshift+0x4a>
 8008ea6:	3904      	subs	r1, #4
 8008ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eac:	f841 2f04 	str.w	r2, [r1, #4]!
 8008eb0:	459c      	cmp	ip, r3
 8008eb2:	d8f9      	bhi.n	8008ea8 <__lshift+0xc0>
 8008eb4:	e7ea      	b.n	8008e8c <__lshift+0xa4>
 8008eb6:	bf00      	nop
 8008eb8:	0800ba7f 	.word	0x0800ba7f
 8008ebc:	0800ba90 	.word	0x0800ba90

08008ec0 <__mcmp>:
 8008ec0:	690a      	ldr	r2, [r1, #16]
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	6900      	ldr	r0, [r0, #16]
 8008ec6:	1a80      	subs	r0, r0, r2
 8008ec8:	b530      	push	{r4, r5, lr}
 8008eca:	d10e      	bne.n	8008eea <__mcmp+0x2a>
 8008ecc:	3314      	adds	r3, #20
 8008ece:	3114      	adds	r1, #20
 8008ed0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ed4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ed8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008edc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ee0:	4295      	cmp	r5, r2
 8008ee2:	d003      	beq.n	8008eec <__mcmp+0x2c>
 8008ee4:	d205      	bcs.n	8008ef2 <__mcmp+0x32>
 8008ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eea:	bd30      	pop	{r4, r5, pc}
 8008eec:	42a3      	cmp	r3, r4
 8008eee:	d3f3      	bcc.n	8008ed8 <__mcmp+0x18>
 8008ef0:	e7fb      	b.n	8008eea <__mcmp+0x2a>
 8008ef2:	2001      	movs	r0, #1
 8008ef4:	e7f9      	b.n	8008eea <__mcmp+0x2a>
	...

08008ef8 <__mdiff>:
 8008ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	4689      	mov	r9, r1
 8008efe:	4606      	mov	r6, r0
 8008f00:	4611      	mov	r1, r2
 8008f02:	4648      	mov	r0, r9
 8008f04:	4614      	mov	r4, r2
 8008f06:	f7ff ffdb 	bl	8008ec0 <__mcmp>
 8008f0a:	1e05      	subs	r5, r0, #0
 8008f0c:	d112      	bne.n	8008f34 <__mdiff+0x3c>
 8008f0e:	4629      	mov	r1, r5
 8008f10:	4630      	mov	r0, r6
 8008f12:	f7ff fd11 	bl	8008938 <_Balloc>
 8008f16:	4602      	mov	r2, r0
 8008f18:	b928      	cbnz	r0, 8008f26 <__mdiff+0x2e>
 8008f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8009018 <__mdiff+0x120>)
 8008f1c:	f240 2137 	movw	r1, #567	@ 0x237
 8008f20:	483e      	ldr	r0, [pc, #248]	@ (800901c <__mdiff+0x124>)
 8008f22:	f001 fe25 	bl	800ab70 <__assert_func>
 8008f26:	2301      	movs	r3, #1
 8008f28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	b003      	add	sp, #12
 8008f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f34:	bfbc      	itt	lt
 8008f36:	464b      	movlt	r3, r9
 8008f38:	46a1      	movlt	r9, r4
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f40:	bfba      	itte	lt
 8008f42:	461c      	movlt	r4, r3
 8008f44:	2501      	movlt	r5, #1
 8008f46:	2500      	movge	r5, #0
 8008f48:	f7ff fcf6 	bl	8008938 <_Balloc>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	b918      	cbnz	r0, 8008f58 <__mdiff+0x60>
 8008f50:	4b31      	ldr	r3, [pc, #196]	@ (8009018 <__mdiff+0x120>)
 8008f52:	f240 2145 	movw	r1, #581	@ 0x245
 8008f56:	e7e3      	b.n	8008f20 <__mdiff+0x28>
 8008f58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008f5c:	6926      	ldr	r6, [r4, #16]
 8008f5e:	60c5      	str	r5, [r0, #12]
 8008f60:	f109 0310 	add.w	r3, r9, #16
 8008f64:	f109 0514 	add.w	r5, r9, #20
 8008f68:	f104 0e14 	add.w	lr, r4, #20
 8008f6c:	f100 0b14 	add.w	fp, r0, #20
 8008f70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f78:	9301      	str	r3, [sp, #4]
 8008f7a:	46d9      	mov	r9, fp
 8008f7c:	f04f 0c00 	mov.w	ip, #0
 8008f80:	9b01      	ldr	r3, [sp, #4]
 8008f82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f8a:	9301      	str	r3, [sp, #4]
 8008f8c:	fa1f f38a 	uxth.w	r3, sl
 8008f90:	4619      	mov	r1, r3
 8008f92:	b283      	uxth	r3, r0
 8008f94:	1acb      	subs	r3, r1, r3
 8008f96:	0c00      	lsrs	r0, r0, #16
 8008f98:	4463      	add	r3, ip
 8008f9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008fa8:	4576      	cmp	r6, lr
 8008faa:	f849 3b04 	str.w	r3, [r9], #4
 8008fae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008fb2:	d8e5      	bhi.n	8008f80 <__mdiff+0x88>
 8008fb4:	1b33      	subs	r3, r6, r4
 8008fb6:	3b15      	subs	r3, #21
 8008fb8:	f023 0303 	bic.w	r3, r3, #3
 8008fbc:	3415      	adds	r4, #21
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	42a6      	cmp	r6, r4
 8008fc2:	bf38      	it	cc
 8008fc4:	2304      	movcc	r3, #4
 8008fc6:	441d      	add	r5, r3
 8008fc8:	445b      	add	r3, fp
 8008fca:	461e      	mov	r6, r3
 8008fcc:	462c      	mov	r4, r5
 8008fce:	4544      	cmp	r4, r8
 8008fd0:	d30e      	bcc.n	8008ff0 <__mdiff+0xf8>
 8008fd2:	f108 0103 	add.w	r1, r8, #3
 8008fd6:	1b49      	subs	r1, r1, r5
 8008fd8:	f021 0103 	bic.w	r1, r1, #3
 8008fdc:	3d03      	subs	r5, #3
 8008fde:	45a8      	cmp	r8, r5
 8008fe0:	bf38      	it	cc
 8008fe2:	2100      	movcc	r1, #0
 8008fe4:	440b      	add	r3, r1
 8008fe6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fea:	b191      	cbz	r1, 8009012 <__mdiff+0x11a>
 8008fec:	6117      	str	r7, [r2, #16]
 8008fee:	e79d      	b.n	8008f2c <__mdiff+0x34>
 8008ff0:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ff4:	46e6      	mov	lr, ip
 8008ff6:	0c08      	lsrs	r0, r1, #16
 8008ff8:	fa1c fc81 	uxtah	ip, ip, r1
 8008ffc:	4471      	add	r1, lr
 8008ffe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009002:	b289      	uxth	r1, r1
 8009004:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009008:	f846 1b04 	str.w	r1, [r6], #4
 800900c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009010:	e7dd      	b.n	8008fce <__mdiff+0xd6>
 8009012:	3f01      	subs	r7, #1
 8009014:	e7e7      	b.n	8008fe6 <__mdiff+0xee>
 8009016:	bf00      	nop
 8009018:	0800ba7f 	.word	0x0800ba7f
 800901c:	0800ba90 	.word	0x0800ba90

08009020 <__ulp>:
 8009020:	b082      	sub	sp, #8
 8009022:	ed8d 0b00 	vstr	d0, [sp]
 8009026:	9a01      	ldr	r2, [sp, #4]
 8009028:	4b0f      	ldr	r3, [pc, #60]	@ (8009068 <__ulp+0x48>)
 800902a:	4013      	ands	r3, r2
 800902c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009030:	2b00      	cmp	r3, #0
 8009032:	dc08      	bgt.n	8009046 <__ulp+0x26>
 8009034:	425b      	negs	r3, r3
 8009036:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800903a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800903e:	da04      	bge.n	800904a <__ulp+0x2a>
 8009040:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009044:	4113      	asrs	r3, r2
 8009046:	2200      	movs	r2, #0
 8009048:	e008      	b.n	800905c <__ulp+0x3c>
 800904a:	f1a2 0314 	sub.w	r3, r2, #20
 800904e:	2b1e      	cmp	r3, #30
 8009050:	bfda      	itte	le
 8009052:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009056:	40da      	lsrle	r2, r3
 8009058:	2201      	movgt	r2, #1
 800905a:	2300      	movs	r3, #0
 800905c:	4619      	mov	r1, r3
 800905e:	4610      	mov	r0, r2
 8009060:	ec41 0b10 	vmov	d0, r0, r1
 8009064:	b002      	add	sp, #8
 8009066:	4770      	bx	lr
 8009068:	7ff00000 	.word	0x7ff00000

0800906c <__b2d>:
 800906c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009070:	6906      	ldr	r6, [r0, #16]
 8009072:	f100 0814 	add.w	r8, r0, #20
 8009076:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800907a:	1f37      	subs	r7, r6, #4
 800907c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009080:	4610      	mov	r0, r2
 8009082:	f7ff fd4b 	bl	8008b1c <__hi0bits>
 8009086:	f1c0 0320 	rsb	r3, r0, #32
 800908a:	280a      	cmp	r0, #10
 800908c:	600b      	str	r3, [r1, #0]
 800908e:	491b      	ldr	r1, [pc, #108]	@ (80090fc <__b2d+0x90>)
 8009090:	dc15      	bgt.n	80090be <__b2d+0x52>
 8009092:	f1c0 0c0b 	rsb	ip, r0, #11
 8009096:	fa22 f30c 	lsr.w	r3, r2, ip
 800909a:	45b8      	cmp	r8, r7
 800909c:	ea43 0501 	orr.w	r5, r3, r1
 80090a0:	bf34      	ite	cc
 80090a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80090a6:	2300      	movcs	r3, #0
 80090a8:	3015      	adds	r0, #21
 80090aa:	fa02 f000 	lsl.w	r0, r2, r0
 80090ae:	fa23 f30c 	lsr.w	r3, r3, ip
 80090b2:	4303      	orrs	r3, r0
 80090b4:	461c      	mov	r4, r3
 80090b6:	ec45 4b10 	vmov	d0, r4, r5
 80090ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090be:	45b8      	cmp	r8, r7
 80090c0:	bf3a      	itte	cc
 80090c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80090c6:	f1a6 0708 	subcc.w	r7, r6, #8
 80090ca:	2300      	movcs	r3, #0
 80090cc:	380b      	subs	r0, #11
 80090ce:	d012      	beq.n	80090f6 <__b2d+0x8a>
 80090d0:	f1c0 0120 	rsb	r1, r0, #32
 80090d4:	fa23 f401 	lsr.w	r4, r3, r1
 80090d8:	4082      	lsls	r2, r0
 80090da:	4322      	orrs	r2, r4
 80090dc:	4547      	cmp	r7, r8
 80090de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80090e2:	bf8c      	ite	hi
 80090e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80090e8:	2200      	movls	r2, #0
 80090ea:	4083      	lsls	r3, r0
 80090ec:	40ca      	lsrs	r2, r1
 80090ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80090f2:	4313      	orrs	r3, r2
 80090f4:	e7de      	b.n	80090b4 <__b2d+0x48>
 80090f6:	ea42 0501 	orr.w	r5, r2, r1
 80090fa:	e7db      	b.n	80090b4 <__b2d+0x48>
 80090fc:	3ff00000 	.word	0x3ff00000

08009100 <__d2b>:
 8009100:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009104:	460f      	mov	r7, r1
 8009106:	2101      	movs	r1, #1
 8009108:	ec59 8b10 	vmov	r8, r9, d0
 800910c:	4616      	mov	r6, r2
 800910e:	f7ff fc13 	bl	8008938 <_Balloc>
 8009112:	4604      	mov	r4, r0
 8009114:	b930      	cbnz	r0, 8009124 <__d2b+0x24>
 8009116:	4602      	mov	r2, r0
 8009118:	4b23      	ldr	r3, [pc, #140]	@ (80091a8 <__d2b+0xa8>)
 800911a:	4824      	ldr	r0, [pc, #144]	@ (80091ac <__d2b+0xac>)
 800911c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009120:	f001 fd26 	bl	800ab70 <__assert_func>
 8009124:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009128:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800912c:	b10d      	cbz	r5, 8009132 <__d2b+0x32>
 800912e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	f1b8 0300 	subs.w	r3, r8, #0
 8009138:	d023      	beq.n	8009182 <__d2b+0x82>
 800913a:	4668      	mov	r0, sp
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	f7ff fd0c 	bl	8008b5a <__lo0bits>
 8009142:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009146:	b1d0      	cbz	r0, 800917e <__d2b+0x7e>
 8009148:	f1c0 0320 	rsb	r3, r0, #32
 800914c:	fa02 f303 	lsl.w	r3, r2, r3
 8009150:	430b      	orrs	r3, r1
 8009152:	40c2      	lsrs	r2, r0
 8009154:	6163      	str	r3, [r4, #20]
 8009156:	9201      	str	r2, [sp, #4]
 8009158:	9b01      	ldr	r3, [sp, #4]
 800915a:	61a3      	str	r3, [r4, #24]
 800915c:	2b00      	cmp	r3, #0
 800915e:	bf0c      	ite	eq
 8009160:	2201      	moveq	r2, #1
 8009162:	2202      	movne	r2, #2
 8009164:	6122      	str	r2, [r4, #16]
 8009166:	b1a5      	cbz	r5, 8009192 <__d2b+0x92>
 8009168:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800916c:	4405      	add	r5, r0
 800916e:	603d      	str	r5, [r7, #0]
 8009170:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009174:	6030      	str	r0, [r6, #0]
 8009176:	4620      	mov	r0, r4
 8009178:	b003      	add	sp, #12
 800917a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800917e:	6161      	str	r1, [r4, #20]
 8009180:	e7ea      	b.n	8009158 <__d2b+0x58>
 8009182:	a801      	add	r0, sp, #4
 8009184:	f7ff fce9 	bl	8008b5a <__lo0bits>
 8009188:	9b01      	ldr	r3, [sp, #4]
 800918a:	6163      	str	r3, [r4, #20]
 800918c:	3020      	adds	r0, #32
 800918e:	2201      	movs	r2, #1
 8009190:	e7e8      	b.n	8009164 <__d2b+0x64>
 8009192:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009196:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800919a:	6038      	str	r0, [r7, #0]
 800919c:	6918      	ldr	r0, [r3, #16]
 800919e:	f7ff fcbd 	bl	8008b1c <__hi0bits>
 80091a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091a6:	e7e5      	b.n	8009174 <__d2b+0x74>
 80091a8:	0800ba7f 	.word	0x0800ba7f
 80091ac:	0800ba90 	.word	0x0800ba90

080091b0 <__ratio>:
 80091b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b4:	b085      	sub	sp, #20
 80091b6:	e9cd 1000 	strd	r1, r0, [sp]
 80091ba:	a902      	add	r1, sp, #8
 80091bc:	f7ff ff56 	bl	800906c <__b2d>
 80091c0:	9800      	ldr	r0, [sp, #0]
 80091c2:	a903      	add	r1, sp, #12
 80091c4:	ec55 4b10 	vmov	r4, r5, d0
 80091c8:	f7ff ff50 	bl	800906c <__b2d>
 80091cc:	9b01      	ldr	r3, [sp, #4]
 80091ce:	6919      	ldr	r1, [r3, #16]
 80091d0:	9b00      	ldr	r3, [sp, #0]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	1ac9      	subs	r1, r1, r3
 80091d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80091da:	1a9b      	subs	r3, r3, r2
 80091dc:	ec5b ab10 	vmov	sl, fp, d0
 80091e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	bfce      	itee	gt
 80091e8:	462a      	movgt	r2, r5
 80091ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80091ee:	465a      	movle	r2, fp
 80091f0:	462f      	mov	r7, r5
 80091f2:	46d9      	mov	r9, fp
 80091f4:	bfcc      	ite	gt
 80091f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80091fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80091fe:	464b      	mov	r3, r9
 8009200:	4652      	mov	r2, sl
 8009202:	4620      	mov	r0, r4
 8009204:	4639      	mov	r1, r7
 8009206:	f7f7 fb41 	bl	800088c <__aeabi_ddiv>
 800920a:	ec41 0b10 	vmov	d0, r0, r1
 800920e:	b005      	add	sp, #20
 8009210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009214 <__copybits>:
 8009214:	3901      	subs	r1, #1
 8009216:	b570      	push	{r4, r5, r6, lr}
 8009218:	1149      	asrs	r1, r1, #5
 800921a:	6914      	ldr	r4, [r2, #16]
 800921c:	3101      	adds	r1, #1
 800921e:	f102 0314 	add.w	r3, r2, #20
 8009222:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009226:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800922a:	1f05      	subs	r5, r0, #4
 800922c:	42a3      	cmp	r3, r4
 800922e:	d30c      	bcc.n	800924a <__copybits+0x36>
 8009230:	1aa3      	subs	r3, r4, r2
 8009232:	3b11      	subs	r3, #17
 8009234:	f023 0303 	bic.w	r3, r3, #3
 8009238:	3211      	adds	r2, #17
 800923a:	42a2      	cmp	r2, r4
 800923c:	bf88      	it	hi
 800923e:	2300      	movhi	r3, #0
 8009240:	4418      	add	r0, r3
 8009242:	2300      	movs	r3, #0
 8009244:	4288      	cmp	r0, r1
 8009246:	d305      	bcc.n	8009254 <__copybits+0x40>
 8009248:	bd70      	pop	{r4, r5, r6, pc}
 800924a:	f853 6b04 	ldr.w	r6, [r3], #4
 800924e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009252:	e7eb      	b.n	800922c <__copybits+0x18>
 8009254:	f840 3b04 	str.w	r3, [r0], #4
 8009258:	e7f4      	b.n	8009244 <__copybits+0x30>

0800925a <__any_on>:
 800925a:	f100 0214 	add.w	r2, r0, #20
 800925e:	6900      	ldr	r0, [r0, #16]
 8009260:	114b      	asrs	r3, r1, #5
 8009262:	4298      	cmp	r0, r3
 8009264:	b510      	push	{r4, lr}
 8009266:	db11      	blt.n	800928c <__any_on+0x32>
 8009268:	dd0a      	ble.n	8009280 <__any_on+0x26>
 800926a:	f011 011f 	ands.w	r1, r1, #31
 800926e:	d007      	beq.n	8009280 <__any_on+0x26>
 8009270:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009274:	fa24 f001 	lsr.w	r0, r4, r1
 8009278:	fa00 f101 	lsl.w	r1, r0, r1
 800927c:	428c      	cmp	r4, r1
 800927e:	d10b      	bne.n	8009298 <__any_on+0x3e>
 8009280:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009284:	4293      	cmp	r3, r2
 8009286:	d803      	bhi.n	8009290 <__any_on+0x36>
 8009288:	2000      	movs	r0, #0
 800928a:	bd10      	pop	{r4, pc}
 800928c:	4603      	mov	r3, r0
 800928e:	e7f7      	b.n	8009280 <__any_on+0x26>
 8009290:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009294:	2900      	cmp	r1, #0
 8009296:	d0f5      	beq.n	8009284 <__any_on+0x2a>
 8009298:	2001      	movs	r0, #1
 800929a:	e7f6      	b.n	800928a <__any_on+0x30>

0800929c <sulp>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	4604      	mov	r4, r0
 80092a0:	460d      	mov	r5, r1
 80092a2:	ec45 4b10 	vmov	d0, r4, r5
 80092a6:	4616      	mov	r6, r2
 80092a8:	f7ff feba 	bl	8009020 <__ulp>
 80092ac:	ec51 0b10 	vmov	r0, r1, d0
 80092b0:	b17e      	cbz	r6, 80092d2 <sulp+0x36>
 80092b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80092b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	dd09      	ble.n	80092d2 <sulp+0x36>
 80092be:	051b      	lsls	r3, r3, #20
 80092c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80092c4:	2400      	movs	r4, #0
 80092c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80092ca:	4622      	mov	r2, r4
 80092cc:	462b      	mov	r3, r5
 80092ce:	f7f7 f9b3 	bl	8000638 <__aeabi_dmul>
 80092d2:	ec41 0b10 	vmov	d0, r0, r1
 80092d6:	bd70      	pop	{r4, r5, r6, pc}

080092d8 <_strtod_l>:
 80092d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092dc:	b09f      	sub	sp, #124	@ 0x7c
 80092de:	460c      	mov	r4, r1
 80092e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80092e2:	2200      	movs	r2, #0
 80092e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80092e6:	9005      	str	r0, [sp, #20]
 80092e8:	f04f 0a00 	mov.w	sl, #0
 80092ec:	f04f 0b00 	mov.w	fp, #0
 80092f0:	460a      	mov	r2, r1
 80092f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80092f4:	7811      	ldrb	r1, [r2, #0]
 80092f6:	292b      	cmp	r1, #43	@ 0x2b
 80092f8:	d04a      	beq.n	8009390 <_strtod_l+0xb8>
 80092fa:	d838      	bhi.n	800936e <_strtod_l+0x96>
 80092fc:	290d      	cmp	r1, #13
 80092fe:	d832      	bhi.n	8009366 <_strtod_l+0x8e>
 8009300:	2908      	cmp	r1, #8
 8009302:	d832      	bhi.n	800936a <_strtod_l+0x92>
 8009304:	2900      	cmp	r1, #0
 8009306:	d03b      	beq.n	8009380 <_strtod_l+0xa8>
 8009308:	2200      	movs	r2, #0
 800930a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800930c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800930e:	782a      	ldrb	r2, [r5, #0]
 8009310:	2a30      	cmp	r2, #48	@ 0x30
 8009312:	f040 80b3 	bne.w	800947c <_strtod_l+0x1a4>
 8009316:	786a      	ldrb	r2, [r5, #1]
 8009318:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800931c:	2a58      	cmp	r2, #88	@ 0x58
 800931e:	d16e      	bne.n	80093fe <_strtod_l+0x126>
 8009320:	9302      	str	r3, [sp, #8]
 8009322:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	ab1a      	add	r3, sp, #104	@ 0x68
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	4a8e      	ldr	r2, [pc, #568]	@ (8009564 <_strtod_l+0x28c>)
 800932c:	9805      	ldr	r0, [sp, #20]
 800932e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009330:	a919      	add	r1, sp, #100	@ 0x64
 8009332:	f001 fcb7 	bl	800aca4 <__gethex>
 8009336:	f010 060f 	ands.w	r6, r0, #15
 800933a:	4604      	mov	r4, r0
 800933c:	d005      	beq.n	800934a <_strtod_l+0x72>
 800933e:	2e06      	cmp	r6, #6
 8009340:	d128      	bne.n	8009394 <_strtod_l+0xbc>
 8009342:	3501      	adds	r5, #1
 8009344:	2300      	movs	r3, #0
 8009346:	9519      	str	r5, [sp, #100]	@ 0x64
 8009348:	930b      	str	r3, [sp, #44]	@ 0x2c
 800934a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800934c:	2b00      	cmp	r3, #0
 800934e:	f040 858e 	bne.w	8009e6e <_strtod_l+0xb96>
 8009352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009354:	b1cb      	cbz	r3, 800938a <_strtod_l+0xb2>
 8009356:	4652      	mov	r2, sl
 8009358:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800935c:	ec43 2b10 	vmov	d0, r2, r3
 8009360:	b01f      	add	sp, #124	@ 0x7c
 8009362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009366:	2920      	cmp	r1, #32
 8009368:	d1ce      	bne.n	8009308 <_strtod_l+0x30>
 800936a:	3201      	adds	r2, #1
 800936c:	e7c1      	b.n	80092f2 <_strtod_l+0x1a>
 800936e:	292d      	cmp	r1, #45	@ 0x2d
 8009370:	d1ca      	bne.n	8009308 <_strtod_l+0x30>
 8009372:	2101      	movs	r1, #1
 8009374:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009376:	1c51      	adds	r1, r2, #1
 8009378:	9119      	str	r1, [sp, #100]	@ 0x64
 800937a:	7852      	ldrb	r2, [r2, #1]
 800937c:	2a00      	cmp	r2, #0
 800937e:	d1c5      	bne.n	800930c <_strtod_l+0x34>
 8009380:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009382:	9419      	str	r4, [sp, #100]	@ 0x64
 8009384:	2b00      	cmp	r3, #0
 8009386:	f040 8570 	bne.w	8009e6a <_strtod_l+0xb92>
 800938a:	4652      	mov	r2, sl
 800938c:	465b      	mov	r3, fp
 800938e:	e7e5      	b.n	800935c <_strtod_l+0x84>
 8009390:	2100      	movs	r1, #0
 8009392:	e7ef      	b.n	8009374 <_strtod_l+0x9c>
 8009394:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009396:	b13a      	cbz	r2, 80093a8 <_strtod_l+0xd0>
 8009398:	2135      	movs	r1, #53	@ 0x35
 800939a:	a81c      	add	r0, sp, #112	@ 0x70
 800939c:	f7ff ff3a 	bl	8009214 <__copybits>
 80093a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093a2:	9805      	ldr	r0, [sp, #20]
 80093a4:	f7ff fb08 	bl	80089b8 <_Bfree>
 80093a8:	3e01      	subs	r6, #1
 80093aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80093ac:	2e04      	cmp	r6, #4
 80093ae:	d806      	bhi.n	80093be <_strtod_l+0xe6>
 80093b0:	e8df f006 	tbb	[pc, r6]
 80093b4:	201d0314 	.word	0x201d0314
 80093b8:	14          	.byte	0x14
 80093b9:	00          	.byte	0x00
 80093ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80093be:	05e1      	lsls	r1, r4, #23
 80093c0:	bf48      	it	mi
 80093c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80093c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093ca:	0d1b      	lsrs	r3, r3, #20
 80093cc:	051b      	lsls	r3, r3, #20
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1bb      	bne.n	800934a <_strtod_l+0x72>
 80093d2:	f7fe fb31 	bl	8007a38 <__errno>
 80093d6:	2322      	movs	r3, #34	@ 0x22
 80093d8:	6003      	str	r3, [r0, #0]
 80093da:	e7b6      	b.n	800934a <_strtod_l+0x72>
 80093dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80093e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80093e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80093e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80093ec:	e7e7      	b.n	80093be <_strtod_l+0xe6>
 80093ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800956c <_strtod_l+0x294>
 80093f2:	e7e4      	b.n	80093be <_strtod_l+0xe6>
 80093f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80093f8:	f04f 3aff 	mov.w	sl, #4294967295
 80093fc:	e7df      	b.n	80093be <_strtod_l+0xe6>
 80093fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	9219      	str	r2, [sp, #100]	@ 0x64
 8009404:	785b      	ldrb	r3, [r3, #1]
 8009406:	2b30      	cmp	r3, #48	@ 0x30
 8009408:	d0f9      	beq.n	80093fe <_strtod_l+0x126>
 800940a:	2b00      	cmp	r3, #0
 800940c:	d09d      	beq.n	800934a <_strtod_l+0x72>
 800940e:	2301      	movs	r3, #1
 8009410:	9309      	str	r3, [sp, #36]	@ 0x24
 8009412:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009414:	930c      	str	r3, [sp, #48]	@ 0x30
 8009416:	2300      	movs	r3, #0
 8009418:	9308      	str	r3, [sp, #32]
 800941a:	930a      	str	r3, [sp, #40]	@ 0x28
 800941c:	461f      	mov	r7, r3
 800941e:	220a      	movs	r2, #10
 8009420:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009422:	7805      	ldrb	r5, [r0, #0]
 8009424:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009428:	b2d9      	uxtb	r1, r3
 800942a:	2909      	cmp	r1, #9
 800942c:	d928      	bls.n	8009480 <_strtod_l+0x1a8>
 800942e:	494e      	ldr	r1, [pc, #312]	@ (8009568 <_strtod_l+0x290>)
 8009430:	2201      	movs	r2, #1
 8009432:	f001 fb62 	bl	800aafa <strncmp>
 8009436:	2800      	cmp	r0, #0
 8009438:	d032      	beq.n	80094a0 <_strtod_l+0x1c8>
 800943a:	2000      	movs	r0, #0
 800943c:	462a      	mov	r2, r5
 800943e:	4681      	mov	r9, r0
 8009440:	463d      	mov	r5, r7
 8009442:	4603      	mov	r3, r0
 8009444:	2a65      	cmp	r2, #101	@ 0x65
 8009446:	d001      	beq.n	800944c <_strtod_l+0x174>
 8009448:	2a45      	cmp	r2, #69	@ 0x45
 800944a:	d114      	bne.n	8009476 <_strtod_l+0x19e>
 800944c:	b91d      	cbnz	r5, 8009456 <_strtod_l+0x17e>
 800944e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009450:	4302      	orrs	r2, r0
 8009452:	d095      	beq.n	8009380 <_strtod_l+0xa8>
 8009454:	2500      	movs	r5, #0
 8009456:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009458:	1c62      	adds	r2, r4, #1
 800945a:	9219      	str	r2, [sp, #100]	@ 0x64
 800945c:	7862      	ldrb	r2, [r4, #1]
 800945e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009460:	d077      	beq.n	8009552 <_strtod_l+0x27a>
 8009462:	2a2d      	cmp	r2, #45	@ 0x2d
 8009464:	d07b      	beq.n	800955e <_strtod_l+0x286>
 8009466:	f04f 0c00 	mov.w	ip, #0
 800946a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800946e:	2909      	cmp	r1, #9
 8009470:	f240 8082 	bls.w	8009578 <_strtod_l+0x2a0>
 8009474:	9419      	str	r4, [sp, #100]	@ 0x64
 8009476:	f04f 0800 	mov.w	r8, #0
 800947a:	e0a2      	b.n	80095c2 <_strtod_l+0x2ea>
 800947c:	2300      	movs	r3, #0
 800947e:	e7c7      	b.n	8009410 <_strtod_l+0x138>
 8009480:	2f08      	cmp	r7, #8
 8009482:	bfd5      	itete	le
 8009484:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009486:	9908      	ldrgt	r1, [sp, #32]
 8009488:	fb02 3301 	mlale	r3, r2, r1, r3
 800948c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009490:	f100 0001 	add.w	r0, r0, #1
 8009494:	bfd4      	ite	le
 8009496:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009498:	9308      	strgt	r3, [sp, #32]
 800949a:	3701      	adds	r7, #1
 800949c:	9019      	str	r0, [sp, #100]	@ 0x64
 800949e:	e7bf      	b.n	8009420 <_strtod_l+0x148>
 80094a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80094a6:	785a      	ldrb	r2, [r3, #1]
 80094a8:	b37f      	cbz	r7, 800950a <_strtod_l+0x232>
 80094aa:	4681      	mov	r9, r0
 80094ac:	463d      	mov	r5, r7
 80094ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80094b2:	2b09      	cmp	r3, #9
 80094b4:	d912      	bls.n	80094dc <_strtod_l+0x204>
 80094b6:	2301      	movs	r3, #1
 80094b8:	e7c4      	b.n	8009444 <_strtod_l+0x16c>
 80094ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	9219      	str	r2, [sp, #100]	@ 0x64
 80094c0:	785a      	ldrb	r2, [r3, #1]
 80094c2:	3001      	adds	r0, #1
 80094c4:	2a30      	cmp	r2, #48	@ 0x30
 80094c6:	d0f8      	beq.n	80094ba <_strtod_l+0x1e2>
 80094c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80094cc:	2b08      	cmp	r3, #8
 80094ce:	f200 84d3 	bhi.w	8009e78 <_strtod_l+0xba0>
 80094d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80094d6:	4681      	mov	r9, r0
 80094d8:	2000      	movs	r0, #0
 80094da:	4605      	mov	r5, r0
 80094dc:	3a30      	subs	r2, #48	@ 0x30
 80094de:	f100 0301 	add.w	r3, r0, #1
 80094e2:	d02a      	beq.n	800953a <_strtod_l+0x262>
 80094e4:	4499      	add	r9, r3
 80094e6:	eb00 0c05 	add.w	ip, r0, r5
 80094ea:	462b      	mov	r3, r5
 80094ec:	210a      	movs	r1, #10
 80094ee:	4563      	cmp	r3, ip
 80094f0:	d10d      	bne.n	800950e <_strtod_l+0x236>
 80094f2:	1c69      	adds	r1, r5, #1
 80094f4:	4401      	add	r1, r0
 80094f6:	4428      	add	r0, r5
 80094f8:	2808      	cmp	r0, #8
 80094fa:	dc16      	bgt.n	800952a <_strtod_l+0x252>
 80094fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80094fe:	230a      	movs	r3, #10
 8009500:	fb03 2300 	mla	r3, r3, r0, r2
 8009504:	930a      	str	r3, [sp, #40]	@ 0x28
 8009506:	2300      	movs	r3, #0
 8009508:	e018      	b.n	800953c <_strtod_l+0x264>
 800950a:	4638      	mov	r0, r7
 800950c:	e7da      	b.n	80094c4 <_strtod_l+0x1ec>
 800950e:	2b08      	cmp	r3, #8
 8009510:	f103 0301 	add.w	r3, r3, #1
 8009514:	dc03      	bgt.n	800951e <_strtod_l+0x246>
 8009516:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009518:	434e      	muls	r6, r1
 800951a:	960a      	str	r6, [sp, #40]	@ 0x28
 800951c:	e7e7      	b.n	80094ee <_strtod_l+0x216>
 800951e:	2b10      	cmp	r3, #16
 8009520:	bfde      	ittt	le
 8009522:	9e08      	ldrle	r6, [sp, #32]
 8009524:	434e      	mulle	r6, r1
 8009526:	9608      	strle	r6, [sp, #32]
 8009528:	e7e1      	b.n	80094ee <_strtod_l+0x216>
 800952a:	280f      	cmp	r0, #15
 800952c:	dceb      	bgt.n	8009506 <_strtod_l+0x22e>
 800952e:	9808      	ldr	r0, [sp, #32]
 8009530:	230a      	movs	r3, #10
 8009532:	fb03 2300 	mla	r3, r3, r0, r2
 8009536:	9308      	str	r3, [sp, #32]
 8009538:	e7e5      	b.n	8009506 <_strtod_l+0x22e>
 800953a:	4629      	mov	r1, r5
 800953c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800953e:	1c50      	adds	r0, r2, #1
 8009540:	9019      	str	r0, [sp, #100]	@ 0x64
 8009542:	7852      	ldrb	r2, [r2, #1]
 8009544:	4618      	mov	r0, r3
 8009546:	460d      	mov	r5, r1
 8009548:	e7b1      	b.n	80094ae <_strtod_l+0x1d6>
 800954a:	f04f 0900 	mov.w	r9, #0
 800954e:	2301      	movs	r3, #1
 8009550:	e77d      	b.n	800944e <_strtod_l+0x176>
 8009552:	f04f 0c00 	mov.w	ip, #0
 8009556:	1ca2      	adds	r2, r4, #2
 8009558:	9219      	str	r2, [sp, #100]	@ 0x64
 800955a:	78a2      	ldrb	r2, [r4, #2]
 800955c:	e785      	b.n	800946a <_strtod_l+0x192>
 800955e:	f04f 0c01 	mov.w	ip, #1
 8009562:	e7f8      	b.n	8009556 <_strtod_l+0x27e>
 8009564:	0800bc00 	.word	0x0800bc00
 8009568:	0800bbe8 	.word	0x0800bbe8
 800956c:	7ff00000 	.word	0x7ff00000
 8009570:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009572:	1c51      	adds	r1, r2, #1
 8009574:	9119      	str	r1, [sp, #100]	@ 0x64
 8009576:	7852      	ldrb	r2, [r2, #1]
 8009578:	2a30      	cmp	r2, #48	@ 0x30
 800957a:	d0f9      	beq.n	8009570 <_strtod_l+0x298>
 800957c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009580:	2908      	cmp	r1, #8
 8009582:	f63f af78 	bhi.w	8009476 <_strtod_l+0x19e>
 8009586:	3a30      	subs	r2, #48	@ 0x30
 8009588:	920e      	str	r2, [sp, #56]	@ 0x38
 800958a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800958c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800958e:	f04f 080a 	mov.w	r8, #10
 8009592:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009594:	1c56      	adds	r6, r2, #1
 8009596:	9619      	str	r6, [sp, #100]	@ 0x64
 8009598:	7852      	ldrb	r2, [r2, #1]
 800959a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800959e:	f1be 0f09 	cmp.w	lr, #9
 80095a2:	d939      	bls.n	8009618 <_strtod_l+0x340>
 80095a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80095a6:	1a76      	subs	r6, r6, r1
 80095a8:	2e08      	cmp	r6, #8
 80095aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80095ae:	dc03      	bgt.n	80095b8 <_strtod_l+0x2e0>
 80095b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80095b2:	4588      	cmp	r8, r1
 80095b4:	bfa8      	it	ge
 80095b6:	4688      	movge	r8, r1
 80095b8:	f1bc 0f00 	cmp.w	ip, #0
 80095bc:	d001      	beq.n	80095c2 <_strtod_l+0x2ea>
 80095be:	f1c8 0800 	rsb	r8, r8, #0
 80095c2:	2d00      	cmp	r5, #0
 80095c4:	d14e      	bne.n	8009664 <_strtod_l+0x38c>
 80095c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095c8:	4308      	orrs	r0, r1
 80095ca:	f47f aebe 	bne.w	800934a <_strtod_l+0x72>
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f47f aed6 	bne.w	8009380 <_strtod_l+0xa8>
 80095d4:	2a69      	cmp	r2, #105	@ 0x69
 80095d6:	d028      	beq.n	800962a <_strtod_l+0x352>
 80095d8:	dc25      	bgt.n	8009626 <_strtod_l+0x34e>
 80095da:	2a49      	cmp	r2, #73	@ 0x49
 80095dc:	d025      	beq.n	800962a <_strtod_l+0x352>
 80095de:	2a4e      	cmp	r2, #78	@ 0x4e
 80095e0:	f47f aece 	bne.w	8009380 <_strtod_l+0xa8>
 80095e4:	499b      	ldr	r1, [pc, #620]	@ (8009854 <_strtod_l+0x57c>)
 80095e6:	a819      	add	r0, sp, #100	@ 0x64
 80095e8:	f001 fd7e 	bl	800b0e8 <__match>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	f43f aec7 	beq.w	8009380 <_strtod_l+0xa8>
 80095f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	2b28      	cmp	r3, #40	@ 0x28
 80095f8:	d12e      	bne.n	8009658 <_strtod_l+0x380>
 80095fa:	4997      	ldr	r1, [pc, #604]	@ (8009858 <_strtod_l+0x580>)
 80095fc:	aa1c      	add	r2, sp, #112	@ 0x70
 80095fe:	a819      	add	r0, sp, #100	@ 0x64
 8009600:	f001 fd86 	bl	800b110 <__hexnan>
 8009604:	2805      	cmp	r0, #5
 8009606:	d127      	bne.n	8009658 <_strtod_l+0x380>
 8009608:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800960a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800960e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009612:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009616:	e698      	b.n	800934a <_strtod_l+0x72>
 8009618:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800961a:	fb08 2101 	mla	r1, r8, r1, r2
 800961e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009622:	920e      	str	r2, [sp, #56]	@ 0x38
 8009624:	e7b5      	b.n	8009592 <_strtod_l+0x2ba>
 8009626:	2a6e      	cmp	r2, #110	@ 0x6e
 8009628:	e7da      	b.n	80095e0 <_strtod_l+0x308>
 800962a:	498c      	ldr	r1, [pc, #560]	@ (800985c <_strtod_l+0x584>)
 800962c:	a819      	add	r0, sp, #100	@ 0x64
 800962e:	f001 fd5b 	bl	800b0e8 <__match>
 8009632:	2800      	cmp	r0, #0
 8009634:	f43f aea4 	beq.w	8009380 <_strtod_l+0xa8>
 8009638:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800963a:	4989      	ldr	r1, [pc, #548]	@ (8009860 <_strtod_l+0x588>)
 800963c:	3b01      	subs	r3, #1
 800963e:	a819      	add	r0, sp, #100	@ 0x64
 8009640:	9319      	str	r3, [sp, #100]	@ 0x64
 8009642:	f001 fd51 	bl	800b0e8 <__match>
 8009646:	b910      	cbnz	r0, 800964e <_strtod_l+0x376>
 8009648:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800964a:	3301      	adds	r3, #1
 800964c:	9319      	str	r3, [sp, #100]	@ 0x64
 800964e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009870 <_strtod_l+0x598>
 8009652:	f04f 0a00 	mov.w	sl, #0
 8009656:	e678      	b.n	800934a <_strtod_l+0x72>
 8009658:	4882      	ldr	r0, [pc, #520]	@ (8009864 <_strtod_l+0x58c>)
 800965a:	f001 fa81 	bl	800ab60 <nan>
 800965e:	ec5b ab10 	vmov	sl, fp, d0
 8009662:	e672      	b.n	800934a <_strtod_l+0x72>
 8009664:	eba8 0309 	sub.w	r3, r8, r9
 8009668:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800966a:	9309      	str	r3, [sp, #36]	@ 0x24
 800966c:	2f00      	cmp	r7, #0
 800966e:	bf08      	it	eq
 8009670:	462f      	moveq	r7, r5
 8009672:	2d10      	cmp	r5, #16
 8009674:	462c      	mov	r4, r5
 8009676:	bfa8      	it	ge
 8009678:	2410      	movge	r4, #16
 800967a:	f7f6 ff63 	bl	8000544 <__aeabi_ui2d>
 800967e:	2d09      	cmp	r5, #9
 8009680:	4682      	mov	sl, r0
 8009682:	468b      	mov	fp, r1
 8009684:	dc13      	bgt.n	80096ae <_strtod_l+0x3d6>
 8009686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009688:	2b00      	cmp	r3, #0
 800968a:	f43f ae5e 	beq.w	800934a <_strtod_l+0x72>
 800968e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009690:	dd78      	ble.n	8009784 <_strtod_l+0x4ac>
 8009692:	2b16      	cmp	r3, #22
 8009694:	dc5f      	bgt.n	8009756 <_strtod_l+0x47e>
 8009696:	4974      	ldr	r1, [pc, #464]	@ (8009868 <_strtod_l+0x590>)
 8009698:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800969c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096a0:	4652      	mov	r2, sl
 80096a2:	465b      	mov	r3, fp
 80096a4:	f7f6 ffc8 	bl	8000638 <__aeabi_dmul>
 80096a8:	4682      	mov	sl, r0
 80096aa:	468b      	mov	fp, r1
 80096ac:	e64d      	b.n	800934a <_strtod_l+0x72>
 80096ae:	4b6e      	ldr	r3, [pc, #440]	@ (8009868 <_strtod_l+0x590>)
 80096b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80096b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80096b8:	f7f6 ffbe 	bl	8000638 <__aeabi_dmul>
 80096bc:	4682      	mov	sl, r0
 80096be:	9808      	ldr	r0, [sp, #32]
 80096c0:	468b      	mov	fp, r1
 80096c2:	f7f6 ff3f 	bl	8000544 <__aeabi_ui2d>
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	4650      	mov	r0, sl
 80096cc:	4659      	mov	r1, fp
 80096ce:	f7f6 fdfd 	bl	80002cc <__adddf3>
 80096d2:	2d0f      	cmp	r5, #15
 80096d4:	4682      	mov	sl, r0
 80096d6:	468b      	mov	fp, r1
 80096d8:	ddd5      	ble.n	8009686 <_strtod_l+0x3ae>
 80096da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096dc:	1b2c      	subs	r4, r5, r4
 80096de:	441c      	add	r4, r3
 80096e0:	2c00      	cmp	r4, #0
 80096e2:	f340 8096 	ble.w	8009812 <_strtod_l+0x53a>
 80096e6:	f014 030f 	ands.w	r3, r4, #15
 80096ea:	d00a      	beq.n	8009702 <_strtod_l+0x42a>
 80096ec:	495e      	ldr	r1, [pc, #376]	@ (8009868 <_strtod_l+0x590>)
 80096ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096f2:	4652      	mov	r2, sl
 80096f4:	465b      	mov	r3, fp
 80096f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096fa:	f7f6 ff9d 	bl	8000638 <__aeabi_dmul>
 80096fe:	4682      	mov	sl, r0
 8009700:	468b      	mov	fp, r1
 8009702:	f034 040f 	bics.w	r4, r4, #15
 8009706:	d073      	beq.n	80097f0 <_strtod_l+0x518>
 8009708:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800970c:	dd48      	ble.n	80097a0 <_strtod_l+0x4c8>
 800970e:	2400      	movs	r4, #0
 8009710:	46a0      	mov	r8, r4
 8009712:	940a      	str	r4, [sp, #40]	@ 0x28
 8009714:	46a1      	mov	r9, r4
 8009716:	9a05      	ldr	r2, [sp, #20]
 8009718:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009870 <_strtod_l+0x598>
 800971c:	2322      	movs	r3, #34	@ 0x22
 800971e:	6013      	str	r3, [r2, #0]
 8009720:	f04f 0a00 	mov.w	sl, #0
 8009724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009726:	2b00      	cmp	r3, #0
 8009728:	f43f ae0f 	beq.w	800934a <_strtod_l+0x72>
 800972c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800972e:	9805      	ldr	r0, [sp, #20]
 8009730:	f7ff f942 	bl	80089b8 <_Bfree>
 8009734:	9805      	ldr	r0, [sp, #20]
 8009736:	4649      	mov	r1, r9
 8009738:	f7ff f93e 	bl	80089b8 <_Bfree>
 800973c:	9805      	ldr	r0, [sp, #20]
 800973e:	4641      	mov	r1, r8
 8009740:	f7ff f93a 	bl	80089b8 <_Bfree>
 8009744:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009746:	9805      	ldr	r0, [sp, #20]
 8009748:	f7ff f936 	bl	80089b8 <_Bfree>
 800974c:	9805      	ldr	r0, [sp, #20]
 800974e:	4621      	mov	r1, r4
 8009750:	f7ff f932 	bl	80089b8 <_Bfree>
 8009754:	e5f9      	b.n	800934a <_strtod_l+0x72>
 8009756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009758:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800975c:	4293      	cmp	r3, r2
 800975e:	dbbc      	blt.n	80096da <_strtod_l+0x402>
 8009760:	4c41      	ldr	r4, [pc, #260]	@ (8009868 <_strtod_l+0x590>)
 8009762:	f1c5 050f 	rsb	r5, r5, #15
 8009766:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800976a:	4652      	mov	r2, sl
 800976c:	465b      	mov	r3, fp
 800976e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009772:	f7f6 ff61 	bl	8000638 <__aeabi_dmul>
 8009776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009778:	1b5d      	subs	r5, r3, r5
 800977a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800977e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009782:	e78f      	b.n	80096a4 <_strtod_l+0x3cc>
 8009784:	3316      	adds	r3, #22
 8009786:	dba8      	blt.n	80096da <_strtod_l+0x402>
 8009788:	4b37      	ldr	r3, [pc, #220]	@ (8009868 <_strtod_l+0x590>)
 800978a:	eba9 0808 	sub.w	r8, r9, r8
 800978e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009792:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009796:	4650      	mov	r0, sl
 8009798:	4659      	mov	r1, fp
 800979a:	f7f7 f877 	bl	800088c <__aeabi_ddiv>
 800979e:	e783      	b.n	80096a8 <_strtod_l+0x3d0>
 80097a0:	4b32      	ldr	r3, [pc, #200]	@ (800986c <_strtod_l+0x594>)
 80097a2:	9308      	str	r3, [sp, #32]
 80097a4:	2300      	movs	r3, #0
 80097a6:	1124      	asrs	r4, r4, #4
 80097a8:	4650      	mov	r0, sl
 80097aa:	4659      	mov	r1, fp
 80097ac:	461e      	mov	r6, r3
 80097ae:	2c01      	cmp	r4, #1
 80097b0:	dc21      	bgt.n	80097f6 <_strtod_l+0x51e>
 80097b2:	b10b      	cbz	r3, 80097b8 <_strtod_l+0x4e0>
 80097b4:	4682      	mov	sl, r0
 80097b6:	468b      	mov	fp, r1
 80097b8:	492c      	ldr	r1, [pc, #176]	@ (800986c <_strtod_l+0x594>)
 80097ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80097be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80097c2:	4652      	mov	r2, sl
 80097c4:	465b      	mov	r3, fp
 80097c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097ca:	f7f6 ff35 	bl	8000638 <__aeabi_dmul>
 80097ce:	4b28      	ldr	r3, [pc, #160]	@ (8009870 <_strtod_l+0x598>)
 80097d0:	460a      	mov	r2, r1
 80097d2:	400b      	ands	r3, r1
 80097d4:	4927      	ldr	r1, [pc, #156]	@ (8009874 <_strtod_l+0x59c>)
 80097d6:	428b      	cmp	r3, r1
 80097d8:	4682      	mov	sl, r0
 80097da:	d898      	bhi.n	800970e <_strtod_l+0x436>
 80097dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80097e0:	428b      	cmp	r3, r1
 80097e2:	bf86      	itte	hi
 80097e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009878 <_strtod_l+0x5a0>
 80097e8:	f04f 3aff 	movhi.w	sl, #4294967295
 80097ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80097f0:	2300      	movs	r3, #0
 80097f2:	9308      	str	r3, [sp, #32]
 80097f4:	e07a      	b.n	80098ec <_strtod_l+0x614>
 80097f6:	07e2      	lsls	r2, r4, #31
 80097f8:	d505      	bpl.n	8009806 <_strtod_l+0x52e>
 80097fa:	9b08      	ldr	r3, [sp, #32]
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	f7f6 ff1a 	bl	8000638 <__aeabi_dmul>
 8009804:	2301      	movs	r3, #1
 8009806:	9a08      	ldr	r2, [sp, #32]
 8009808:	3208      	adds	r2, #8
 800980a:	3601      	adds	r6, #1
 800980c:	1064      	asrs	r4, r4, #1
 800980e:	9208      	str	r2, [sp, #32]
 8009810:	e7cd      	b.n	80097ae <_strtod_l+0x4d6>
 8009812:	d0ed      	beq.n	80097f0 <_strtod_l+0x518>
 8009814:	4264      	negs	r4, r4
 8009816:	f014 020f 	ands.w	r2, r4, #15
 800981a:	d00a      	beq.n	8009832 <_strtod_l+0x55a>
 800981c:	4b12      	ldr	r3, [pc, #72]	@ (8009868 <_strtod_l+0x590>)
 800981e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009822:	4650      	mov	r0, sl
 8009824:	4659      	mov	r1, fp
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	f7f7 f82f 	bl	800088c <__aeabi_ddiv>
 800982e:	4682      	mov	sl, r0
 8009830:	468b      	mov	fp, r1
 8009832:	1124      	asrs	r4, r4, #4
 8009834:	d0dc      	beq.n	80097f0 <_strtod_l+0x518>
 8009836:	2c1f      	cmp	r4, #31
 8009838:	dd20      	ble.n	800987c <_strtod_l+0x5a4>
 800983a:	2400      	movs	r4, #0
 800983c:	46a0      	mov	r8, r4
 800983e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009840:	46a1      	mov	r9, r4
 8009842:	9a05      	ldr	r2, [sp, #20]
 8009844:	2322      	movs	r3, #34	@ 0x22
 8009846:	f04f 0a00 	mov.w	sl, #0
 800984a:	f04f 0b00 	mov.w	fp, #0
 800984e:	6013      	str	r3, [r2, #0]
 8009850:	e768      	b.n	8009724 <_strtod_l+0x44c>
 8009852:	bf00      	nop
 8009854:	0800b9d9 	.word	0x0800b9d9
 8009858:	0800bbec 	.word	0x0800bbec
 800985c:	0800b9d1 	.word	0x0800b9d1
 8009860:	0800ba06 	.word	0x0800ba06
 8009864:	0800bdb0 	.word	0x0800bdb0
 8009868:	0800bb20 	.word	0x0800bb20
 800986c:	0800baf8 	.word	0x0800baf8
 8009870:	7ff00000 	.word	0x7ff00000
 8009874:	7ca00000 	.word	0x7ca00000
 8009878:	7fefffff 	.word	0x7fefffff
 800987c:	f014 0310 	ands.w	r3, r4, #16
 8009880:	bf18      	it	ne
 8009882:	236a      	movne	r3, #106	@ 0x6a
 8009884:	4ea9      	ldr	r6, [pc, #676]	@ (8009b2c <_strtod_l+0x854>)
 8009886:	9308      	str	r3, [sp, #32]
 8009888:	4650      	mov	r0, sl
 800988a:	4659      	mov	r1, fp
 800988c:	2300      	movs	r3, #0
 800988e:	07e2      	lsls	r2, r4, #31
 8009890:	d504      	bpl.n	800989c <_strtod_l+0x5c4>
 8009892:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009896:	f7f6 fecf 	bl	8000638 <__aeabi_dmul>
 800989a:	2301      	movs	r3, #1
 800989c:	1064      	asrs	r4, r4, #1
 800989e:	f106 0608 	add.w	r6, r6, #8
 80098a2:	d1f4      	bne.n	800988e <_strtod_l+0x5b6>
 80098a4:	b10b      	cbz	r3, 80098aa <_strtod_l+0x5d2>
 80098a6:	4682      	mov	sl, r0
 80098a8:	468b      	mov	fp, r1
 80098aa:	9b08      	ldr	r3, [sp, #32]
 80098ac:	b1b3      	cbz	r3, 80098dc <_strtod_l+0x604>
 80098ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80098b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	4659      	mov	r1, fp
 80098ba:	dd0f      	ble.n	80098dc <_strtod_l+0x604>
 80098bc:	2b1f      	cmp	r3, #31
 80098be:	dd55      	ble.n	800996c <_strtod_l+0x694>
 80098c0:	2b34      	cmp	r3, #52	@ 0x34
 80098c2:	bfde      	ittt	le
 80098c4:	f04f 33ff 	movle.w	r3, #4294967295
 80098c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80098cc:	4093      	lslle	r3, r2
 80098ce:	f04f 0a00 	mov.w	sl, #0
 80098d2:	bfcc      	ite	gt
 80098d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80098d8:	ea03 0b01 	andle.w	fp, r3, r1
 80098dc:	2200      	movs	r2, #0
 80098de:	2300      	movs	r3, #0
 80098e0:	4650      	mov	r0, sl
 80098e2:	4659      	mov	r1, fp
 80098e4:	f7f7 f910 	bl	8000b08 <__aeabi_dcmpeq>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d1a6      	bne.n	800983a <_strtod_l+0x562>
 80098ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80098f2:	9805      	ldr	r0, [sp, #20]
 80098f4:	462b      	mov	r3, r5
 80098f6:	463a      	mov	r2, r7
 80098f8:	f7ff f8c6 	bl	8008a88 <__s2b>
 80098fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80098fe:	2800      	cmp	r0, #0
 8009900:	f43f af05 	beq.w	800970e <_strtod_l+0x436>
 8009904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009906:	2a00      	cmp	r2, #0
 8009908:	eba9 0308 	sub.w	r3, r9, r8
 800990c:	bfa8      	it	ge
 800990e:	2300      	movge	r3, #0
 8009910:	9312      	str	r3, [sp, #72]	@ 0x48
 8009912:	2400      	movs	r4, #0
 8009914:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009918:	9316      	str	r3, [sp, #88]	@ 0x58
 800991a:	46a0      	mov	r8, r4
 800991c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800991e:	9805      	ldr	r0, [sp, #20]
 8009920:	6859      	ldr	r1, [r3, #4]
 8009922:	f7ff f809 	bl	8008938 <_Balloc>
 8009926:	4681      	mov	r9, r0
 8009928:	2800      	cmp	r0, #0
 800992a:	f43f aef4 	beq.w	8009716 <_strtod_l+0x43e>
 800992e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009930:	691a      	ldr	r2, [r3, #16]
 8009932:	3202      	adds	r2, #2
 8009934:	f103 010c 	add.w	r1, r3, #12
 8009938:	0092      	lsls	r2, r2, #2
 800993a:	300c      	adds	r0, #12
 800993c:	f001 f900 	bl	800ab40 <memcpy>
 8009940:	ec4b ab10 	vmov	d0, sl, fp
 8009944:	9805      	ldr	r0, [sp, #20]
 8009946:	aa1c      	add	r2, sp, #112	@ 0x70
 8009948:	a91b      	add	r1, sp, #108	@ 0x6c
 800994a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800994e:	f7ff fbd7 	bl	8009100 <__d2b>
 8009952:	901a      	str	r0, [sp, #104]	@ 0x68
 8009954:	2800      	cmp	r0, #0
 8009956:	f43f aede 	beq.w	8009716 <_strtod_l+0x43e>
 800995a:	9805      	ldr	r0, [sp, #20]
 800995c:	2101      	movs	r1, #1
 800995e:	f7ff f929 	bl	8008bb4 <__i2b>
 8009962:	4680      	mov	r8, r0
 8009964:	b948      	cbnz	r0, 800997a <_strtod_l+0x6a2>
 8009966:	f04f 0800 	mov.w	r8, #0
 800996a:	e6d4      	b.n	8009716 <_strtod_l+0x43e>
 800996c:	f04f 32ff 	mov.w	r2, #4294967295
 8009970:	fa02 f303 	lsl.w	r3, r2, r3
 8009974:	ea03 0a0a 	and.w	sl, r3, sl
 8009978:	e7b0      	b.n	80098dc <_strtod_l+0x604>
 800997a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800997c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800997e:	2d00      	cmp	r5, #0
 8009980:	bfab      	itete	ge
 8009982:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009984:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009986:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009988:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800998a:	bfac      	ite	ge
 800998c:	18ef      	addge	r7, r5, r3
 800998e:	1b5e      	sublt	r6, r3, r5
 8009990:	9b08      	ldr	r3, [sp, #32]
 8009992:	1aed      	subs	r5, r5, r3
 8009994:	4415      	add	r5, r2
 8009996:	4b66      	ldr	r3, [pc, #408]	@ (8009b30 <_strtod_l+0x858>)
 8009998:	3d01      	subs	r5, #1
 800999a:	429d      	cmp	r5, r3
 800999c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80099a0:	da50      	bge.n	8009a44 <_strtod_l+0x76c>
 80099a2:	1b5b      	subs	r3, r3, r5
 80099a4:	2b1f      	cmp	r3, #31
 80099a6:	eba2 0203 	sub.w	r2, r2, r3
 80099aa:	f04f 0101 	mov.w	r1, #1
 80099ae:	dc3d      	bgt.n	8009a2c <_strtod_l+0x754>
 80099b0:	fa01 f303 	lsl.w	r3, r1, r3
 80099b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099b6:	2300      	movs	r3, #0
 80099b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80099ba:	18bd      	adds	r5, r7, r2
 80099bc:	9b08      	ldr	r3, [sp, #32]
 80099be:	42af      	cmp	r7, r5
 80099c0:	4416      	add	r6, r2
 80099c2:	441e      	add	r6, r3
 80099c4:	463b      	mov	r3, r7
 80099c6:	bfa8      	it	ge
 80099c8:	462b      	movge	r3, r5
 80099ca:	42b3      	cmp	r3, r6
 80099cc:	bfa8      	it	ge
 80099ce:	4633      	movge	r3, r6
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	bfc2      	ittt	gt
 80099d4:	1aed      	subgt	r5, r5, r3
 80099d6:	1af6      	subgt	r6, r6, r3
 80099d8:	1aff      	subgt	r7, r7, r3
 80099da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099dc:	2b00      	cmp	r3, #0
 80099de:	dd16      	ble.n	8009a0e <_strtod_l+0x736>
 80099e0:	4641      	mov	r1, r8
 80099e2:	9805      	ldr	r0, [sp, #20]
 80099e4:	461a      	mov	r2, r3
 80099e6:	f7ff f9a5 	bl	8008d34 <__pow5mult>
 80099ea:	4680      	mov	r8, r0
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d0ba      	beq.n	8009966 <_strtod_l+0x68e>
 80099f0:	4601      	mov	r1, r0
 80099f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80099f4:	9805      	ldr	r0, [sp, #20]
 80099f6:	f7ff f8f3 	bl	8008be0 <__multiply>
 80099fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80099fc:	2800      	cmp	r0, #0
 80099fe:	f43f ae8a 	beq.w	8009716 <_strtod_l+0x43e>
 8009a02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a04:	9805      	ldr	r0, [sp, #20]
 8009a06:	f7fe ffd7 	bl	80089b8 <_Bfree>
 8009a0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a0e:	2d00      	cmp	r5, #0
 8009a10:	dc1d      	bgt.n	8009a4e <_strtod_l+0x776>
 8009a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	dd23      	ble.n	8009a60 <_strtod_l+0x788>
 8009a18:	4649      	mov	r1, r9
 8009a1a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009a1c:	9805      	ldr	r0, [sp, #20]
 8009a1e:	f7ff f989 	bl	8008d34 <__pow5mult>
 8009a22:	4681      	mov	r9, r0
 8009a24:	b9e0      	cbnz	r0, 8009a60 <_strtod_l+0x788>
 8009a26:	f04f 0900 	mov.w	r9, #0
 8009a2a:	e674      	b.n	8009716 <_strtod_l+0x43e>
 8009a2c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009a30:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009a34:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009a38:	35e2      	adds	r5, #226	@ 0xe2
 8009a3a:	fa01 f305 	lsl.w	r3, r1, r5
 8009a3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a40:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009a42:	e7ba      	b.n	80099ba <_strtod_l+0x6e2>
 8009a44:	2300      	movs	r3, #0
 8009a46:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a48:	2301      	movs	r3, #1
 8009a4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a4c:	e7b5      	b.n	80099ba <_strtod_l+0x6e2>
 8009a4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a50:	9805      	ldr	r0, [sp, #20]
 8009a52:	462a      	mov	r2, r5
 8009a54:	f7ff f9c8 	bl	8008de8 <__lshift>
 8009a58:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d1d9      	bne.n	8009a12 <_strtod_l+0x73a>
 8009a5e:	e65a      	b.n	8009716 <_strtod_l+0x43e>
 8009a60:	2e00      	cmp	r6, #0
 8009a62:	dd07      	ble.n	8009a74 <_strtod_l+0x79c>
 8009a64:	4649      	mov	r1, r9
 8009a66:	9805      	ldr	r0, [sp, #20]
 8009a68:	4632      	mov	r2, r6
 8009a6a:	f7ff f9bd 	bl	8008de8 <__lshift>
 8009a6e:	4681      	mov	r9, r0
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d0d8      	beq.n	8009a26 <_strtod_l+0x74e>
 8009a74:	2f00      	cmp	r7, #0
 8009a76:	dd08      	ble.n	8009a8a <_strtod_l+0x7b2>
 8009a78:	4641      	mov	r1, r8
 8009a7a:	9805      	ldr	r0, [sp, #20]
 8009a7c:	463a      	mov	r2, r7
 8009a7e:	f7ff f9b3 	bl	8008de8 <__lshift>
 8009a82:	4680      	mov	r8, r0
 8009a84:	2800      	cmp	r0, #0
 8009a86:	f43f ae46 	beq.w	8009716 <_strtod_l+0x43e>
 8009a8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a8c:	9805      	ldr	r0, [sp, #20]
 8009a8e:	464a      	mov	r2, r9
 8009a90:	f7ff fa32 	bl	8008ef8 <__mdiff>
 8009a94:	4604      	mov	r4, r0
 8009a96:	2800      	cmp	r0, #0
 8009a98:	f43f ae3d 	beq.w	8009716 <_strtod_l+0x43e>
 8009a9c:	68c3      	ldr	r3, [r0, #12]
 8009a9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60c3      	str	r3, [r0, #12]
 8009aa4:	4641      	mov	r1, r8
 8009aa6:	f7ff fa0b 	bl	8008ec0 <__mcmp>
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	da46      	bge.n	8009b3c <_strtod_l+0x864>
 8009aae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ab0:	ea53 030a 	orrs.w	r3, r3, sl
 8009ab4:	d16c      	bne.n	8009b90 <_strtod_l+0x8b8>
 8009ab6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d168      	bne.n	8009b90 <_strtod_l+0x8b8>
 8009abe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ac2:	0d1b      	lsrs	r3, r3, #20
 8009ac4:	051b      	lsls	r3, r3, #20
 8009ac6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009aca:	d961      	bls.n	8009b90 <_strtod_l+0x8b8>
 8009acc:	6963      	ldr	r3, [r4, #20]
 8009ace:	b913      	cbnz	r3, 8009ad6 <_strtod_l+0x7fe>
 8009ad0:	6923      	ldr	r3, [r4, #16]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	dd5c      	ble.n	8009b90 <_strtod_l+0x8b8>
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	2201      	movs	r2, #1
 8009ada:	9805      	ldr	r0, [sp, #20]
 8009adc:	f7ff f984 	bl	8008de8 <__lshift>
 8009ae0:	4641      	mov	r1, r8
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	f7ff f9ec 	bl	8008ec0 <__mcmp>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	dd51      	ble.n	8009b90 <_strtod_l+0x8b8>
 8009aec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009af0:	9a08      	ldr	r2, [sp, #32]
 8009af2:	0d1b      	lsrs	r3, r3, #20
 8009af4:	051b      	lsls	r3, r3, #20
 8009af6:	2a00      	cmp	r2, #0
 8009af8:	d06b      	beq.n	8009bd2 <_strtod_l+0x8fa>
 8009afa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009afe:	d868      	bhi.n	8009bd2 <_strtod_l+0x8fa>
 8009b00:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009b04:	f67f ae9d 	bls.w	8009842 <_strtod_l+0x56a>
 8009b08:	4b0a      	ldr	r3, [pc, #40]	@ (8009b34 <_strtod_l+0x85c>)
 8009b0a:	4650      	mov	r0, sl
 8009b0c:	4659      	mov	r1, fp
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f7f6 fd92 	bl	8000638 <__aeabi_dmul>
 8009b14:	4b08      	ldr	r3, [pc, #32]	@ (8009b38 <_strtod_l+0x860>)
 8009b16:	400b      	ands	r3, r1
 8009b18:	4682      	mov	sl, r0
 8009b1a:	468b      	mov	fp, r1
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f47f ae05 	bne.w	800972c <_strtod_l+0x454>
 8009b22:	9a05      	ldr	r2, [sp, #20]
 8009b24:	2322      	movs	r3, #34	@ 0x22
 8009b26:	6013      	str	r3, [r2, #0]
 8009b28:	e600      	b.n	800972c <_strtod_l+0x454>
 8009b2a:	bf00      	nop
 8009b2c:	0800bc18 	.word	0x0800bc18
 8009b30:	fffffc02 	.word	0xfffffc02
 8009b34:	39500000 	.word	0x39500000
 8009b38:	7ff00000 	.word	0x7ff00000
 8009b3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009b40:	d165      	bne.n	8009c0e <_strtod_l+0x936>
 8009b42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009b44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b48:	b35a      	cbz	r2, 8009ba2 <_strtod_l+0x8ca>
 8009b4a:	4a9f      	ldr	r2, [pc, #636]	@ (8009dc8 <_strtod_l+0xaf0>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d12b      	bne.n	8009ba8 <_strtod_l+0x8d0>
 8009b50:	9b08      	ldr	r3, [sp, #32]
 8009b52:	4651      	mov	r1, sl
 8009b54:	b303      	cbz	r3, 8009b98 <_strtod_l+0x8c0>
 8009b56:	4b9d      	ldr	r3, [pc, #628]	@ (8009dcc <_strtod_l+0xaf4>)
 8009b58:	465a      	mov	r2, fp
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009b60:	f04f 32ff 	mov.w	r2, #4294967295
 8009b64:	d81b      	bhi.n	8009b9e <_strtod_l+0x8c6>
 8009b66:	0d1b      	lsrs	r3, r3, #20
 8009b68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b70:	4299      	cmp	r1, r3
 8009b72:	d119      	bne.n	8009ba8 <_strtod_l+0x8d0>
 8009b74:	4b96      	ldr	r3, [pc, #600]	@ (8009dd0 <_strtod_l+0xaf8>)
 8009b76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d102      	bne.n	8009b82 <_strtod_l+0x8aa>
 8009b7c:	3101      	adds	r1, #1
 8009b7e:	f43f adca 	beq.w	8009716 <_strtod_l+0x43e>
 8009b82:	4b92      	ldr	r3, [pc, #584]	@ (8009dcc <_strtod_l+0xaf4>)
 8009b84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b86:	401a      	ands	r2, r3
 8009b88:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009b8c:	f04f 0a00 	mov.w	sl, #0
 8009b90:	9b08      	ldr	r3, [sp, #32]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1b8      	bne.n	8009b08 <_strtod_l+0x830>
 8009b96:	e5c9      	b.n	800972c <_strtod_l+0x454>
 8009b98:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9c:	e7e8      	b.n	8009b70 <_strtod_l+0x898>
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	e7e6      	b.n	8009b70 <_strtod_l+0x898>
 8009ba2:	ea53 030a 	orrs.w	r3, r3, sl
 8009ba6:	d0a1      	beq.n	8009aec <_strtod_l+0x814>
 8009ba8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009baa:	b1db      	cbz	r3, 8009be4 <_strtod_l+0x90c>
 8009bac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bae:	4213      	tst	r3, r2
 8009bb0:	d0ee      	beq.n	8009b90 <_strtod_l+0x8b8>
 8009bb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bb4:	9a08      	ldr	r2, [sp, #32]
 8009bb6:	4650      	mov	r0, sl
 8009bb8:	4659      	mov	r1, fp
 8009bba:	b1bb      	cbz	r3, 8009bec <_strtod_l+0x914>
 8009bbc:	f7ff fb6e 	bl	800929c <sulp>
 8009bc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bc4:	ec53 2b10 	vmov	r2, r3, d0
 8009bc8:	f7f6 fb80 	bl	80002cc <__adddf3>
 8009bcc:	4682      	mov	sl, r0
 8009bce:	468b      	mov	fp, r1
 8009bd0:	e7de      	b.n	8009b90 <_strtod_l+0x8b8>
 8009bd2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009bd6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009bda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009bde:	f04f 3aff 	mov.w	sl, #4294967295
 8009be2:	e7d5      	b.n	8009b90 <_strtod_l+0x8b8>
 8009be4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009be6:	ea13 0f0a 	tst.w	r3, sl
 8009bea:	e7e1      	b.n	8009bb0 <_strtod_l+0x8d8>
 8009bec:	f7ff fb56 	bl	800929c <sulp>
 8009bf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bf4:	ec53 2b10 	vmov	r2, r3, d0
 8009bf8:	f7f6 fb66 	bl	80002c8 <__aeabi_dsub>
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2300      	movs	r3, #0
 8009c00:	4682      	mov	sl, r0
 8009c02:	468b      	mov	fp, r1
 8009c04:	f7f6 ff80 	bl	8000b08 <__aeabi_dcmpeq>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d0c1      	beq.n	8009b90 <_strtod_l+0x8b8>
 8009c0c:	e619      	b.n	8009842 <_strtod_l+0x56a>
 8009c0e:	4641      	mov	r1, r8
 8009c10:	4620      	mov	r0, r4
 8009c12:	f7ff facd 	bl	80091b0 <__ratio>
 8009c16:	ec57 6b10 	vmov	r6, r7, d0
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009c20:	4630      	mov	r0, r6
 8009c22:	4639      	mov	r1, r7
 8009c24:	f7f6 ff84 	bl	8000b30 <__aeabi_dcmple>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d06f      	beq.n	8009d0c <_strtod_l+0xa34>
 8009c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d17a      	bne.n	8009d28 <_strtod_l+0xa50>
 8009c32:	f1ba 0f00 	cmp.w	sl, #0
 8009c36:	d158      	bne.n	8009cea <_strtod_l+0xa12>
 8009c38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d15a      	bne.n	8009cf8 <_strtod_l+0xa20>
 8009c42:	4b64      	ldr	r3, [pc, #400]	@ (8009dd4 <_strtod_l+0xafc>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	4630      	mov	r0, r6
 8009c48:	4639      	mov	r1, r7
 8009c4a:	f7f6 ff67 	bl	8000b1c <__aeabi_dcmplt>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d159      	bne.n	8009d06 <_strtod_l+0xa2e>
 8009c52:	4630      	mov	r0, r6
 8009c54:	4639      	mov	r1, r7
 8009c56:	4b60      	ldr	r3, [pc, #384]	@ (8009dd8 <_strtod_l+0xb00>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f7f6 fced 	bl	8000638 <__aeabi_dmul>
 8009c5e:	4606      	mov	r6, r0
 8009c60:	460f      	mov	r7, r1
 8009c62:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009c66:	9606      	str	r6, [sp, #24]
 8009c68:	9307      	str	r3, [sp, #28]
 8009c6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c6e:	4d57      	ldr	r5, [pc, #348]	@ (8009dcc <_strtod_l+0xaf4>)
 8009c70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c76:	401d      	ands	r5, r3
 8009c78:	4b58      	ldr	r3, [pc, #352]	@ (8009ddc <_strtod_l+0xb04>)
 8009c7a:	429d      	cmp	r5, r3
 8009c7c:	f040 80b2 	bne.w	8009de4 <_strtod_l+0xb0c>
 8009c80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009c86:	ec4b ab10 	vmov	d0, sl, fp
 8009c8a:	f7ff f9c9 	bl	8009020 <__ulp>
 8009c8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c92:	ec51 0b10 	vmov	r0, r1, d0
 8009c96:	f7f6 fccf 	bl	8000638 <__aeabi_dmul>
 8009c9a:	4652      	mov	r2, sl
 8009c9c:	465b      	mov	r3, fp
 8009c9e:	f7f6 fb15 	bl	80002cc <__adddf3>
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	4949      	ldr	r1, [pc, #292]	@ (8009dcc <_strtod_l+0xaf4>)
 8009ca6:	4a4e      	ldr	r2, [pc, #312]	@ (8009de0 <_strtod_l+0xb08>)
 8009ca8:	4019      	ands	r1, r3
 8009caa:	4291      	cmp	r1, r2
 8009cac:	4682      	mov	sl, r0
 8009cae:	d942      	bls.n	8009d36 <_strtod_l+0xa5e>
 8009cb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009cb2:	4b47      	ldr	r3, [pc, #284]	@ (8009dd0 <_strtod_l+0xaf8>)
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d103      	bne.n	8009cc0 <_strtod_l+0x9e8>
 8009cb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009cba:	3301      	adds	r3, #1
 8009cbc:	f43f ad2b 	beq.w	8009716 <_strtod_l+0x43e>
 8009cc0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009dd0 <_strtod_l+0xaf8>
 8009cc4:	f04f 3aff 	mov.w	sl, #4294967295
 8009cc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cca:	9805      	ldr	r0, [sp, #20]
 8009ccc:	f7fe fe74 	bl	80089b8 <_Bfree>
 8009cd0:	9805      	ldr	r0, [sp, #20]
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	f7fe fe70 	bl	80089b8 <_Bfree>
 8009cd8:	9805      	ldr	r0, [sp, #20]
 8009cda:	4641      	mov	r1, r8
 8009cdc:	f7fe fe6c 	bl	80089b8 <_Bfree>
 8009ce0:	9805      	ldr	r0, [sp, #20]
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	f7fe fe68 	bl	80089b8 <_Bfree>
 8009ce8:	e618      	b.n	800991c <_strtod_l+0x644>
 8009cea:	f1ba 0f01 	cmp.w	sl, #1
 8009cee:	d103      	bne.n	8009cf8 <_strtod_l+0xa20>
 8009cf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f43f ada5 	beq.w	8009842 <_strtod_l+0x56a>
 8009cf8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009da8 <_strtod_l+0xad0>
 8009cfc:	4f35      	ldr	r7, [pc, #212]	@ (8009dd4 <_strtod_l+0xafc>)
 8009cfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009d02:	2600      	movs	r6, #0
 8009d04:	e7b1      	b.n	8009c6a <_strtod_l+0x992>
 8009d06:	4f34      	ldr	r7, [pc, #208]	@ (8009dd8 <_strtod_l+0xb00>)
 8009d08:	2600      	movs	r6, #0
 8009d0a:	e7aa      	b.n	8009c62 <_strtod_l+0x98a>
 8009d0c:	4b32      	ldr	r3, [pc, #200]	@ (8009dd8 <_strtod_l+0xb00>)
 8009d0e:	4630      	mov	r0, r6
 8009d10:	4639      	mov	r1, r7
 8009d12:	2200      	movs	r2, #0
 8009d14:	f7f6 fc90 	bl	8000638 <__aeabi_dmul>
 8009d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	460f      	mov	r7, r1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d09f      	beq.n	8009c62 <_strtod_l+0x98a>
 8009d22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009d26:	e7a0      	b.n	8009c6a <_strtod_l+0x992>
 8009d28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009db0 <_strtod_l+0xad8>
 8009d2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009d30:	ec57 6b17 	vmov	r6, r7, d7
 8009d34:	e799      	b.n	8009c6a <_strtod_l+0x992>
 8009d36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009d3a:	9b08      	ldr	r3, [sp, #32]
 8009d3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1c1      	bne.n	8009cc8 <_strtod_l+0x9f0>
 8009d44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d48:	0d1b      	lsrs	r3, r3, #20
 8009d4a:	051b      	lsls	r3, r3, #20
 8009d4c:	429d      	cmp	r5, r3
 8009d4e:	d1bb      	bne.n	8009cc8 <_strtod_l+0x9f0>
 8009d50:	4630      	mov	r0, r6
 8009d52:	4639      	mov	r1, r7
 8009d54:	f7f7 f820 	bl	8000d98 <__aeabi_d2lz>
 8009d58:	f7f6 fc40 	bl	80005dc <__aeabi_l2d>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4630      	mov	r0, r6
 8009d62:	4639      	mov	r1, r7
 8009d64:	f7f6 fab0 	bl	80002c8 <__aeabi_dsub>
 8009d68:	460b      	mov	r3, r1
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009d70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d76:	ea46 060a 	orr.w	r6, r6, sl
 8009d7a:	431e      	orrs	r6, r3
 8009d7c:	d06f      	beq.n	8009e5e <_strtod_l+0xb86>
 8009d7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009db8 <_strtod_l+0xae0>)
 8009d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d84:	f7f6 feca 	bl	8000b1c <__aeabi_dcmplt>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	f47f accf 	bne.w	800972c <_strtod_l+0x454>
 8009d8e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009dc0 <_strtod_l+0xae8>)
 8009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d98:	f7f6 fede 	bl	8000b58 <__aeabi_dcmpgt>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d093      	beq.n	8009cc8 <_strtod_l+0x9f0>
 8009da0:	e4c4      	b.n	800972c <_strtod_l+0x454>
 8009da2:	bf00      	nop
 8009da4:	f3af 8000 	nop.w
 8009da8:	00000000 	.word	0x00000000
 8009dac:	bff00000 	.word	0xbff00000
 8009db0:	00000000 	.word	0x00000000
 8009db4:	3ff00000 	.word	0x3ff00000
 8009db8:	94a03595 	.word	0x94a03595
 8009dbc:	3fdfffff 	.word	0x3fdfffff
 8009dc0:	35afe535 	.word	0x35afe535
 8009dc4:	3fe00000 	.word	0x3fe00000
 8009dc8:	000fffff 	.word	0x000fffff
 8009dcc:	7ff00000 	.word	0x7ff00000
 8009dd0:	7fefffff 	.word	0x7fefffff
 8009dd4:	3ff00000 	.word	0x3ff00000
 8009dd8:	3fe00000 	.word	0x3fe00000
 8009ddc:	7fe00000 	.word	0x7fe00000
 8009de0:	7c9fffff 	.word	0x7c9fffff
 8009de4:	9b08      	ldr	r3, [sp, #32]
 8009de6:	b323      	cbz	r3, 8009e32 <_strtod_l+0xb5a>
 8009de8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009dec:	d821      	bhi.n	8009e32 <_strtod_l+0xb5a>
 8009dee:	a328      	add	r3, pc, #160	@ (adr r3, 8009e90 <_strtod_l+0xbb8>)
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	4630      	mov	r0, r6
 8009df6:	4639      	mov	r1, r7
 8009df8:	f7f6 fe9a 	bl	8000b30 <__aeabi_dcmple>
 8009dfc:	b1a0      	cbz	r0, 8009e28 <_strtod_l+0xb50>
 8009dfe:	4639      	mov	r1, r7
 8009e00:	4630      	mov	r0, r6
 8009e02:	f7f6 fef1 	bl	8000be8 <__aeabi_d2uiz>
 8009e06:	2801      	cmp	r0, #1
 8009e08:	bf38      	it	cc
 8009e0a:	2001      	movcc	r0, #1
 8009e0c:	f7f6 fb9a 	bl	8000544 <__aeabi_ui2d>
 8009e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e12:	4606      	mov	r6, r0
 8009e14:	460f      	mov	r7, r1
 8009e16:	b9fb      	cbnz	r3, 8009e58 <_strtod_l+0xb80>
 8009e18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e1c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009e1e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009e20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009e24:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009e28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009e2a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009e2e:	1b5b      	subs	r3, r3, r5
 8009e30:	9311      	str	r3, [sp, #68]	@ 0x44
 8009e32:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009e36:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009e3a:	f7ff f8f1 	bl	8009020 <__ulp>
 8009e3e:	4650      	mov	r0, sl
 8009e40:	ec53 2b10 	vmov	r2, r3, d0
 8009e44:	4659      	mov	r1, fp
 8009e46:	f7f6 fbf7 	bl	8000638 <__aeabi_dmul>
 8009e4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009e4e:	f7f6 fa3d 	bl	80002cc <__adddf3>
 8009e52:	4682      	mov	sl, r0
 8009e54:	468b      	mov	fp, r1
 8009e56:	e770      	b.n	8009d3a <_strtod_l+0xa62>
 8009e58:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009e5c:	e7e0      	b.n	8009e20 <_strtod_l+0xb48>
 8009e5e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009e98 <_strtod_l+0xbc0>)
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	f7f6 fe5a 	bl	8000b1c <__aeabi_dcmplt>
 8009e68:	e798      	b.n	8009d9c <_strtod_l+0xac4>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e6e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009e70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e72:	6013      	str	r3, [r2, #0]
 8009e74:	f7ff ba6d 	b.w	8009352 <_strtod_l+0x7a>
 8009e78:	2a65      	cmp	r2, #101	@ 0x65
 8009e7a:	f43f ab66 	beq.w	800954a <_strtod_l+0x272>
 8009e7e:	2a45      	cmp	r2, #69	@ 0x45
 8009e80:	f43f ab63 	beq.w	800954a <_strtod_l+0x272>
 8009e84:	2301      	movs	r3, #1
 8009e86:	f7ff bb9e 	b.w	80095c6 <_strtod_l+0x2ee>
 8009e8a:	bf00      	nop
 8009e8c:	f3af 8000 	nop.w
 8009e90:	ffc00000 	.word	0xffc00000
 8009e94:	41dfffff 	.word	0x41dfffff
 8009e98:	94a03595 	.word	0x94a03595
 8009e9c:	3fcfffff 	.word	0x3fcfffff

08009ea0 <_strtod_r>:
 8009ea0:	4b01      	ldr	r3, [pc, #4]	@ (8009ea8 <_strtod_r+0x8>)
 8009ea2:	f7ff ba19 	b.w	80092d8 <_strtod_l>
 8009ea6:	bf00      	nop
 8009ea8:	20000078 	.word	0x20000078

08009eac <_strtol_l.constprop.0>:
 8009eac:	2b24      	cmp	r3, #36	@ 0x24
 8009eae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb2:	4686      	mov	lr, r0
 8009eb4:	4690      	mov	r8, r2
 8009eb6:	d801      	bhi.n	8009ebc <_strtol_l.constprop.0+0x10>
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d106      	bne.n	8009eca <_strtol_l.constprop.0+0x1e>
 8009ebc:	f7fd fdbc 	bl	8007a38 <__errno>
 8009ec0:	2316      	movs	r3, #22
 8009ec2:	6003      	str	r3, [r0, #0]
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eca:	4834      	ldr	r0, [pc, #208]	@ (8009f9c <_strtol_l.constprop.0+0xf0>)
 8009ecc:	460d      	mov	r5, r1
 8009ece:	462a      	mov	r2, r5
 8009ed0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ed4:	5d06      	ldrb	r6, [r0, r4]
 8009ed6:	f016 0608 	ands.w	r6, r6, #8
 8009eda:	d1f8      	bne.n	8009ece <_strtol_l.constprop.0+0x22>
 8009edc:	2c2d      	cmp	r4, #45	@ 0x2d
 8009ede:	d12d      	bne.n	8009f3c <_strtol_l.constprop.0+0x90>
 8009ee0:	782c      	ldrb	r4, [r5, #0]
 8009ee2:	2601      	movs	r6, #1
 8009ee4:	1c95      	adds	r5, r2, #2
 8009ee6:	f033 0210 	bics.w	r2, r3, #16
 8009eea:	d109      	bne.n	8009f00 <_strtol_l.constprop.0+0x54>
 8009eec:	2c30      	cmp	r4, #48	@ 0x30
 8009eee:	d12a      	bne.n	8009f46 <_strtol_l.constprop.0+0x9a>
 8009ef0:	782a      	ldrb	r2, [r5, #0]
 8009ef2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009ef6:	2a58      	cmp	r2, #88	@ 0x58
 8009ef8:	d125      	bne.n	8009f46 <_strtol_l.constprop.0+0x9a>
 8009efa:	786c      	ldrb	r4, [r5, #1]
 8009efc:	2310      	movs	r3, #16
 8009efe:	3502      	adds	r5, #2
 8009f00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009f04:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009f08:	2200      	movs	r2, #0
 8009f0a:	fbbc f9f3 	udiv	r9, ip, r3
 8009f0e:	4610      	mov	r0, r2
 8009f10:	fb03 ca19 	mls	sl, r3, r9, ip
 8009f14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009f18:	2f09      	cmp	r7, #9
 8009f1a:	d81b      	bhi.n	8009f54 <_strtol_l.constprop.0+0xa8>
 8009f1c:	463c      	mov	r4, r7
 8009f1e:	42a3      	cmp	r3, r4
 8009f20:	dd27      	ble.n	8009f72 <_strtol_l.constprop.0+0xc6>
 8009f22:	1c57      	adds	r7, r2, #1
 8009f24:	d007      	beq.n	8009f36 <_strtol_l.constprop.0+0x8a>
 8009f26:	4581      	cmp	r9, r0
 8009f28:	d320      	bcc.n	8009f6c <_strtol_l.constprop.0+0xc0>
 8009f2a:	d101      	bne.n	8009f30 <_strtol_l.constprop.0+0x84>
 8009f2c:	45a2      	cmp	sl, r4
 8009f2e:	db1d      	blt.n	8009f6c <_strtol_l.constprop.0+0xc0>
 8009f30:	fb00 4003 	mla	r0, r0, r3, r4
 8009f34:	2201      	movs	r2, #1
 8009f36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f3a:	e7eb      	b.n	8009f14 <_strtol_l.constprop.0+0x68>
 8009f3c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009f3e:	bf04      	itt	eq
 8009f40:	782c      	ldrbeq	r4, [r5, #0]
 8009f42:	1c95      	addeq	r5, r2, #2
 8009f44:	e7cf      	b.n	8009ee6 <_strtol_l.constprop.0+0x3a>
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1da      	bne.n	8009f00 <_strtol_l.constprop.0+0x54>
 8009f4a:	2c30      	cmp	r4, #48	@ 0x30
 8009f4c:	bf0c      	ite	eq
 8009f4e:	2308      	moveq	r3, #8
 8009f50:	230a      	movne	r3, #10
 8009f52:	e7d5      	b.n	8009f00 <_strtol_l.constprop.0+0x54>
 8009f54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009f58:	2f19      	cmp	r7, #25
 8009f5a:	d801      	bhi.n	8009f60 <_strtol_l.constprop.0+0xb4>
 8009f5c:	3c37      	subs	r4, #55	@ 0x37
 8009f5e:	e7de      	b.n	8009f1e <_strtol_l.constprop.0+0x72>
 8009f60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009f64:	2f19      	cmp	r7, #25
 8009f66:	d804      	bhi.n	8009f72 <_strtol_l.constprop.0+0xc6>
 8009f68:	3c57      	subs	r4, #87	@ 0x57
 8009f6a:	e7d8      	b.n	8009f1e <_strtol_l.constprop.0+0x72>
 8009f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f70:	e7e1      	b.n	8009f36 <_strtol_l.constprop.0+0x8a>
 8009f72:	1c53      	adds	r3, r2, #1
 8009f74:	d108      	bne.n	8009f88 <_strtol_l.constprop.0+0xdc>
 8009f76:	2322      	movs	r3, #34	@ 0x22
 8009f78:	f8ce 3000 	str.w	r3, [lr]
 8009f7c:	4660      	mov	r0, ip
 8009f7e:	f1b8 0f00 	cmp.w	r8, #0
 8009f82:	d0a0      	beq.n	8009ec6 <_strtol_l.constprop.0+0x1a>
 8009f84:	1e69      	subs	r1, r5, #1
 8009f86:	e006      	b.n	8009f96 <_strtol_l.constprop.0+0xea>
 8009f88:	b106      	cbz	r6, 8009f8c <_strtol_l.constprop.0+0xe0>
 8009f8a:	4240      	negs	r0, r0
 8009f8c:	f1b8 0f00 	cmp.w	r8, #0
 8009f90:	d099      	beq.n	8009ec6 <_strtol_l.constprop.0+0x1a>
 8009f92:	2a00      	cmp	r2, #0
 8009f94:	d1f6      	bne.n	8009f84 <_strtol_l.constprop.0+0xd8>
 8009f96:	f8c8 1000 	str.w	r1, [r8]
 8009f9a:	e794      	b.n	8009ec6 <_strtol_l.constprop.0+0x1a>
 8009f9c:	0800bc41 	.word	0x0800bc41

08009fa0 <_strtol_r>:
 8009fa0:	f7ff bf84 	b.w	8009eac <_strtol_l.constprop.0>

08009fa4 <__ssputs_r>:
 8009fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa8:	688e      	ldr	r6, [r1, #8]
 8009faa:	461f      	mov	r7, r3
 8009fac:	42be      	cmp	r6, r7
 8009fae:	680b      	ldr	r3, [r1, #0]
 8009fb0:	4682      	mov	sl, r0
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	4690      	mov	r8, r2
 8009fb6:	d82d      	bhi.n	800a014 <__ssputs_r+0x70>
 8009fb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009fbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009fc0:	d026      	beq.n	800a010 <__ssputs_r+0x6c>
 8009fc2:	6965      	ldr	r5, [r4, #20]
 8009fc4:	6909      	ldr	r1, [r1, #16]
 8009fc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fca:	eba3 0901 	sub.w	r9, r3, r1
 8009fce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fd2:	1c7b      	adds	r3, r7, #1
 8009fd4:	444b      	add	r3, r9
 8009fd6:	106d      	asrs	r5, r5, #1
 8009fd8:	429d      	cmp	r5, r3
 8009fda:	bf38      	it	cc
 8009fdc:	461d      	movcc	r5, r3
 8009fde:	0553      	lsls	r3, r2, #21
 8009fe0:	d527      	bpl.n	800a032 <__ssputs_r+0x8e>
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	f7fe fc1c 	bl	8008820 <_malloc_r>
 8009fe8:	4606      	mov	r6, r0
 8009fea:	b360      	cbz	r0, 800a046 <__ssputs_r+0xa2>
 8009fec:	6921      	ldr	r1, [r4, #16]
 8009fee:	464a      	mov	r2, r9
 8009ff0:	f000 fda6 	bl	800ab40 <memcpy>
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ffe:	81a3      	strh	r3, [r4, #12]
 800a000:	6126      	str	r6, [r4, #16]
 800a002:	6165      	str	r5, [r4, #20]
 800a004:	444e      	add	r6, r9
 800a006:	eba5 0509 	sub.w	r5, r5, r9
 800a00a:	6026      	str	r6, [r4, #0]
 800a00c:	60a5      	str	r5, [r4, #8]
 800a00e:	463e      	mov	r6, r7
 800a010:	42be      	cmp	r6, r7
 800a012:	d900      	bls.n	800a016 <__ssputs_r+0x72>
 800a014:	463e      	mov	r6, r7
 800a016:	6820      	ldr	r0, [r4, #0]
 800a018:	4632      	mov	r2, r6
 800a01a:	4641      	mov	r1, r8
 800a01c:	f000 fd53 	bl	800aac6 <memmove>
 800a020:	68a3      	ldr	r3, [r4, #8]
 800a022:	1b9b      	subs	r3, r3, r6
 800a024:	60a3      	str	r3, [r4, #8]
 800a026:	6823      	ldr	r3, [r4, #0]
 800a028:	4433      	add	r3, r6
 800a02a:	6023      	str	r3, [r4, #0]
 800a02c:	2000      	movs	r0, #0
 800a02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a032:	462a      	mov	r2, r5
 800a034:	f001 f919 	bl	800b26a <_realloc_r>
 800a038:	4606      	mov	r6, r0
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d1e0      	bne.n	800a000 <__ssputs_r+0x5c>
 800a03e:	6921      	ldr	r1, [r4, #16]
 800a040:	4650      	mov	r0, sl
 800a042:	f7fe fb79 	bl	8008738 <_free_r>
 800a046:	230c      	movs	r3, #12
 800a048:	f8ca 3000 	str.w	r3, [sl]
 800a04c:	89a3      	ldrh	r3, [r4, #12]
 800a04e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a052:	81a3      	strh	r3, [r4, #12]
 800a054:	f04f 30ff 	mov.w	r0, #4294967295
 800a058:	e7e9      	b.n	800a02e <__ssputs_r+0x8a>
	...

0800a05c <_svfiprintf_r>:
 800a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a060:	4698      	mov	r8, r3
 800a062:	898b      	ldrh	r3, [r1, #12]
 800a064:	061b      	lsls	r3, r3, #24
 800a066:	b09d      	sub	sp, #116	@ 0x74
 800a068:	4607      	mov	r7, r0
 800a06a:	460d      	mov	r5, r1
 800a06c:	4614      	mov	r4, r2
 800a06e:	d510      	bpl.n	800a092 <_svfiprintf_r+0x36>
 800a070:	690b      	ldr	r3, [r1, #16]
 800a072:	b973      	cbnz	r3, 800a092 <_svfiprintf_r+0x36>
 800a074:	2140      	movs	r1, #64	@ 0x40
 800a076:	f7fe fbd3 	bl	8008820 <_malloc_r>
 800a07a:	6028      	str	r0, [r5, #0]
 800a07c:	6128      	str	r0, [r5, #16]
 800a07e:	b930      	cbnz	r0, 800a08e <_svfiprintf_r+0x32>
 800a080:	230c      	movs	r3, #12
 800a082:	603b      	str	r3, [r7, #0]
 800a084:	f04f 30ff 	mov.w	r0, #4294967295
 800a088:	b01d      	add	sp, #116	@ 0x74
 800a08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08e:	2340      	movs	r3, #64	@ 0x40
 800a090:	616b      	str	r3, [r5, #20]
 800a092:	2300      	movs	r3, #0
 800a094:	9309      	str	r3, [sp, #36]	@ 0x24
 800a096:	2320      	movs	r3, #32
 800a098:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a09c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0a0:	2330      	movs	r3, #48	@ 0x30
 800a0a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a240 <_svfiprintf_r+0x1e4>
 800a0a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a0aa:	f04f 0901 	mov.w	r9, #1
 800a0ae:	4623      	mov	r3, r4
 800a0b0:	469a      	mov	sl, r3
 800a0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0b6:	b10a      	cbz	r2, 800a0bc <_svfiprintf_r+0x60>
 800a0b8:	2a25      	cmp	r2, #37	@ 0x25
 800a0ba:	d1f9      	bne.n	800a0b0 <_svfiprintf_r+0x54>
 800a0bc:	ebba 0b04 	subs.w	fp, sl, r4
 800a0c0:	d00b      	beq.n	800a0da <_svfiprintf_r+0x7e>
 800a0c2:	465b      	mov	r3, fp
 800a0c4:	4622      	mov	r2, r4
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	4638      	mov	r0, r7
 800a0ca:	f7ff ff6b 	bl	8009fa4 <__ssputs_r>
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	f000 80a7 	beq.w	800a222 <_svfiprintf_r+0x1c6>
 800a0d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0d6:	445a      	add	r2, fp
 800a0d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0da:	f89a 3000 	ldrb.w	r3, [sl]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 809f 	beq.w	800a222 <_svfiprintf_r+0x1c6>
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ee:	f10a 0a01 	add.w	sl, sl, #1
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	9307      	str	r3, [sp, #28]
 800a0f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0fc:	4654      	mov	r4, sl
 800a0fe:	2205      	movs	r2, #5
 800a100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a104:	484e      	ldr	r0, [pc, #312]	@ (800a240 <_svfiprintf_r+0x1e4>)
 800a106:	f7f6 f883 	bl	8000210 <memchr>
 800a10a:	9a04      	ldr	r2, [sp, #16]
 800a10c:	b9d8      	cbnz	r0, 800a146 <_svfiprintf_r+0xea>
 800a10e:	06d0      	lsls	r0, r2, #27
 800a110:	bf44      	itt	mi
 800a112:	2320      	movmi	r3, #32
 800a114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a118:	0711      	lsls	r1, r2, #28
 800a11a:	bf44      	itt	mi
 800a11c:	232b      	movmi	r3, #43	@ 0x2b
 800a11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a122:	f89a 3000 	ldrb.w	r3, [sl]
 800a126:	2b2a      	cmp	r3, #42	@ 0x2a
 800a128:	d015      	beq.n	800a156 <_svfiprintf_r+0xfa>
 800a12a:	9a07      	ldr	r2, [sp, #28]
 800a12c:	4654      	mov	r4, sl
 800a12e:	2000      	movs	r0, #0
 800a130:	f04f 0c0a 	mov.w	ip, #10
 800a134:	4621      	mov	r1, r4
 800a136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a13a:	3b30      	subs	r3, #48	@ 0x30
 800a13c:	2b09      	cmp	r3, #9
 800a13e:	d94b      	bls.n	800a1d8 <_svfiprintf_r+0x17c>
 800a140:	b1b0      	cbz	r0, 800a170 <_svfiprintf_r+0x114>
 800a142:	9207      	str	r2, [sp, #28]
 800a144:	e014      	b.n	800a170 <_svfiprintf_r+0x114>
 800a146:	eba0 0308 	sub.w	r3, r0, r8
 800a14a:	fa09 f303 	lsl.w	r3, r9, r3
 800a14e:	4313      	orrs	r3, r2
 800a150:	9304      	str	r3, [sp, #16]
 800a152:	46a2      	mov	sl, r4
 800a154:	e7d2      	b.n	800a0fc <_svfiprintf_r+0xa0>
 800a156:	9b03      	ldr	r3, [sp, #12]
 800a158:	1d19      	adds	r1, r3, #4
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	9103      	str	r1, [sp, #12]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	bfbb      	ittet	lt
 800a162:	425b      	neglt	r3, r3
 800a164:	f042 0202 	orrlt.w	r2, r2, #2
 800a168:	9307      	strge	r3, [sp, #28]
 800a16a:	9307      	strlt	r3, [sp, #28]
 800a16c:	bfb8      	it	lt
 800a16e:	9204      	strlt	r2, [sp, #16]
 800a170:	7823      	ldrb	r3, [r4, #0]
 800a172:	2b2e      	cmp	r3, #46	@ 0x2e
 800a174:	d10a      	bne.n	800a18c <_svfiprintf_r+0x130>
 800a176:	7863      	ldrb	r3, [r4, #1]
 800a178:	2b2a      	cmp	r3, #42	@ 0x2a
 800a17a:	d132      	bne.n	800a1e2 <_svfiprintf_r+0x186>
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	1d1a      	adds	r2, r3, #4
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	9203      	str	r2, [sp, #12]
 800a184:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a188:	3402      	adds	r4, #2
 800a18a:	9305      	str	r3, [sp, #20]
 800a18c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a250 <_svfiprintf_r+0x1f4>
 800a190:	7821      	ldrb	r1, [r4, #0]
 800a192:	2203      	movs	r2, #3
 800a194:	4650      	mov	r0, sl
 800a196:	f7f6 f83b 	bl	8000210 <memchr>
 800a19a:	b138      	cbz	r0, 800a1ac <_svfiprintf_r+0x150>
 800a19c:	9b04      	ldr	r3, [sp, #16]
 800a19e:	eba0 000a 	sub.w	r0, r0, sl
 800a1a2:	2240      	movs	r2, #64	@ 0x40
 800a1a4:	4082      	lsls	r2, r0
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	3401      	adds	r4, #1
 800a1aa:	9304      	str	r3, [sp, #16]
 800a1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b0:	4824      	ldr	r0, [pc, #144]	@ (800a244 <_svfiprintf_r+0x1e8>)
 800a1b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a1b6:	2206      	movs	r2, #6
 800a1b8:	f7f6 f82a 	bl	8000210 <memchr>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	d036      	beq.n	800a22e <_svfiprintf_r+0x1d2>
 800a1c0:	4b21      	ldr	r3, [pc, #132]	@ (800a248 <_svfiprintf_r+0x1ec>)
 800a1c2:	bb1b      	cbnz	r3, 800a20c <_svfiprintf_r+0x1b0>
 800a1c4:	9b03      	ldr	r3, [sp, #12]
 800a1c6:	3307      	adds	r3, #7
 800a1c8:	f023 0307 	bic.w	r3, r3, #7
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	9303      	str	r3, [sp, #12]
 800a1d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1d2:	4433      	add	r3, r6
 800a1d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1d6:	e76a      	b.n	800a0ae <_svfiprintf_r+0x52>
 800a1d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1dc:	460c      	mov	r4, r1
 800a1de:	2001      	movs	r0, #1
 800a1e0:	e7a8      	b.n	800a134 <_svfiprintf_r+0xd8>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	3401      	adds	r4, #1
 800a1e6:	9305      	str	r3, [sp, #20]
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	f04f 0c0a 	mov.w	ip, #10
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1f4:	3a30      	subs	r2, #48	@ 0x30
 800a1f6:	2a09      	cmp	r2, #9
 800a1f8:	d903      	bls.n	800a202 <_svfiprintf_r+0x1a6>
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d0c6      	beq.n	800a18c <_svfiprintf_r+0x130>
 800a1fe:	9105      	str	r1, [sp, #20]
 800a200:	e7c4      	b.n	800a18c <_svfiprintf_r+0x130>
 800a202:	fb0c 2101 	mla	r1, ip, r1, r2
 800a206:	4604      	mov	r4, r0
 800a208:	2301      	movs	r3, #1
 800a20a:	e7f0      	b.n	800a1ee <_svfiprintf_r+0x192>
 800a20c:	ab03      	add	r3, sp, #12
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	462a      	mov	r2, r5
 800a212:	4b0e      	ldr	r3, [pc, #56]	@ (800a24c <_svfiprintf_r+0x1f0>)
 800a214:	a904      	add	r1, sp, #16
 800a216:	4638      	mov	r0, r7
 800a218:	f7fc fc9e 	bl	8006b58 <_printf_float>
 800a21c:	1c42      	adds	r2, r0, #1
 800a21e:	4606      	mov	r6, r0
 800a220:	d1d6      	bne.n	800a1d0 <_svfiprintf_r+0x174>
 800a222:	89ab      	ldrh	r3, [r5, #12]
 800a224:	065b      	lsls	r3, r3, #25
 800a226:	f53f af2d 	bmi.w	800a084 <_svfiprintf_r+0x28>
 800a22a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a22c:	e72c      	b.n	800a088 <_svfiprintf_r+0x2c>
 800a22e:	ab03      	add	r3, sp, #12
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	462a      	mov	r2, r5
 800a234:	4b05      	ldr	r3, [pc, #20]	@ (800a24c <_svfiprintf_r+0x1f0>)
 800a236:	a904      	add	r1, sp, #16
 800a238:	4638      	mov	r0, r7
 800a23a:	f7fc ff25 	bl	8007088 <_printf_i>
 800a23e:	e7ed      	b.n	800a21c <_svfiprintf_r+0x1c0>
 800a240:	0800bd41 	.word	0x0800bd41
 800a244:	0800bd4b 	.word	0x0800bd4b
 800a248:	08006b59 	.word	0x08006b59
 800a24c:	08009fa5 	.word	0x08009fa5
 800a250:	0800bd47 	.word	0x0800bd47

0800a254 <_sungetc_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	1c4b      	adds	r3, r1, #1
 800a258:	4614      	mov	r4, r2
 800a25a:	d103      	bne.n	800a264 <_sungetc_r+0x10>
 800a25c:	f04f 35ff 	mov.w	r5, #4294967295
 800a260:	4628      	mov	r0, r5
 800a262:	bd38      	pop	{r3, r4, r5, pc}
 800a264:	8993      	ldrh	r3, [r2, #12]
 800a266:	f023 0320 	bic.w	r3, r3, #32
 800a26a:	8193      	strh	r3, [r2, #12]
 800a26c:	6853      	ldr	r3, [r2, #4]
 800a26e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a270:	b2cd      	uxtb	r5, r1
 800a272:	b18a      	cbz	r2, 800a298 <_sungetc_r+0x44>
 800a274:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a276:	429a      	cmp	r2, r3
 800a278:	dd08      	ble.n	800a28c <_sungetc_r+0x38>
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	1e5a      	subs	r2, r3, #1
 800a27e:	6022      	str	r2, [r4, #0]
 800a280:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a284:	6863      	ldr	r3, [r4, #4]
 800a286:	3301      	adds	r3, #1
 800a288:	6063      	str	r3, [r4, #4]
 800a28a:	e7e9      	b.n	800a260 <_sungetc_r+0xc>
 800a28c:	4621      	mov	r1, r4
 800a28e:	f000 fbe0 	bl	800aa52 <__submore>
 800a292:	2800      	cmp	r0, #0
 800a294:	d0f1      	beq.n	800a27a <_sungetc_r+0x26>
 800a296:	e7e1      	b.n	800a25c <_sungetc_r+0x8>
 800a298:	6921      	ldr	r1, [r4, #16]
 800a29a:	6822      	ldr	r2, [r4, #0]
 800a29c:	b141      	cbz	r1, 800a2b0 <_sungetc_r+0x5c>
 800a29e:	4291      	cmp	r1, r2
 800a2a0:	d206      	bcs.n	800a2b0 <_sungetc_r+0x5c>
 800a2a2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a2a6:	42a9      	cmp	r1, r5
 800a2a8:	d102      	bne.n	800a2b0 <_sungetc_r+0x5c>
 800a2aa:	3a01      	subs	r2, #1
 800a2ac:	6022      	str	r2, [r4, #0]
 800a2ae:	e7ea      	b.n	800a286 <_sungetc_r+0x32>
 800a2b0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a2b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a2be:	4623      	mov	r3, r4
 800a2c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e7de      	b.n	800a288 <_sungetc_r+0x34>

0800a2ca <__ssrefill_r>:
 800a2ca:	b510      	push	{r4, lr}
 800a2cc:	460c      	mov	r4, r1
 800a2ce:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a2d0:	b169      	cbz	r1, 800a2ee <__ssrefill_r+0x24>
 800a2d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2d6:	4299      	cmp	r1, r3
 800a2d8:	d001      	beq.n	800a2de <__ssrefill_r+0x14>
 800a2da:	f7fe fa2d 	bl	8008738 <_free_r>
 800a2de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a2e0:	6063      	str	r3, [r4, #4]
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	6360      	str	r0, [r4, #52]	@ 0x34
 800a2e6:	b113      	cbz	r3, 800a2ee <__ssrefill_r+0x24>
 800a2e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a2ea:	6023      	str	r3, [r4, #0]
 800a2ec:	bd10      	pop	{r4, pc}
 800a2ee:	6923      	ldr	r3, [r4, #16]
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	6063      	str	r3, [r4, #4]
 800a2f6:	89a3      	ldrh	r3, [r4, #12]
 800a2f8:	f043 0320 	orr.w	r3, r3, #32
 800a2fc:	81a3      	strh	r3, [r4, #12]
 800a2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a302:	e7f3      	b.n	800a2ec <__ssrefill_r+0x22>

0800a304 <__ssvfiscanf_r>:
 800a304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a308:	460c      	mov	r4, r1
 800a30a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a30e:	2100      	movs	r1, #0
 800a310:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a314:	49a5      	ldr	r1, [pc, #660]	@ (800a5ac <__ssvfiscanf_r+0x2a8>)
 800a316:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a318:	f10d 0804 	add.w	r8, sp, #4
 800a31c:	49a4      	ldr	r1, [pc, #656]	@ (800a5b0 <__ssvfiscanf_r+0x2ac>)
 800a31e:	4fa5      	ldr	r7, [pc, #660]	@ (800a5b4 <__ssvfiscanf_r+0x2b0>)
 800a320:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a324:	4606      	mov	r6, r0
 800a326:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	7813      	ldrb	r3, [r2, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f000 8158 	beq.w	800a5e2 <__ssvfiscanf_r+0x2de>
 800a332:	5cf9      	ldrb	r1, [r7, r3]
 800a334:	f011 0108 	ands.w	r1, r1, #8
 800a338:	f102 0501 	add.w	r5, r2, #1
 800a33c:	d019      	beq.n	800a372 <__ssvfiscanf_r+0x6e>
 800a33e:	6863      	ldr	r3, [r4, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	dd0f      	ble.n	800a364 <__ssvfiscanf_r+0x60>
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	781a      	ldrb	r2, [r3, #0]
 800a348:	5cba      	ldrb	r2, [r7, r2]
 800a34a:	0712      	lsls	r2, r2, #28
 800a34c:	d401      	bmi.n	800a352 <__ssvfiscanf_r+0x4e>
 800a34e:	462a      	mov	r2, r5
 800a350:	e7eb      	b.n	800a32a <__ssvfiscanf_r+0x26>
 800a352:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a354:	3201      	adds	r2, #1
 800a356:	9245      	str	r2, [sp, #276]	@ 0x114
 800a358:	6862      	ldr	r2, [r4, #4]
 800a35a:	3301      	adds	r3, #1
 800a35c:	3a01      	subs	r2, #1
 800a35e:	6062      	str	r2, [r4, #4]
 800a360:	6023      	str	r3, [r4, #0]
 800a362:	e7ec      	b.n	800a33e <__ssvfiscanf_r+0x3a>
 800a364:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a366:	4621      	mov	r1, r4
 800a368:	4630      	mov	r0, r6
 800a36a:	4798      	blx	r3
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d0e9      	beq.n	800a344 <__ssvfiscanf_r+0x40>
 800a370:	e7ed      	b.n	800a34e <__ssvfiscanf_r+0x4a>
 800a372:	2b25      	cmp	r3, #37	@ 0x25
 800a374:	d012      	beq.n	800a39c <__ssvfiscanf_r+0x98>
 800a376:	4699      	mov	r9, r3
 800a378:	6863      	ldr	r3, [r4, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f340 8093 	ble.w	800a4a6 <__ssvfiscanf_r+0x1a2>
 800a380:	6822      	ldr	r2, [r4, #0]
 800a382:	7813      	ldrb	r3, [r2, #0]
 800a384:	454b      	cmp	r3, r9
 800a386:	f040 812c 	bne.w	800a5e2 <__ssvfiscanf_r+0x2de>
 800a38a:	6863      	ldr	r3, [r4, #4]
 800a38c:	3b01      	subs	r3, #1
 800a38e:	6063      	str	r3, [r4, #4]
 800a390:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a392:	3201      	adds	r2, #1
 800a394:	3301      	adds	r3, #1
 800a396:	6022      	str	r2, [r4, #0]
 800a398:	9345      	str	r3, [sp, #276]	@ 0x114
 800a39a:	e7d8      	b.n	800a34e <__ssvfiscanf_r+0x4a>
 800a39c:	9141      	str	r1, [sp, #260]	@ 0x104
 800a39e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a3a0:	7853      	ldrb	r3, [r2, #1]
 800a3a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3a4:	bf02      	ittt	eq
 800a3a6:	2310      	moveq	r3, #16
 800a3a8:	1c95      	addeq	r5, r2, #2
 800a3aa:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a3ac:	220a      	movs	r2, #10
 800a3ae:	46a9      	mov	r9, r5
 800a3b0:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a3b4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a3b8:	2b09      	cmp	r3, #9
 800a3ba:	d91e      	bls.n	800a3fa <__ssvfiscanf_r+0xf6>
 800a3bc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800a5b8 <__ssvfiscanf_r+0x2b4>
 800a3c0:	2203      	movs	r2, #3
 800a3c2:	4650      	mov	r0, sl
 800a3c4:	f7f5 ff24 	bl	8000210 <memchr>
 800a3c8:	b138      	cbz	r0, 800a3da <__ssvfiscanf_r+0xd6>
 800a3ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a3cc:	eba0 000a 	sub.w	r0, r0, sl
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	4083      	lsls	r3, r0
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	9341      	str	r3, [sp, #260]	@ 0x104
 800a3d8:	464d      	mov	r5, r9
 800a3da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a3de:	2b78      	cmp	r3, #120	@ 0x78
 800a3e0:	d806      	bhi.n	800a3f0 <__ssvfiscanf_r+0xec>
 800a3e2:	2b57      	cmp	r3, #87	@ 0x57
 800a3e4:	d810      	bhi.n	800a408 <__ssvfiscanf_r+0x104>
 800a3e6:	2b25      	cmp	r3, #37	@ 0x25
 800a3e8:	d0c5      	beq.n	800a376 <__ssvfiscanf_r+0x72>
 800a3ea:	d857      	bhi.n	800a49c <__ssvfiscanf_r+0x198>
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d065      	beq.n	800a4bc <__ssvfiscanf_r+0x1b8>
 800a3f0:	2303      	movs	r3, #3
 800a3f2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a3f4:	230a      	movs	r3, #10
 800a3f6:	9342      	str	r3, [sp, #264]	@ 0x108
 800a3f8:	e078      	b.n	800a4ec <__ssvfiscanf_r+0x1e8>
 800a3fa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a3fc:	fb02 1103 	mla	r1, r2, r3, r1
 800a400:	3930      	subs	r1, #48	@ 0x30
 800a402:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a404:	464d      	mov	r5, r9
 800a406:	e7d2      	b.n	800a3ae <__ssvfiscanf_r+0xaa>
 800a408:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a40c:	2a20      	cmp	r2, #32
 800a40e:	d8ef      	bhi.n	800a3f0 <__ssvfiscanf_r+0xec>
 800a410:	a101      	add	r1, pc, #4	@ (adr r1, 800a418 <__ssvfiscanf_r+0x114>)
 800a412:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a416:	bf00      	nop
 800a418:	0800a4cb 	.word	0x0800a4cb
 800a41c:	0800a3f1 	.word	0x0800a3f1
 800a420:	0800a3f1 	.word	0x0800a3f1
 800a424:	0800a525 	.word	0x0800a525
 800a428:	0800a3f1 	.word	0x0800a3f1
 800a42c:	0800a3f1 	.word	0x0800a3f1
 800a430:	0800a3f1 	.word	0x0800a3f1
 800a434:	0800a3f1 	.word	0x0800a3f1
 800a438:	0800a3f1 	.word	0x0800a3f1
 800a43c:	0800a3f1 	.word	0x0800a3f1
 800a440:	0800a3f1 	.word	0x0800a3f1
 800a444:	0800a53b 	.word	0x0800a53b
 800a448:	0800a521 	.word	0x0800a521
 800a44c:	0800a4a3 	.word	0x0800a4a3
 800a450:	0800a4a3 	.word	0x0800a4a3
 800a454:	0800a4a3 	.word	0x0800a4a3
 800a458:	0800a3f1 	.word	0x0800a3f1
 800a45c:	0800a4dd 	.word	0x0800a4dd
 800a460:	0800a3f1 	.word	0x0800a3f1
 800a464:	0800a3f1 	.word	0x0800a3f1
 800a468:	0800a3f1 	.word	0x0800a3f1
 800a46c:	0800a3f1 	.word	0x0800a3f1
 800a470:	0800a54b 	.word	0x0800a54b
 800a474:	0800a4e5 	.word	0x0800a4e5
 800a478:	0800a4c3 	.word	0x0800a4c3
 800a47c:	0800a3f1 	.word	0x0800a3f1
 800a480:	0800a3f1 	.word	0x0800a3f1
 800a484:	0800a547 	.word	0x0800a547
 800a488:	0800a3f1 	.word	0x0800a3f1
 800a48c:	0800a521 	.word	0x0800a521
 800a490:	0800a3f1 	.word	0x0800a3f1
 800a494:	0800a3f1 	.word	0x0800a3f1
 800a498:	0800a4cb 	.word	0x0800a4cb
 800a49c:	3b45      	subs	r3, #69	@ 0x45
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d8a6      	bhi.n	800a3f0 <__ssvfiscanf_r+0xec>
 800a4a2:	2305      	movs	r3, #5
 800a4a4:	e021      	b.n	800a4ea <__ssvfiscanf_r+0x1e6>
 800a4a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	4798      	blx	r3
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	f43f af66 	beq.w	800a380 <__ssvfiscanf_r+0x7c>
 800a4b4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	f040 808b 	bne.w	800a5d2 <__ssvfiscanf_r+0x2ce>
 800a4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c0:	e08b      	b.n	800a5da <__ssvfiscanf_r+0x2d6>
 800a4c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a4c4:	f042 0220 	orr.w	r2, r2, #32
 800a4c8:	9241      	str	r2, [sp, #260]	@ 0x104
 800a4ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a4cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4d0:	9241      	str	r2, [sp, #260]	@ 0x104
 800a4d2:	2210      	movs	r2, #16
 800a4d4:	2b6e      	cmp	r3, #110	@ 0x6e
 800a4d6:	9242      	str	r2, [sp, #264]	@ 0x108
 800a4d8:	d902      	bls.n	800a4e0 <__ssvfiscanf_r+0x1dc>
 800a4da:	e005      	b.n	800a4e8 <__ssvfiscanf_r+0x1e4>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	9342      	str	r3, [sp, #264]	@ 0x108
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	e002      	b.n	800a4ea <__ssvfiscanf_r+0x1e6>
 800a4e4:	2308      	movs	r3, #8
 800a4e6:	9342      	str	r3, [sp, #264]	@ 0x108
 800a4e8:	2304      	movs	r3, #4
 800a4ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a4ec:	6863      	ldr	r3, [r4, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	dd39      	ble.n	800a566 <__ssvfiscanf_r+0x262>
 800a4f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a4f4:	0659      	lsls	r1, r3, #25
 800a4f6:	d404      	bmi.n	800a502 <__ssvfiscanf_r+0x1fe>
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	781a      	ldrb	r2, [r3, #0]
 800a4fc:	5cba      	ldrb	r2, [r7, r2]
 800a4fe:	0712      	lsls	r2, r2, #28
 800a500:	d438      	bmi.n	800a574 <__ssvfiscanf_r+0x270>
 800a502:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a504:	2b02      	cmp	r3, #2
 800a506:	dc47      	bgt.n	800a598 <__ssvfiscanf_r+0x294>
 800a508:	466b      	mov	r3, sp
 800a50a:	4622      	mov	r2, r4
 800a50c:	a941      	add	r1, sp, #260	@ 0x104
 800a50e:	4630      	mov	r0, r6
 800a510:	f000 f86c 	bl	800a5ec <_scanf_chars>
 800a514:	2801      	cmp	r0, #1
 800a516:	d064      	beq.n	800a5e2 <__ssvfiscanf_r+0x2de>
 800a518:	2802      	cmp	r0, #2
 800a51a:	f47f af18 	bne.w	800a34e <__ssvfiscanf_r+0x4a>
 800a51e:	e7c9      	b.n	800a4b4 <__ssvfiscanf_r+0x1b0>
 800a520:	220a      	movs	r2, #10
 800a522:	e7d7      	b.n	800a4d4 <__ssvfiscanf_r+0x1d0>
 800a524:	4629      	mov	r1, r5
 800a526:	4640      	mov	r0, r8
 800a528:	f000 fa5a 	bl	800a9e0 <__sccl>
 800a52c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a52e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a532:	9341      	str	r3, [sp, #260]	@ 0x104
 800a534:	4605      	mov	r5, r0
 800a536:	2301      	movs	r3, #1
 800a538:	e7d7      	b.n	800a4ea <__ssvfiscanf_r+0x1e6>
 800a53a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a53c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a540:	9341      	str	r3, [sp, #260]	@ 0x104
 800a542:	2300      	movs	r3, #0
 800a544:	e7d1      	b.n	800a4ea <__ssvfiscanf_r+0x1e6>
 800a546:	2302      	movs	r3, #2
 800a548:	e7cf      	b.n	800a4ea <__ssvfiscanf_r+0x1e6>
 800a54a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a54c:	06c3      	lsls	r3, r0, #27
 800a54e:	f53f aefe 	bmi.w	800a34e <__ssvfiscanf_r+0x4a>
 800a552:	9b00      	ldr	r3, [sp, #0]
 800a554:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a556:	1d19      	adds	r1, r3, #4
 800a558:	9100      	str	r1, [sp, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	07c0      	lsls	r0, r0, #31
 800a55e:	bf4c      	ite	mi
 800a560:	801a      	strhmi	r2, [r3, #0]
 800a562:	601a      	strpl	r2, [r3, #0]
 800a564:	e6f3      	b.n	800a34e <__ssvfiscanf_r+0x4a>
 800a566:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a568:	4621      	mov	r1, r4
 800a56a:	4630      	mov	r0, r6
 800a56c:	4798      	blx	r3
 800a56e:	2800      	cmp	r0, #0
 800a570:	d0bf      	beq.n	800a4f2 <__ssvfiscanf_r+0x1ee>
 800a572:	e79f      	b.n	800a4b4 <__ssvfiscanf_r+0x1b0>
 800a574:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a576:	3201      	adds	r2, #1
 800a578:	9245      	str	r2, [sp, #276]	@ 0x114
 800a57a:	6862      	ldr	r2, [r4, #4]
 800a57c:	3a01      	subs	r2, #1
 800a57e:	2a00      	cmp	r2, #0
 800a580:	6062      	str	r2, [r4, #4]
 800a582:	dd02      	ble.n	800a58a <__ssvfiscanf_r+0x286>
 800a584:	3301      	adds	r3, #1
 800a586:	6023      	str	r3, [r4, #0]
 800a588:	e7b6      	b.n	800a4f8 <__ssvfiscanf_r+0x1f4>
 800a58a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a58c:	4621      	mov	r1, r4
 800a58e:	4630      	mov	r0, r6
 800a590:	4798      	blx	r3
 800a592:	2800      	cmp	r0, #0
 800a594:	d0b0      	beq.n	800a4f8 <__ssvfiscanf_r+0x1f4>
 800a596:	e78d      	b.n	800a4b4 <__ssvfiscanf_r+0x1b0>
 800a598:	2b04      	cmp	r3, #4
 800a59a:	dc0f      	bgt.n	800a5bc <__ssvfiscanf_r+0x2b8>
 800a59c:	466b      	mov	r3, sp
 800a59e:	4622      	mov	r2, r4
 800a5a0:	a941      	add	r1, sp, #260	@ 0x104
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f000 f87c 	bl	800a6a0 <_scanf_i>
 800a5a8:	e7b4      	b.n	800a514 <__ssvfiscanf_r+0x210>
 800a5aa:	bf00      	nop
 800a5ac:	0800a255 	.word	0x0800a255
 800a5b0:	0800a2cb 	.word	0x0800a2cb
 800a5b4:	0800bc41 	.word	0x0800bc41
 800a5b8:	0800bd47 	.word	0x0800bd47
 800a5bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e8 <__ssvfiscanf_r+0x2e4>)
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f43f aec5 	beq.w	800a34e <__ssvfiscanf_r+0x4a>
 800a5c4:	466b      	mov	r3, sp
 800a5c6:	4622      	mov	r2, r4
 800a5c8:	a941      	add	r1, sp, #260	@ 0x104
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	f7fc fe7c 	bl	80072c8 <_scanf_float>
 800a5d0:	e7a0      	b.n	800a514 <__ssvfiscanf_r+0x210>
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	065b      	lsls	r3, r3, #25
 800a5d6:	f53f af71 	bmi.w	800a4bc <__ssvfiscanf_r+0x1b8>
 800a5da:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a5e4:	e7f9      	b.n	800a5da <__ssvfiscanf_r+0x2d6>
 800a5e6:	bf00      	nop
 800a5e8:	080072c9 	.word	0x080072c9

0800a5ec <_scanf_chars>:
 800a5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f0:	4615      	mov	r5, r2
 800a5f2:	688a      	ldr	r2, [r1, #8]
 800a5f4:	4680      	mov	r8, r0
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	b932      	cbnz	r2, 800a608 <_scanf_chars+0x1c>
 800a5fa:	698a      	ldr	r2, [r1, #24]
 800a5fc:	2a00      	cmp	r2, #0
 800a5fe:	bf14      	ite	ne
 800a600:	f04f 32ff 	movne.w	r2, #4294967295
 800a604:	2201      	moveq	r2, #1
 800a606:	608a      	str	r2, [r1, #8]
 800a608:	6822      	ldr	r2, [r4, #0]
 800a60a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a69c <_scanf_chars+0xb0>
 800a60e:	06d1      	lsls	r1, r2, #27
 800a610:	bf5f      	itttt	pl
 800a612:	681a      	ldrpl	r2, [r3, #0]
 800a614:	1d11      	addpl	r1, r2, #4
 800a616:	6019      	strpl	r1, [r3, #0]
 800a618:	6816      	ldrpl	r6, [r2, #0]
 800a61a:	2700      	movs	r7, #0
 800a61c:	69a0      	ldr	r0, [r4, #24]
 800a61e:	b188      	cbz	r0, 800a644 <_scanf_chars+0x58>
 800a620:	2801      	cmp	r0, #1
 800a622:	d107      	bne.n	800a634 <_scanf_chars+0x48>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	781a      	ldrb	r2, [r3, #0]
 800a628:	6963      	ldr	r3, [r4, #20]
 800a62a:	5c9b      	ldrb	r3, [r3, r2]
 800a62c:	b953      	cbnz	r3, 800a644 <_scanf_chars+0x58>
 800a62e:	2f00      	cmp	r7, #0
 800a630:	d031      	beq.n	800a696 <_scanf_chars+0xaa>
 800a632:	e022      	b.n	800a67a <_scanf_chars+0x8e>
 800a634:	2802      	cmp	r0, #2
 800a636:	d120      	bne.n	800a67a <_scanf_chars+0x8e>
 800a638:	682b      	ldr	r3, [r5, #0]
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a640:	071b      	lsls	r3, r3, #28
 800a642:	d41a      	bmi.n	800a67a <_scanf_chars+0x8e>
 800a644:	6823      	ldr	r3, [r4, #0]
 800a646:	06da      	lsls	r2, r3, #27
 800a648:	bf5e      	ittt	pl
 800a64a:	682b      	ldrpl	r3, [r5, #0]
 800a64c:	781b      	ldrbpl	r3, [r3, #0]
 800a64e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a652:	682a      	ldr	r2, [r5, #0]
 800a654:	686b      	ldr	r3, [r5, #4]
 800a656:	3201      	adds	r2, #1
 800a658:	602a      	str	r2, [r5, #0]
 800a65a:	68a2      	ldr	r2, [r4, #8]
 800a65c:	3b01      	subs	r3, #1
 800a65e:	3a01      	subs	r2, #1
 800a660:	606b      	str	r3, [r5, #4]
 800a662:	3701      	adds	r7, #1
 800a664:	60a2      	str	r2, [r4, #8]
 800a666:	b142      	cbz	r2, 800a67a <_scanf_chars+0x8e>
 800a668:	2b00      	cmp	r3, #0
 800a66a:	dcd7      	bgt.n	800a61c <_scanf_chars+0x30>
 800a66c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a670:	4629      	mov	r1, r5
 800a672:	4640      	mov	r0, r8
 800a674:	4798      	blx	r3
 800a676:	2800      	cmp	r0, #0
 800a678:	d0d0      	beq.n	800a61c <_scanf_chars+0x30>
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	f013 0310 	ands.w	r3, r3, #16
 800a680:	d105      	bne.n	800a68e <_scanf_chars+0xa2>
 800a682:	68e2      	ldr	r2, [r4, #12]
 800a684:	3201      	adds	r2, #1
 800a686:	60e2      	str	r2, [r4, #12]
 800a688:	69a2      	ldr	r2, [r4, #24]
 800a68a:	b102      	cbz	r2, 800a68e <_scanf_chars+0xa2>
 800a68c:	7033      	strb	r3, [r6, #0]
 800a68e:	6923      	ldr	r3, [r4, #16]
 800a690:	443b      	add	r3, r7
 800a692:	6123      	str	r3, [r4, #16]
 800a694:	2000      	movs	r0, #0
 800a696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a69a:	bf00      	nop
 800a69c:	0800bc41 	.word	0x0800bc41

0800a6a0 <_scanf_i>:
 800a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	4698      	mov	r8, r3
 800a6a6:	4b74      	ldr	r3, [pc, #464]	@ (800a878 <_scanf_i+0x1d8>)
 800a6a8:	460c      	mov	r4, r1
 800a6aa:	4682      	mov	sl, r0
 800a6ac:	4616      	mov	r6, r2
 800a6ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a6b2:	b087      	sub	sp, #28
 800a6b4:	ab03      	add	r3, sp, #12
 800a6b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a6ba:	4b70      	ldr	r3, [pc, #448]	@ (800a87c <_scanf_i+0x1dc>)
 800a6bc:	69a1      	ldr	r1, [r4, #24]
 800a6be:	4a70      	ldr	r2, [pc, #448]	@ (800a880 <_scanf_i+0x1e0>)
 800a6c0:	2903      	cmp	r1, #3
 800a6c2:	bf08      	it	eq
 800a6c4:	461a      	moveq	r2, r3
 800a6c6:	68a3      	ldr	r3, [r4, #8]
 800a6c8:	9201      	str	r2, [sp, #4]
 800a6ca:	1e5a      	subs	r2, r3, #1
 800a6cc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a6d0:	bf88      	it	hi
 800a6d2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a6d6:	4627      	mov	r7, r4
 800a6d8:	bf82      	ittt	hi
 800a6da:	eb03 0905 	addhi.w	r9, r3, r5
 800a6de:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a6e2:	60a3      	strhi	r3, [r4, #8]
 800a6e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a6e8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a6ec:	bf98      	it	ls
 800a6ee:	f04f 0900 	movls.w	r9, #0
 800a6f2:	6023      	str	r3, [r4, #0]
 800a6f4:	463d      	mov	r5, r7
 800a6f6:	f04f 0b00 	mov.w	fp, #0
 800a6fa:	6831      	ldr	r1, [r6, #0]
 800a6fc:	ab03      	add	r3, sp, #12
 800a6fe:	7809      	ldrb	r1, [r1, #0]
 800a700:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a704:	2202      	movs	r2, #2
 800a706:	f7f5 fd83 	bl	8000210 <memchr>
 800a70a:	b328      	cbz	r0, 800a758 <_scanf_i+0xb8>
 800a70c:	f1bb 0f01 	cmp.w	fp, #1
 800a710:	d159      	bne.n	800a7c6 <_scanf_i+0x126>
 800a712:	6862      	ldr	r2, [r4, #4]
 800a714:	b92a      	cbnz	r2, 800a722 <_scanf_i+0x82>
 800a716:	6822      	ldr	r2, [r4, #0]
 800a718:	2108      	movs	r1, #8
 800a71a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a71e:	6061      	str	r1, [r4, #4]
 800a720:	6022      	str	r2, [r4, #0]
 800a722:	6822      	ldr	r2, [r4, #0]
 800a724:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a728:	6022      	str	r2, [r4, #0]
 800a72a:	68a2      	ldr	r2, [r4, #8]
 800a72c:	1e51      	subs	r1, r2, #1
 800a72e:	60a1      	str	r1, [r4, #8]
 800a730:	b192      	cbz	r2, 800a758 <_scanf_i+0xb8>
 800a732:	6832      	ldr	r2, [r6, #0]
 800a734:	1c51      	adds	r1, r2, #1
 800a736:	6031      	str	r1, [r6, #0]
 800a738:	7812      	ldrb	r2, [r2, #0]
 800a73a:	f805 2b01 	strb.w	r2, [r5], #1
 800a73e:	6872      	ldr	r2, [r6, #4]
 800a740:	3a01      	subs	r2, #1
 800a742:	2a00      	cmp	r2, #0
 800a744:	6072      	str	r2, [r6, #4]
 800a746:	dc07      	bgt.n	800a758 <_scanf_i+0xb8>
 800a748:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a74c:	4631      	mov	r1, r6
 800a74e:	4650      	mov	r0, sl
 800a750:	4790      	blx	r2
 800a752:	2800      	cmp	r0, #0
 800a754:	f040 8085 	bne.w	800a862 <_scanf_i+0x1c2>
 800a758:	f10b 0b01 	add.w	fp, fp, #1
 800a75c:	f1bb 0f03 	cmp.w	fp, #3
 800a760:	d1cb      	bne.n	800a6fa <_scanf_i+0x5a>
 800a762:	6863      	ldr	r3, [r4, #4]
 800a764:	b90b      	cbnz	r3, 800a76a <_scanf_i+0xca>
 800a766:	230a      	movs	r3, #10
 800a768:	6063      	str	r3, [r4, #4]
 800a76a:	6863      	ldr	r3, [r4, #4]
 800a76c:	4945      	ldr	r1, [pc, #276]	@ (800a884 <_scanf_i+0x1e4>)
 800a76e:	6960      	ldr	r0, [r4, #20]
 800a770:	1ac9      	subs	r1, r1, r3
 800a772:	f000 f935 	bl	800a9e0 <__sccl>
 800a776:	f04f 0b00 	mov.w	fp, #0
 800a77a:	68a3      	ldr	r3, [r4, #8]
 800a77c:	6822      	ldr	r2, [r4, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d03d      	beq.n	800a7fe <_scanf_i+0x15e>
 800a782:	6831      	ldr	r1, [r6, #0]
 800a784:	6960      	ldr	r0, [r4, #20]
 800a786:	f891 c000 	ldrb.w	ip, [r1]
 800a78a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a78e:	2800      	cmp	r0, #0
 800a790:	d035      	beq.n	800a7fe <_scanf_i+0x15e>
 800a792:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a796:	d124      	bne.n	800a7e2 <_scanf_i+0x142>
 800a798:	0510      	lsls	r0, r2, #20
 800a79a:	d522      	bpl.n	800a7e2 <_scanf_i+0x142>
 800a79c:	f10b 0b01 	add.w	fp, fp, #1
 800a7a0:	f1b9 0f00 	cmp.w	r9, #0
 800a7a4:	d003      	beq.n	800a7ae <_scanf_i+0x10e>
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	f109 39ff 	add.w	r9, r9, #4294967295
 800a7ac:	60a3      	str	r3, [r4, #8]
 800a7ae:	6873      	ldr	r3, [r6, #4]
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	6073      	str	r3, [r6, #4]
 800a7b6:	dd1b      	ble.n	800a7f0 <_scanf_i+0x150>
 800a7b8:	6833      	ldr	r3, [r6, #0]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	6033      	str	r3, [r6, #0]
 800a7be:	68a3      	ldr	r3, [r4, #8]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	60a3      	str	r3, [r4, #8]
 800a7c4:	e7d9      	b.n	800a77a <_scanf_i+0xda>
 800a7c6:	f1bb 0f02 	cmp.w	fp, #2
 800a7ca:	d1ae      	bne.n	800a72a <_scanf_i+0x8a>
 800a7cc:	6822      	ldr	r2, [r4, #0]
 800a7ce:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a7d2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a7d6:	d1bf      	bne.n	800a758 <_scanf_i+0xb8>
 800a7d8:	2110      	movs	r1, #16
 800a7da:	6061      	str	r1, [r4, #4]
 800a7dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a7e0:	e7a2      	b.n	800a728 <_scanf_i+0x88>
 800a7e2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a7e6:	6022      	str	r2, [r4, #0]
 800a7e8:	780b      	ldrb	r3, [r1, #0]
 800a7ea:	f805 3b01 	strb.w	r3, [r5], #1
 800a7ee:	e7de      	b.n	800a7ae <_scanf_i+0x10e>
 800a7f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a7f4:	4631      	mov	r1, r6
 800a7f6:	4650      	mov	r0, sl
 800a7f8:	4798      	blx	r3
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d0df      	beq.n	800a7be <_scanf_i+0x11e>
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	05d9      	lsls	r1, r3, #23
 800a802:	d50d      	bpl.n	800a820 <_scanf_i+0x180>
 800a804:	42bd      	cmp	r5, r7
 800a806:	d909      	bls.n	800a81c <_scanf_i+0x17c>
 800a808:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a80c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a810:	4632      	mov	r2, r6
 800a812:	4650      	mov	r0, sl
 800a814:	4798      	blx	r3
 800a816:	f105 39ff 	add.w	r9, r5, #4294967295
 800a81a:	464d      	mov	r5, r9
 800a81c:	42bd      	cmp	r5, r7
 800a81e:	d028      	beq.n	800a872 <_scanf_i+0x1d2>
 800a820:	6822      	ldr	r2, [r4, #0]
 800a822:	f012 0210 	ands.w	r2, r2, #16
 800a826:	d113      	bne.n	800a850 <_scanf_i+0x1b0>
 800a828:	702a      	strb	r2, [r5, #0]
 800a82a:	6863      	ldr	r3, [r4, #4]
 800a82c:	9e01      	ldr	r6, [sp, #4]
 800a82e:	4639      	mov	r1, r7
 800a830:	4650      	mov	r0, sl
 800a832:	47b0      	blx	r6
 800a834:	f8d8 3000 	ldr.w	r3, [r8]
 800a838:	6821      	ldr	r1, [r4, #0]
 800a83a:	1d1a      	adds	r2, r3, #4
 800a83c:	f8c8 2000 	str.w	r2, [r8]
 800a840:	f011 0f20 	tst.w	r1, #32
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	d00f      	beq.n	800a868 <_scanf_i+0x1c8>
 800a848:	6018      	str	r0, [r3, #0]
 800a84a:	68e3      	ldr	r3, [r4, #12]
 800a84c:	3301      	adds	r3, #1
 800a84e:	60e3      	str	r3, [r4, #12]
 800a850:	6923      	ldr	r3, [r4, #16]
 800a852:	1bed      	subs	r5, r5, r7
 800a854:	445d      	add	r5, fp
 800a856:	442b      	add	r3, r5
 800a858:	6123      	str	r3, [r4, #16]
 800a85a:	2000      	movs	r0, #0
 800a85c:	b007      	add	sp, #28
 800a85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a862:	f04f 0b00 	mov.w	fp, #0
 800a866:	e7ca      	b.n	800a7fe <_scanf_i+0x15e>
 800a868:	07ca      	lsls	r2, r1, #31
 800a86a:	bf4c      	ite	mi
 800a86c:	8018      	strhmi	r0, [r3, #0]
 800a86e:	6018      	strpl	r0, [r3, #0]
 800a870:	e7eb      	b.n	800a84a <_scanf_i+0x1aa>
 800a872:	2001      	movs	r0, #1
 800a874:	e7f2      	b.n	800a85c <_scanf_i+0x1bc>
 800a876:	bf00      	nop
 800a878:	0800b9a8 	.word	0x0800b9a8
 800a87c:	08009fa1 	.word	0x08009fa1
 800a880:	0800b3a5 	.word	0x0800b3a5
 800a884:	0800bd62 	.word	0x0800bd62

0800a888 <__sflush_r>:
 800a888:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a890:	0716      	lsls	r6, r2, #28
 800a892:	4605      	mov	r5, r0
 800a894:	460c      	mov	r4, r1
 800a896:	d454      	bmi.n	800a942 <__sflush_r+0xba>
 800a898:	684b      	ldr	r3, [r1, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	dc02      	bgt.n	800a8a4 <__sflush_r+0x1c>
 800a89e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	dd48      	ble.n	800a936 <__sflush_r+0xae>
 800a8a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8a6:	2e00      	cmp	r6, #0
 800a8a8:	d045      	beq.n	800a936 <__sflush_r+0xae>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8b0:	682f      	ldr	r7, [r5, #0]
 800a8b2:	6a21      	ldr	r1, [r4, #32]
 800a8b4:	602b      	str	r3, [r5, #0]
 800a8b6:	d030      	beq.n	800a91a <__sflush_r+0x92>
 800a8b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	0759      	lsls	r1, r3, #29
 800a8be:	d505      	bpl.n	800a8cc <__sflush_r+0x44>
 800a8c0:	6863      	ldr	r3, [r4, #4]
 800a8c2:	1ad2      	subs	r2, r2, r3
 800a8c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8c6:	b10b      	cbz	r3, 800a8cc <__sflush_r+0x44>
 800a8c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8ca:	1ad2      	subs	r2, r2, r3
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8d0:	6a21      	ldr	r1, [r4, #32]
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	47b0      	blx	r6
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	89a3      	ldrh	r3, [r4, #12]
 800a8da:	d106      	bne.n	800a8ea <__sflush_r+0x62>
 800a8dc:	6829      	ldr	r1, [r5, #0]
 800a8de:	291d      	cmp	r1, #29
 800a8e0:	d82b      	bhi.n	800a93a <__sflush_r+0xb2>
 800a8e2:	4a2a      	ldr	r2, [pc, #168]	@ (800a98c <__sflush_r+0x104>)
 800a8e4:	410a      	asrs	r2, r1
 800a8e6:	07d6      	lsls	r6, r2, #31
 800a8e8:	d427      	bmi.n	800a93a <__sflush_r+0xb2>
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	6062      	str	r2, [r4, #4]
 800a8ee:	04d9      	lsls	r1, r3, #19
 800a8f0:	6922      	ldr	r2, [r4, #16]
 800a8f2:	6022      	str	r2, [r4, #0]
 800a8f4:	d504      	bpl.n	800a900 <__sflush_r+0x78>
 800a8f6:	1c42      	adds	r2, r0, #1
 800a8f8:	d101      	bne.n	800a8fe <__sflush_r+0x76>
 800a8fa:	682b      	ldr	r3, [r5, #0]
 800a8fc:	b903      	cbnz	r3, 800a900 <__sflush_r+0x78>
 800a8fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800a900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a902:	602f      	str	r7, [r5, #0]
 800a904:	b1b9      	cbz	r1, 800a936 <__sflush_r+0xae>
 800a906:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a90a:	4299      	cmp	r1, r3
 800a90c:	d002      	beq.n	800a914 <__sflush_r+0x8c>
 800a90e:	4628      	mov	r0, r5
 800a910:	f7fd ff12 	bl	8008738 <_free_r>
 800a914:	2300      	movs	r3, #0
 800a916:	6363      	str	r3, [r4, #52]	@ 0x34
 800a918:	e00d      	b.n	800a936 <__sflush_r+0xae>
 800a91a:	2301      	movs	r3, #1
 800a91c:	4628      	mov	r0, r5
 800a91e:	47b0      	blx	r6
 800a920:	4602      	mov	r2, r0
 800a922:	1c50      	adds	r0, r2, #1
 800a924:	d1c9      	bne.n	800a8ba <__sflush_r+0x32>
 800a926:	682b      	ldr	r3, [r5, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d0c6      	beq.n	800a8ba <__sflush_r+0x32>
 800a92c:	2b1d      	cmp	r3, #29
 800a92e:	d001      	beq.n	800a934 <__sflush_r+0xac>
 800a930:	2b16      	cmp	r3, #22
 800a932:	d11e      	bne.n	800a972 <__sflush_r+0xea>
 800a934:	602f      	str	r7, [r5, #0]
 800a936:	2000      	movs	r0, #0
 800a938:	e022      	b.n	800a980 <__sflush_r+0xf8>
 800a93a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a93e:	b21b      	sxth	r3, r3
 800a940:	e01b      	b.n	800a97a <__sflush_r+0xf2>
 800a942:	690f      	ldr	r7, [r1, #16]
 800a944:	2f00      	cmp	r7, #0
 800a946:	d0f6      	beq.n	800a936 <__sflush_r+0xae>
 800a948:	0793      	lsls	r3, r2, #30
 800a94a:	680e      	ldr	r6, [r1, #0]
 800a94c:	bf08      	it	eq
 800a94e:	694b      	ldreq	r3, [r1, #20]
 800a950:	600f      	str	r7, [r1, #0]
 800a952:	bf18      	it	ne
 800a954:	2300      	movne	r3, #0
 800a956:	eba6 0807 	sub.w	r8, r6, r7
 800a95a:	608b      	str	r3, [r1, #8]
 800a95c:	f1b8 0f00 	cmp.w	r8, #0
 800a960:	dde9      	ble.n	800a936 <__sflush_r+0xae>
 800a962:	6a21      	ldr	r1, [r4, #32]
 800a964:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a966:	4643      	mov	r3, r8
 800a968:	463a      	mov	r2, r7
 800a96a:	4628      	mov	r0, r5
 800a96c:	47b0      	blx	r6
 800a96e:	2800      	cmp	r0, #0
 800a970:	dc08      	bgt.n	800a984 <__sflush_r+0xfc>
 800a972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a97a:	81a3      	strh	r3, [r4, #12]
 800a97c:	f04f 30ff 	mov.w	r0, #4294967295
 800a980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a984:	4407      	add	r7, r0
 800a986:	eba8 0800 	sub.w	r8, r8, r0
 800a98a:	e7e7      	b.n	800a95c <__sflush_r+0xd4>
 800a98c:	dfbffffe 	.word	0xdfbffffe

0800a990 <_fflush_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	690b      	ldr	r3, [r1, #16]
 800a994:	4605      	mov	r5, r0
 800a996:	460c      	mov	r4, r1
 800a998:	b913      	cbnz	r3, 800a9a0 <_fflush_r+0x10>
 800a99a:	2500      	movs	r5, #0
 800a99c:	4628      	mov	r0, r5
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	b118      	cbz	r0, 800a9aa <_fflush_r+0x1a>
 800a9a2:	6a03      	ldr	r3, [r0, #32]
 800a9a4:	b90b      	cbnz	r3, 800a9aa <_fflush_r+0x1a>
 800a9a6:	f7fc ff2f 	bl	8007808 <__sinit>
 800a9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d0f3      	beq.n	800a99a <_fflush_r+0xa>
 800a9b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9b4:	07d0      	lsls	r0, r2, #31
 800a9b6:	d404      	bmi.n	800a9c2 <_fflush_r+0x32>
 800a9b8:	0599      	lsls	r1, r3, #22
 800a9ba:	d402      	bmi.n	800a9c2 <_fflush_r+0x32>
 800a9bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9be:	f7fd f866 	bl	8007a8e <__retarget_lock_acquire_recursive>
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	f7ff ff5f 	bl	800a888 <__sflush_r>
 800a9ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9cc:	07da      	lsls	r2, r3, #31
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	d4e4      	bmi.n	800a99c <_fflush_r+0xc>
 800a9d2:	89a3      	ldrh	r3, [r4, #12]
 800a9d4:	059b      	lsls	r3, r3, #22
 800a9d6:	d4e1      	bmi.n	800a99c <_fflush_r+0xc>
 800a9d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9da:	f7fd f859 	bl	8007a90 <__retarget_lock_release_recursive>
 800a9de:	e7dd      	b.n	800a99c <_fflush_r+0xc>

0800a9e0 <__sccl>:
 800a9e0:	b570      	push	{r4, r5, r6, lr}
 800a9e2:	780b      	ldrb	r3, [r1, #0]
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	2b5e      	cmp	r3, #94	@ 0x5e
 800a9e8:	bf0b      	itete	eq
 800a9ea:	784b      	ldrbeq	r3, [r1, #1]
 800a9ec:	1c4a      	addne	r2, r1, #1
 800a9ee:	1c8a      	addeq	r2, r1, #2
 800a9f0:	2100      	movne	r1, #0
 800a9f2:	bf08      	it	eq
 800a9f4:	2101      	moveq	r1, #1
 800a9f6:	3801      	subs	r0, #1
 800a9f8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a9fc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800aa00:	42a8      	cmp	r0, r5
 800aa02:	d1fb      	bne.n	800a9fc <__sccl+0x1c>
 800aa04:	b90b      	cbnz	r3, 800aa0a <__sccl+0x2a>
 800aa06:	1e50      	subs	r0, r2, #1
 800aa08:	bd70      	pop	{r4, r5, r6, pc}
 800aa0a:	f081 0101 	eor.w	r1, r1, #1
 800aa0e:	54e1      	strb	r1, [r4, r3]
 800aa10:	4610      	mov	r0, r2
 800aa12:	4602      	mov	r2, r0
 800aa14:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aa18:	2d2d      	cmp	r5, #45	@ 0x2d
 800aa1a:	d005      	beq.n	800aa28 <__sccl+0x48>
 800aa1c:	2d5d      	cmp	r5, #93	@ 0x5d
 800aa1e:	d016      	beq.n	800aa4e <__sccl+0x6e>
 800aa20:	2d00      	cmp	r5, #0
 800aa22:	d0f1      	beq.n	800aa08 <__sccl+0x28>
 800aa24:	462b      	mov	r3, r5
 800aa26:	e7f2      	b.n	800aa0e <__sccl+0x2e>
 800aa28:	7846      	ldrb	r6, [r0, #1]
 800aa2a:	2e5d      	cmp	r6, #93	@ 0x5d
 800aa2c:	d0fa      	beq.n	800aa24 <__sccl+0x44>
 800aa2e:	42b3      	cmp	r3, r6
 800aa30:	dcf8      	bgt.n	800aa24 <__sccl+0x44>
 800aa32:	3002      	adds	r0, #2
 800aa34:	461a      	mov	r2, r3
 800aa36:	3201      	adds	r2, #1
 800aa38:	4296      	cmp	r6, r2
 800aa3a:	54a1      	strb	r1, [r4, r2]
 800aa3c:	dcfb      	bgt.n	800aa36 <__sccl+0x56>
 800aa3e:	1af2      	subs	r2, r6, r3
 800aa40:	3a01      	subs	r2, #1
 800aa42:	1c5d      	adds	r5, r3, #1
 800aa44:	42b3      	cmp	r3, r6
 800aa46:	bfa8      	it	ge
 800aa48:	2200      	movge	r2, #0
 800aa4a:	18ab      	adds	r3, r5, r2
 800aa4c:	e7e1      	b.n	800aa12 <__sccl+0x32>
 800aa4e:	4610      	mov	r0, r2
 800aa50:	e7da      	b.n	800aa08 <__sccl+0x28>

0800aa52 <__submore>:
 800aa52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa56:	460c      	mov	r4, r1
 800aa58:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800aa5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa5e:	4299      	cmp	r1, r3
 800aa60:	d11d      	bne.n	800aa9e <__submore+0x4c>
 800aa62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800aa66:	f7fd fedb 	bl	8008820 <_malloc_r>
 800aa6a:	b918      	cbnz	r0, 800aa74 <__submore+0x22>
 800aa6c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa78:	63a3      	str	r3, [r4, #56]	@ 0x38
 800aa7a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800aa7e:	6360      	str	r0, [r4, #52]	@ 0x34
 800aa80:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800aa84:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800aa88:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800aa8c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800aa90:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800aa94:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800aa98:	6020      	str	r0, [r4, #0]
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	e7e8      	b.n	800aa70 <__submore+0x1e>
 800aa9e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800aaa0:	0077      	lsls	r7, r6, #1
 800aaa2:	463a      	mov	r2, r7
 800aaa4:	f000 fbe1 	bl	800b26a <_realloc_r>
 800aaa8:	4605      	mov	r5, r0
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d0de      	beq.n	800aa6c <__submore+0x1a>
 800aaae:	eb00 0806 	add.w	r8, r0, r6
 800aab2:	4601      	mov	r1, r0
 800aab4:	4632      	mov	r2, r6
 800aab6:	4640      	mov	r0, r8
 800aab8:	f000 f842 	bl	800ab40 <memcpy>
 800aabc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800aac0:	f8c4 8000 	str.w	r8, [r4]
 800aac4:	e7e9      	b.n	800aa9a <__submore+0x48>

0800aac6 <memmove>:
 800aac6:	4288      	cmp	r0, r1
 800aac8:	b510      	push	{r4, lr}
 800aaca:	eb01 0402 	add.w	r4, r1, r2
 800aace:	d902      	bls.n	800aad6 <memmove+0x10>
 800aad0:	4284      	cmp	r4, r0
 800aad2:	4623      	mov	r3, r4
 800aad4:	d807      	bhi.n	800aae6 <memmove+0x20>
 800aad6:	1e43      	subs	r3, r0, #1
 800aad8:	42a1      	cmp	r1, r4
 800aada:	d008      	beq.n	800aaee <memmove+0x28>
 800aadc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aae0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aae4:	e7f8      	b.n	800aad8 <memmove+0x12>
 800aae6:	4402      	add	r2, r0
 800aae8:	4601      	mov	r1, r0
 800aaea:	428a      	cmp	r2, r1
 800aaec:	d100      	bne.n	800aaf0 <memmove+0x2a>
 800aaee:	bd10      	pop	{r4, pc}
 800aaf0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aaf4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aaf8:	e7f7      	b.n	800aaea <memmove+0x24>

0800aafa <strncmp>:
 800aafa:	b510      	push	{r4, lr}
 800aafc:	b16a      	cbz	r2, 800ab1a <strncmp+0x20>
 800aafe:	3901      	subs	r1, #1
 800ab00:	1884      	adds	r4, r0, r2
 800ab02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab06:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d103      	bne.n	800ab16 <strncmp+0x1c>
 800ab0e:	42a0      	cmp	r0, r4
 800ab10:	d001      	beq.n	800ab16 <strncmp+0x1c>
 800ab12:	2a00      	cmp	r2, #0
 800ab14:	d1f5      	bne.n	800ab02 <strncmp+0x8>
 800ab16:	1ad0      	subs	r0, r2, r3
 800ab18:	bd10      	pop	{r4, pc}
 800ab1a:	4610      	mov	r0, r2
 800ab1c:	e7fc      	b.n	800ab18 <strncmp+0x1e>
	...

0800ab20 <_sbrk_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4d06      	ldr	r5, [pc, #24]	@ (800ab3c <_sbrk_r+0x1c>)
 800ab24:	2300      	movs	r3, #0
 800ab26:	4604      	mov	r4, r0
 800ab28:	4608      	mov	r0, r1
 800ab2a:	602b      	str	r3, [r5, #0]
 800ab2c:	f7fb ff04 	bl	8006938 <_sbrk>
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d102      	bne.n	800ab3a <_sbrk_r+0x1a>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	b103      	cbz	r3, 800ab3a <_sbrk_r+0x1a>
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	20000520 	.word	0x20000520

0800ab40 <memcpy>:
 800ab40:	440a      	add	r2, r1
 800ab42:	4291      	cmp	r1, r2
 800ab44:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab48:	d100      	bne.n	800ab4c <memcpy+0xc>
 800ab4a:	4770      	bx	lr
 800ab4c:	b510      	push	{r4, lr}
 800ab4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab56:	4291      	cmp	r1, r2
 800ab58:	d1f9      	bne.n	800ab4e <memcpy+0xe>
 800ab5a:	bd10      	pop	{r4, pc}
 800ab5c:	0000      	movs	r0, r0
	...

0800ab60 <nan>:
 800ab60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ab68 <nan+0x8>
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	00000000 	.word	0x00000000
 800ab6c:	7ff80000 	.word	0x7ff80000

0800ab70 <__assert_func>:
 800ab70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab72:	4614      	mov	r4, r2
 800ab74:	461a      	mov	r2, r3
 800ab76:	4b09      	ldr	r3, [pc, #36]	@ (800ab9c <__assert_func+0x2c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	68d8      	ldr	r0, [r3, #12]
 800ab7e:	b954      	cbnz	r4, 800ab96 <__assert_func+0x26>
 800ab80:	4b07      	ldr	r3, [pc, #28]	@ (800aba0 <__assert_func+0x30>)
 800ab82:	461c      	mov	r4, r3
 800ab84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab88:	9100      	str	r1, [sp, #0]
 800ab8a:	462b      	mov	r3, r5
 800ab8c:	4905      	ldr	r1, [pc, #20]	@ (800aba4 <__assert_func+0x34>)
 800ab8e:	f000 fc19 	bl	800b3c4 <fiprintf>
 800ab92:	f000 fc29 	bl	800b3e8 <abort>
 800ab96:	4b04      	ldr	r3, [pc, #16]	@ (800aba8 <__assert_func+0x38>)
 800ab98:	e7f4      	b.n	800ab84 <__assert_func+0x14>
 800ab9a:	bf00      	nop
 800ab9c:	20000028 	.word	0x20000028
 800aba0:	0800bdb0 	.word	0x0800bdb0
 800aba4:	0800bd82 	.word	0x0800bd82
 800aba8:	0800bd75 	.word	0x0800bd75

0800abac <_calloc_r>:
 800abac:	b570      	push	{r4, r5, r6, lr}
 800abae:	fba1 5402 	umull	r5, r4, r1, r2
 800abb2:	b93c      	cbnz	r4, 800abc4 <_calloc_r+0x18>
 800abb4:	4629      	mov	r1, r5
 800abb6:	f7fd fe33 	bl	8008820 <_malloc_r>
 800abba:	4606      	mov	r6, r0
 800abbc:	b928      	cbnz	r0, 800abca <_calloc_r+0x1e>
 800abbe:	2600      	movs	r6, #0
 800abc0:	4630      	mov	r0, r6
 800abc2:	bd70      	pop	{r4, r5, r6, pc}
 800abc4:	220c      	movs	r2, #12
 800abc6:	6002      	str	r2, [r0, #0]
 800abc8:	e7f9      	b.n	800abbe <_calloc_r+0x12>
 800abca:	462a      	mov	r2, r5
 800abcc:	4621      	mov	r1, r4
 800abce:	f7fc fee0 	bl	8007992 <memset>
 800abd2:	e7f5      	b.n	800abc0 <_calloc_r+0x14>

0800abd4 <rshift>:
 800abd4:	6903      	ldr	r3, [r0, #16]
 800abd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800abda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abde:	ea4f 1261 	mov.w	r2, r1, asr #5
 800abe2:	f100 0414 	add.w	r4, r0, #20
 800abe6:	dd45      	ble.n	800ac74 <rshift+0xa0>
 800abe8:	f011 011f 	ands.w	r1, r1, #31
 800abec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800abf0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800abf4:	d10c      	bne.n	800ac10 <rshift+0x3c>
 800abf6:	f100 0710 	add.w	r7, r0, #16
 800abfa:	4629      	mov	r1, r5
 800abfc:	42b1      	cmp	r1, r6
 800abfe:	d334      	bcc.n	800ac6a <rshift+0x96>
 800ac00:	1a9b      	subs	r3, r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	1eea      	subs	r2, r5, #3
 800ac06:	4296      	cmp	r6, r2
 800ac08:	bf38      	it	cc
 800ac0a:	2300      	movcc	r3, #0
 800ac0c:	4423      	add	r3, r4
 800ac0e:	e015      	b.n	800ac3c <rshift+0x68>
 800ac10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ac14:	f1c1 0820 	rsb	r8, r1, #32
 800ac18:	40cf      	lsrs	r7, r1
 800ac1a:	f105 0e04 	add.w	lr, r5, #4
 800ac1e:	46a1      	mov	r9, r4
 800ac20:	4576      	cmp	r6, lr
 800ac22:	46f4      	mov	ip, lr
 800ac24:	d815      	bhi.n	800ac52 <rshift+0x7e>
 800ac26:	1a9a      	subs	r2, r3, r2
 800ac28:	0092      	lsls	r2, r2, #2
 800ac2a:	3a04      	subs	r2, #4
 800ac2c:	3501      	adds	r5, #1
 800ac2e:	42ae      	cmp	r6, r5
 800ac30:	bf38      	it	cc
 800ac32:	2200      	movcc	r2, #0
 800ac34:	18a3      	adds	r3, r4, r2
 800ac36:	50a7      	str	r7, [r4, r2]
 800ac38:	b107      	cbz	r7, 800ac3c <rshift+0x68>
 800ac3a:	3304      	adds	r3, #4
 800ac3c:	1b1a      	subs	r2, r3, r4
 800ac3e:	42a3      	cmp	r3, r4
 800ac40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ac44:	bf08      	it	eq
 800ac46:	2300      	moveq	r3, #0
 800ac48:	6102      	str	r2, [r0, #16]
 800ac4a:	bf08      	it	eq
 800ac4c:	6143      	streq	r3, [r0, #20]
 800ac4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac52:	f8dc c000 	ldr.w	ip, [ip]
 800ac56:	fa0c fc08 	lsl.w	ip, ip, r8
 800ac5a:	ea4c 0707 	orr.w	r7, ip, r7
 800ac5e:	f849 7b04 	str.w	r7, [r9], #4
 800ac62:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac66:	40cf      	lsrs	r7, r1
 800ac68:	e7da      	b.n	800ac20 <rshift+0x4c>
 800ac6a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ac6e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac72:	e7c3      	b.n	800abfc <rshift+0x28>
 800ac74:	4623      	mov	r3, r4
 800ac76:	e7e1      	b.n	800ac3c <rshift+0x68>

0800ac78 <__hexdig_fun>:
 800ac78:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ac7c:	2b09      	cmp	r3, #9
 800ac7e:	d802      	bhi.n	800ac86 <__hexdig_fun+0xe>
 800ac80:	3820      	subs	r0, #32
 800ac82:	b2c0      	uxtb	r0, r0
 800ac84:	4770      	bx	lr
 800ac86:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ac8a:	2b05      	cmp	r3, #5
 800ac8c:	d801      	bhi.n	800ac92 <__hexdig_fun+0x1a>
 800ac8e:	3847      	subs	r0, #71	@ 0x47
 800ac90:	e7f7      	b.n	800ac82 <__hexdig_fun+0xa>
 800ac92:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ac96:	2b05      	cmp	r3, #5
 800ac98:	d801      	bhi.n	800ac9e <__hexdig_fun+0x26>
 800ac9a:	3827      	subs	r0, #39	@ 0x27
 800ac9c:	e7f1      	b.n	800ac82 <__hexdig_fun+0xa>
 800ac9e:	2000      	movs	r0, #0
 800aca0:	4770      	bx	lr
	...

0800aca4 <__gethex>:
 800aca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca8:	b085      	sub	sp, #20
 800acaa:	468a      	mov	sl, r1
 800acac:	9302      	str	r3, [sp, #8]
 800acae:	680b      	ldr	r3, [r1, #0]
 800acb0:	9001      	str	r0, [sp, #4]
 800acb2:	4690      	mov	r8, r2
 800acb4:	1c9c      	adds	r4, r3, #2
 800acb6:	46a1      	mov	r9, r4
 800acb8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800acbc:	2830      	cmp	r0, #48	@ 0x30
 800acbe:	d0fa      	beq.n	800acb6 <__gethex+0x12>
 800acc0:	eba9 0303 	sub.w	r3, r9, r3
 800acc4:	f1a3 0b02 	sub.w	fp, r3, #2
 800acc8:	f7ff ffd6 	bl	800ac78 <__hexdig_fun>
 800accc:	4605      	mov	r5, r0
 800acce:	2800      	cmp	r0, #0
 800acd0:	d168      	bne.n	800ada4 <__gethex+0x100>
 800acd2:	49a0      	ldr	r1, [pc, #640]	@ (800af54 <__gethex+0x2b0>)
 800acd4:	2201      	movs	r2, #1
 800acd6:	4648      	mov	r0, r9
 800acd8:	f7ff ff0f 	bl	800aafa <strncmp>
 800acdc:	4607      	mov	r7, r0
 800acde:	2800      	cmp	r0, #0
 800ace0:	d167      	bne.n	800adb2 <__gethex+0x10e>
 800ace2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ace6:	4626      	mov	r6, r4
 800ace8:	f7ff ffc6 	bl	800ac78 <__hexdig_fun>
 800acec:	2800      	cmp	r0, #0
 800acee:	d062      	beq.n	800adb6 <__gethex+0x112>
 800acf0:	4623      	mov	r3, r4
 800acf2:	7818      	ldrb	r0, [r3, #0]
 800acf4:	2830      	cmp	r0, #48	@ 0x30
 800acf6:	4699      	mov	r9, r3
 800acf8:	f103 0301 	add.w	r3, r3, #1
 800acfc:	d0f9      	beq.n	800acf2 <__gethex+0x4e>
 800acfe:	f7ff ffbb 	bl	800ac78 <__hexdig_fun>
 800ad02:	fab0 f580 	clz	r5, r0
 800ad06:	096d      	lsrs	r5, r5, #5
 800ad08:	f04f 0b01 	mov.w	fp, #1
 800ad0c:	464a      	mov	r2, r9
 800ad0e:	4616      	mov	r6, r2
 800ad10:	3201      	adds	r2, #1
 800ad12:	7830      	ldrb	r0, [r6, #0]
 800ad14:	f7ff ffb0 	bl	800ac78 <__hexdig_fun>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d1f8      	bne.n	800ad0e <__gethex+0x6a>
 800ad1c:	498d      	ldr	r1, [pc, #564]	@ (800af54 <__gethex+0x2b0>)
 800ad1e:	2201      	movs	r2, #1
 800ad20:	4630      	mov	r0, r6
 800ad22:	f7ff feea 	bl	800aafa <strncmp>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	d13f      	bne.n	800adaa <__gethex+0x106>
 800ad2a:	b944      	cbnz	r4, 800ad3e <__gethex+0x9a>
 800ad2c:	1c74      	adds	r4, r6, #1
 800ad2e:	4622      	mov	r2, r4
 800ad30:	4616      	mov	r6, r2
 800ad32:	3201      	adds	r2, #1
 800ad34:	7830      	ldrb	r0, [r6, #0]
 800ad36:	f7ff ff9f 	bl	800ac78 <__hexdig_fun>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d1f8      	bne.n	800ad30 <__gethex+0x8c>
 800ad3e:	1ba4      	subs	r4, r4, r6
 800ad40:	00a7      	lsls	r7, r4, #2
 800ad42:	7833      	ldrb	r3, [r6, #0]
 800ad44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ad48:	2b50      	cmp	r3, #80	@ 0x50
 800ad4a:	d13e      	bne.n	800adca <__gethex+0x126>
 800ad4c:	7873      	ldrb	r3, [r6, #1]
 800ad4e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ad50:	d033      	beq.n	800adba <__gethex+0x116>
 800ad52:	2b2d      	cmp	r3, #45	@ 0x2d
 800ad54:	d034      	beq.n	800adc0 <__gethex+0x11c>
 800ad56:	1c71      	adds	r1, r6, #1
 800ad58:	2400      	movs	r4, #0
 800ad5a:	7808      	ldrb	r0, [r1, #0]
 800ad5c:	f7ff ff8c 	bl	800ac78 <__hexdig_fun>
 800ad60:	1e43      	subs	r3, r0, #1
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	2b18      	cmp	r3, #24
 800ad66:	d830      	bhi.n	800adca <__gethex+0x126>
 800ad68:	f1a0 0210 	sub.w	r2, r0, #16
 800ad6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad70:	f7ff ff82 	bl	800ac78 <__hexdig_fun>
 800ad74:	f100 3cff 	add.w	ip, r0, #4294967295
 800ad78:	fa5f fc8c 	uxtb.w	ip, ip
 800ad7c:	f1bc 0f18 	cmp.w	ip, #24
 800ad80:	f04f 030a 	mov.w	r3, #10
 800ad84:	d91e      	bls.n	800adc4 <__gethex+0x120>
 800ad86:	b104      	cbz	r4, 800ad8a <__gethex+0xe6>
 800ad88:	4252      	negs	r2, r2
 800ad8a:	4417      	add	r7, r2
 800ad8c:	f8ca 1000 	str.w	r1, [sl]
 800ad90:	b1ed      	cbz	r5, 800adce <__gethex+0x12a>
 800ad92:	f1bb 0f00 	cmp.w	fp, #0
 800ad96:	bf0c      	ite	eq
 800ad98:	2506      	moveq	r5, #6
 800ad9a:	2500      	movne	r5, #0
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	b005      	add	sp, #20
 800ada0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada4:	2500      	movs	r5, #0
 800ada6:	462c      	mov	r4, r5
 800ada8:	e7b0      	b.n	800ad0c <__gethex+0x68>
 800adaa:	2c00      	cmp	r4, #0
 800adac:	d1c7      	bne.n	800ad3e <__gethex+0x9a>
 800adae:	4627      	mov	r7, r4
 800adb0:	e7c7      	b.n	800ad42 <__gethex+0x9e>
 800adb2:	464e      	mov	r6, r9
 800adb4:	462f      	mov	r7, r5
 800adb6:	2501      	movs	r5, #1
 800adb8:	e7c3      	b.n	800ad42 <__gethex+0x9e>
 800adba:	2400      	movs	r4, #0
 800adbc:	1cb1      	adds	r1, r6, #2
 800adbe:	e7cc      	b.n	800ad5a <__gethex+0xb6>
 800adc0:	2401      	movs	r4, #1
 800adc2:	e7fb      	b.n	800adbc <__gethex+0x118>
 800adc4:	fb03 0002 	mla	r0, r3, r2, r0
 800adc8:	e7ce      	b.n	800ad68 <__gethex+0xc4>
 800adca:	4631      	mov	r1, r6
 800adcc:	e7de      	b.n	800ad8c <__gethex+0xe8>
 800adce:	eba6 0309 	sub.w	r3, r6, r9
 800add2:	3b01      	subs	r3, #1
 800add4:	4629      	mov	r1, r5
 800add6:	2b07      	cmp	r3, #7
 800add8:	dc0a      	bgt.n	800adf0 <__gethex+0x14c>
 800adda:	9801      	ldr	r0, [sp, #4]
 800addc:	f7fd fdac 	bl	8008938 <_Balloc>
 800ade0:	4604      	mov	r4, r0
 800ade2:	b940      	cbnz	r0, 800adf6 <__gethex+0x152>
 800ade4:	4b5c      	ldr	r3, [pc, #368]	@ (800af58 <__gethex+0x2b4>)
 800ade6:	4602      	mov	r2, r0
 800ade8:	21e4      	movs	r1, #228	@ 0xe4
 800adea:	485c      	ldr	r0, [pc, #368]	@ (800af5c <__gethex+0x2b8>)
 800adec:	f7ff fec0 	bl	800ab70 <__assert_func>
 800adf0:	3101      	adds	r1, #1
 800adf2:	105b      	asrs	r3, r3, #1
 800adf4:	e7ef      	b.n	800add6 <__gethex+0x132>
 800adf6:	f100 0a14 	add.w	sl, r0, #20
 800adfa:	2300      	movs	r3, #0
 800adfc:	4655      	mov	r5, sl
 800adfe:	469b      	mov	fp, r3
 800ae00:	45b1      	cmp	r9, r6
 800ae02:	d337      	bcc.n	800ae74 <__gethex+0x1d0>
 800ae04:	f845 bb04 	str.w	fp, [r5], #4
 800ae08:	eba5 050a 	sub.w	r5, r5, sl
 800ae0c:	10ad      	asrs	r5, r5, #2
 800ae0e:	6125      	str	r5, [r4, #16]
 800ae10:	4658      	mov	r0, fp
 800ae12:	f7fd fe83 	bl	8008b1c <__hi0bits>
 800ae16:	016d      	lsls	r5, r5, #5
 800ae18:	f8d8 6000 	ldr.w	r6, [r8]
 800ae1c:	1a2d      	subs	r5, r5, r0
 800ae1e:	42b5      	cmp	r5, r6
 800ae20:	dd54      	ble.n	800aecc <__gethex+0x228>
 800ae22:	1bad      	subs	r5, r5, r6
 800ae24:	4629      	mov	r1, r5
 800ae26:	4620      	mov	r0, r4
 800ae28:	f7fe fa17 	bl	800925a <__any_on>
 800ae2c:	4681      	mov	r9, r0
 800ae2e:	b178      	cbz	r0, 800ae50 <__gethex+0x1ac>
 800ae30:	1e6b      	subs	r3, r5, #1
 800ae32:	1159      	asrs	r1, r3, #5
 800ae34:	f003 021f 	and.w	r2, r3, #31
 800ae38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ae3c:	f04f 0901 	mov.w	r9, #1
 800ae40:	fa09 f202 	lsl.w	r2, r9, r2
 800ae44:	420a      	tst	r2, r1
 800ae46:	d003      	beq.n	800ae50 <__gethex+0x1ac>
 800ae48:	454b      	cmp	r3, r9
 800ae4a:	dc36      	bgt.n	800aeba <__gethex+0x216>
 800ae4c:	f04f 0902 	mov.w	r9, #2
 800ae50:	4629      	mov	r1, r5
 800ae52:	4620      	mov	r0, r4
 800ae54:	f7ff febe 	bl	800abd4 <rshift>
 800ae58:	442f      	add	r7, r5
 800ae5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae5e:	42bb      	cmp	r3, r7
 800ae60:	da42      	bge.n	800aee8 <__gethex+0x244>
 800ae62:	9801      	ldr	r0, [sp, #4]
 800ae64:	4621      	mov	r1, r4
 800ae66:	f7fd fda7 	bl	80089b8 <_Bfree>
 800ae6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	6013      	str	r3, [r2, #0]
 800ae70:	25a3      	movs	r5, #163	@ 0xa3
 800ae72:	e793      	b.n	800ad9c <__gethex+0xf8>
 800ae74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ae78:	2a2e      	cmp	r2, #46	@ 0x2e
 800ae7a:	d012      	beq.n	800aea2 <__gethex+0x1fe>
 800ae7c:	2b20      	cmp	r3, #32
 800ae7e:	d104      	bne.n	800ae8a <__gethex+0x1e6>
 800ae80:	f845 bb04 	str.w	fp, [r5], #4
 800ae84:	f04f 0b00 	mov.w	fp, #0
 800ae88:	465b      	mov	r3, fp
 800ae8a:	7830      	ldrb	r0, [r6, #0]
 800ae8c:	9303      	str	r3, [sp, #12]
 800ae8e:	f7ff fef3 	bl	800ac78 <__hexdig_fun>
 800ae92:	9b03      	ldr	r3, [sp, #12]
 800ae94:	f000 000f 	and.w	r0, r0, #15
 800ae98:	4098      	lsls	r0, r3
 800ae9a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ae9e:	3304      	adds	r3, #4
 800aea0:	e7ae      	b.n	800ae00 <__gethex+0x15c>
 800aea2:	45b1      	cmp	r9, r6
 800aea4:	d8ea      	bhi.n	800ae7c <__gethex+0x1d8>
 800aea6:	492b      	ldr	r1, [pc, #172]	@ (800af54 <__gethex+0x2b0>)
 800aea8:	9303      	str	r3, [sp, #12]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	4630      	mov	r0, r6
 800aeae:	f7ff fe24 	bl	800aafa <strncmp>
 800aeb2:	9b03      	ldr	r3, [sp, #12]
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d1e1      	bne.n	800ae7c <__gethex+0x1d8>
 800aeb8:	e7a2      	b.n	800ae00 <__gethex+0x15c>
 800aeba:	1ea9      	subs	r1, r5, #2
 800aebc:	4620      	mov	r0, r4
 800aebe:	f7fe f9cc 	bl	800925a <__any_on>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d0c2      	beq.n	800ae4c <__gethex+0x1a8>
 800aec6:	f04f 0903 	mov.w	r9, #3
 800aeca:	e7c1      	b.n	800ae50 <__gethex+0x1ac>
 800aecc:	da09      	bge.n	800aee2 <__gethex+0x23e>
 800aece:	1b75      	subs	r5, r6, r5
 800aed0:	4621      	mov	r1, r4
 800aed2:	9801      	ldr	r0, [sp, #4]
 800aed4:	462a      	mov	r2, r5
 800aed6:	f7fd ff87 	bl	8008de8 <__lshift>
 800aeda:	1b7f      	subs	r7, r7, r5
 800aedc:	4604      	mov	r4, r0
 800aede:	f100 0a14 	add.w	sl, r0, #20
 800aee2:	f04f 0900 	mov.w	r9, #0
 800aee6:	e7b8      	b.n	800ae5a <__gethex+0x1b6>
 800aee8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aeec:	42bd      	cmp	r5, r7
 800aeee:	dd6f      	ble.n	800afd0 <__gethex+0x32c>
 800aef0:	1bed      	subs	r5, r5, r7
 800aef2:	42ae      	cmp	r6, r5
 800aef4:	dc34      	bgt.n	800af60 <__gethex+0x2bc>
 800aef6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d022      	beq.n	800af44 <__gethex+0x2a0>
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d024      	beq.n	800af4c <__gethex+0x2a8>
 800af02:	2b01      	cmp	r3, #1
 800af04:	d115      	bne.n	800af32 <__gethex+0x28e>
 800af06:	42ae      	cmp	r6, r5
 800af08:	d113      	bne.n	800af32 <__gethex+0x28e>
 800af0a:	2e01      	cmp	r6, #1
 800af0c:	d10b      	bne.n	800af26 <__gethex+0x282>
 800af0e:	9a02      	ldr	r2, [sp, #8]
 800af10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	2301      	movs	r3, #1
 800af18:	6123      	str	r3, [r4, #16]
 800af1a:	f8ca 3000 	str.w	r3, [sl]
 800af1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af20:	2562      	movs	r5, #98	@ 0x62
 800af22:	601c      	str	r4, [r3, #0]
 800af24:	e73a      	b.n	800ad9c <__gethex+0xf8>
 800af26:	1e71      	subs	r1, r6, #1
 800af28:	4620      	mov	r0, r4
 800af2a:	f7fe f996 	bl	800925a <__any_on>
 800af2e:	2800      	cmp	r0, #0
 800af30:	d1ed      	bne.n	800af0e <__gethex+0x26a>
 800af32:	9801      	ldr	r0, [sp, #4]
 800af34:	4621      	mov	r1, r4
 800af36:	f7fd fd3f 	bl	80089b8 <_Bfree>
 800af3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af3c:	2300      	movs	r3, #0
 800af3e:	6013      	str	r3, [r2, #0]
 800af40:	2550      	movs	r5, #80	@ 0x50
 800af42:	e72b      	b.n	800ad9c <__gethex+0xf8>
 800af44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1f3      	bne.n	800af32 <__gethex+0x28e>
 800af4a:	e7e0      	b.n	800af0e <__gethex+0x26a>
 800af4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1dd      	bne.n	800af0e <__gethex+0x26a>
 800af52:	e7ee      	b.n	800af32 <__gethex+0x28e>
 800af54:	0800bbe8 	.word	0x0800bbe8
 800af58:	0800ba7f 	.word	0x0800ba7f
 800af5c:	0800bdb1 	.word	0x0800bdb1
 800af60:	1e6f      	subs	r7, r5, #1
 800af62:	f1b9 0f00 	cmp.w	r9, #0
 800af66:	d130      	bne.n	800afca <__gethex+0x326>
 800af68:	b127      	cbz	r7, 800af74 <__gethex+0x2d0>
 800af6a:	4639      	mov	r1, r7
 800af6c:	4620      	mov	r0, r4
 800af6e:	f7fe f974 	bl	800925a <__any_on>
 800af72:	4681      	mov	r9, r0
 800af74:	117a      	asrs	r2, r7, #5
 800af76:	2301      	movs	r3, #1
 800af78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800af7c:	f007 071f 	and.w	r7, r7, #31
 800af80:	40bb      	lsls	r3, r7
 800af82:	4213      	tst	r3, r2
 800af84:	4629      	mov	r1, r5
 800af86:	4620      	mov	r0, r4
 800af88:	bf18      	it	ne
 800af8a:	f049 0902 	orrne.w	r9, r9, #2
 800af8e:	f7ff fe21 	bl	800abd4 <rshift>
 800af92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800af96:	1b76      	subs	r6, r6, r5
 800af98:	2502      	movs	r5, #2
 800af9a:	f1b9 0f00 	cmp.w	r9, #0
 800af9e:	d047      	beq.n	800b030 <__gethex+0x38c>
 800afa0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	d015      	beq.n	800afd4 <__gethex+0x330>
 800afa8:	2b03      	cmp	r3, #3
 800afaa:	d017      	beq.n	800afdc <__gethex+0x338>
 800afac:	2b01      	cmp	r3, #1
 800afae:	d109      	bne.n	800afc4 <__gethex+0x320>
 800afb0:	f019 0f02 	tst.w	r9, #2
 800afb4:	d006      	beq.n	800afc4 <__gethex+0x320>
 800afb6:	f8da 3000 	ldr.w	r3, [sl]
 800afba:	ea49 0903 	orr.w	r9, r9, r3
 800afbe:	f019 0f01 	tst.w	r9, #1
 800afc2:	d10e      	bne.n	800afe2 <__gethex+0x33e>
 800afc4:	f045 0510 	orr.w	r5, r5, #16
 800afc8:	e032      	b.n	800b030 <__gethex+0x38c>
 800afca:	f04f 0901 	mov.w	r9, #1
 800afce:	e7d1      	b.n	800af74 <__gethex+0x2d0>
 800afd0:	2501      	movs	r5, #1
 800afd2:	e7e2      	b.n	800af9a <__gethex+0x2f6>
 800afd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afd6:	f1c3 0301 	rsb	r3, r3, #1
 800afda:	930f      	str	r3, [sp, #60]	@ 0x3c
 800afdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d0f0      	beq.n	800afc4 <__gethex+0x320>
 800afe2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800afe6:	f104 0314 	add.w	r3, r4, #20
 800afea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800afee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aff2:	f04f 0c00 	mov.w	ip, #0
 800aff6:	4618      	mov	r0, r3
 800aff8:	f853 2b04 	ldr.w	r2, [r3], #4
 800affc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b000:	d01b      	beq.n	800b03a <__gethex+0x396>
 800b002:	3201      	adds	r2, #1
 800b004:	6002      	str	r2, [r0, #0]
 800b006:	2d02      	cmp	r5, #2
 800b008:	f104 0314 	add.w	r3, r4, #20
 800b00c:	d13c      	bne.n	800b088 <__gethex+0x3e4>
 800b00e:	f8d8 2000 	ldr.w	r2, [r8]
 800b012:	3a01      	subs	r2, #1
 800b014:	42b2      	cmp	r2, r6
 800b016:	d109      	bne.n	800b02c <__gethex+0x388>
 800b018:	1171      	asrs	r1, r6, #5
 800b01a:	2201      	movs	r2, #1
 800b01c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b020:	f006 061f 	and.w	r6, r6, #31
 800b024:	fa02 f606 	lsl.w	r6, r2, r6
 800b028:	421e      	tst	r6, r3
 800b02a:	d13a      	bne.n	800b0a2 <__gethex+0x3fe>
 800b02c:	f045 0520 	orr.w	r5, r5, #32
 800b030:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b032:	601c      	str	r4, [r3, #0]
 800b034:	9b02      	ldr	r3, [sp, #8]
 800b036:	601f      	str	r7, [r3, #0]
 800b038:	e6b0      	b.n	800ad9c <__gethex+0xf8>
 800b03a:	4299      	cmp	r1, r3
 800b03c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b040:	d8d9      	bhi.n	800aff6 <__gethex+0x352>
 800b042:	68a3      	ldr	r3, [r4, #8]
 800b044:	459b      	cmp	fp, r3
 800b046:	db17      	blt.n	800b078 <__gethex+0x3d4>
 800b048:	6861      	ldr	r1, [r4, #4]
 800b04a:	9801      	ldr	r0, [sp, #4]
 800b04c:	3101      	adds	r1, #1
 800b04e:	f7fd fc73 	bl	8008938 <_Balloc>
 800b052:	4681      	mov	r9, r0
 800b054:	b918      	cbnz	r0, 800b05e <__gethex+0x3ba>
 800b056:	4b1a      	ldr	r3, [pc, #104]	@ (800b0c0 <__gethex+0x41c>)
 800b058:	4602      	mov	r2, r0
 800b05a:	2184      	movs	r1, #132	@ 0x84
 800b05c:	e6c5      	b.n	800adea <__gethex+0x146>
 800b05e:	6922      	ldr	r2, [r4, #16]
 800b060:	3202      	adds	r2, #2
 800b062:	f104 010c 	add.w	r1, r4, #12
 800b066:	0092      	lsls	r2, r2, #2
 800b068:	300c      	adds	r0, #12
 800b06a:	f7ff fd69 	bl	800ab40 <memcpy>
 800b06e:	4621      	mov	r1, r4
 800b070:	9801      	ldr	r0, [sp, #4]
 800b072:	f7fd fca1 	bl	80089b8 <_Bfree>
 800b076:	464c      	mov	r4, r9
 800b078:	6923      	ldr	r3, [r4, #16]
 800b07a:	1c5a      	adds	r2, r3, #1
 800b07c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b080:	6122      	str	r2, [r4, #16]
 800b082:	2201      	movs	r2, #1
 800b084:	615a      	str	r2, [r3, #20]
 800b086:	e7be      	b.n	800b006 <__gethex+0x362>
 800b088:	6922      	ldr	r2, [r4, #16]
 800b08a:	455a      	cmp	r2, fp
 800b08c:	dd0b      	ble.n	800b0a6 <__gethex+0x402>
 800b08e:	2101      	movs	r1, #1
 800b090:	4620      	mov	r0, r4
 800b092:	f7ff fd9f 	bl	800abd4 <rshift>
 800b096:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b09a:	3701      	adds	r7, #1
 800b09c:	42bb      	cmp	r3, r7
 800b09e:	f6ff aee0 	blt.w	800ae62 <__gethex+0x1be>
 800b0a2:	2501      	movs	r5, #1
 800b0a4:	e7c2      	b.n	800b02c <__gethex+0x388>
 800b0a6:	f016 061f 	ands.w	r6, r6, #31
 800b0aa:	d0fa      	beq.n	800b0a2 <__gethex+0x3fe>
 800b0ac:	4453      	add	r3, sl
 800b0ae:	f1c6 0620 	rsb	r6, r6, #32
 800b0b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b0b6:	f7fd fd31 	bl	8008b1c <__hi0bits>
 800b0ba:	42b0      	cmp	r0, r6
 800b0bc:	dbe7      	blt.n	800b08e <__gethex+0x3ea>
 800b0be:	e7f0      	b.n	800b0a2 <__gethex+0x3fe>
 800b0c0:	0800ba7f 	.word	0x0800ba7f

0800b0c4 <L_shift>:
 800b0c4:	f1c2 0208 	rsb	r2, r2, #8
 800b0c8:	0092      	lsls	r2, r2, #2
 800b0ca:	b570      	push	{r4, r5, r6, lr}
 800b0cc:	f1c2 0620 	rsb	r6, r2, #32
 800b0d0:	6843      	ldr	r3, [r0, #4]
 800b0d2:	6804      	ldr	r4, [r0, #0]
 800b0d4:	fa03 f506 	lsl.w	r5, r3, r6
 800b0d8:	432c      	orrs	r4, r5
 800b0da:	40d3      	lsrs	r3, r2
 800b0dc:	6004      	str	r4, [r0, #0]
 800b0de:	f840 3f04 	str.w	r3, [r0, #4]!
 800b0e2:	4288      	cmp	r0, r1
 800b0e4:	d3f4      	bcc.n	800b0d0 <L_shift+0xc>
 800b0e6:	bd70      	pop	{r4, r5, r6, pc}

0800b0e8 <__match>:
 800b0e8:	b530      	push	{r4, r5, lr}
 800b0ea:	6803      	ldr	r3, [r0, #0]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0f2:	b914      	cbnz	r4, 800b0fa <__match+0x12>
 800b0f4:	6003      	str	r3, [r0, #0]
 800b0f6:	2001      	movs	r0, #1
 800b0f8:	bd30      	pop	{r4, r5, pc}
 800b0fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b102:	2d19      	cmp	r5, #25
 800b104:	bf98      	it	ls
 800b106:	3220      	addls	r2, #32
 800b108:	42a2      	cmp	r2, r4
 800b10a:	d0f0      	beq.n	800b0ee <__match+0x6>
 800b10c:	2000      	movs	r0, #0
 800b10e:	e7f3      	b.n	800b0f8 <__match+0x10>

0800b110 <__hexnan>:
 800b110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b114:	680b      	ldr	r3, [r1, #0]
 800b116:	6801      	ldr	r1, [r0, #0]
 800b118:	115e      	asrs	r6, r3, #5
 800b11a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b11e:	f013 031f 	ands.w	r3, r3, #31
 800b122:	b087      	sub	sp, #28
 800b124:	bf18      	it	ne
 800b126:	3604      	addne	r6, #4
 800b128:	2500      	movs	r5, #0
 800b12a:	1f37      	subs	r7, r6, #4
 800b12c:	4682      	mov	sl, r0
 800b12e:	4690      	mov	r8, r2
 800b130:	9301      	str	r3, [sp, #4]
 800b132:	f846 5c04 	str.w	r5, [r6, #-4]
 800b136:	46b9      	mov	r9, r7
 800b138:	463c      	mov	r4, r7
 800b13a:	9502      	str	r5, [sp, #8]
 800b13c:	46ab      	mov	fp, r5
 800b13e:	784a      	ldrb	r2, [r1, #1]
 800b140:	1c4b      	adds	r3, r1, #1
 800b142:	9303      	str	r3, [sp, #12]
 800b144:	b342      	cbz	r2, 800b198 <__hexnan+0x88>
 800b146:	4610      	mov	r0, r2
 800b148:	9105      	str	r1, [sp, #20]
 800b14a:	9204      	str	r2, [sp, #16]
 800b14c:	f7ff fd94 	bl	800ac78 <__hexdig_fun>
 800b150:	2800      	cmp	r0, #0
 800b152:	d151      	bne.n	800b1f8 <__hexnan+0xe8>
 800b154:	9a04      	ldr	r2, [sp, #16]
 800b156:	9905      	ldr	r1, [sp, #20]
 800b158:	2a20      	cmp	r2, #32
 800b15a:	d818      	bhi.n	800b18e <__hexnan+0x7e>
 800b15c:	9b02      	ldr	r3, [sp, #8]
 800b15e:	459b      	cmp	fp, r3
 800b160:	dd13      	ble.n	800b18a <__hexnan+0x7a>
 800b162:	454c      	cmp	r4, r9
 800b164:	d206      	bcs.n	800b174 <__hexnan+0x64>
 800b166:	2d07      	cmp	r5, #7
 800b168:	dc04      	bgt.n	800b174 <__hexnan+0x64>
 800b16a:	462a      	mov	r2, r5
 800b16c:	4649      	mov	r1, r9
 800b16e:	4620      	mov	r0, r4
 800b170:	f7ff ffa8 	bl	800b0c4 <L_shift>
 800b174:	4544      	cmp	r4, r8
 800b176:	d952      	bls.n	800b21e <__hexnan+0x10e>
 800b178:	2300      	movs	r3, #0
 800b17a:	f1a4 0904 	sub.w	r9, r4, #4
 800b17e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b182:	f8cd b008 	str.w	fp, [sp, #8]
 800b186:	464c      	mov	r4, r9
 800b188:	461d      	mov	r5, r3
 800b18a:	9903      	ldr	r1, [sp, #12]
 800b18c:	e7d7      	b.n	800b13e <__hexnan+0x2e>
 800b18e:	2a29      	cmp	r2, #41	@ 0x29
 800b190:	d157      	bne.n	800b242 <__hexnan+0x132>
 800b192:	3102      	adds	r1, #2
 800b194:	f8ca 1000 	str.w	r1, [sl]
 800b198:	f1bb 0f00 	cmp.w	fp, #0
 800b19c:	d051      	beq.n	800b242 <__hexnan+0x132>
 800b19e:	454c      	cmp	r4, r9
 800b1a0:	d206      	bcs.n	800b1b0 <__hexnan+0xa0>
 800b1a2:	2d07      	cmp	r5, #7
 800b1a4:	dc04      	bgt.n	800b1b0 <__hexnan+0xa0>
 800b1a6:	462a      	mov	r2, r5
 800b1a8:	4649      	mov	r1, r9
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f7ff ff8a 	bl	800b0c4 <L_shift>
 800b1b0:	4544      	cmp	r4, r8
 800b1b2:	d936      	bls.n	800b222 <__hexnan+0x112>
 800b1b4:	f1a8 0204 	sub.w	r2, r8, #4
 800b1b8:	4623      	mov	r3, r4
 800b1ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800b1be:	f842 1f04 	str.w	r1, [r2, #4]!
 800b1c2:	429f      	cmp	r7, r3
 800b1c4:	d2f9      	bcs.n	800b1ba <__hexnan+0xaa>
 800b1c6:	1b3b      	subs	r3, r7, r4
 800b1c8:	f023 0303 	bic.w	r3, r3, #3
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	3401      	adds	r4, #1
 800b1d0:	3e03      	subs	r6, #3
 800b1d2:	42b4      	cmp	r4, r6
 800b1d4:	bf88      	it	hi
 800b1d6:	2304      	movhi	r3, #4
 800b1d8:	4443      	add	r3, r8
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f843 2b04 	str.w	r2, [r3], #4
 800b1e0:	429f      	cmp	r7, r3
 800b1e2:	d2fb      	bcs.n	800b1dc <__hexnan+0xcc>
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	b91b      	cbnz	r3, 800b1f0 <__hexnan+0xe0>
 800b1e8:	4547      	cmp	r7, r8
 800b1ea:	d128      	bne.n	800b23e <__hexnan+0x12e>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	603b      	str	r3, [r7, #0]
 800b1f0:	2005      	movs	r0, #5
 800b1f2:	b007      	add	sp, #28
 800b1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f8:	3501      	adds	r5, #1
 800b1fa:	2d08      	cmp	r5, #8
 800b1fc:	f10b 0b01 	add.w	fp, fp, #1
 800b200:	dd06      	ble.n	800b210 <__hexnan+0x100>
 800b202:	4544      	cmp	r4, r8
 800b204:	d9c1      	bls.n	800b18a <__hexnan+0x7a>
 800b206:	2300      	movs	r3, #0
 800b208:	f844 3c04 	str.w	r3, [r4, #-4]
 800b20c:	2501      	movs	r5, #1
 800b20e:	3c04      	subs	r4, #4
 800b210:	6822      	ldr	r2, [r4, #0]
 800b212:	f000 000f 	and.w	r0, r0, #15
 800b216:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b21a:	6020      	str	r0, [r4, #0]
 800b21c:	e7b5      	b.n	800b18a <__hexnan+0x7a>
 800b21e:	2508      	movs	r5, #8
 800b220:	e7b3      	b.n	800b18a <__hexnan+0x7a>
 800b222:	9b01      	ldr	r3, [sp, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d0dd      	beq.n	800b1e4 <__hexnan+0xd4>
 800b228:	f1c3 0320 	rsb	r3, r3, #32
 800b22c:	f04f 32ff 	mov.w	r2, #4294967295
 800b230:	40da      	lsrs	r2, r3
 800b232:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b236:	4013      	ands	r3, r2
 800b238:	f846 3c04 	str.w	r3, [r6, #-4]
 800b23c:	e7d2      	b.n	800b1e4 <__hexnan+0xd4>
 800b23e:	3f04      	subs	r7, #4
 800b240:	e7d0      	b.n	800b1e4 <__hexnan+0xd4>
 800b242:	2004      	movs	r0, #4
 800b244:	e7d5      	b.n	800b1f2 <__hexnan+0xe2>

0800b246 <__ascii_mbtowc>:
 800b246:	b082      	sub	sp, #8
 800b248:	b901      	cbnz	r1, 800b24c <__ascii_mbtowc+0x6>
 800b24a:	a901      	add	r1, sp, #4
 800b24c:	b142      	cbz	r2, 800b260 <__ascii_mbtowc+0x1a>
 800b24e:	b14b      	cbz	r3, 800b264 <__ascii_mbtowc+0x1e>
 800b250:	7813      	ldrb	r3, [r2, #0]
 800b252:	600b      	str	r3, [r1, #0]
 800b254:	7812      	ldrb	r2, [r2, #0]
 800b256:	1e10      	subs	r0, r2, #0
 800b258:	bf18      	it	ne
 800b25a:	2001      	movne	r0, #1
 800b25c:	b002      	add	sp, #8
 800b25e:	4770      	bx	lr
 800b260:	4610      	mov	r0, r2
 800b262:	e7fb      	b.n	800b25c <__ascii_mbtowc+0x16>
 800b264:	f06f 0001 	mvn.w	r0, #1
 800b268:	e7f8      	b.n	800b25c <__ascii_mbtowc+0x16>

0800b26a <_realloc_r>:
 800b26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b26e:	4680      	mov	r8, r0
 800b270:	4615      	mov	r5, r2
 800b272:	460c      	mov	r4, r1
 800b274:	b921      	cbnz	r1, 800b280 <_realloc_r+0x16>
 800b276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b27a:	4611      	mov	r1, r2
 800b27c:	f7fd bad0 	b.w	8008820 <_malloc_r>
 800b280:	b92a      	cbnz	r2, 800b28e <_realloc_r+0x24>
 800b282:	f7fd fa59 	bl	8008738 <_free_r>
 800b286:	2400      	movs	r4, #0
 800b288:	4620      	mov	r0, r4
 800b28a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b28e:	f000 f8b2 	bl	800b3f6 <_malloc_usable_size_r>
 800b292:	4285      	cmp	r5, r0
 800b294:	4606      	mov	r6, r0
 800b296:	d802      	bhi.n	800b29e <_realloc_r+0x34>
 800b298:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b29c:	d8f4      	bhi.n	800b288 <_realloc_r+0x1e>
 800b29e:	4629      	mov	r1, r5
 800b2a0:	4640      	mov	r0, r8
 800b2a2:	f7fd fabd 	bl	8008820 <_malloc_r>
 800b2a6:	4607      	mov	r7, r0
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d0ec      	beq.n	800b286 <_realloc_r+0x1c>
 800b2ac:	42b5      	cmp	r5, r6
 800b2ae:	462a      	mov	r2, r5
 800b2b0:	4621      	mov	r1, r4
 800b2b2:	bf28      	it	cs
 800b2b4:	4632      	movcs	r2, r6
 800b2b6:	f7ff fc43 	bl	800ab40 <memcpy>
 800b2ba:	4621      	mov	r1, r4
 800b2bc:	4640      	mov	r0, r8
 800b2be:	f7fd fa3b 	bl	8008738 <_free_r>
 800b2c2:	463c      	mov	r4, r7
 800b2c4:	e7e0      	b.n	800b288 <_realloc_r+0x1e>
	...

0800b2c8 <_strtoul_l.constprop.0>:
 800b2c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2cc:	4e34      	ldr	r6, [pc, #208]	@ (800b3a0 <_strtoul_l.constprop.0+0xd8>)
 800b2ce:	4686      	mov	lr, r0
 800b2d0:	460d      	mov	r5, r1
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2d8:	5d37      	ldrb	r7, [r6, r4]
 800b2da:	f017 0708 	ands.w	r7, r7, #8
 800b2de:	d1f8      	bne.n	800b2d2 <_strtoul_l.constprop.0+0xa>
 800b2e0:	2c2d      	cmp	r4, #45	@ 0x2d
 800b2e2:	d12f      	bne.n	800b344 <_strtoul_l.constprop.0+0x7c>
 800b2e4:	782c      	ldrb	r4, [r5, #0]
 800b2e6:	2701      	movs	r7, #1
 800b2e8:	1c85      	adds	r5, r0, #2
 800b2ea:	f033 0010 	bics.w	r0, r3, #16
 800b2ee:	d109      	bne.n	800b304 <_strtoul_l.constprop.0+0x3c>
 800b2f0:	2c30      	cmp	r4, #48	@ 0x30
 800b2f2:	d12c      	bne.n	800b34e <_strtoul_l.constprop.0+0x86>
 800b2f4:	7828      	ldrb	r0, [r5, #0]
 800b2f6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b2fa:	2858      	cmp	r0, #88	@ 0x58
 800b2fc:	d127      	bne.n	800b34e <_strtoul_l.constprop.0+0x86>
 800b2fe:	786c      	ldrb	r4, [r5, #1]
 800b300:	2310      	movs	r3, #16
 800b302:	3502      	adds	r5, #2
 800b304:	f04f 38ff 	mov.w	r8, #4294967295
 800b308:	2600      	movs	r6, #0
 800b30a:	fbb8 f8f3 	udiv	r8, r8, r3
 800b30e:	fb03 f908 	mul.w	r9, r3, r8
 800b312:	ea6f 0909 	mvn.w	r9, r9
 800b316:	4630      	mov	r0, r6
 800b318:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b31c:	f1bc 0f09 	cmp.w	ip, #9
 800b320:	d81c      	bhi.n	800b35c <_strtoul_l.constprop.0+0x94>
 800b322:	4664      	mov	r4, ip
 800b324:	42a3      	cmp	r3, r4
 800b326:	dd2a      	ble.n	800b37e <_strtoul_l.constprop.0+0xb6>
 800b328:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b32c:	d007      	beq.n	800b33e <_strtoul_l.constprop.0+0x76>
 800b32e:	4580      	cmp	r8, r0
 800b330:	d322      	bcc.n	800b378 <_strtoul_l.constprop.0+0xb0>
 800b332:	d101      	bne.n	800b338 <_strtoul_l.constprop.0+0x70>
 800b334:	45a1      	cmp	r9, r4
 800b336:	db1f      	blt.n	800b378 <_strtoul_l.constprop.0+0xb0>
 800b338:	fb00 4003 	mla	r0, r0, r3, r4
 800b33c:	2601      	movs	r6, #1
 800b33e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b342:	e7e9      	b.n	800b318 <_strtoul_l.constprop.0+0x50>
 800b344:	2c2b      	cmp	r4, #43	@ 0x2b
 800b346:	bf04      	itt	eq
 800b348:	782c      	ldrbeq	r4, [r5, #0]
 800b34a:	1c85      	addeq	r5, r0, #2
 800b34c:	e7cd      	b.n	800b2ea <_strtoul_l.constprop.0+0x22>
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1d8      	bne.n	800b304 <_strtoul_l.constprop.0+0x3c>
 800b352:	2c30      	cmp	r4, #48	@ 0x30
 800b354:	bf0c      	ite	eq
 800b356:	2308      	moveq	r3, #8
 800b358:	230a      	movne	r3, #10
 800b35a:	e7d3      	b.n	800b304 <_strtoul_l.constprop.0+0x3c>
 800b35c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b360:	f1bc 0f19 	cmp.w	ip, #25
 800b364:	d801      	bhi.n	800b36a <_strtoul_l.constprop.0+0xa2>
 800b366:	3c37      	subs	r4, #55	@ 0x37
 800b368:	e7dc      	b.n	800b324 <_strtoul_l.constprop.0+0x5c>
 800b36a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b36e:	f1bc 0f19 	cmp.w	ip, #25
 800b372:	d804      	bhi.n	800b37e <_strtoul_l.constprop.0+0xb6>
 800b374:	3c57      	subs	r4, #87	@ 0x57
 800b376:	e7d5      	b.n	800b324 <_strtoul_l.constprop.0+0x5c>
 800b378:	f04f 36ff 	mov.w	r6, #4294967295
 800b37c:	e7df      	b.n	800b33e <_strtoul_l.constprop.0+0x76>
 800b37e:	1c73      	adds	r3, r6, #1
 800b380:	d106      	bne.n	800b390 <_strtoul_l.constprop.0+0xc8>
 800b382:	2322      	movs	r3, #34	@ 0x22
 800b384:	f8ce 3000 	str.w	r3, [lr]
 800b388:	4630      	mov	r0, r6
 800b38a:	b932      	cbnz	r2, 800b39a <_strtoul_l.constprop.0+0xd2>
 800b38c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b390:	b107      	cbz	r7, 800b394 <_strtoul_l.constprop.0+0xcc>
 800b392:	4240      	negs	r0, r0
 800b394:	2a00      	cmp	r2, #0
 800b396:	d0f9      	beq.n	800b38c <_strtoul_l.constprop.0+0xc4>
 800b398:	b106      	cbz	r6, 800b39c <_strtoul_l.constprop.0+0xd4>
 800b39a:	1e69      	subs	r1, r5, #1
 800b39c:	6011      	str	r1, [r2, #0]
 800b39e:	e7f5      	b.n	800b38c <_strtoul_l.constprop.0+0xc4>
 800b3a0:	0800bc41 	.word	0x0800bc41

0800b3a4 <_strtoul_r>:
 800b3a4:	f7ff bf90 	b.w	800b2c8 <_strtoul_l.constprop.0>

0800b3a8 <__ascii_wctomb>:
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	4608      	mov	r0, r1
 800b3ac:	b141      	cbz	r1, 800b3c0 <__ascii_wctomb+0x18>
 800b3ae:	2aff      	cmp	r2, #255	@ 0xff
 800b3b0:	d904      	bls.n	800b3bc <__ascii_wctomb+0x14>
 800b3b2:	228a      	movs	r2, #138	@ 0x8a
 800b3b4:	601a      	str	r2, [r3, #0]
 800b3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ba:	4770      	bx	lr
 800b3bc:	700a      	strb	r2, [r1, #0]
 800b3be:	2001      	movs	r0, #1
 800b3c0:	4770      	bx	lr
	...

0800b3c4 <fiprintf>:
 800b3c4:	b40e      	push	{r1, r2, r3}
 800b3c6:	b503      	push	{r0, r1, lr}
 800b3c8:	4601      	mov	r1, r0
 800b3ca:	ab03      	add	r3, sp, #12
 800b3cc:	4805      	ldr	r0, [pc, #20]	@ (800b3e4 <fiprintf+0x20>)
 800b3ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3d2:	6800      	ldr	r0, [r0, #0]
 800b3d4:	9301      	str	r3, [sp, #4]
 800b3d6:	f000 f83f 	bl	800b458 <_vfiprintf_r>
 800b3da:	b002      	add	sp, #8
 800b3dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3e0:	b003      	add	sp, #12
 800b3e2:	4770      	bx	lr
 800b3e4:	20000028 	.word	0x20000028

0800b3e8 <abort>:
 800b3e8:	b508      	push	{r3, lr}
 800b3ea:	2006      	movs	r0, #6
 800b3ec:	f000 fa08 	bl	800b800 <raise>
 800b3f0:	2001      	movs	r0, #1
 800b3f2:	f7fb fa29 	bl	8006848 <_exit>

0800b3f6 <_malloc_usable_size_r>:
 800b3f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3fa:	1f18      	subs	r0, r3, #4
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	bfbc      	itt	lt
 800b400:	580b      	ldrlt	r3, [r1, r0]
 800b402:	18c0      	addlt	r0, r0, r3
 800b404:	4770      	bx	lr

0800b406 <__sfputc_r>:
 800b406:	6893      	ldr	r3, [r2, #8]
 800b408:	3b01      	subs	r3, #1
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	b410      	push	{r4}
 800b40e:	6093      	str	r3, [r2, #8]
 800b410:	da08      	bge.n	800b424 <__sfputc_r+0x1e>
 800b412:	6994      	ldr	r4, [r2, #24]
 800b414:	42a3      	cmp	r3, r4
 800b416:	db01      	blt.n	800b41c <__sfputc_r+0x16>
 800b418:	290a      	cmp	r1, #10
 800b41a:	d103      	bne.n	800b424 <__sfputc_r+0x1e>
 800b41c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b420:	f000 b932 	b.w	800b688 <__swbuf_r>
 800b424:	6813      	ldr	r3, [r2, #0]
 800b426:	1c58      	adds	r0, r3, #1
 800b428:	6010      	str	r0, [r2, #0]
 800b42a:	7019      	strb	r1, [r3, #0]
 800b42c:	4608      	mov	r0, r1
 800b42e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <__sfputs_r>:
 800b434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b436:	4606      	mov	r6, r0
 800b438:	460f      	mov	r7, r1
 800b43a:	4614      	mov	r4, r2
 800b43c:	18d5      	adds	r5, r2, r3
 800b43e:	42ac      	cmp	r4, r5
 800b440:	d101      	bne.n	800b446 <__sfputs_r+0x12>
 800b442:	2000      	movs	r0, #0
 800b444:	e007      	b.n	800b456 <__sfputs_r+0x22>
 800b446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b44a:	463a      	mov	r2, r7
 800b44c:	4630      	mov	r0, r6
 800b44e:	f7ff ffda 	bl	800b406 <__sfputc_r>
 800b452:	1c43      	adds	r3, r0, #1
 800b454:	d1f3      	bne.n	800b43e <__sfputs_r+0xa>
 800b456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b458 <_vfiprintf_r>:
 800b458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45c:	460d      	mov	r5, r1
 800b45e:	b09d      	sub	sp, #116	@ 0x74
 800b460:	4614      	mov	r4, r2
 800b462:	4698      	mov	r8, r3
 800b464:	4606      	mov	r6, r0
 800b466:	b118      	cbz	r0, 800b470 <_vfiprintf_r+0x18>
 800b468:	6a03      	ldr	r3, [r0, #32]
 800b46a:	b90b      	cbnz	r3, 800b470 <_vfiprintf_r+0x18>
 800b46c:	f7fc f9cc 	bl	8007808 <__sinit>
 800b470:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b472:	07d9      	lsls	r1, r3, #31
 800b474:	d405      	bmi.n	800b482 <_vfiprintf_r+0x2a>
 800b476:	89ab      	ldrh	r3, [r5, #12]
 800b478:	059a      	lsls	r2, r3, #22
 800b47a:	d402      	bmi.n	800b482 <_vfiprintf_r+0x2a>
 800b47c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b47e:	f7fc fb06 	bl	8007a8e <__retarget_lock_acquire_recursive>
 800b482:	89ab      	ldrh	r3, [r5, #12]
 800b484:	071b      	lsls	r3, r3, #28
 800b486:	d501      	bpl.n	800b48c <_vfiprintf_r+0x34>
 800b488:	692b      	ldr	r3, [r5, #16]
 800b48a:	b99b      	cbnz	r3, 800b4b4 <_vfiprintf_r+0x5c>
 800b48c:	4629      	mov	r1, r5
 800b48e:	4630      	mov	r0, r6
 800b490:	f000 f938 	bl	800b704 <__swsetup_r>
 800b494:	b170      	cbz	r0, 800b4b4 <_vfiprintf_r+0x5c>
 800b496:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b498:	07dc      	lsls	r4, r3, #31
 800b49a:	d504      	bpl.n	800b4a6 <_vfiprintf_r+0x4e>
 800b49c:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a0:	b01d      	add	sp, #116	@ 0x74
 800b4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a6:	89ab      	ldrh	r3, [r5, #12]
 800b4a8:	0598      	lsls	r0, r3, #22
 800b4aa:	d4f7      	bmi.n	800b49c <_vfiprintf_r+0x44>
 800b4ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4ae:	f7fc faef 	bl	8007a90 <__retarget_lock_release_recursive>
 800b4b2:	e7f3      	b.n	800b49c <_vfiprintf_r+0x44>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4b8:	2320      	movs	r3, #32
 800b4ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4be:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4c2:	2330      	movs	r3, #48	@ 0x30
 800b4c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b674 <_vfiprintf_r+0x21c>
 800b4c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4cc:	f04f 0901 	mov.w	r9, #1
 800b4d0:	4623      	mov	r3, r4
 800b4d2:	469a      	mov	sl, r3
 800b4d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4d8:	b10a      	cbz	r2, 800b4de <_vfiprintf_r+0x86>
 800b4da:	2a25      	cmp	r2, #37	@ 0x25
 800b4dc:	d1f9      	bne.n	800b4d2 <_vfiprintf_r+0x7a>
 800b4de:	ebba 0b04 	subs.w	fp, sl, r4
 800b4e2:	d00b      	beq.n	800b4fc <_vfiprintf_r+0xa4>
 800b4e4:	465b      	mov	r3, fp
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	4629      	mov	r1, r5
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	f7ff ffa2 	bl	800b434 <__sfputs_r>
 800b4f0:	3001      	adds	r0, #1
 800b4f2:	f000 80a7 	beq.w	800b644 <_vfiprintf_r+0x1ec>
 800b4f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4f8:	445a      	add	r2, fp
 800b4fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b500:	2b00      	cmp	r3, #0
 800b502:	f000 809f 	beq.w	800b644 <_vfiprintf_r+0x1ec>
 800b506:	2300      	movs	r3, #0
 800b508:	f04f 32ff 	mov.w	r2, #4294967295
 800b50c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b510:	f10a 0a01 	add.w	sl, sl, #1
 800b514:	9304      	str	r3, [sp, #16]
 800b516:	9307      	str	r3, [sp, #28]
 800b518:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b51c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b51e:	4654      	mov	r4, sl
 800b520:	2205      	movs	r2, #5
 800b522:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b526:	4853      	ldr	r0, [pc, #332]	@ (800b674 <_vfiprintf_r+0x21c>)
 800b528:	f7f4 fe72 	bl	8000210 <memchr>
 800b52c:	9a04      	ldr	r2, [sp, #16]
 800b52e:	b9d8      	cbnz	r0, 800b568 <_vfiprintf_r+0x110>
 800b530:	06d1      	lsls	r1, r2, #27
 800b532:	bf44      	itt	mi
 800b534:	2320      	movmi	r3, #32
 800b536:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b53a:	0713      	lsls	r3, r2, #28
 800b53c:	bf44      	itt	mi
 800b53e:	232b      	movmi	r3, #43	@ 0x2b
 800b540:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b544:	f89a 3000 	ldrb.w	r3, [sl]
 800b548:	2b2a      	cmp	r3, #42	@ 0x2a
 800b54a:	d015      	beq.n	800b578 <_vfiprintf_r+0x120>
 800b54c:	9a07      	ldr	r2, [sp, #28]
 800b54e:	4654      	mov	r4, sl
 800b550:	2000      	movs	r0, #0
 800b552:	f04f 0c0a 	mov.w	ip, #10
 800b556:	4621      	mov	r1, r4
 800b558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b55c:	3b30      	subs	r3, #48	@ 0x30
 800b55e:	2b09      	cmp	r3, #9
 800b560:	d94b      	bls.n	800b5fa <_vfiprintf_r+0x1a2>
 800b562:	b1b0      	cbz	r0, 800b592 <_vfiprintf_r+0x13a>
 800b564:	9207      	str	r2, [sp, #28]
 800b566:	e014      	b.n	800b592 <_vfiprintf_r+0x13a>
 800b568:	eba0 0308 	sub.w	r3, r0, r8
 800b56c:	fa09 f303 	lsl.w	r3, r9, r3
 800b570:	4313      	orrs	r3, r2
 800b572:	9304      	str	r3, [sp, #16]
 800b574:	46a2      	mov	sl, r4
 800b576:	e7d2      	b.n	800b51e <_vfiprintf_r+0xc6>
 800b578:	9b03      	ldr	r3, [sp, #12]
 800b57a:	1d19      	adds	r1, r3, #4
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	9103      	str	r1, [sp, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	bfbb      	ittet	lt
 800b584:	425b      	neglt	r3, r3
 800b586:	f042 0202 	orrlt.w	r2, r2, #2
 800b58a:	9307      	strge	r3, [sp, #28]
 800b58c:	9307      	strlt	r3, [sp, #28]
 800b58e:	bfb8      	it	lt
 800b590:	9204      	strlt	r2, [sp, #16]
 800b592:	7823      	ldrb	r3, [r4, #0]
 800b594:	2b2e      	cmp	r3, #46	@ 0x2e
 800b596:	d10a      	bne.n	800b5ae <_vfiprintf_r+0x156>
 800b598:	7863      	ldrb	r3, [r4, #1]
 800b59a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b59c:	d132      	bne.n	800b604 <_vfiprintf_r+0x1ac>
 800b59e:	9b03      	ldr	r3, [sp, #12]
 800b5a0:	1d1a      	adds	r2, r3, #4
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	9203      	str	r2, [sp, #12]
 800b5a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5aa:	3402      	adds	r4, #2
 800b5ac:	9305      	str	r3, [sp, #20]
 800b5ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b684 <_vfiprintf_r+0x22c>
 800b5b2:	7821      	ldrb	r1, [r4, #0]
 800b5b4:	2203      	movs	r2, #3
 800b5b6:	4650      	mov	r0, sl
 800b5b8:	f7f4 fe2a 	bl	8000210 <memchr>
 800b5bc:	b138      	cbz	r0, 800b5ce <_vfiprintf_r+0x176>
 800b5be:	9b04      	ldr	r3, [sp, #16]
 800b5c0:	eba0 000a 	sub.w	r0, r0, sl
 800b5c4:	2240      	movs	r2, #64	@ 0x40
 800b5c6:	4082      	lsls	r2, r0
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	3401      	adds	r4, #1
 800b5cc:	9304      	str	r3, [sp, #16]
 800b5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5d2:	4829      	ldr	r0, [pc, #164]	@ (800b678 <_vfiprintf_r+0x220>)
 800b5d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5d8:	2206      	movs	r2, #6
 800b5da:	f7f4 fe19 	bl	8000210 <memchr>
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d03f      	beq.n	800b662 <_vfiprintf_r+0x20a>
 800b5e2:	4b26      	ldr	r3, [pc, #152]	@ (800b67c <_vfiprintf_r+0x224>)
 800b5e4:	bb1b      	cbnz	r3, 800b62e <_vfiprintf_r+0x1d6>
 800b5e6:	9b03      	ldr	r3, [sp, #12]
 800b5e8:	3307      	adds	r3, #7
 800b5ea:	f023 0307 	bic.w	r3, r3, #7
 800b5ee:	3308      	adds	r3, #8
 800b5f0:	9303      	str	r3, [sp, #12]
 800b5f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5f4:	443b      	add	r3, r7
 800b5f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5f8:	e76a      	b.n	800b4d0 <_vfiprintf_r+0x78>
 800b5fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5fe:	460c      	mov	r4, r1
 800b600:	2001      	movs	r0, #1
 800b602:	e7a8      	b.n	800b556 <_vfiprintf_r+0xfe>
 800b604:	2300      	movs	r3, #0
 800b606:	3401      	adds	r4, #1
 800b608:	9305      	str	r3, [sp, #20]
 800b60a:	4619      	mov	r1, r3
 800b60c:	f04f 0c0a 	mov.w	ip, #10
 800b610:	4620      	mov	r0, r4
 800b612:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b616:	3a30      	subs	r2, #48	@ 0x30
 800b618:	2a09      	cmp	r2, #9
 800b61a:	d903      	bls.n	800b624 <_vfiprintf_r+0x1cc>
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d0c6      	beq.n	800b5ae <_vfiprintf_r+0x156>
 800b620:	9105      	str	r1, [sp, #20]
 800b622:	e7c4      	b.n	800b5ae <_vfiprintf_r+0x156>
 800b624:	fb0c 2101 	mla	r1, ip, r1, r2
 800b628:	4604      	mov	r4, r0
 800b62a:	2301      	movs	r3, #1
 800b62c:	e7f0      	b.n	800b610 <_vfiprintf_r+0x1b8>
 800b62e:	ab03      	add	r3, sp, #12
 800b630:	9300      	str	r3, [sp, #0]
 800b632:	462a      	mov	r2, r5
 800b634:	4b12      	ldr	r3, [pc, #72]	@ (800b680 <_vfiprintf_r+0x228>)
 800b636:	a904      	add	r1, sp, #16
 800b638:	4630      	mov	r0, r6
 800b63a:	f7fb fa8d 	bl	8006b58 <_printf_float>
 800b63e:	4607      	mov	r7, r0
 800b640:	1c78      	adds	r0, r7, #1
 800b642:	d1d6      	bne.n	800b5f2 <_vfiprintf_r+0x19a>
 800b644:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b646:	07d9      	lsls	r1, r3, #31
 800b648:	d405      	bmi.n	800b656 <_vfiprintf_r+0x1fe>
 800b64a:	89ab      	ldrh	r3, [r5, #12]
 800b64c:	059a      	lsls	r2, r3, #22
 800b64e:	d402      	bmi.n	800b656 <_vfiprintf_r+0x1fe>
 800b650:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b652:	f7fc fa1d 	bl	8007a90 <__retarget_lock_release_recursive>
 800b656:	89ab      	ldrh	r3, [r5, #12]
 800b658:	065b      	lsls	r3, r3, #25
 800b65a:	f53f af1f 	bmi.w	800b49c <_vfiprintf_r+0x44>
 800b65e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b660:	e71e      	b.n	800b4a0 <_vfiprintf_r+0x48>
 800b662:	ab03      	add	r3, sp, #12
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	462a      	mov	r2, r5
 800b668:	4b05      	ldr	r3, [pc, #20]	@ (800b680 <_vfiprintf_r+0x228>)
 800b66a:	a904      	add	r1, sp, #16
 800b66c:	4630      	mov	r0, r6
 800b66e:	f7fb fd0b 	bl	8007088 <_printf_i>
 800b672:	e7e4      	b.n	800b63e <_vfiprintf_r+0x1e6>
 800b674:	0800bd41 	.word	0x0800bd41
 800b678:	0800bd4b 	.word	0x0800bd4b
 800b67c:	08006b59 	.word	0x08006b59
 800b680:	0800b435 	.word	0x0800b435
 800b684:	0800bd47 	.word	0x0800bd47

0800b688 <__swbuf_r>:
 800b688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68a:	460e      	mov	r6, r1
 800b68c:	4614      	mov	r4, r2
 800b68e:	4605      	mov	r5, r0
 800b690:	b118      	cbz	r0, 800b69a <__swbuf_r+0x12>
 800b692:	6a03      	ldr	r3, [r0, #32]
 800b694:	b90b      	cbnz	r3, 800b69a <__swbuf_r+0x12>
 800b696:	f7fc f8b7 	bl	8007808 <__sinit>
 800b69a:	69a3      	ldr	r3, [r4, #24]
 800b69c:	60a3      	str	r3, [r4, #8]
 800b69e:	89a3      	ldrh	r3, [r4, #12]
 800b6a0:	071a      	lsls	r2, r3, #28
 800b6a2:	d501      	bpl.n	800b6a8 <__swbuf_r+0x20>
 800b6a4:	6923      	ldr	r3, [r4, #16]
 800b6a6:	b943      	cbnz	r3, 800b6ba <__swbuf_r+0x32>
 800b6a8:	4621      	mov	r1, r4
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	f000 f82a 	bl	800b704 <__swsetup_r>
 800b6b0:	b118      	cbz	r0, 800b6ba <__swbuf_r+0x32>
 800b6b2:	f04f 37ff 	mov.w	r7, #4294967295
 800b6b6:	4638      	mov	r0, r7
 800b6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6ba:	6823      	ldr	r3, [r4, #0]
 800b6bc:	6922      	ldr	r2, [r4, #16]
 800b6be:	1a98      	subs	r0, r3, r2
 800b6c0:	6963      	ldr	r3, [r4, #20]
 800b6c2:	b2f6      	uxtb	r6, r6
 800b6c4:	4283      	cmp	r3, r0
 800b6c6:	4637      	mov	r7, r6
 800b6c8:	dc05      	bgt.n	800b6d6 <__swbuf_r+0x4e>
 800b6ca:	4621      	mov	r1, r4
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	f7ff f95f 	bl	800a990 <_fflush_r>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	d1ed      	bne.n	800b6b2 <__swbuf_r+0x2a>
 800b6d6:	68a3      	ldr	r3, [r4, #8]
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	60a3      	str	r3, [r4, #8]
 800b6dc:	6823      	ldr	r3, [r4, #0]
 800b6de:	1c5a      	adds	r2, r3, #1
 800b6e0:	6022      	str	r2, [r4, #0]
 800b6e2:	701e      	strb	r6, [r3, #0]
 800b6e4:	6962      	ldr	r2, [r4, #20]
 800b6e6:	1c43      	adds	r3, r0, #1
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d004      	beq.n	800b6f6 <__swbuf_r+0x6e>
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	07db      	lsls	r3, r3, #31
 800b6f0:	d5e1      	bpl.n	800b6b6 <__swbuf_r+0x2e>
 800b6f2:	2e0a      	cmp	r6, #10
 800b6f4:	d1df      	bne.n	800b6b6 <__swbuf_r+0x2e>
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	f7ff f949 	bl	800a990 <_fflush_r>
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d0d9      	beq.n	800b6b6 <__swbuf_r+0x2e>
 800b702:	e7d6      	b.n	800b6b2 <__swbuf_r+0x2a>

0800b704 <__swsetup_r>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	4b29      	ldr	r3, [pc, #164]	@ (800b7ac <__swsetup_r+0xa8>)
 800b708:	4605      	mov	r5, r0
 800b70a:	6818      	ldr	r0, [r3, #0]
 800b70c:	460c      	mov	r4, r1
 800b70e:	b118      	cbz	r0, 800b718 <__swsetup_r+0x14>
 800b710:	6a03      	ldr	r3, [r0, #32]
 800b712:	b90b      	cbnz	r3, 800b718 <__swsetup_r+0x14>
 800b714:	f7fc f878 	bl	8007808 <__sinit>
 800b718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b71c:	0719      	lsls	r1, r3, #28
 800b71e:	d422      	bmi.n	800b766 <__swsetup_r+0x62>
 800b720:	06da      	lsls	r2, r3, #27
 800b722:	d407      	bmi.n	800b734 <__swsetup_r+0x30>
 800b724:	2209      	movs	r2, #9
 800b726:	602a      	str	r2, [r5, #0]
 800b728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b72c:	81a3      	strh	r3, [r4, #12]
 800b72e:	f04f 30ff 	mov.w	r0, #4294967295
 800b732:	e033      	b.n	800b79c <__swsetup_r+0x98>
 800b734:	0758      	lsls	r0, r3, #29
 800b736:	d512      	bpl.n	800b75e <__swsetup_r+0x5a>
 800b738:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b73a:	b141      	cbz	r1, 800b74e <__swsetup_r+0x4a>
 800b73c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b740:	4299      	cmp	r1, r3
 800b742:	d002      	beq.n	800b74a <__swsetup_r+0x46>
 800b744:	4628      	mov	r0, r5
 800b746:	f7fc fff7 	bl	8008738 <_free_r>
 800b74a:	2300      	movs	r3, #0
 800b74c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b74e:	89a3      	ldrh	r3, [r4, #12]
 800b750:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b754:	81a3      	strh	r3, [r4, #12]
 800b756:	2300      	movs	r3, #0
 800b758:	6063      	str	r3, [r4, #4]
 800b75a:	6923      	ldr	r3, [r4, #16]
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	f043 0308 	orr.w	r3, r3, #8
 800b764:	81a3      	strh	r3, [r4, #12]
 800b766:	6923      	ldr	r3, [r4, #16]
 800b768:	b94b      	cbnz	r3, 800b77e <__swsetup_r+0x7a>
 800b76a:	89a3      	ldrh	r3, [r4, #12]
 800b76c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b774:	d003      	beq.n	800b77e <__swsetup_r+0x7a>
 800b776:	4621      	mov	r1, r4
 800b778:	4628      	mov	r0, r5
 800b77a:	f000 f883 	bl	800b884 <__smakebuf_r>
 800b77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b782:	f013 0201 	ands.w	r2, r3, #1
 800b786:	d00a      	beq.n	800b79e <__swsetup_r+0x9a>
 800b788:	2200      	movs	r2, #0
 800b78a:	60a2      	str	r2, [r4, #8]
 800b78c:	6962      	ldr	r2, [r4, #20]
 800b78e:	4252      	negs	r2, r2
 800b790:	61a2      	str	r2, [r4, #24]
 800b792:	6922      	ldr	r2, [r4, #16]
 800b794:	b942      	cbnz	r2, 800b7a8 <__swsetup_r+0xa4>
 800b796:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b79a:	d1c5      	bne.n	800b728 <__swsetup_r+0x24>
 800b79c:	bd38      	pop	{r3, r4, r5, pc}
 800b79e:	0799      	lsls	r1, r3, #30
 800b7a0:	bf58      	it	pl
 800b7a2:	6962      	ldrpl	r2, [r4, #20]
 800b7a4:	60a2      	str	r2, [r4, #8]
 800b7a6:	e7f4      	b.n	800b792 <__swsetup_r+0x8e>
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	e7f7      	b.n	800b79c <__swsetup_r+0x98>
 800b7ac:	20000028 	.word	0x20000028

0800b7b0 <_raise_r>:
 800b7b0:	291f      	cmp	r1, #31
 800b7b2:	b538      	push	{r3, r4, r5, lr}
 800b7b4:	4605      	mov	r5, r0
 800b7b6:	460c      	mov	r4, r1
 800b7b8:	d904      	bls.n	800b7c4 <_raise_r+0x14>
 800b7ba:	2316      	movs	r3, #22
 800b7bc:	6003      	str	r3, [r0, #0]
 800b7be:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c2:	bd38      	pop	{r3, r4, r5, pc}
 800b7c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b7c6:	b112      	cbz	r2, 800b7ce <_raise_r+0x1e>
 800b7c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7cc:	b94b      	cbnz	r3, 800b7e2 <_raise_r+0x32>
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	f000 f830 	bl	800b834 <_getpid_r>
 800b7d4:	4622      	mov	r2, r4
 800b7d6:	4601      	mov	r1, r0
 800b7d8:	4628      	mov	r0, r5
 800b7da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7de:	f000 b817 	b.w	800b810 <_kill_r>
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d00a      	beq.n	800b7fc <_raise_r+0x4c>
 800b7e6:	1c59      	adds	r1, r3, #1
 800b7e8:	d103      	bne.n	800b7f2 <_raise_r+0x42>
 800b7ea:	2316      	movs	r3, #22
 800b7ec:	6003      	str	r3, [r0, #0]
 800b7ee:	2001      	movs	r0, #1
 800b7f0:	e7e7      	b.n	800b7c2 <_raise_r+0x12>
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	4798      	blx	r3
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	e7e0      	b.n	800b7c2 <_raise_r+0x12>

0800b800 <raise>:
 800b800:	4b02      	ldr	r3, [pc, #8]	@ (800b80c <raise+0xc>)
 800b802:	4601      	mov	r1, r0
 800b804:	6818      	ldr	r0, [r3, #0]
 800b806:	f7ff bfd3 	b.w	800b7b0 <_raise_r>
 800b80a:	bf00      	nop
 800b80c:	20000028 	.word	0x20000028

0800b810 <_kill_r>:
 800b810:	b538      	push	{r3, r4, r5, lr}
 800b812:	4d07      	ldr	r5, [pc, #28]	@ (800b830 <_kill_r+0x20>)
 800b814:	2300      	movs	r3, #0
 800b816:	4604      	mov	r4, r0
 800b818:	4608      	mov	r0, r1
 800b81a:	4611      	mov	r1, r2
 800b81c:	602b      	str	r3, [r5, #0]
 800b81e:	f7fb f803 	bl	8006828 <_kill>
 800b822:	1c43      	adds	r3, r0, #1
 800b824:	d102      	bne.n	800b82c <_kill_r+0x1c>
 800b826:	682b      	ldr	r3, [r5, #0]
 800b828:	b103      	cbz	r3, 800b82c <_kill_r+0x1c>
 800b82a:	6023      	str	r3, [r4, #0]
 800b82c:	bd38      	pop	{r3, r4, r5, pc}
 800b82e:	bf00      	nop
 800b830:	20000520 	.word	0x20000520

0800b834 <_getpid_r>:
 800b834:	f7fa bff0 	b.w	8006818 <_getpid>

0800b838 <__swhatbuf_r>:
 800b838:	b570      	push	{r4, r5, r6, lr}
 800b83a:	460c      	mov	r4, r1
 800b83c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b840:	2900      	cmp	r1, #0
 800b842:	b096      	sub	sp, #88	@ 0x58
 800b844:	4615      	mov	r5, r2
 800b846:	461e      	mov	r6, r3
 800b848:	da0d      	bge.n	800b866 <__swhatbuf_r+0x2e>
 800b84a:	89a3      	ldrh	r3, [r4, #12]
 800b84c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b850:	f04f 0100 	mov.w	r1, #0
 800b854:	bf14      	ite	ne
 800b856:	2340      	movne	r3, #64	@ 0x40
 800b858:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b85c:	2000      	movs	r0, #0
 800b85e:	6031      	str	r1, [r6, #0]
 800b860:	602b      	str	r3, [r5, #0]
 800b862:	b016      	add	sp, #88	@ 0x58
 800b864:	bd70      	pop	{r4, r5, r6, pc}
 800b866:	466a      	mov	r2, sp
 800b868:	f000 f848 	bl	800b8fc <_fstat_r>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	dbec      	blt.n	800b84a <__swhatbuf_r+0x12>
 800b870:	9901      	ldr	r1, [sp, #4]
 800b872:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b876:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b87a:	4259      	negs	r1, r3
 800b87c:	4159      	adcs	r1, r3
 800b87e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b882:	e7eb      	b.n	800b85c <__swhatbuf_r+0x24>

0800b884 <__smakebuf_r>:
 800b884:	898b      	ldrh	r3, [r1, #12]
 800b886:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b888:	079d      	lsls	r5, r3, #30
 800b88a:	4606      	mov	r6, r0
 800b88c:	460c      	mov	r4, r1
 800b88e:	d507      	bpl.n	800b8a0 <__smakebuf_r+0x1c>
 800b890:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	6123      	str	r3, [r4, #16]
 800b898:	2301      	movs	r3, #1
 800b89a:	6163      	str	r3, [r4, #20]
 800b89c:	b003      	add	sp, #12
 800b89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8a0:	ab01      	add	r3, sp, #4
 800b8a2:	466a      	mov	r2, sp
 800b8a4:	f7ff ffc8 	bl	800b838 <__swhatbuf_r>
 800b8a8:	9f00      	ldr	r7, [sp, #0]
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	4639      	mov	r1, r7
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	f7fc ffb6 	bl	8008820 <_malloc_r>
 800b8b4:	b948      	cbnz	r0, 800b8ca <__smakebuf_r+0x46>
 800b8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ba:	059a      	lsls	r2, r3, #22
 800b8bc:	d4ee      	bmi.n	800b89c <__smakebuf_r+0x18>
 800b8be:	f023 0303 	bic.w	r3, r3, #3
 800b8c2:	f043 0302 	orr.w	r3, r3, #2
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	e7e2      	b.n	800b890 <__smakebuf_r+0xc>
 800b8ca:	89a3      	ldrh	r3, [r4, #12]
 800b8cc:	6020      	str	r0, [r4, #0]
 800b8ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8d2:	81a3      	strh	r3, [r4, #12]
 800b8d4:	9b01      	ldr	r3, [sp, #4]
 800b8d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b8da:	b15b      	cbz	r3, 800b8f4 <__smakebuf_r+0x70>
 800b8dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f000 f81d 	bl	800b920 <_isatty_r>
 800b8e6:	b128      	cbz	r0, 800b8f4 <__smakebuf_r+0x70>
 800b8e8:	89a3      	ldrh	r3, [r4, #12]
 800b8ea:	f023 0303 	bic.w	r3, r3, #3
 800b8ee:	f043 0301 	orr.w	r3, r3, #1
 800b8f2:	81a3      	strh	r3, [r4, #12]
 800b8f4:	89a3      	ldrh	r3, [r4, #12]
 800b8f6:	431d      	orrs	r5, r3
 800b8f8:	81a5      	strh	r5, [r4, #12]
 800b8fa:	e7cf      	b.n	800b89c <__smakebuf_r+0x18>

0800b8fc <_fstat_r>:
 800b8fc:	b538      	push	{r3, r4, r5, lr}
 800b8fe:	4d07      	ldr	r5, [pc, #28]	@ (800b91c <_fstat_r+0x20>)
 800b900:	2300      	movs	r3, #0
 800b902:	4604      	mov	r4, r0
 800b904:	4608      	mov	r0, r1
 800b906:	4611      	mov	r1, r2
 800b908:	602b      	str	r3, [r5, #0]
 800b90a:	f7fa ffed 	bl	80068e8 <_fstat>
 800b90e:	1c43      	adds	r3, r0, #1
 800b910:	d102      	bne.n	800b918 <_fstat_r+0x1c>
 800b912:	682b      	ldr	r3, [r5, #0]
 800b914:	b103      	cbz	r3, 800b918 <_fstat_r+0x1c>
 800b916:	6023      	str	r3, [r4, #0]
 800b918:	bd38      	pop	{r3, r4, r5, pc}
 800b91a:	bf00      	nop
 800b91c:	20000520 	.word	0x20000520

0800b920 <_isatty_r>:
 800b920:	b538      	push	{r3, r4, r5, lr}
 800b922:	4d06      	ldr	r5, [pc, #24]	@ (800b93c <_isatty_r+0x1c>)
 800b924:	2300      	movs	r3, #0
 800b926:	4604      	mov	r4, r0
 800b928:	4608      	mov	r0, r1
 800b92a:	602b      	str	r3, [r5, #0]
 800b92c:	f7fa ffec 	bl	8006908 <_isatty>
 800b930:	1c43      	adds	r3, r0, #1
 800b932:	d102      	bne.n	800b93a <_isatty_r+0x1a>
 800b934:	682b      	ldr	r3, [r5, #0]
 800b936:	b103      	cbz	r3, 800b93a <_isatty_r+0x1a>
 800b938:	6023      	str	r3, [r4, #0]
 800b93a:	bd38      	pop	{r3, r4, r5, pc}
 800b93c:	20000520 	.word	0x20000520

0800b940 <_init>:
 800b940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b942:	bf00      	nop
 800b944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b946:	bc08      	pop	{r3}
 800b948:	469e      	mov	lr, r3
 800b94a:	4770      	bx	lr

0800b94c <_fini>:
 800b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94e:	bf00      	nop
 800b950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b952:	bc08      	pop	{r3}
 800b954:	469e      	mov	lr, r3
 800b956:	4770      	bx	lr
