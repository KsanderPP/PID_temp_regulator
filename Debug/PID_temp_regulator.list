
PID_temp_regulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009090  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08009260  08009260  0000a260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009638  08009638  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009638  08009638  0000a638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009640  08009640  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009640  08009640  0000a640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009644  08009644  0000a644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009648  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  200001d8  08009820  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08009820  0000b4f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e69  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3c  00000000  00000000  0001f071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00021ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de7  00000000  00000000  00022c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281de  00000000  00000000  00023a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017044  00000000  00000000  0004bc35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6756  00000000  00000000  00062c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001593cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ca0  00000000  00000000  00159414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0015f0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009248 	.word	0x08009248

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08009248 	.word	0x08009248

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9b5 	b.w	8001014 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b96a 	b.w	8001014 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	460c      	mov	r4, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14e      	bne.n	8000e02 <__udivmoddi4+0xaa>
 8000d64:	4694      	mov	ip, r2
 8000d66:	458c      	cmp	ip, r1
 8000d68:	4686      	mov	lr, r0
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	d962      	bls.n	8000e36 <__udivmoddi4+0xde>
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0320 	rsb	r3, r2, #32
 8000d76:	4091      	lsls	r1, r2
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	4319      	orrs	r1, r3
 8000d82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f f68c 	uxth.w	r6, ip
 8000d8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d96:	fb07 1114 	mls	r1, r7, r4, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb04 f106 	mul.w	r1, r4, r6
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x64>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dae:	f080 8112 	bcs.w	8000fd6 <__udivmoddi4+0x27e>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 810f 	bls.w	8000fd6 <__udivmoddi4+0x27e>
 8000db8:	3c02      	subs	r4, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	fa1f f38e 	uxth.w	r3, lr
 8000dc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f606 	mul.w	r6, r0, r6
 8000dd2:	429e      	cmp	r6, r3
 8000dd4:	d90a      	bls.n	8000dec <__udivmoddi4+0x94>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dde:	f080 80fc 	bcs.w	8000fda <__udivmoddi4+0x282>
 8000de2:	429e      	cmp	r6, r3
 8000de4:	f240 80f9 	bls.w	8000fda <__udivmoddi4+0x282>
 8000de8:	4463      	add	r3, ip
 8000dea:	3802      	subs	r0, #2
 8000dec:	1b9b      	subs	r3, r3, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	2100      	movs	r1, #0
 8000df4:	b11d      	cbz	r5, 8000dfe <__udivmoddi4+0xa6>
 8000df6:	40d3      	lsrs	r3, r2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d905      	bls.n	8000e12 <__udivmoddi4+0xba>
 8000e06:	b10d      	cbz	r5, 8000e0c <__udivmoddi4+0xb4>
 8000e08:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e7f5      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e12:	fab3 f183 	clz	r1, r3
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d146      	bne.n	8000ea8 <__udivmoddi4+0x150>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d302      	bcc.n	8000e24 <__udivmoddi4+0xcc>
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	f0c0 80f0 	bcc.w	8001004 <__udivmoddi4+0x2ac>
 8000e24:	1a86      	subs	r6, r0, r2
 8000e26:	eb64 0303 	sbc.w	r3, r4, r3
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d0e6      	beq.n	8000dfe <__udivmoddi4+0xa6>
 8000e30:	e9c5 6300 	strd	r6, r3, [r5]
 8000e34:	e7e3      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	f040 8090 	bne.w	8000f5c <__udivmoddi4+0x204>
 8000e3c:	eba1 040c 	sub.w	r4, r1, ip
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e52:	fb08 4416 	mls	r4, r8, r6, r4
 8000e56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e5a:	fb07 f006 	mul.w	r0, r7, r6
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x11c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e6a:	d202      	bcs.n	8000e72 <__udivmoddi4+0x11a>
 8000e6c:	4298      	cmp	r0, r3
 8000e6e:	f200 80cd 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e72:	4626      	mov	r6, r4
 8000e74:	1a1c      	subs	r4, r3, r0
 8000e76:	fa1f f38e 	uxth.w	r3, lr
 8000e7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb00 f707 	mul.w	r7, r0, r7
 8000e8a:	429f      	cmp	r7, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x148>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x146>
 8000e98:	429f      	cmp	r7, r3
 8000e9a:	f200 80b0 	bhi.w	8000ffe <__udivmoddi4+0x2a6>
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	1bdb      	subs	r3, r3, r7
 8000ea2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0x9c>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ebc:	ea43 030c 	orr.w	r3, r3, ip
 8000ec0:	40f4      	lsrs	r4, r6
 8000ec2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec6:	0c38      	lsrs	r0, r7, #16
 8000ec8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ecc:	fbb4 fef0 	udiv	lr, r4, r0
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000edc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ee0:	45a1      	cmp	r9, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	d90a      	bls.n	8000efe <__udivmoddi4+0x1a6>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eee:	f080 8084 	bcs.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef2:	45a1      	cmp	r9, r4
 8000ef4:	f240 8081 	bls.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000efc:	443c      	add	r4, r7
 8000efe:	eba4 0409 	sub.w	r4, r4, r9
 8000f02:	fa1f f983 	uxth.w	r9, r3
 8000f06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	d907      	bls.n	8000f2a <__udivmoddi4+0x1d2>
 8000f1a:	193c      	adds	r4, r7, r4
 8000f1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f20:	d267      	bcs.n	8000ff2 <__udivmoddi4+0x29a>
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d965      	bls.n	8000ff2 <__udivmoddi4+0x29a>
 8000f26:	3b02      	subs	r3, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f32:	eba4 040c 	sub.w	r4, r4, ip
 8000f36:	429c      	cmp	r4, r3
 8000f38:	46ce      	mov	lr, r9
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	d351      	bcc.n	8000fe2 <__udivmoddi4+0x28a>
 8000f3e:	d04e      	beq.n	8000fde <__udivmoddi4+0x286>
 8000f40:	b155      	cbz	r5, 8000f58 <__udivmoddi4+0x200>
 8000f42:	ebb8 030e 	subs.w	r3, r8, lr
 8000f46:	eb64 040c 	sbc.w	r4, r4, ip
 8000f4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4e:	40cb      	lsrs	r3, r1
 8000f50:	431e      	orrs	r6, r3
 8000f52:	40cc      	lsrs	r4, r1
 8000f54:	e9c5 6400 	strd	r6, r4, [r5]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	e750      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000f5c:	f1c2 0320 	rsb	r3, r2, #32
 8000f60:	fa20 f103 	lsr.w	r1, r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa24 f303 	lsr.w	r3, r4, r3
 8000f6c:	4094      	lsls	r4, r2
 8000f6e:	430c      	orrs	r4, r1
 8000f70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f78:	fa1f f78c 	uxth.w	r7, ip
 8000f7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f80:	fb08 3110 	mls	r1, r8, r0, r3
 8000f84:	0c23      	lsrs	r3, r4, #16
 8000f86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f8a:	fb00 f107 	mul.w	r1, r0, r7
 8000f8e:	4299      	cmp	r1, r3
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x24c>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f9a:	d22c      	bcs.n	8000ff6 <__udivmoddi4+0x29e>
 8000f9c:	4299      	cmp	r1, r3
 8000f9e:	d92a      	bls.n	8000ff6 <__udivmoddi4+0x29e>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a5b      	subs	r3, r3, r1
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fac:	fb08 3311 	mls	r3, r8, r1, r3
 8000fb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb4:	fb01 f307 	mul.w	r3, r1, r7
 8000fb8:	42a3      	cmp	r3, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x276>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc4:	d213      	bcs.n	8000fee <__udivmoddi4+0x296>
 8000fc6:	42a3      	cmp	r3, r4
 8000fc8:	d911      	bls.n	8000fee <__udivmoddi4+0x296>
 8000fca:	3902      	subs	r1, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	1ae4      	subs	r4, r4, r3
 8000fd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd4:	e739      	b.n	8000e4a <__udivmoddi4+0xf2>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	e6f0      	b.n	8000dbc <__udivmoddi4+0x64>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e706      	b.n	8000dec <__udivmoddi4+0x94>
 8000fde:	45c8      	cmp	r8, r9
 8000fe0:	d2ae      	bcs.n	8000f40 <__udivmoddi4+0x1e8>
 8000fe2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fea:	3801      	subs	r0, #1
 8000fec:	e7a8      	b.n	8000f40 <__udivmoddi4+0x1e8>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	e7ed      	b.n	8000fce <__udivmoddi4+0x276>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	e799      	b.n	8000f2a <__udivmoddi4+0x1d2>
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	e7d4      	b.n	8000fa4 <__udivmoddi4+0x24c>
 8000ffa:	46d6      	mov	lr, sl
 8000ffc:	e77f      	b.n	8000efe <__udivmoddi4+0x1a6>
 8000ffe:	4463      	add	r3, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e74d      	b.n	8000ea0 <__udivmoddi4+0x148>
 8001004:	4606      	mov	r6, r0
 8001006:	4623      	mov	r3, r4
 8001008:	4608      	mov	r0, r1
 800100a:	e70f      	b.n	8000e2c <__udivmoddi4+0xd4>
 800100c:	3e02      	subs	r6, #2
 800100e:	4463      	add	r3, ip
 8001010:	e730      	b.n	8000e74 <__udivmoddi4+0x11c>
 8001012:	bf00      	nop

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f94d 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f806 	bl	8001034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f005 f816 	bl	8006058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_InitTick+0x54>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <HAL_InitTick+0x58>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104a:	fbb3 f3f1 	udiv	r3, r3, r1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f967 	bl	8001326 <HAL_SYSTICK_Config>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00e      	b.n	8001080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d80a      	bhi.n	800107e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f000 f92f 	bl	80012d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001074:	4a06      	ldr	r2, [pc, #24]	@ (8001090 <HAL_InitTick+0x5c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e000      	b.n	8001080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2000000c 	.word	0x2000000c
 800108c:	20000004 	.word	0x20000004
 8001090:	20000000 	.word	0x20000000

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000004 	.word	0x20000004
 80010b8:	200001f4 	.word	0x200001f4

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200001f4 	.word	0x200001f4

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff ffee 	bl	80010bc <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffde 	bl	80010bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000004 	.word	0x20000004

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <__NVIC_SetPriorityGrouping+0x40>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	4313      	orrs	r3, r2
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	@ (800115c <__NVIC_SetPriorityGrouping+0x40>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00
 8001160:	05fa0000 	.word	0x05fa0000

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	@ (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4907      	ldr	r1, [pc, #28]	@ (80011b8 <__NVIC_EnableIRQ+0x38>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	@ (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	@ (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	@ 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	@ 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001288:	d301      	bcc.n	800128e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128a:	2301      	movs	r3, #1
 800128c:	e00f      	b.n	80012ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128e:	4a0a      	ldr	r2, [pc, #40]	@ (80012b8 <SysTick_Config+0x40>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001296:	210f      	movs	r1, #15
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f7ff ff8e 	bl	80011bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <SysTick_Config+0x40>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a6:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <SysTick_Config+0x40>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	e000e010 	.word	0xe000e010

080012bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff29 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff3e 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ff8e 	bl	8001210 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5d 	bl	80011bc <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff31 	bl	8001180 <__NVIC_EnableIRQ>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffa2 	bl	8001278 <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800134c:	f7ff feb6 	bl	80010bc <HAL_GetTick>
 8001350:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d008      	beq.n	8001370 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2280      	movs	r2, #128	@ 0x80
 8001362:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e052      	b.n	8001416 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0216 	bic.w	r2, r2, #22
 800137e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800138e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	2b00      	cmp	r3, #0
 8001396:	d103      	bne.n	80013a0 <HAL_DMA_Abort+0x62>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800139c:	2b00      	cmp	r3, #0
 800139e:	d007      	beq.n	80013b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0208 	bic.w	r2, r2, #8
 80013ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0201 	bic.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c0:	e013      	b.n	80013ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013c2:	f7ff fe7b 	bl	80010bc <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	d90c      	bls.n	80013ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2220      	movs	r2, #32
 80013d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2203      	movs	r2, #3
 80013da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e015      	b.n	8001416 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1e4      	bne.n	80013c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013fc:	223f      	movs	r2, #63	@ 0x3f
 80013fe:	409a      	lsls	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d004      	beq.n	800143c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e00c      	b.n	8001456 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2205      	movs	r2, #5
 8001440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	@ 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
 8001482:	e175      	b.n	8001770 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001484:	2201      	movs	r2, #1
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	429a      	cmp	r2, r3
 800149e:	f040 8164 	bne.w	800176a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d005      	beq.n	80014ba <HAL_GPIO_Init+0x56>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d130      	bne.n	800151c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f0:	2201      	movs	r2, #1
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	f003 0201 	and.w	r2, r3, #1
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	2b03      	cmp	r3, #3
 8001526:	d017      	beq.n	8001558 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d123      	bne.n	80015ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	08da      	lsrs	r2, r3, #3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3208      	adds	r2, #8
 800156c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	220f      	movs	r2, #15
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	08da      	lsrs	r2, r3, #3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3208      	adds	r2, #8
 80015a6:	69b9      	ldr	r1, [r7, #24]
 80015a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	2203      	movs	r2, #3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0203 	and.w	r2, r3, #3
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80be 	beq.w	800176a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	4b66      	ldr	r3, [pc, #408]	@ (8001788 <HAL_GPIO_Init+0x324>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	4a65      	ldr	r2, [pc, #404]	@ (8001788 <HAL_GPIO_Init+0x324>)
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fa:	4b63      	ldr	r3, [pc, #396]	@ (8001788 <HAL_GPIO_Init+0x324>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001606:	4a61      	ldr	r2, [pc, #388]	@ (800178c <HAL_GPIO_Init+0x328>)
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	3302      	adds	r3, #2
 800160e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	220f      	movs	r2, #15
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a58      	ldr	r2, [pc, #352]	@ (8001790 <HAL_GPIO_Init+0x32c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d037      	beq.n	80016a2 <HAL_GPIO_Init+0x23e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a57      	ldr	r2, [pc, #348]	@ (8001794 <HAL_GPIO_Init+0x330>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d031      	beq.n	800169e <HAL_GPIO_Init+0x23a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a56      	ldr	r2, [pc, #344]	@ (8001798 <HAL_GPIO_Init+0x334>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d02b      	beq.n	800169a <HAL_GPIO_Init+0x236>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a55      	ldr	r2, [pc, #340]	@ (800179c <HAL_GPIO_Init+0x338>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d025      	beq.n	8001696 <HAL_GPIO_Init+0x232>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a54      	ldr	r2, [pc, #336]	@ (80017a0 <HAL_GPIO_Init+0x33c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d01f      	beq.n	8001692 <HAL_GPIO_Init+0x22e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a53      	ldr	r2, [pc, #332]	@ (80017a4 <HAL_GPIO_Init+0x340>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d019      	beq.n	800168e <HAL_GPIO_Init+0x22a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a52      	ldr	r2, [pc, #328]	@ (80017a8 <HAL_GPIO_Init+0x344>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d013      	beq.n	800168a <HAL_GPIO_Init+0x226>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <HAL_GPIO_Init+0x348>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00d      	beq.n	8001686 <HAL_GPIO_Init+0x222>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a50      	ldr	r2, [pc, #320]	@ (80017b0 <HAL_GPIO_Init+0x34c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d007      	beq.n	8001682 <HAL_GPIO_Init+0x21e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a4f      	ldr	r2, [pc, #316]	@ (80017b4 <HAL_GPIO_Init+0x350>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_GPIO_Init+0x21a>
 800167a:	2309      	movs	r3, #9
 800167c:	e012      	b.n	80016a4 <HAL_GPIO_Init+0x240>
 800167e:	230a      	movs	r3, #10
 8001680:	e010      	b.n	80016a4 <HAL_GPIO_Init+0x240>
 8001682:	2308      	movs	r3, #8
 8001684:	e00e      	b.n	80016a4 <HAL_GPIO_Init+0x240>
 8001686:	2307      	movs	r3, #7
 8001688:	e00c      	b.n	80016a4 <HAL_GPIO_Init+0x240>
 800168a:	2306      	movs	r3, #6
 800168c:	e00a      	b.n	80016a4 <HAL_GPIO_Init+0x240>
 800168e:	2305      	movs	r3, #5
 8001690:	e008      	b.n	80016a4 <HAL_GPIO_Init+0x240>
 8001692:	2304      	movs	r3, #4
 8001694:	e006      	b.n	80016a4 <HAL_GPIO_Init+0x240>
 8001696:	2303      	movs	r3, #3
 8001698:	e004      	b.n	80016a4 <HAL_GPIO_Init+0x240>
 800169a:	2302      	movs	r3, #2
 800169c:	e002      	b.n	80016a4 <HAL_GPIO_Init+0x240>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <HAL_GPIO_Init+0x240>
 80016a2:	2300      	movs	r3, #0
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	f002 0203 	and.w	r2, r2, #3
 80016aa:	0092      	lsls	r2, r2, #2
 80016ac:	4093      	lsls	r3, r2
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016b4:	4935      	ldr	r1, [pc, #212]	@ (800178c <HAL_GPIO_Init+0x328>)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	3302      	adds	r3, #2
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c2:	4b3d      	ldr	r3, [pc, #244]	@ (80017b8 <HAL_GPIO_Init+0x354>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016e6:	4a34      	ldr	r2, [pc, #208]	@ (80017b8 <HAL_GPIO_Init+0x354>)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ec:	4b32      	ldr	r3, [pc, #200]	@ (80017b8 <HAL_GPIO_Init+0x354>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001710:	4a29      	ldr	r2, [pc, #164]	@ (80017b8 <HAL_GPIO_Init+0x354>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001716:	4b28      	ldr	r3, [pc, #160]	@ (80017b8 <HAL_GPIO_Init+0x354>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800173a:	4a1f      	ldr	r2, [pc, #124]	@ (80017b8 <HAL_GPIO_Init+0x354>)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001740:	4b1d      	ldr	r3, [pc, #116]	@ (80017b8 <HAL_GPIO_Init+0x354>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001764:	4a14      	ldr	r2, [pc, #80]	@ (80017b8 <HAL_GPIO_Init+0x354>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3301      	adds	r3, #1
 800176e:	61fb      	str	r3, [r7, #28]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	2b0f      	cmp	r3, #15
 8001774:	f67f ae86 	bls.w	8001484 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3724      	adds	r7, #36	@ 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40013800 	.word	0x40013800
 8001790:	40020000 	.word	0x40020000
 8001794:	40020400 	.word	0x40020400
 8001798:	40020800 	.word	0x40020800
 800179c:	40020c00 	.word	0x40020c00
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40021400 	.word	0x40021400
 80017a8:	40021800 	.word	0x40021800
 80017ac:	40021c00 	.word	0x40021c00
 80017b0:	40022000 	.word	0x40022000
 80017b4:	40022400 	.word	0x40022400
 80017b8:	40013c00 	.word	0x40013c00

080017bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
 80017c8:	4613      	mov	r3, r2
 80017ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017cc:	787b      	ldrb	r3, [r7, #1]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80017d8:	e003      	b.n	80017e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80017da:	887b      	ldrh	r3, [r7, #2]
 80017dc:	041a      	lsls	r2, r3, #16
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	619a      	str	r2, [r3, #24]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e08b      	b.n	800191a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f004 fc42 	bl	80060a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2224      	movs	r2, #36	@ 0x24
 8001820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0201 	bic.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001840:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001850:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	e006      	b.n	8001878 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001876:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d108      	bne.n	8001892 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	e007      	b.n	80018a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6859      	ldr	r1, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <HAL_I2C_Init+0x134>)
 80018ae:	430b      	orrs	r3, r1
 80018b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69d9      	ldr	r1, [r3, #28]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1a      	ldr	r2, [r3, #32]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2220      	movs	r2, #32
 8001906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	02008000 	.word	0x02008000

08001928 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af02      	add	r7, sp, #8
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	461a      	mov	r2, r3
 8001934:	460b      	mov	r3, r1
 8001936:	817b      	strh	r3, [r7, #10]
 8001938:	4613      	mov	r3, r2
 800193a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b20      	cmp	r3, #32
 8001946:	f040 80fd 	bne.w	8001b44 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_I2C_Master_Transmit+0x30>
 8001954:	2302      	movs	r3, #2
 8001956:	e0f6      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x21e>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001960:	f7ff fbac 	bl	80010bc <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2319      	movs	r3, #25
 800196c:	2201      	movs	r2, #1
 800196e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 fbea 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0e1      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2221      	movs	r2, #33	@ 0x21
 8001986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2210      	movs	r2, #16
 800198e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	893a      	ldrh	r2, [r7, #8]
 80019a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2bff      	cmp	r3, #255	@ 0xff
 80019b2:	d906      	bls.n	80019c2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	22ff      	movs	r2, #255	@ 0xff
 80019b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80019ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	e007      	b.n	80019d2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80019cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019d0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d024      	beq.n	8001a24 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019de:	781a      	ldrb	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	8979      	ldrh	r1, [r7, #10]
 8001a16:	4b4e      	ldr	r3, [pc, #312]	@ (8001b50 <HAL_I2C_Master_Transmit+0x228>)
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 fd59 	bl	80024d4 <I2C_TransferConfig>
 8001a22:	e066      	b.n	8001af2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	8979      	ldrh	r1, [r7, #10]
 8001a2c:	4b48      	ldr	r3, [pc, #288]	@ (8001b50 <HAL_I2C_Master_Transmit+0x228>)
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 fd4e 	bl	80024d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a38:	e05b      	b.n	8001af2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	6a39      	ldr	r1, [r7, #32]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 fbdd 	bl	80021fe <I2C_WaitOnTXISFlagUntilTimeout>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e07b      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d034      	beq.n	8001af2 <HAL_I2C_Master_Transmit+0x1ca>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d130      	bne.n	8001af2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	2200      	movs	r2, #0
 8001a98:	2180      	movs	r1, #128	@ 0x80
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 fb56 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e04d      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2bff      	cmp	r3, #255	@ 0xff
 8001ab2:	d90e      	bls.n	8001ad2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	22ff      	movs	r2, #255	@ 0xff
 8001ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	8979      	ldrh	r1, [r7, #10]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fd02 	bl	80024d4 <I2C_TransferConfig>
 8001ad0:	e00f      	b.n	8001af2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	8979      	ldrh	r1, [r7, #10]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 fcf1 	bl	80024d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d19e      	bne.n	8001a3a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	6a39      	ldr	r1, [r7, #32]
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 fbc3 	bl	800228c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e01a      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2220      	movs	r2, #32
 8001b16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6859      	ldr	r1, [r3, #4]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <HAL_I2C_Master_Transmit+0x22c>)
 8001b24:	400b      	ands	r3, r1
 8001b26:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e000      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
  }
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	80002000 	.word	0x80002000
 8001b54:	fe00e800 	.word	0xfe00e800

08001b58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	4608      	mov	r0, r1
 8001b62:	4611      	mov	r1, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	4603      	mov	r3, r0
 8001b68:	817b      	strh	r3, [r7, #10]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	813b      	strh	r3, [r7, #8]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	f040 80f9 	bne.w	8001d72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <HAL_I2C_Mem_Write+0x34>
 8001b86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d105      	bne.n	8001b98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0ed      	b.n	8001d74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_I2C_Mem_Write+0x4e>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e0e6      	b.n	8001d74 <HAL_I2C_Mem_Write+0x21c>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bae:	f7ff fa85 	bl	80010bc <HAL_GetTick>
 8001bb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2319      	movs	r3, #25
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fac3 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0d1      	b.n	8001d74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2221      	movs	r2, #33	@ 0x21
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2240      	movs	r2, #64	@ 0x40
 8001bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a3a      	ldr	r2, [r7, #32]
 8001bea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bf8:	88f8      	ldrh	r0, [r7, #6]
 8001bfa:	893a      	ldrh	r2, [r7, #8]
 8001bfc:	8979      	ldrh	r1, [r7, #10]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	4603      	mov	r3, r0
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f9d3 	bl	8001fb4 <I2C_RequestMemoryWrite>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0a9      	b.n	8001d74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2bff      	cmp	r3, #255	@ 0xff
 8001c28:	d90e      	bls.n	8001c48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	22ff      	movs	r2, #255	@ 0xff
 8001c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	8979      	ldrh	r1, [r7, #10]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 fc47 	bl	80024d4 <I2C_TransferConfig>
 8001c46:	e00f      	b.n	8001c68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	8979      	ldrh	r1, [r7, #10]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 fc36 	bl	80024d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fac6 	bl	80021fe <I2C_WaitOnTXISFlagUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e07b      	b.n	8001d74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d034      	beq.n	8001d20 <HAL_I2C_Mem_Write+0x1c8>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d130      	bne.n	8001d20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2180      	movs	r1, #128	@ 0x80
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 fa3f 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e04d      	b.n	8001d74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2bff      	cmp	r3, #255	@ 0xff
 8001ce0:	d90e      	bls.n	8001d00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	22ff      	movs	r2, #255	@ 0xff
 8001ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	8979      	ldrh	r1, [r7, #10]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 fbeb 	bl	80024d4 <I2C_TransferConfig>
 8001cfe:	e00f      	b.n	8001d20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	8979      	ldrh	r1, [r7, #10]
 8001d12:	2300      	movs	r3, #0
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 fbda 	bl	80024d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d19e      	bne.n	8001c68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 faac 	bl	800228c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e01a      	b.n	8001d74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2220      	movs	r2, #32
 8001d44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <HAL_I2C_Mem_Write+0x224>)
 8001d52:	400b      	ands	r3, r1
 8001d54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e000      	b.n	8001d74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001d72:	2302      	movs	r3, #2
  }
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	fe00e800 	.word	0xfe00e800

08001d80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	4608      	mov	r0, r1
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4603      	mov	r3, r0
 8001d90:	817b      	strh	r3, [r7, #10]
 8001d92:	460b      	mov	r3, r1
 8001d94:	813b      	strh	r3, [r7, #8]
 8001d96:	4613      	mov	r3, r2
 8001d98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	f040 80fd 	bne.w	8001fa2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_I2C_Mem_Read+0x34>
 8001dae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0f1      	b.n	8001fa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_I2C_Mem_Read+0x4e>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e0ea      	b.n	8001fa4 <HAL_I2C_Mem_Read+0x224>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dd6:	f7ff f971 	bl	80010bc <HAL_GetTick>
 8001dda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2319      	movs	r3, #25
 8001de2:	2201      	movs	r2, #1
 8001de4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f9af 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0d5      	b.n	8001fa4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2222      	movs	r2, #34	@ 0x22
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2240      	movs	r2, #64	@ 0x40
 8001e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a3a      	ldr	r2, [r7, #32]
 8001e12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e20:	88f8      	ldrh	r0, [r7, #6]
 8001e22:	893a      	ldrh	r2, [r7, #8]
 8001e24:	8979      	ldrh	r1, [r7, #10]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	9301      	str	r3, [sp, #4]
 8001e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	4603      	mov	r3, r0
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f913 	bl	800205c <I2C_RequestMemoryRead>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0ad      	b.n	8001fa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2bff      	cmp	r3, #255	@ 0xff
 8001e50:	d90e      	bls.n	8001e70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	8979      	ldrh	r1, [r7, #10]
 8001e60:	4b52      	ldr	r3, [pc, #328]	@ (8001fac <HAL_I2C_Mem_Read+0x22c>)
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 fb33 	bl	80024d4 <I2C_TransferConfig>
 8001e6e:	e00f      	b.n	8001e90 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	8979      	ldrh	r1, [r7, #10]
 8001e82:	4b4a      	ldr	r3, [pc, #296]	@ (8001fac <HAL_I2C_Mem_Read+0x22c>)
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fb22 	bl	80024d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e96:	2200      	movs	r2, #0
 8001e98:	2104      	movs	r1, #4
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f956 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e07c      	b.n	8001fa4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d034      	beq.n	8001f50 <HAL_I2C_Mem_Read+0x1d0>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d130      	bne.n	8001f50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2180      	movs	r1, #128	@ 0x80
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 f927 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e04d      	b.n	8001fa4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2bff      	cmp	r3, #255	@ 0xff
 8001f10:	d90e      	bls.n	8001f30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	8979      	ldrh	r1, [r7, #10]
 8001f20:	2300      	movs	r3, #0
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 fad3 	bl	80024d4 <I2C_TransferConfig>
 8001f2e:	e00f      	b.n	8001f50 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	8979      	ldrh	r1, [r7, #10]
 8001f42:	2300      	movs	r3, #0
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 fac2 	bl	80024d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d19a      	bne.n	8001e90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f994 	bl	800228c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e01a      	b.n	8001fa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2220      	movs	r2, #32
 8001f74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <HAL_I2C_Mem_Read+0x230>)
 8001f82:	400b      	ands	r3, r1
 8001f84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e000      	b.n	8001fa4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
  }
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	80002400 	.word	0x80002400
 8001fb0:	fe00e800 	.word	0xfe00e800

08001fb4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	817b      	strh	r3, [r7, #10]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	813b      	strh	r3, [r7, #8]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	8979      	ldrh	r1, [r7, #10]
 8001fd4:	4b20      	ldr	r3, [pc, #128]	@ (8002058 <I2C_RequestMemoryWrite+0xa4>)
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fa79 	bl	80024d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	69b9      	ldr	r1, [r7, #24]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f909 	bl	80021fe <I2C_WaitOnTXISFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e02c      	b.n	8002050 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ffc:	893b      	ldrh	r3, [r7, #8]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	629a      	str	r2, [r3, #40]	@ 0x28
 8002006:	e015      	b.n	8002034 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002008:	893b      	ldrh	r3, [r7, #8]
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	b29b      	uxth	r3, r3
 800200e:	b2da      	uxtb	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	69b9      	ldr	r1, [r7, #24]
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 f8ef 	bl	80021fe <I2C_WaitOnTXISFlagUntilTimeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e012      	b.n	8002050 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800202a:	893b      	ldrh	r3, [r7, #8]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2200      	movs	r2, #0
 800203c:	2180      	movs	r1, #128	@ 0x80
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f884 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	80002000 	.word	0x80002000

0800205c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af02      	add	r7, sp, #8
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	4608      	mov	r0, r1
 8002066:	4611      	mov	r1, r2
 8002068:	461a      	mov	r2, r3
 800206a:	4603      	mov	r3, r0
 800206c:	817b      	strh	r3, [r7, #10]
 800206e:	460b      	mov	r3, r1
 8002070:	813b      	strh	r3, [r7, #8]
 8002072:	4613      	mov	r3, r2
 8002074:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	8979      	ldrh	r1, [r7, #10]
 800207c:	4b20      	ldr	r3, [pc, #128]	@ (8002100 <I2C_RequestMemoryRead+0xa4>)
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2300      	movs	r3, #0
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fa26 	bl	80024d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	69b9      	ldr	r1, [r7, #24]
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 f8b6 	bl	80021fe <I2C_WaitOnTXISFlagUntilTimeout>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e02c      	b.n	80020f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d105      	bne.n	80020ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020a2:	893b      	ldrh	r3, [r7, #8]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80020ac:	e015      	b.n	80020da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020ae:	893b      	ldrh	r3, [r7, #8]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	69b9      	ldr	r1, [r7, #24]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f89c 	bl	80021fe <I2C_WaitOnTXISFlagUntilTimeout>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e012      	b.n	80020f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020d0:	893b      	ldrh	r3, [r7, #8]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	2200      	movs	r2, #0
 80020e2:	2140      	movs	r1, #64	@ 0x40
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 f831 	bl	800214c <I2C_WaitOnFlagUntilTimeout>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	80002000 	.word	0x80002000

08002104 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d103      	bne.n	8002122 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2200      	movs	r2, #0
 8002120:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	d007      	beq.n	8002140 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699a      	ldr	r2, [r3, #24]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	619a      	str	r2, [r3, #24]
  }
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	4613      	mov	r3, r2
 800215a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800215c:	e03b      	b.n	80021d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	6839      	ldr	r1, [r7, #0]
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f8d6 	bl	8002314 <I2C_IsErrorOccurred>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e041      	b.n	80021f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d02d      	beq.n	80021d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217a:	f7fe ff9f 	bl	80010bc <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d302      	bcc.n	8002190 <I2C_WaitOnFlagUntilTimeout+0x44>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d122      	bne.n	80021d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	4013      	ands	r3, r2
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	429a      	cmp	r2, r3
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d113      	bne.n	80021d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	f043 0220 	orr.w	r2, r3, #32
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2220      	movs	r2, #32
 80021be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00f      	b.n	80021f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699a      	ldr	r2, [r3, #24]
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4013      	ands	r3, r2
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	bf0c      	ite	eq
 80021e6:	2301      	moveq	r3, #1
 80021e8:	2300      	movne	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d0b4      	beq.n	800215e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800220a:	e033      	b.n	8002274 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 f87f 	bl	8002314 <I2C_IsErrorOccurred>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e031      	b.n	8002284 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002226:	d025      	beq.n	8002274 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002228:	f7fe ff48 	bl	80010bc <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	429a      	cmp	r2, r3
 8002236:	d302      	bcc.n	800223e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d11a      	bne.n	8002274 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b02      	cmp	r3, #2
 800224a:	d013      	beq.n	8002274 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002250:	f043 0220 	orr.w	r2, r3, #32
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e007      	b.n	8002284 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b02      	cmp	r3, #2
 8002280:	d1c4      	bne.n	800220c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002298:	e02f      	b.n	80022fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f838 	bl	8002314 <I2C_IsErrorOccurred>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e02d      	b.n	800230a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ae:	f7fe ff05 	bl	80010bc <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d302      	bcc.n	80022c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11a      	bne.n	80022fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	d013      	beq.n	80022fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	f043 0220 	orr.w	r2, r3, #32
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e007      	b.n	800230a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0320 	and.w	r3, r3, #32
 8002304:	2b20      	cmp	r3, #32
 8002306:	d1c8      	bne.n	800229a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	@ 0x28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	d068      	beq.n	8002412 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2210      	movs	r2, #16
 8002346:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002348:	e049      	b.n	80023de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d045      	beq.n	80023de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002352:	f7fe feb3 	bl	80010bc <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	429a      	cmp	r2, r3
 8002360:	d302      	bcc.n	8002368 <I2C_IsErrorOccurred+0x54>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d13a      	bne.n	80023de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002372:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800237a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002386:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800238a:	d121      	bne.n	80023d0 <I2C_IsErrorOccurred+0xbc>
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002392:	d01d      	beq.n	80023d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002394:	7cfb      	ldrb	r3, [r7, #19]
 8002396:	2b20      	cmp	r3, #32
 8002398:	d01a      	beq.n	80023d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023aa:	f7fe fe87 	bl	80010bc <HAL_GetTick>
 80023ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023b0:	e00e      	b.n	80023d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023b2:	f7fe fe83 	bl	80010bc <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b19      	cmp	r3, #25
 80023be:	d907      	bls.n	80023d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	f043 0320 	orr.w	r3, r3, #32
 80023c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80023ce:	e006      	b.n	80023de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d1e9      	bne.n	80023b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d003      	beq.n	80023f4 <I2C_IsErrorOccurred+0xe0>
 80023ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0aa      	beq.n	800234a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80023f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d103      	bne.n	8002404 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2220      	movs	r2, #32
 8002402:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	f043 0304 	orr.w	r3, r3, #4
 800240a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00b      	beq.n	800243c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002434:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	f043 0308 	orr.w	r3, r3, #8
 800244c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002456:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00b      	beq.n	8002480 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	f043 0302 	orr.w	r3, r3, #2
 800246e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002478:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01c      	beq.n	80024c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f7ff fe3b 	bl	8002104 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b0d      	ldr	r3, [pc, #52]	@ (80024d0 <I2C_IsErrorOccurred+0x1bc>)
 800249a:	400b      	ands	r3, r1
 800249c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80024c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3728      	adds	r7, #40	@ 0x28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	fe00e800 	.word	0xfe00e800

080024d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	817b      	strh	r3, [r7, #10]
 80024e2:	4613      	mov	r3, r2
 80024e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024e6:	897b      	ldrh	r3, [r7, #10]
 80024e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024ec:	7a7b      	ldrb	r3, [r7, #9]
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002502:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	0d5b      	lsrs	r3, r3, #21
 800250e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002512:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <I2C_TransferConfig+0x60>)
 8002514:	430b      	orrs	r3, r1
 8002516:	43db      	mvns	r3, r3
 8002518:	ea02 0103 	and.w	r1, r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	430a      	orrs	r2, r1
 8002524:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002526:	bf00      	nop
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	03ff63ff 	.word	0x03ff63ff

08002538 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b20      	cmp	r3, #32
 800254c:	d138      	bne.n	80025c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002558:	2302      	movs	r3, #2
 800255a:	e032      	b.n	80025c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2224      	movs	r2, #36	@ 0x24
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800258a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	e000      	b.n	80025c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025c0:	2302      	movs	r3, #2
  }
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d139      	bne.n	8002658 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e033      	b.n	800265a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2224      	movs	r2, #36	@ 0x24
 80025fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002620:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e000      	b.n	800265a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
  }
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800266c:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a04      	ldr	r2, [pc, #16]	@ (8002684 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002676:	6013      	str	r3, [r2, #0]
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40007000 	.word	0x40007000

08002688 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002690:	2300      	movs	r3, #0
 8002692:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e291      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8087 	beq.w	80027ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026ac:	4b96      	ldr	r3, [pc, #600]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d00c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b8:	4b93      	ldr	r3, [pc, #588]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d112      	bne.n	80026ea <HAL_RCC_OscConfig+0x62>
 80026c4:	4b90      	ldr	r3, [pc, #576]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026d0:	d10b      	bne.n	80026ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d06c      	beq.n	80027b8 <HAL_RCC_OscConfig+0x130>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d168      	bne.n	80027b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e26b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x7a>
 80026f4:	4b84      	ldr	r3, [pc, #528]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a83      	ldr	r2, [pc, #524]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80026fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	e02e      	b.n	8002760 <HAL_RCC_OscConfig+0xd8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x9c>
 800270a:	4b7f      	ldr	r3, [pc, #508]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a7e      	ldr	r2, [pc, #504]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 8002710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b7c      	ldr	r3, [pc, #496]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a7b      	ldr	r2, [pc, #492]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 800271c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e01d      	b.n	8002760 <HAL_RCC_OscConfig+0xd8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0xc0>
 800272e:	4b76      	ldr	r3, [pc, #472]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a75      	ldr	r2, [pc, #468]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 8002734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b73      	ldr	r3, [pc, #460]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a72      	ldr	r2, [pc, #456]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e00b      	b.n	8002760 <HAL_RCC_OscConfig+0xd8>
 8002748:	4b6f      	ldr	r3, [pc, #444]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a6e      	ldr	r2, [pc, #440]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 800274e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b6c      	ldr	r3, [pc, #432]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a6b      	ldr	r2, [pc, #428]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 800275a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800275e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d013      	beq.n	8002790 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7fe fca8 	bl	80010bc <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002770:	f7fe fca4 	bl	80010bc <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	@ 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e21f      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b61      	ldr	r3, [pc, #388]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0xe8>
 800278e:	e014      	b.n	80027ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7fe fc94 	bl	80010bc <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002798:	f7fe fc90 	bl	80010bc <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	@ 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e20b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	4b57      	ldr	r3, [pc, #348]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x110>
 80027b6:	e000      	b.n	80027ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d069      	beq.n	800289a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027c6:	4b50      	ldr	r3, [pc, #320]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d11c      	bne.n	8002818 <HAL_RCC_OscConfig+0x190>
 80027de:	4b4a      	ldr	r3, [pc, #296]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d116      	bne.n	8002818 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	4b47      	ldr	r3, [pc, #284]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_RCC_OscConfig+0x17a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d001      	beq.n	8002802 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e1df      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002802:	4b41      	ldr	r3, [pc, #260]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	493d      	ldr	r1, [pc, #244]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	e040      	b.n	800289a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d023      	beq.n	8002868 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002820:	4b39      	ldr	r3, [pc, #228]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a38      	ldr	r2, [pc, #224]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe fc46 	bl	80010bc <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002834:	f7fe fc42 	bl	80010bc <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e1bd      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002846:	4b30      	ldr	r3, [pc, #192]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	4b2d      	ldr	r3, [pc, #180]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4929      	ldr	r1, [pc, #164]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
 8002866:	e018      	b.n	800289a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002868:	4b27      	ldr	r3, [pc, #156]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a26      	ldr	r2, [pc, #152]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fc22 	bl	80010bc <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287c:	f7fe fc1e 	bl	80010bc <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e199      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288e:	4b1e      	ldr	r3, [pc, #120]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d038      	beq.n	8002918 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d019      	beq.n	80028e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ae:	4b16      	ldr	r3, [pc, #88]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80028b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b2:	4a15      	ldr	r2, [pc, #84]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7fe fbff 	bl	80010bc <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c2:	f7fe fbfb 	bl	80010bc <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e176      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80028d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x23a>
 80028e0:	e01a      	b.n	8002918 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e2:	4b09      	ldr	r3, [pc, #36]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80028e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028e6:	4a08      	ldr	r2, [pc, #32]	@ (8002908 <HAL_RCC_OscConfig+0x280>)
 80028e8:	f023 0301 	bic.w	r3, r3, #1
 80028ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ee:	f7fe fbe5 	bl	80010bc <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	e00a      	b.n	800290c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f6:	f7fe fbe1 	bl	80010bc <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d903      	bls.n	800290c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e15c      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
 8002908:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290c:	4b91      	ldr	r3, [pc, #580]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 800290e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1ee      	bne.n	80028f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80a4 	beq.w	8002a6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002926:	4b8b      	ldr	r3, [pc, #556]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10d      	bne.n	800294e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002932:	4b88      	ldr	r3, [pc, #544]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	4a87      	ldr	r2, [pc, #540]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800293c:	6413      	str	r3, [r2, #64]	@ 0x40
 800293e:	4b85      	ldr	r3, [pc, #532]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294a:	2301      	movs	r3, #1
 800294c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294e:	4b82      	ldr	r3, [pc, #520]	@ (8002b58 <HAL_RCC_OscConfig+0x4d0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d118      	bne.n	800298c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800295a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b58 <HAL_RCC_OscConfig+0x4d0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b58 <HAL_RCC_OscConfig+0x4d0>)
 8002960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002966:	f7fe fba9 	bl	80010bc <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296e:	f7fe fba5 	bl	80010bc <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b64      	cmp	r3, #100	@ 0x64
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e120      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002980:	4b75      	ldr	r3, [pc, #468]	@ (8002b58 <HAL_RCC_OscConfig+0x4d0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x31a>
 8002994:	4b6f      	ldr	r3, [pc, #444]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002998:	4a6e      	ldr	r2, [pc, #440]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a0:	e02d      	b.n	80029fe <HAL_RCC_OscConfig+0x376>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x33c>
 80029aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ae:	4a69      	ldr	r2, [pc, #420]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b6:	4b67      	ldr	r3, [pc, #412]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ba:	4a66      	ldr	r2, [pc, #408]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 80029bc:	f023 0304 	bic.w	r3, r3, #4
 80029c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c2:	e01c      	b.n	80029fe <HAL_RCC_OscConfig+0x376>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b05      	cmp	r3, #5
 80029ca:	d10c      	bne.n	80029e6 <HAL_RCC_OscConfig+0x35e>
 80029cc:	4b61      	ldr	r3, [pc, #388]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d0:	4a60      	ldr	r2, [pc, #384]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 80029d2:	f043 0304 	orr.w	r3, r3, #4
 80029d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e4:	e00b      	b.n	80029fe <HAL_RCC_OscConfig+0x376>
 80029e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ea:	4a5a      	ldr	r2, [pc, #360]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029f2:	4b58      	ldr	r3, [pc, #352]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f6:	4a57      	ldr	r2, [pc, #348]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 80029f8:	f023 0304 	bic.w	r3, r3, #4
 80029fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d015      	beq.n	8002a32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a06:	f7fe fb59 	bl	80010bc <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0e:	f7fe fb55 	bl	80010bc <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e0ce      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a24:	4b4b      	ldr	r3, [pc, #300]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0ee      	beq.n	8002a0e <HAL_RCC_OscConfig+0x386>
 8002a30:	e014      	b.n	8002a5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7fe fb43 	bl	80010bc <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a38:	e00a      	b.n	8002a50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3a:	f7fe fb3f 	bl	80010bc <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e0b8      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a50:	4b40      	ldr	r3, [pc, #256]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ee      	bne.n	8002a3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d105      	bne.n	8002a6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a62:	4b3c      	ldr	r3, [pc, #240]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	4a3b      	ldr	r2, [pc, #236]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002a68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a6c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80a4 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a78:	4b36      	ldr	r3, [pc, #216]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d06b      	beq.n	8002b5c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d149      	bne.n	8002b20 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8c:	4b31      	ldr	r3, [pc, #196]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a30      	ldr	r2, [pc, #192]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002a92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fb10 	bl	80010bc <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7fe fb0c 	bl	80010bc <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e087      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	4b28      	ldr	r3, [pc, #160]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69da      	ldr	r2, [r3, #28]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	019b      	lsls	r3, r3, #6
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	041b      	lsls	r3, r3, #16
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae0:	061b      	lsls	r3, r3, #24
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002ae6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002aea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aec:	4b19      	ldr	r3, [pc, #100]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a18      	ldr	r2, [pc, #96]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002af2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe fae0 	bl	80010bc <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe fadc 	bl	80010bc <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e057      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b12:	4b10      	ldr	r3, [pc, #64]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x478>
 8002b1e:	e04f      	b.n	8002bc0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b20:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0b      	ldr	r2, [pc, #44]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002b26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fac6 	bl	80010bc <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe fac2 	bl	80010bc <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e03d      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b46:	4b03      	ldr	r3, [pc, #12]	@ (8002b54 <HAL_RCC_OscConfig+0x4cc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x4ac>
 8002b52:	e035      	b.n	8002bc0 <HAL_RCC_OscConfig+0x538>
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bcc <HAL_RCC_OscConfig+0x544>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d028      	beq.n	8002bbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d121      	bne.n	8002bbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d11a      	bne.n	8002bbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d111      	bne.n	8002bbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba2:	085b      	lsrs	r3, r3, #1
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d107      	bne.n	8002bbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800

08002bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0d0      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be8:	4b6a      	ldr	r3, [pc, #424]	@ (8002d94 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d910      	bls.n	8002c18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b67      	ldr	r3, [pc, #412]	@ (8002d94 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 020f 	bic.w	r2, r3, #15
 8002bfe:	4965      	ldr	r1, [pc, #404]	@ (8002d94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b63      	ldr	r3, [pc, #396]	@ (8002d94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0b8      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d020      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c30:	4b59      	ldr	r3, [pc, #356]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4a58      	ldr	r2, [pc, #352]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c48:	4b53      	ldr	r3, [pc, #332]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	4a52      	ldr	r2, [pc, #328]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c54:	4b50      	ldr	r3, [pc, #320]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	494d      	ldr	r1, [pc, #308]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d040      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	4b47      	ldr	r3, [pc, #284]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d115      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e07f      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c92:	4b41      	ldr	r3, [pc, #260]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e073      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e06b      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb2:	4b39      	ldr	r3, [pc, #228]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f023 0203 	bic.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4936      	ldr	r1, [pc, #216]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc4:	f7fe f9fa 	bl	80010bc <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ccc:	f7fe f9f6 	bl	80010bc <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e053      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 020c 	and.w	r2, r3, #12
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d1eb      	bne.n	8002ccc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b27      	ldr	r3, [pc, #156]	@ (8002d94 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d210      	bcs.n	8002d24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b24      	ldr	r3, [pc, #144]	@ (8002d94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 020f 	bic.w	r2, r3, #15
 8002d0a:	4922      	ldr	r1, [pc, #136]	@ (8002d94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b20      	ldr	r3, [pc, #128]	@ (8002d94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e032      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d30:	4b19      	ldr	r3, [pc, #100]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4916      	ldr	r1, [pc, #88]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d009      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d4e:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	490e      	ldr	r1, [pc, #56]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d62:	f000 f821 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8002d66:	4602      	mov	r2, r0
 8002d68:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	490a      	ldr	r1, [pc, #40]	@ (8002d9c <HAL_RCC_ClockConfig+0x1cc>)
 8002d74:	5ccb      	ldrb	r3, [r1, r3]
 8002d76:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7a:	4a09      	ldr	r2, [pc, #36]	@ (8002da0 <HAL_RCC_ClockConfig+0x1d0>)
 8002d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d7e:	4b09      	ldr	r3, [pc, #36]	@ (8002da4 <HAL_RCC_ClockConfig+0x1d4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe f956 	bl	8001034 <HAL_InitTick>

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40023c00 	.word	0x40023c00
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	080092ac 	.word	0x080092ac
 8002da0:	2000000c 	.word	0x2000000c
 8002da4:	20000000 	.word	0x20000000

08002da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dac:	b094      	sub	sp, #80	@ 0x50
 8002dae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002db4:	2300      	movs	r3, #0
 8002db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002db8:	2300      	movs	r3, #0
 8002dba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dc0:	4b79      	ldr	r3, [pc, #484]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d00d      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x40>
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	f200 80e1 	bhi.w	8002f94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x34>
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d003      	beq.n	8002de2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dda:	e0db      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ddc:	4b73      	ldr	r3, [pc, #460]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x204>)
 8002dde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002de0:	e0db      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002de2:	4b73      	ldr	r3, [pc, #460]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002de4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002de6:	e0d8      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002de8:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002df0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002df2:	4b6d      	ldr	r3, [pc, #436]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d063      	beq.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dfe:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	099b      	lsrs	r3, r3, #6
 8002e04:	2200      	movs	r2, #0
 8002e06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e10:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e12:	2300      	movs	r3, #0
 8002e14:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	462b      	mov	r3, r5
 8002e1e:	f04f 0000 	mov.w	r0, #0
 8002e22:	f04f 0100 	mov.w	r1, #0
 8002e26:	0159      	lsls	r1, r3, #5
 8002e28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e2c:	0150      	lsls	r0, r2, #5
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4621      	mov	r1, r4
 8002e34:	1a51      	subs	r1, r2, r1
 8002e36:	6139      	str	r1, [r7, #16]
 8002e38:	4629      	mov	r1, r5
 8002e3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e4c:	4659      	mov	r1, fp
 8002e4e:	018b      	lsls	r3, r1, #6
 8002e50:	4651      	mov	r1, sl
 8002e52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e56:	4651      	mov	r1, sl
 8002e58:	018a      	lsls	r2, r1, #6
 8002e5a:	4651      	mov	r1, sl
 8002e5c:	ebb2 0801 	subs.w	r8, r2, r1
 8002e60:	4659      	mov	r1, fp
 8002e62:	eb63 0901 	sbc.w	r9, r3, r1
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e7a:	4690      	mov	r8, r2
 8002e7c:	4699      	mov	r9, r3
 8002e7e:	4623      	mov	r3, r4
 8002e80:	eb18 0303 	adds.w	r3, r8, r3
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	462b      	mov	r3, r5
 8002e88:	eb49 0303 	adc.w	r3, r9, r3
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	024b      	lsls	r3, r1, #9
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	024a      	lsls	r2, r1, #9
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eae:	2200      	movs	r2, #0
 8002eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002eb8:	f7fd ff36 	bl	8000d28 <__aeabi_uldivmod>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ec4:	e058      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec6:	4b38      	ldr	r3, [pc, #224]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	099b      	lsrs	r3, r3, #6
 8002ecc:	2200      	movs	r2, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ed6:	623b      	str	r3, [r7, #32]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002edc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ee0:	4642      	mov	r2, r8
 8002ee2:	464b      	mov	r3, r9
 8002ee4:	f04f 0000 	mov.w	r0, #0
 8002ee8:	f04f 0100 	mov.w	r1, #0
 8002eec:	0159      	lsls	r1, r3, #5
 8002eee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef2:	0150      	lsls	r0, r2, #5
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4641      	mov	r1, r8
 8002efa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002efe:	4649      	mov	r1, r9
 8002f00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f18:	ebb2 040a 	subs.w	r4, r2, sl
 8002f1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	00eb      	lsls	r3, r5, #3
 8002f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f2e:	00e2      	lsls	r2, r4, #3
 8002f30:	4614      	mov	r4, r2
 8002f32:	461d      	mov	r5, r3
 8002f34:	4643      	mov	r3, r8
 8002f36:	18e3      	adds	r3, r4, r3
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	464b      	mov	r3, r9
 8002f3c:	eb45 0303 	adc.w	r3, r5, r3
 8002f40:	607b      	str	r3, [r7, #4]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f4e:	4629      	mov	r1, r5
 8002f50:	028b      	lsls	r3, r1, #10
 8002f52:	4621      	mov	r1, r4
 8002f54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f58:	4621      	mov	r1, r4
 8002f5a:	028a      	lsls	r2, r1, #10
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f62:	2200      	movs	r2, #0
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	61fa      	str	r2, [r7, #28]
 8002f68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f6c:	f7fd fedc 	bl	8000d28 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4613      	mov	r3, r2
 8002f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f78:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	3301      	adds	r3, #1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f92:	e002      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f94:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x204>)
 8002f96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3750      	adds	r7, #80	@ 0x50
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	00f42400 	.word	0x00f42400
 8002fb0:	007a1200 	.word	0x007a1200

08002fb4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb8:	4b03      	ldr	r3, [pc, #12]	@ (8002fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	2000000c 	.word	0x2000000c

08002fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fd0:	f7ff fff0 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b05      	ldr	r3, [pc, #20]	@ (8002fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	0a9b      	lsrs	r3, r3, #10
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4903      	ldr	r1, [pc, #12]	@ (8002ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	080092bc 	.word	0x080092bc

08002ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ff8:	f7ff ffdc 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	0b5b      	lsrs	r3, r3, #13
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	4903      	ldr	r1, [pc, #12]	@ (8003018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800300a:	5ccb      	ldrb	r3, [r1, r3]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40023800 	.word	0x40023800
 8003018:	080092bc 	.word	0x080092bc

0800301c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d012      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003044:	4b69      	ldr	r3, [pc, #420]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4a68      	ldr	r2, [pc, #416]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800304e:	6093      	str	r3, [r2, #8]
 8003050:	4b66      	ldr	r3, [pc, #408]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003058:	4964      	ldr	r1, [pc, #400]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003066:	2301      	movs	r3, #1
 8003068:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d017      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003076:	4b5d      	ldr	r3, [pc, #372]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800307c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003084:	4959      	ldr	r1, [pc, #356]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003090:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003094:	d101      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003096:	2301      	movs	r3, #1
 8003098:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80030a2:	2301      	movs	r3, #1
 80030a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d017      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030b2:	4b4e      	ldr	r3, [pc, #312]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030b8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	494a      	ldr	r1, [pc, #296]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030d0:	d101      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80030d2:	2301      	movs	r3, #1
 80030d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80030de:	2301      	movs	r3, #1
 80030e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80030ee:	2301      	movs	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 808b 	beq.w	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003100:	4b3a      	ldr	r3, [pc, #232]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	4a39      	ldr	r2, [pc, #228]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800310a:	6413      	str	r3, [r2, #64]	@ 0x40
 800310c:	4b37      	ldr	r3, [pc, #220]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003118:	4b35      	ldr	r3, [pc, #212]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a34      	ldr	r2, [pc, #208]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800311e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003124:	f7fd ffca 	bl	80010bc <HAL_GetTick>
 8003128:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312c:	f7fd ffc6 	bl	80010bc <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	@ 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e357      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800313e:	4b2c      	ldr	r3, [pc, #176]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800314a:	4b28      	ldr	r3, [pc, #160]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003152:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d035      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	429a      	cmp	r2, r3
 8003166:	d02e      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003168:	4b20      	ldr	r3, [pc, #128]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003170:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003172:	4b1e      	ldr	r3, [pc, #120]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003176:	4a1d      	ldr	r2, [pc, #116]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800317c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800317e:	4b1b      	ldr	r3, [pc, #108]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003182:	4a1a      	ldr	r2, [pc, #104]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003188:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800318a:	4a18      	ldr	r2, [pc, #96]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003190:	4b16      	ldr	r3, [pc, #88]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b01      	cmp	r3, #1
 800319a:	d114      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fd ff8e 	bl	80010bc <HAL_GetTick>
 80031a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	e00a      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7fd ff8a 	bl	80010bc <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e319      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ba:	4b0c      	ldr	r3, [pc, #48]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0ee      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031d2:	d111      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80031d4:	4b05      	ldr	r3, [pc, #20]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031e0:	4b04      	ldr	r3, [pc, #16]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031e2:	400b      	ands	r3, r1
 80031e4:	4901      	ldr	r1, [pc, #4]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
 80031ea:	e00b      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40007000 	.word	0x40007000
 80031f4:	0ffffcff 	.word	0x0ffffcff
 80031f8:	4baa      	ldr	r3, [pc, #680]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4aa9      	ldr	r2, [pc, #676]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031fe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003202:	6093      	str	r3, [r2, #8]
 8003204:	4ba7      	ldr	r3, [pc, #668]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003206:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003210:	49a4      	ldr	r1, [pc, #656]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003212:	4313      	orrs	r3, r2
 8003214:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	d010      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003222:	4ba0      	ldr	r3, [pc, #640]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003228:	4a9e      	ldr	r2, [pc, #632]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800322a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800322e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003232:	4b9c      	ldr	r3, [pc, #624]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003234:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323c:	4999      	ldr	r1, [pc, #612]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003250:	4b94      	ldr	r3, [pc, #592]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003256:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800325e:	4991      	ldr	r1, [pc, #580]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003272:	4b8c      	ldr	r3, [pc, #560]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003278:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003280:	4988      	ldr	r1, [pc, #544]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003294:	4b83      	ldr	r3, [pc, #524]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032a2:	4980      	ldr	r1, [pc, #512]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032b6:	4b7b      	ldr	r3, [pc, #492]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c4:	4977      	ldr	r1, [pc, #476]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032d8:	4b72      	ldr	r3, [pc, #456]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032de:	f023 0203 	bic.w	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e6:	496f      	ldr	r1, [pc, #444]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032fa:	4b6a      	ldr	r3, [pc, #424]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003300:	f023 020c 	bic.w	r2, r3, #12
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003308:	4966      	ldr	r1, [pc, #408]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800331c:	4b61      	ldr	r3, [pc, #388]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003322:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332a:	495e      	ldr	r1, [pc, #376]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800333e:	4b59      	ldr	r3, [pc, #356]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003344:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334c:	4955      	ldr	r1, [pc, #340]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003360:	4b50      	ldr	r3, [pc, #320]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003366:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336e:	494d      	ldr	r1, [pc, #308]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003382:	4b48      	ldr	r3, [pc, #288]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003388:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003390:	4944      	ldr	r1, [pc, #272]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80033a4:	4b3f      	ldr	r3, [pc, #252]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b2:	493c      	ldr	r1, [pc, #240]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80033c6:	4b37      	ldr	r3, [pc, #220]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d4:	4933      	ldr	r1, [pc, #204]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033e8:	4b2e      	ldr	r3, [pc, #184]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033f6:	492b      	ldr	r1, [pc, #172]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d011      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800340a:	4b26      	ldr	r3, [pc, #152]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003410:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003418:	4922      	ldr	r1, [pc, #136]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003424:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003428:	d101      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800342a:	2301      	movs	r3, #1
 800342c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800343a:	2301      	movs	r3, #1
 800343c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800344a:	4b16      	ldr	r3, [pc, #88]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003450:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003458:	4912      	ldr	r1, [pc, #72]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00b      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800346c:	4b0d      	ldr	r3, [pc, #52]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003472:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800347c:	4909      	ldr	r1, [pc, #36]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d006      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80d9 	beq.w	800364a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003498:	4b02      	ldr	r3, [pc, #8]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a01      	ldr	r2, [pc, #4]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800349e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80034a2:	e001      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80034a4:	40023800 	.word	0x40023800
 80034a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034aa:	f7fd fe07 	bl	80010bc <HAL_GetTick>
 80034ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034b2:	f7fd fe03 	bl	80010bc <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b64      	cmp	r3, #100	@ 0x64
 80034be:	d901      	bls.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e194      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f0      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d021      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d11d      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034e4:	4b64      	ldr	r3, [pc, #400]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034ea:	0c1b      	lsrs	r3, r3, #16
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034f2:	4b61      	ldr	r3, [pc, #388]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034f8:	0e1b      	lsrs	r3, r3, #24
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	019a      	lsls	r2, r3, #6
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	431a      	orrs	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	061b      	lsls	r3, r3, #24
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	071b      	lsls	r3, r3, #28
 8003518:	4957      	ldr	r1, [pc, #348]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d004      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003530:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003534:	d00a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800353e:	2b00      	cmp	r3, #0
 8003540:	d02e      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800354a:	d129      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800354c:	4b4a      	ldr	r3, [pc, #296]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800354e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003552:	0c1b      	lsrs	r3, r3, #16
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800355a:	4b47      	ldr	r3, [pc, #284]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800355c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003560:	0f1b      	lsrs	r3, r3, #28
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	019a      	lsls	r2, r3, #6
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	061b      	lsls	r3, r3, #24
 800357a:	431a      	orrs	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	071b      	lsls	r3, r3, #28
 8003580:	493d      	ldr	r1, [pc, #244]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003588:	4b3b      	ldr	r3, [pc, #236]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800358a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800358e:	f023 021f 	bic.w	r2, r3, #31
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	3b01      	subs	r3, #1
 8003598:	4937      	ldr	r1, [pc, #220]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01d      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035ac:	4b32      	ldr	r3, [pc, #200]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035b2:	0e1b      	lsrs	r3, r3, #24
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035c0:	0f1b      	lsrs	r3, r3, #28
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	019a      	lsls	r2, r3, #6
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	041b      	lsls	r3, r3, #16
 80035d4:	431a      	orrs	r2, r3
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	061b      	lsls	r3, r3, #24
 80035da:	431a      	orrs	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	071b      	lsls	r3, r3, #28
 80035e0:	4925      	ldr	r1, [pc, #148]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d011      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	019a      	lsls	r2, r3, #6
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	041b      	lsls	r3, r3, #16
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	061b      	lsls	r3, r3, #24
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	071b      	lsls	r3, r3, #28
 8003610:	4919      	ldr	r1, [pc, #100]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003618:	4b17      	ldr	r3, [pc, #92]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a16      	ldr	r2, [pc, #88]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800361e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003624:	f7fd fd4a 	bl	80010bc <HAL_GetTick>
 8003628:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800362c:	f7fd fd46 	bl	80010bc <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	@ 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e0d7      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800363e:	4b0e      	ldr	r3, [pc, #56]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2b01      	cmp	r3, #1
 800364e:	f040 80cd 	bne.w	80037ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003652:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a08      	ldr	r2, [pc, #32]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800365c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365e:	f7fd fd2d 	bl	80010bc <HAL_GetTick>
 8003662:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003664:	e00a      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003666:	f7fd fd29 	bl	80010bc <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b64      	cmp	r3, #100	@ 0x64
 8003672:	d903      	bls.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e0ba      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003678:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800367c:	4b5e      	ldr	r3, [pc, #376]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003684:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003688:	d0ed      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d02e      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d12a      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036b2:	4b51      	ldr	r3, [pc, #324]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b8:	0c1b      	lsrs	r3, r3, #16
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036c0:	4b4d      	ldr	r3, [pc, #308]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c6:	0f1b      	lsrs	r3, r3, #28
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	019a      	lsls	r2, r3, #6
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	041b      	lsls	r3, r3, #16
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	061b      	lsls	r3, r3, #24
 80036e0:	431a      	orrs	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	071b      	lsls	r3, r3, #28
 80036e6:	4944      	ldr	r1, [pc, #272]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036ee:	4b42      	ldr	r3, [pc, #264]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036f4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fc:	3b01      	subs	r3, #1
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	493d      	ldr	r1, [pc, #244]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d022      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003718:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800371c:	d11d      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800371e:	4b36      	ldr	r3, [pc, #216]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003724:	0e1b      	lsrs	r3, r3, #24
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800372c:	4b32      	ldr	r3, [pc, #200]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003732:	0f1b      	lsrs	r3, r3, #28
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	019a      	lsls	r2, r3, #6
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	431a      	orrs	r2, r3
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	061b      	lsls	r3, r3, #24
 800374c:	431a      	orrs	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	071b      	lsls	r3, r3, #28
 8003752:	4929      	ldr	r1, [pc, #164]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d028      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003766:	4b24      	ldr	r3, [pc, #144]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376c:	0e1b      	lsrs	r3, r3, #24
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003774:	4b20      	ldr	r3, [pc, #128]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377a:	0c1b      	lsrs	r3, r3, #16
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	019a      	lsls	r2, r3, #6
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	041b      	lsls	r3, r3, #16
 800378c:	431a      	orrs	r2, r3
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	061b      	lsls	r3, r3, #24
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	071b      	lsls	r3, r3, #28
 800379a:	4917      	ldr	r1, [pc, #92]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037a2:	4b15      	ldr	r3, [pc, #84]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b0:	4911      	ldr	r1, [pc, #68]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037b8:	4b0f      	ldr	r3, [pc, #60]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a0e      	ldr	r2, [pc, #56]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c4:	f7fd fc7a 	bl	80010bc <HAL_GetTick>
 80037c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037cc:	f7fd fc76 	bl	80010bc <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	@ 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e007      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037de:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037ea:	d1ef      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800

080037fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e08f      	b.n	8003930 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d106      	bne.n	800382a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f002 fce3 	bl	80061f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6899      	ldr	r1, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4b3e      	ldr	r3, [pc, #248]	@ (8003938 <HAL_TIM_Encoder_Init+0x13c>)
 800383e:	400b      	ands	r3, r1
 8003840:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f000 f909 	bl	8003a64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4b31      	ldr	r3, [pc, #196]	@ (800393c <HAL_TIM_Encoder_Init+0x140>)
 8003878:	4013      	ands	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	4313      	orrs	r3, r2
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4b2b      	ldr	r3, [pc, #172]	@ (8003940 <HAL_TIM_Encoder_Init+0x144>)
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4b2a      	ldr	r3, [pc, #168]	@ (8003944 <HAL_TIM_Encoder_Init+0x148>)
 800389a:	4013      	ands	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	4313      	orrs	r3, r2
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	011a      	lsls	r2, r3, #4
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	031b      	lsls	r3, r3, #12
 80038bc:	4313      	orrs	r3, r2
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80038ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80038d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	4313      	orrs	r3, r2
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	fffebff8 	.word	0xfffebff8
 800393c:	fffffcfc 	.word	0xfffffcfc
 8003940:	fffff3f3 	.word	0xfffff3f3
 8003944:	ffff0f0f 	.word	0xffff0f0f

08003948 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003958:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003960:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003968:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003970:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d110      	bne.n	800399a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d102      	bne.n	8003984 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800397e:	7b7b      	ldrb	r3, [r7, #13]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d001      	beq.n	8003988 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e069      	b.n	8003a5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003998:	e031      	b.n	80039fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b04      	cmp	r3, #4
 800399e:	d110      	bne.n	80039c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039a0:	7bbb      	ldrb	r3, [r7, #14]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d102      	bne.n	80039ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039a6:	7b3b      	ldrb	r3, [r7, #12]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d001      	beq.n	80039b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e055      	b.n	8003a5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039c0:	e01d      	b.n	80039fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d108      	bne.n	80039da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039c8:	7bbb      	ldrb	r3, [r7, #14]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d105      	bne.n	80039da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039ce:	7b7b      	ldrb	r3, [r7, #13]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d102      	bne.n	80039da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039d4:	7b3b      	ldrb	r3, [r7, #12]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d001      	beq.n	80039de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e03e      	b.n	8003a5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2202      	movs	r2, #2
 80039ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2202      	movs	r2, #2
 80039f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_TIM_Encoder_Start+0xc4>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d008      	beq.n	8003a1c <HAL_TIM_Encoder_Start+0xd4>
 8003a0a:	e00f      	b.n	8003a2c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2201      	movs	r2, #1
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 f8d1 	bl	8003bbc <TIM_CCxChannelCmd>
      break;
 8003a1a:	e016      	b.n	8003a4a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2201      	movs	r2, #1
 8003a22:	2104      	movs	r1, #4
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 f8c9 	bl	8003bbc <TIM_CCxChannelCmd>
      break;
 8003a2a:	e00e      	b.n	8003a4a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2201      	movs	r2, #1
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f8c1 	bl	8003bbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	2104      	movs	r1, #4
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 f8ba 	bl	8003bbc <TIM_CCxChannelCmd>
      break;
 8003a48:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a46      	ldr	r2, [pc, #280]	@ (8003b90 <TIM_Base_SetConfig+0x12c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d013      	beq.n	8003aa4 <TIM_Base_SetConfig+0x40>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a82:	d00f      	beq.n	8003aa4 <TIM_Base_SetConfig+0x40>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a43      	ldr	r2, [pc, #268]	@ (8003b94 <TIM_Base_SetConfig+0x130>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00b      	beq.n	8003aa4 <TIM_Base_SetConfig+0x40>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a42      	ldr	r2, [pc, #264]	@ (8003b98 <TIM_Base_SetConfig+0x134>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d007      	beq.n	8003aa4 <TIM_Base_SetConfig+0x40>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a41      	ldr	r2, [pc, #260]	@ (8003b9c <TIM_Base_SetConfig+0x138>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a40      	ldr	r2, [pc, #256]	@ (8003ba0 <TIM_Base_SetConfig+0x13c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d108      	bne.n	8003ab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a35      	ldr	r2, [pc, #212]	@ (8003b90 <TIM_Base_SetConfig+0x12c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d02b      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac4:	d027      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a32      	ldr	r2, [pc, #200]	@ (8003b94 <TIM_Base_SetConfig+0x130>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d023      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a31      	ldr	r2, [pc, #196]	@ (8003b98 <TIM_Base_SetConfig+0x134>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01f      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a30      	ldr	r2, [pc, #192]	@ (8003b9c <TIM_Base_SetConfig+0x138>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01b      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2f      	ldr	r2, [pc, #188]	@ (8003ba0 <TIM_Base_SetConfig+0x13c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d017      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2e      	ldr	r2, [pc, #184]	@ (8003ba4 <TIM_Base_SetConfig+0x140>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba8 <TIM_Base_SetConfig+0x144>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00f      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2c      	ldr	r2, [pc, #176]	@ (8003bac <TIM_Base_SetConfig+0x148>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00b      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb0 <TIM_Base_SetConfig+0x14c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb4 <TIM_Base_SetConfig+0x150>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a29      	ldr	r2, [pc, #164]	@ (8003bb8 <TIM_Base_SetConfig+0x154>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d108      	bne.n	8003b28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a10      	ldr	r2, [pc, #64]	@ (8003b90 <TIM_Base_SetConfig+0x12c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <TIM_Base_SetConfig+0xf8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a12      	ldr	r2, [pc, #72]	@ (8003ba0 <TIM_Base_SetConfig+0x13c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d103      	bne.n	8003b64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d105      	bne.n	8003b82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f023 0201 	bic.w	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]
  }
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800
 8003b9c:	40000c00 	.word	0x40000c00
 8003ba0:	40010400 	.word	0x40010400
 8003ba4:	40014000 	.word	0x40014000
 8003ba8:	40014400 	.word	0x40014400
 8003bac:	40014800 	.word	0x40014800
 8003bb0:	40001800 	.word	0x40001800
 8003bb4:	40001c00 	.word	0x40001c00
 8003bb8:	40002000 	.word	0x40002000

08003bbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	2201      	movs	r2, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a1a      	ldr	r2, [r3, #32]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	401a      	ands	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e06d      	b.n	8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a30      	ldr	r2, [pc, #192]	@ (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d004      	beq.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a2f      	ldr	r2, [pc, #188]	@ (8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d108      	bne.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a20      	ldr	r2, [pc, #128]	@ (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d022      	beq.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c92:	d01d      	beq.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1d      	ldr	r2, [pc, #116]	@ (8003d10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d018      	beq.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d013      	beq.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1a      	ldr	r2, [pc, #104]	@ (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00e      	beq.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a15      	ldr	r2, [pc, #84]	@ (8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d009      	beq.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a16      	ldr	r2, [pc, #88]	@ (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d004      	beq.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a15      	ldr	r2, [pc, #84]	@ (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d10c      	bne.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40010000 	.word	0x40010000
 8003d0c:	40010400 	.word	0x40010400
 8003d10:	40000400 	.word	0x40000400
 8003d14:	40000800 	.word	0x40000800
 8003d18:	40000c00 	.word	0x40000c00
 8003d1c:	40014000 	.word	0x40014000
 8003d20:	40001800 	.word	0x40001800

08003d24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e040      	b.n	8003db8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f002 fa96 	bl	8006278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2224      	movs	r2, #36	@ 0x24
 8003d50:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fe08 	bl	8004980 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fba1 	bl	80044b8 <UART_SetConfig>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e01b      	b.n	8003db8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fe87 	bl	8004ac4 <UART_CheckIdleState>
 8003db6:	4603      	mov	r3, r0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	@ 0x28
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d177      	bne.n	8003ec8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_UART_Transmit+0x24>
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e070      	b.n	8003eca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2221      	movs	r2, #33	@ 0x21
 8003df4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003df6:	f7fd f961 	bl	80010bc <HAL_GetTick>
 8003dfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88fa      	ldrh	r2, [r7, #6]
 8003e00:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e14:	d108      	bne.n	8003e28 <HAL_UART_Transmit+0x68>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d104      	bne.n	8003e28 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	e003      	b.n	8003e30 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e30:	e02f      	b.n	8003e92 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2180      	movs	r1, #128	@ 0x80
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 fe98 	bl	8004b72 <UART_WaitOnFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d004      	beq.n	8003e52 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e03b      	b.n	8003eca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10b      	bne.n	8003e70 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	3302      	adds	r3, #2
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	e007      	b.n	8003e80 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	781a      	ldrb	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1c9      	bne.n	8003e32 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2140      	movs	r1, #64	@ 0x40
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 fe62 	bl	8004b72 <UART_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e005      	b.n	8003eca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e000      	b.n	8003eca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
  }
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3720      	adds	r7, #32
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b0ba      	sub	sp, #232	@ 0xe8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003efa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003efe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003f02:	4013      	ands	r3, r2
 8003f04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003f08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d115      	bne.n	8003f3c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00f      	beq.n	8003f3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8297 	beq.w	8004460 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	4798      	blx	r3
      }
      return;
 8003f3a:	e291      	b.n	8004460 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8117 	beq.w	8004174 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003f56:	4b85      	ldr	r3, [pc, #532]	@ (800416c <HAL_UART_IRQHandler+0x298>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 810a 	beq.w	8004174 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d011      	beq.n	8003f90 <HAL_UART_IRQHandler+0xbc>
 8003f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00b      	beq.n	8003f90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d011      	beq.n	8003fc0 <HAL_UART_IRQHandler+0xec>
 8003f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2202      	movs	r2, #2
 8003fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb6:	f043 0204 	orr.w	r2, r3, #4
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d011      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x11c>
 8003fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2204      	movs	r2, #4
 8003fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fe6:	f043 0202 	orr.w	r2, r3, #2
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d017      	beq.n	800402c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b00      	cmp	r3, #0
 8004006:	d105      	bne.n	8004014 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800400c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00b      	beq.n	800402c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2208      	movs	r2, #8
 800401a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004022:	f043 0208 	orr.w	r2, r3, #8
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800402c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004034:	2b00      	cmp	r3, #0
 8004036:	d012      	beq.n	800405e <HAL_UART_IRQHandler+0x18a>
 8004038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800403c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00c      	beq.n	800405e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800404c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004054:	f043 0220 	orr.w	r2, r3, #32
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 81fd 	beq.w	8004464 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004098:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a6:	2b40      	cmp	r3, #64	@ 0x40
 80040a8:	d005      	beq.n	80040b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d04f      	beq.n	8004156 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fdc8 	bl	8004c4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c6:	2b40      	cmp	r3, #64	@ 0x40
 80040c8:	d141      	bne.n	800414e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3308      	adds	r3, #8
 80040d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80040e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3308      	adds	r3, #8
 80040f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80040f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80040fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004102:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800410e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1d9      	bne.n	80040ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800411a:	2b00      	cmp	r3, #0
 800411c:	d013      	beq.n	8004146 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004122:	4a13      	ldr	r2, [pc, #76]	@ (8004170 <HAL_UART_IRQHandler+0x29c>)
 8004124:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800412a:	4618      	mov	r0, r3
 800412c:	f7fd f977 	bl	800141e <HAL_DMA_Abort_IT>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d017      	beq.n	8004166 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800413a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004140:	4610      	mov	r0, r2
 8004142:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004144:	e00f      	b.n	8004166 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f9a0 	bl	800448c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	e00b      	b.n	8004166 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f99c 	bl	800448c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	e007      	b.n	8004166 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f998 	bl	800448c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004164:	e17e      	b.n	8004464 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004166:	bf00      	nop
    return;
 8004168:	e17c      	b.n	8004464 <HAL_UART_IRQHandler+0x590>
 800416a:	bf00      	nop
 800416c:	04000120 	.word	0x04000120
 8004170:	08004d15 	.word	0x08004d15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004178:	2b01      	cmp	r3, #1
 800417a:	f040 814c 	bne.w	8004416 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8145 	beq.w	8004416 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800418c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 813e 	beq.w	8004416 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2210      	movs	r2, #16
 80041a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ac:	2b40      	cmp	r3, #64	@ 0x40
 80041ae:	f040 80b6 	bne.w	800431e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8150 	beq.w	8004468 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80041ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041d2:	429a      	cmp	r2, r3
 80041d4:	f080 8148 	bcs.w	8004468 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ec:	f000 8086 	beq.w	80042fc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004204:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800420c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800421a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800421e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004226:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004232:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1da      	bne.n	80041f0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3308      	adds	r3, #8
 8004240:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004242:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800424a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3308      	adds	r3, #8
 800425a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800425e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004262:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004266:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004270:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e1      	bne.n	800423a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3308      	adds	r3, #8
 800427c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800428c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3308      	adds	r3, #8
 8004296:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800429a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800429c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e3      	bne.n	8004276 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042cc:	f023 0310 	bic.w	r3, r3, #16
 80042d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e4      	bne.n	80042bc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd f821 	bl	800133e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800430e:	b29b      	uxth	r3, r3
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	b29b      	uxth	r3, r3
 8004314:	4619      	mov	r1, r3
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f8c2 	bl	80044a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800431c:	e0a4      	b.n	8004468 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800432a:	b29b      	uxth	r3, r3
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 8096 	beq.w	800446c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004340:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8091 	beq.w	800446c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800435e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800436c:	647b      	str	r3, [r7, #68]	@ 0x44
 800436e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004372:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800437a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e4      	bne.n	800434a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3308      	adds	r3, #8
 8004386:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	623b      	str	r3, [r7, #32]
   return(result);
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3308      	adds	r3, #8
 80043a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80043a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e3      	bne.n	8004380 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f023 0310 	bic.w	r3, r3, #16
 80043e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	69b9      	ldr	r1, [r7, #24]
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	e841 2300 	strex	r3, r2, [r1]
 80043fa:	617b      	str	r3, [r7, #20]
   return(result);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1e4      	bne.n	80043cc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2202      	movs	r2, #2
 8004406:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800440c:	4619      	mov	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f846 	bl	80044a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004414:	e02a      	b.n	800446c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800441a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00e      	beq.n	8004440 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01c      	beq.n	8004470 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
    }
    return;
 800443e:	e017      	b.n	8004470 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	d012      	beq.n	8004472 <HAL_UART_IRQHandler+0x59e>
 800444c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00c      	beq.n	8004472 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fc71 	bl	8004d40 <UART_EndTransmit_IT>
    return;
 800445e:	e008      	b.n	8004472 <HAL_UART_IRQHandler+0x59e>
      return;
 8004460:	bf00      	nop
 8004462:	e006      	b.n	8004472 <HAL_UART_IRQHandler+0x59e>
    return;
 8004464:	bf00      	nop
 8004466:	e004      	b.n	8004472 <HAL_UART_IRQHandler+0x59e>
      return;
 8004468:	bf00      	nop
 800446a:	e002      	b.n	8004472 <HAL_UART_IRQHandler+0x59e>
      return;
 800446c:	bf00      	nop
 800446e:	e000      	b.n	8004472 <HAL_UART_IRQHandler+0x59e>
    return;
 8004470:	bf00      	nop
  }

}
 8004472:	37e8      	adds	r7, #232	@ 0xe8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4ba6      	ldr	r3, [pc, #664]	@ (800477c <UART_SetConfig+0x2c4>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6812      	ldr	r2, [r2, #0]
 80044ea:	6979      	ldr	r1, [r7, #20]
 80044ec:	430b      	orrs	r3, r1
 80044ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	430a      	orrs	r2, r1
 8004528:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a94      	ldr	r2, [pc, #592]	@ (8004780 <UART_SetConfig+0x2c8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d120      	bne.n	8004576 <UART_SetConfig+0xbe>
 8004534:	4b93      	ldr	r3, [pc, #588]	@ (8004784 <UART_SetConfig+0x2cc>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	2b03      	cmp	r3, #3
 8004540:	d816      	bhi.n	8004570 <UART_SetConfig+0xb8>
 8004542:	a201      	add	r2, pc, #4	@ (adr r2, 8004548 <UART_SetConfig+0x90>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	08004559 	.word	0x08004559
 800454c:	08004565 	.word	0x08004565
 8004550:	0800455f 	.word	0x0800455f
 8004554:	0800456b 	.word	0x0800456b
 8004558:	2301      	movs	r3, #1
 800455a:	77fb      	strb	r3, [r7, #31]
 800455c:	e150      	b.n	8004800 <UART_SetConfig+0x348>
 800455e:	2302      	movs	r3, #2
 8004560:	77fb      	strb	r3, [r7, #31]
 8004562:	e14d      	b.n	8004800 <UART_SetConfig+0x348>
 8004564:	2304      	movs	r3, #4
 8004566:	77fb      	strb	r3, [r7, #31]
 8004568:	e14a      	b.n	8004800 <UART_SetConfig+0x348>
 800456a:	2308      	movs	r3, #8
 800456c:	77fb      	strb	r3, [r7, #31]
 800456e:	e147      	b.n	8004800 <UART_SetConfig+0x348>
 8004570:	2310      	movs	r3, #16
 8004572:	77fb      	strb	r3, [r7, #31]
 8004574:	e144      	b.n	8004800 <UART_SetConfig+0x348>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a83      	ldr	r2, [pc, #524]	@ (8004788 <UART_SetConfig+0x2d0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d132      	bne.n	80045e6 <UART_SetConfig+0x12e>
 8004580:	4b80      	ldr	r3, [pc, #512]	@ (8004784 <UART_SetConfig+0x2cc>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b0c      	cmp	r3, #12
 800458c:	d828      	bhi.n	80045e0 <UART_SetConfig+0x128>
 800458e:	a201      	add	r2, pc, #4	@ (adr r2, 8004594 <UART_SetConfig+0xdc>)
 8004590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004594:	080045c9 	.word	0x080045c9
 8004598:	080045e1 	.word	0x080045e1
 800459c:	080045e1 	.word	0x080045e1
 80045a0:	080045e1 	.word	0x080045e1
 80045a4:	080045d5 	.word	0x080045d5
 80045a8:	080045e1 	.word	0x080045e1
 80045ac:	080045e1 	.word	0x080045e1
 80045b0:	080045e1 	.word	0x080045e1
 80045b4:	080045cf 	.word	0x080045cf
 80045b8:	080045e1 	.word	0x080045e1
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045e1 	.word	0x080045e1
 80045c4:	080045db 	.word	0x080045db
 80045c8:	2300      	movs	r3, #0
 80045ca:	77fb      	strb	r3, [r7, #31]
 80045cc:	e118      	b.n	8004800 <UART_SetConfig+0x348>
 80045ce:	2302      	movs	r3, #2
 80045d0:	77fb      	strb	r3, [r7, #31]
 80045d2:	e115      	b.n	8004800 <UART_SetConfig+0x348>
 80045d4:	2304      	movs	r3, #4
 80045d6:	77fb      	strb	r3, [r7, #31]
 80045d8:	e112      	b.n	8004800 <UART_SetConfig+0x348>
 80045da:	2308      	movs	r3, #8
 80045dc:	77fb      	strb	r3, [r7, #31]
 80045de:	e10f      	b.n	8004800 <UART_SetConfig+0x348>
 80045e0:	2310      	movs	r3, #16
 80045e2:	77fb      	strb	r3, [r7, #31]
 80045e4:	e10c      	b.n	8004800 <UART_SetConfig+0x348>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a68      	ldr	r2, [pc, #416]	@ (800478c <UART_SetConfig+0x2d4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d120      	bne.n	8004632 <UART_SetConfig+0x17a>
 80045f0:	4b64      	ldr	r3, [pc, #400]	@ (8004784 <UART_SetConfig+0x2cc>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80045fa:	2b30      	cmp	r3, #48	@ 0x30
 80045fc:	d013      	beq.n	8004626 <UART_SetConfig+0x16e>
 80045fe:	2b30      	cmp	r3, #48	@ 0x30
 8004600:	d814      	bhi.n	800462c <UART_SetConfig+0x174>
 8004602:	2b20      	cmp	r3, #32
 8004604:	d009      	beq.n	800461a <UART_SetConfig+0x162>
 8004606:	2b20      	cmp	r3, #32
 8004608:	d810      	bhi.n	800462c <UART_SetConfig+0x174>
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <UART_SetConfig+0x15c>
 800460e:	2b10      	cmp	r3, #16
 8004610:	d006      	beq.n	8004620 <UART_SetConfig+0x168>
 8004612:	e00b      	b.n	800462c <UART_SetConfig+0x174>
 8004614:	2300      	movs	r3, #0
 8004616:	77fb      	strb	r3, [r7, #31]
 8004618:	e0f2      	b.n	8004800 <UART_SetConfig+0x348>
 800461a:	2302      	movs	r3, #2
 800461c:	77fb      	strb	r3, [r7, #31]
 800461e:	e0ef      	b.n	8004800 <UART_SetConfig+0x348>
 8004620:	2304      	movs	r3, #4
 8004622:	77fb      	strb	r3, [r7, #31]
 8004624:	e0ec      	b.n	8004800 <UART_SetConfig+0x348>
 8004626:	2308      	movs	r3, #8
 8004628:	77fb      	strb	r3, [r7, #31]
 800462a:	e0e9      	b.n	8004800 <UART_SetConfig+0x348>
 800462c:	2310      	movs	r3, #16
 800462e:	77fb      	strb	r3, [r7, #31]
 8004630:	e0e6      	b.n	8004800 <UART_SetConfig+0x348>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a56      	ldr	r2, [pc, #344]	@ (8004790 <UART_SetConfig+0x2d8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d120      	bne.n	800467e <UART_SetConfig+0x1c6>
 800463c:	4b51      	ldr	r3, [pc, #324]	@ (8004784 <UART_SetConfig+0x2cc>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004642:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004646:	2bc0      	cmp	r3, #192	@ 0xc0
 8004648:	d013      	beq.n	8004672 <UART_SetConfig+0x1ba>
 800464a:	2bc0      	cmp	r3, #192	@ 0xc0
 800464c:	d814      	bhi.n	8004678 <UART_SetConfig+0x1c0>
 800464e:	2b80      	cmp	r3, #128	@ 0x80
 8004650:	d009      	beq.n	8004666 <UART_SetConfig+0x1ae>
 8004652:	2b80      	cmp	r3, #128	@ 0x80
 8004654:	d810      	bhi.n	8004678 <UART_SetConfig+0x1c0>
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <UART_SetConfig+0x1a8>
 800465a:	2b40      	cmp	r3, #64	@ 0x40
 800465c:	d006      	beq.n	800466c <UART_SetConfig+0x1b4>
 800465e:	e00b      	b.n	8004678 <UART_SetConfig+0x1c0>
 8004660:	2300      	movs	r3, #0
 8004662:	77fb      	strb	r3, [r7, #31]
 8004664:	e0cc      	b.n	8004800 <UART_SetConfig+0x348>
 8004666:	2302      	movs	r3, #2
 8004668:	77fb      	strb	r3, [r7, #31]
 800466a:	e0c9      	b.n	8004800 <UART_SetConfig+0x348>
 800466c:	2304      	movs	r3, #4
 800466e:	77fb      	strb	r3, [r7, #31]
 8004670:	e0c6      	b.n	8004800 <UART_SetConfig+0x348>
 8004672:	2308      	movs	r3, #8
 8004674:	77fb      	strb	r3, [r7, #31]
 8004676:	e0c3      	b.n	8004800 <UART_SetConfig+0x348>
 8004678:	2310      	movs	r3, #16
 800467a:	77fb      	strb	r3, [r7, #31]
 800467c:	e0c0      	b.n	8004800 <UART_SetConfig+0x348>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a44      	ldr	r2, [pc, #272]	@ (8004794 <UART_SetConfig+0x2dc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d125      	bne.n	80046d4 <UART_SetConfig+0x21c>
 8004688:	4b3e      	ldr	r3, [pc, #248]	@ (8004784 <UART_SetConfig+0x2cc>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004692:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004696:	d017      	beq.n	80046c8 <UART_SetConfig+0x210>
 8004698:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800469c:	d817      	bhi.n	80046ce <UART_SetConfig+0x216>
 800469e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a2:	d00b      	beq.n	80046bc <UART_SetConfig+0x204>
 80046a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a8:	d811      	bhi.n	80046ce <UART_SetConfig+0x216>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <UART_SetConfig+0x1fe>
 80046ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046b2:	d006      	beq.n	80046c2 <UART_SetConfig+0x20a>
 80046b4:	e00b      	b.n	80046ce <UART_SetConfig+0x216>
 80046b6:	2300      	movs	r3, #0
 80046b8:	77fb      	strb	r3, [r7, #31]
 80046ba:	e0a1      	b.n	8004800 <UART_SetConfig+0x348>
 80046bc:	2302      	movs	r3, #2
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e09e      	b.n	8004800 <UART_SetConfig+0x348>
 80046c2:	2304      	movs	r3, #4
 80046c4:	77fb      	strb	r3, [r7, #31]
 80046c6:	e09b      	b.n	8004800 <UART_SetConfig+0x348>
 80046c8:	2308      	movs	r3, #8
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e098      	b.n	8004800 <UART_SetConfig+0x348>
 80046ce:	2310      	movs	r3, #16
 80046d0:	77fb      	strb	r3, [r7, #31]
 80046d2:	e095      	b.n	8004800 <UART_SetConfig+0x348>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2f      	ldr	r2, [pc, #188]	@ (8004798 <UART_SetConfig+0x2e0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d125      	bne.n	800472a <UART_SetConfig+0x272>
 80046de:	4b29      	ldr	r3, [pc, #164]	@ (8004784 <UART_SetConfig+0x2cc>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80046e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046ec:	d017      	beq.n	800471e <UART_SetConfig+0x266>
 80046ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046f2:	d817      	bhi.n	8004724 <UART_SetConfig+0x26c>
 80046f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046f8:	d00b      	beq.n	8004712 <UART_SetConfig+0x25a>
 80046fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046fe:	d811      	bhi.n	8004724 <UART_SetConfig+0x26c>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <UART_SetConfig+0x254>
 8004704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004708:	d006      	beq.n	8004718 <UART_SetConfig+0x260>
 800470a:	e00b      	b.n	8004724 <UART_SetConfig+0x26c>
 800470c:	2301      	movs	r3, #1
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e076      	b.n	8004800 <UART_SetConfig+0x348>
 8004712:	2302      	movs	r3, #2
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e073      	b.n	8004800 <UART_SetConfig+0x348>
 8004718:	2304      	movs	r3, #4
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e070      	b.n	8004800 <UART_SetConfig+0x348>
 800471e:	2308      	movs	r3, #8
 8004720:	77fb      	strb	r3, [r7, #31]
 8004722:	e06d      	b.n	8004800 <UART_SetConfig+0x348>
 8004724:	2310      	movs	r3, #16
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	e06a      	b.n	8004800 <UART_SetConfig+0x348>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1b      	ldr	r2, [pc, #108]	@ (800479c <UART_SetConfig+0x2e4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d138      	bne.n	80047a6 <UART_SetConfig+0x2ee>
 8004734:	4b13      	ldr	r3, [pc, #76]	@ (8004784 <UART_SetConfig+0x2cc>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800473e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004742:	d017      	beq.n	8004774 <UART_SetConfig+0x2bc>
 8004744:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004748:	d82a      	bhi.n	80047a0 <UART_SetConfig+0x2e8>
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800474e:	d00b      	beq.n	8004768 <UART_SetConfig+0x2b0>
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004754:	d824      	bhi.n	80047a0 <UART_SetConfig+0x2e8>
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <UART_SetConfig+0x2aa>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800475e:	d006      	beq.n	800476e <UART_SetConfig+0x2b6>
 8004760:	e01e      	b.n	80047a0 <UART_SetConfig+0x2e8>
 8004762:	2300      	movs	r3, #0
 8004764:	77fb      	strb	r3, [r7, #31]
 8004766:	e04b      	b.n	8004800 <UART_SetConfig+0x348>
 8004768:	2302      	movs	r3, #2
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e048      	b.n	8004800 <UART_SetConfig+0x348>
 800476e:	2304      	movs	r3, #4
 8004770:	77fb      	strb	r3, [r7, #31]
 8004772:	e045      	b.n	8004800 <UART_SetConfig+0x348>
 8004774:	2308      	movs	r3, #8
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e042      	b.n	8004800 <UART_SetConfig+0x348>
 800477a:	bf00      	nop
 800477c:	efff69f3 	.word	0xefff69f3
 8004780:	40011000 	.word	0x40011000
 8004784:	40023800 	.word	0x40023800
 8004788:	40004400 	.word	0x40004400
 800478c:	40004800 	.word	0x40004800
 8004790:	40004c00 	.word	0x40004c00
 8004794:	40005000 	.word	0x40005000
 8004798:	40011400 	.word	0x40011400
 800479c:	40007800 	.word	0x40007800
 80047a0:	2310      	movs	r3, #16
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e02c      	b.n	8004800 <UART_SetConfig+0x348>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a72      	ldr	r2, [pc, #456]	@ (8004974 <UART_SetConfig+0x4bc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d125      	bne.n	80047fc <UART_SetConfig+0x344>
 80047b0:	4b71      	ldr	r3, [pc, #452]	@ (8004978 <UART_SetConfig+0x4c0>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80047ba:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80047be:	d017      	beq.n	80047f0 <UART_SetConfig+0x338>
 80047c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80047c4:	d817      	bhi.n	80047f6 <UART_SetConfig+0x33e>
 80047c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ca:	d00b      	beq.n	80047e4 <UART_SetConfig+0x32c>
 80047cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047d0:	d811      	bhi.n	80047f6 <UART_SetConfig+0x33e>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <UART_SetConfig+0x326>
 80047d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047da:	d006      	beq.n	80047ea <UART_SetConfig+0x332>
 80047dc:	e00b      	b.n	80047f6 <UART_SetConfig+0x33e>
 80047de:	2300      	movs	r3, #0
 80047e0:	77fb      	strb	r3, [r7, #31]
 80047e2:	e00d      	b.n	8004800 <UART_SetConfig+0x348>
 80047e4:	2302      	movs	r3, #2
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e00a      	b.n	8004800 <UART_SetConfig+0x348>
 80047ea:	2304      	movs	r3, #4
 80047ec:	77fb      	strb	r3, [r7, #31]
 80047ee:	e007      	b.n	8004800 <UART_SetConfig+0x348>
 80047f0:	2308      	movs	r3, #8
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e004      	b.n	8004800 <UART_SetConfig+0x348>
 80047f6:	2310      	movs	r3, #16
 80047f8:	77fb      	strb	r3, [r7, #31]
 80047fa:	e001      	b.n	8004800 <UART_SetConfig+0x348>
 80047fc:	2310      	movs	r3, #16
 80047fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004808:	d15b      	bne.n	80048c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800480a:	7ffb      	ldrb	r3, [r7, #31]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d828      	bhi.n	8004862 <UART_SetConfig+0x3aa>
 8004810:	a201      	add	r2, pc, #4	@ (adr r2, 8004818 <UART_SetConfig+0x360>)
 8004812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004816:	bf00      	nop
 8004818:	0800483d 	.word	0x0800483d
 800481c:	08004845 	.word	0x08004845
 8004820:	0800484d 	.word	0x0800484d
 8004824:	08004863 	.word	0x08004863
 8004828:	08004853 	.word	0x08004853
 800482c:	08004863 	.word	0x08004863
 8004830:	08004863 	.word	0x08004863
 8004834:	08004863 	.word	0x08004863
 8004838:	0800485b 	.word	0x0800485b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800483c:	f7fe fbc6 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 8004840:	61b8      	str	r0, [r7, #24]
        break;
 8004842:	e013      	b.n	800486c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004844:	f7fe fbd6 	bl	8002ff4 <HAL_RCC_GetPCLK2Freq>
 8004848:	61b8      	str	r0, [r7, #24]
        break;
 800484a:	e00f      	b.n	800486c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800484c:	4b4b      	ldr	r3, [pc, #300]	@ (800497c <UART_SetConfig+0x4c4>)
 800484e:	61bb      	str	r3, [r7, #24]
        break;
 8004850:	e00c      	b.n	800486c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004852:	f7fe faa9 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8004856:	61b8      	str	r0, [r7, #24]
        break;
 8004858:	e008      	b.n	800486c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800485e:	61bb      	str	r3, [r7, #24]
        break;
 8004860:	e004      	b.n	800486c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	77bb      	strb	r3, [r7, #30]
        break;
 800486a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d074      	beq.n	800495c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	005a      	lsls	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	085b      	lsrs	r3, r3, #1
 800487c:	441a      	add	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	fbb2 f3f3 	udiv	r3, r2, r3
 8004886:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b0f      	cmp	r3, #15
 800488c:	d916      	bls.n	80048bc <UART_SetConfig+0x404>
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004894:	d212      	bcs.n	80048bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	b29b      	uxth	r3, r3
 800489a:	f023 030f 	bic.w	r3, r3, #15
 800489e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	085b      	lsrs	r3, r3, #1
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	89fb      	ldrh	r3, [r7, #14]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	89fa      	ldrh	r2, [r7, #14]
 80048b8:	60da      	str	r2, [r3, #12]
 80048ba:	e04f      	b.n	800495c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	77bb      	strb	r3, [r7, #30]
 80048c0:	e04c      	b.n	800495c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048c2:	7ffb      	ldrb	r3, [r7, #31]
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d828      	bhi.n	800491a <UART_SetConfig+0x462>
 80048c8:	a201      	add	r2, pc, #4	@ (adr r2, 80048d0 <UART_SetConfig+0x418>)
 80048ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ce:	bf00      	nop
 80048d0:	080048f5 	.word	0x080048f5
 80048d4:	080048fd 	.word	0x080048fd
 80048d8:	08004905 	.word	0x08004905
 80048dc:	0800491b 	.word	0x0800491b
 80048e0:	0800490b 	.word	0x0800490b
 80048e4:	0800491b 	.word	0x0800491b
 80048e8:	0800491b 	.word	0x0800491b
 80048ec:	0800491b 	.word	0x0800491b
 80048f0:	08004913 	.word	0x08004913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f4:	f7fe fb6a 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 80048f8:	61b8      	str	r0, [r7, #24]
        break;
 80048fa:	e013      	b.n	8004924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048fc:	f7fe fb7a 	bl	8002ff4 <HAL_RCC_GetPCLK2Freq>
 8004900:	61b8      	str	r0, [r7, #24]
        break;
 8004902:	e00f      	b.n	8004924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004904:	4b1d      	ldr	r3, [pc, #116]	@ (800497c <UART_SetConfig+0x4c4>)
 8004906:	61bb      	str	r3, [r7, #24]
        break;
 8004908:	e00c      	b.n	8004924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800490a:	f7fe fa4d 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 800490e:	61b8      	str	r0, [r7, #24]
        break;
 8004910:	e008      	b.n	8004924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004916:	61bb      	str	r3, [r7, #24]
        break;
 8004918:	e004      	b.n	8004924 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	77bb      	strb	r3, [r7, #30]
        break;
 8004922:	bf00      	nop
    }

    if (pclk != 0U)
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d018      	beq.n	800495c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	085a      	lsrs	r2, r3, #1
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	441a      	add	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b0f      	cmp	r3, #15
 8004942:	d909      	bls.n	8004958 <UART_SetConfig+0x4a0>
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800494a:	d205      	bcs.n	8004958 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	b29a      	uxth	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60da      	str	r2, [r3, #12]
 8004956:	e001      	b.n	800495c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004968:	7fbb      	ldrb	r3, [r7, #30]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40007c00 	.word	0x40007c00
 8004978:	40023800 	.word	0x40023800
 800497c:	00f42400 	.word	0x00f42400

08004980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01a      	beq.n	8004a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a7e:	d10a      	bne.n	8004a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]
  }
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08c      	sub	sp, #48	@ 0x30
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ad4:	f7fc faf2 	bl	80010bc <HAL_GetTick>
 8004ad8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d12e      	bne.n	8004b46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ae8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	2200      	movs	r2, #0
 8004af2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f83b 	bl	8004b72 <UART_WaitOnFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d021      	beq.n	8004b46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b16:	623b      	str	r3, [r7, #32]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	69b9      	ldr	r1, [r7, #24]
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e6      	bne.n	8004b02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e011      	b.n	8004b6a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3728      	adds	r7, #40	@ 0x28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b084      	sub	sp, #16
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	603b      	str	r3, [r7, #0]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b82:	e04f      	b.n	8004c24 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8a:	d04b      	beq.n	8004c24 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b8c:	f7fc fa96 	bl	80010bc <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d302      	bcc.n	8004ba2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e04e      	b.n	8004c44 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d037      	beq.n	8004c24 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b80      	cmp	r3, #128	@ 0x80
 8004bb8:	d034      	beq.n	8004c24 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b40      	cmp	r3, #64	@ 0x40
 8004bbe:	d031      	beq.n	8004c24 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d110      	bne.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2208      	movs	r2, #8
 8004bd4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f838 	bl	8004c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2208      	movs	r2, #8
 8004be0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e029      	b.n	8004c44 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bfe:	d111      	bne.n	8004c24 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f81e 	bl	8004c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e00f      	b.n	8004c44 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69da      	ldr	r2, [r3, #28]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d0a0      	beq.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b095      	sub	sp, #84	@ 0x54
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c72:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e6      	bne.n	8004c54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f023 0301 	bic.w	r3, r3, #1
 8004c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1e5      	bne.n	8004c86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d118      	bne.n	8004cf4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f023 0310 	bic.w	r3, r3, #16
 8004cd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6979      	ldr	r1, [r7, #20]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	613b      	str	r3, [r7, #16]
   return(result);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e6      	bne.n	8004cc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d08:	bf00      	nop
 8004d0a:	3754      	adds	r7, #84	@ 0x54
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7ff fbaa 	bl	800448c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	6979      	ldr	r1, [r7, #20]
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	613b      	str	r3, [r7, #16]
   return(result);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e6      	bne.n	8004d48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff fb76 	bl	8004478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d8c:	bf00      	nop
 8004d8e:	3720      	adds	r7, #32
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af04      	add	r7, sp, #16
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8004da2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dcc <BMP280_Read8+0x38>)
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	230a      	movs	r3, #10
 8004dac:	9302      	str	r3, [sp, #8]
 8004dae:	2301      	movs	r3, #1
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	f107 030f 	add.w	r3, r7, #15
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	2301      	movs	r3, #1
 8004dba:	21ec      	movs	r1, #236	@ 0xec
 8004dbc:	f7fc ffe0 	bl	8001d80 <HAL_I2C_Mem_Read>
  return tmp;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	200001f8 	.word	0x200001f8

08004dd0 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af04      	add	r7, sp, #16
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8004dda:	4b0d      	ldr	r3, [pc, #52]	@ (8004e10 <BMP280_Read16+0x40>)
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	230a      	movs	r3, #10
 8004de4:	9302      	str	r3, [sp, #8]
 8004de6:	2302      	movs	r3, #2
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	f107 030c 	add.w	r3, r7, #12
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	2301      	movs	r3, #1
 8004df2:	21ec      	movs	r1, #236	@ 0xec
 8004df4:	f7fc ffc4 	bl	8001d80 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8004df8:	7b3b      	ldrb	r3, [r7, #12]
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	b21a      	sxth	r2, r3
 8004dfe:	7b7b      	ldrb	r3, [r7, #13]
 8004e00:	b21b      	sxth	r3, r3
 8004e02:	4313      	orrs	r3, r2
 8004e04:	b21b      	sxth	r3, r3
 8004e06:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	200001f8 	.word	0x200001f8

08004e14 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff ffd5 	bl	8004dd0 <BMP280_Read16>
 8004e26:	4603      	mov	r3, r0
 8004e28:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8004e2a:	89fb      	ldrh	r3, [r7, #14]
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	b21a      	sxth	r2, r3
 8004e32:	89fb      	ldrh	r3, [r7, #14]
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	b21b      	sxth	r3, r3
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	b21b      	sxth	r3, r3
 8004e3c:	b29b      	uxth	r3, r3
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af04      	add	r7, sp, #16
 8004e4e:	4603      	mov	r3, r0
 8004e50:	460a      	mov	r2, r1
 8004e52:	71fb      	strb	r3, [r7, #7]
 8004e54:	4613      	mov	r3, r2
 8004e56:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8004e58:	4b08      	ldr	r3, [pc, #32]	@ (8004e7c <BMP280_Write8+0x34>)
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	230a      	movs	r3, #10
 8004e62:	9302      	str	r3, [sp, #8]
 8004e64:	2301      	movs	r3, #1
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	1dbb      	adds	r3, r7, #6
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	21ec      	movs	r1, #236	@ 0xec
 8004e70:	f7fc fe72 	bl	8001b58 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8004e74:	bf00      	nop
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	200001f8 	.word	0x200001f8

08004e80 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af04      	add	r7, sp, #16
 8004e86:	4603      	mov	r3, r0
 8004e88:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec0 <BMP280_Read24+0x40>)
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	230a      	movs	r3, #10
 8004e94:	9302      	str	r3, [sp, #8]
 8004e96:	2303      	movs	r3, #3
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	f107 030c 	add.w	r3, r7, #12
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	21ec      	movs	r1, #236	@ 0xec
 8004ea4:	f7fc ff6c 	bl	8001d80 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8004ea8:	7b3b      	ldrb	r3, [r7, #12]
 8004eaa:	041a      	lsls	r2, r3, #16
 8004eac:	7b7b      	ldrb	r3, [r7, #13]
 8004eae:	021b      	lsls	r3, r3, #8
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	7bba      	ldrb	r2, [r7, #14]
 8004eb4:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	200001f8 	.word	0x200001f8

08004ec4 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	4608      	mov	r0, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	70fb      	strb	r3, [r7, #3]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	70bb      	strb	r3, [r7, #2]
 8004eda:	4613      	mov	r3, r2
 8004edc:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 8004ede:	4a48      	ldr	r2, [pc, #288]	@ (8005000 <BMP280_Init+0x13c>)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8004ee4:	787b      	ldrb	r3, [r7, #1]
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d901      	bls.n	8004eee <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8004eea:	2303      	movs	r3, #3
 8004eec:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8004eee:	4a45      	ldr	r2, [pc, #276]	@ (8005004 <BMP280_Init+0x140>)
 8004ef0:	787b      	ldrb	r3, [r7, #1]
 8004ef2:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8004ef4:	787b      	ldrb	r3, [r7, #1]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8004efa:	2300      	movs	r3, #0
 8004efc:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	2b05      	cmp	r3, #5
 8004f02:	d901      	bls.n	8004f08 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8004f04:	2305      	movs	r3, #5
 8004f06:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8004f08:	4a3f      	ldr	r2, [pc, #252]	@ (8005008 <BMP280_Init+0x144>)
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8004f0e:	78bb      	ldrb	r3, [r7, #2]
 8004f10:	2b05      	cmp	r3, #5
 8004f12:	d901      	bls.n	8004f18 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8004f14:	2305      	movs	r3, #5
 8004f16:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8004f18:	4a3c      	ldr	r2, [pc, #240]	@ (800500c <BMP280_Init+0x148>)
 8004f1a:	78bb      	ldrb	r3, [r7, #2]
 8004f1c:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8004f1e:	bf00      	nop
 8004f20:	20d0      	movs	r0, #208	@ 0xd0
 8004f22:	f7ff ff37 	bl	8004d94 <BMP280_Read8>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b58      	cmp	r3, #88	@ 0x58
 8004f2a:	d1f9      	bne.n	8004f20 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8004f2c:	2088      	movs	r0, #136	@ 0x88
 8004f2e:	f7ff ff71 	bl	8004e14 <BMP280_Read16LE>
 8004f32:	4603      	mov	r3, r0
 8004f34:	461a      	mov	r2, r3
 8004f36:	4b36      	ldr	r3, [pc, #216]	@ (8005010 <BMP280_Init+0x14c>)
 8004f38:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8004f3a:	208a      	movs	r0, #138	@ 0x8a
 8004f3c:	f7ff ff6a 	bl	8004e14 <BMP280_Read16LE>
 8004f40:	4603      	mov	r3, r0
 8004f42:	b21a      	sxth	r2, r3
 8004f44:	4b33      	ldr	r3, [pc, #204]	@ (8005014 <BMP280_Init+0x150>)
 8004f46:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8004f48:	208c      	movs	r0, #140	@ 0x8c
 8004f4a:	f7ff ff63 	bl	8004e14 <BMP280_Read16LE>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	b21a      	sxth	r2, r3
 8004f52:	4b31      	ldr	r3, [pc, #196]	@ (8005018 <BMP280_Init+0x154>)
 8004f54:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8004f56:	208e      	movs	r0, #142	@ 0x8e
 8004f58:	f7ff ff5c 	bl	8004e14 <BMP280_Read16LE>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	461a      	mov	r2, r3
 8004f60:	4b2e      	ldr	r3, [pc, #184]	@ (800501c <BMP280_Init+0x158>)
 8004f62:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8004f64:	2090      	movs	r0, #144	@ 0x90
 8004f66:	f7ff ff55 	bl	8004e14 <BMP280_Read16LE>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	b21a      	sxth	r2, r3
 8004f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8005020 <BMP280_Init+0x15c>)
 8004f70:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8004f72:	2092      	movs	r0, #146	@ 0x92
 8004f74:	f7ff ff4e 	bl	8004e14 <BMP280_Read16LE>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	b21a      	sxth	r2, r3
 8004f7c:	4b29      	ldr	r3, [pc, #164]	@ (8005024 <BMP280_Init+0x160>)
 8004f7e:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8004f80:	2094      	movs	r0, #148	@ 0x94
 8004f82:	f7ff ff47 	bl	8004e14 <BMP280_Read16LE>
 8004f86:	4603      	mov	r3, r0
 8004f88:	b21a      	sxth	r2, r3
 8004f8a:	4b27      	ldr	r3, [pc, #156]	@ (8005028 <BMP280_Init+0x164>)
 8004f8c:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8004f8e:	2096      	movs	r0, #150	@ 0x96
 8004f90:	f7ff ff40 	bl	8004e14 <BMP280_Read16LE>
 8004f94:	4603      	mov	r3, r0
 8004f96:	b21a      	sxth	r2, r3
 8004f98:	4b24      	ldr	r3, [pc, #144]	@ (800502c <BMP280_Init+0x168>)
 8004f9a:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8004f9c:	2098      	movs	r0, #152	@ 0x98
 8004f9e:	f7ff ff39 	bl	8004e14 <BMP280_Read16LE>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	b21a      	sxth	r2, r3
 8004fa6:	4b22      	ldr	r3, [pc, #136]	@ (8005030 <BMP280_Init+0x16c>)
 8004fa8:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8004faa:	209a      	movs	r0, #154	@ 0x9a
 8004fac:	f7ff ff32 	bl	8004e14 <BMP280_Read16LE>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	b21a      	sxth	r2, r3
 8004fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8005034 <BMP280_Init+0x170>)
 8004fb6:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8004fb8:	209c      	movs	r0, #156	@ 0x9c
 8004fba:	f7ff ff2b 	bl	8004e14 <BMP280_Read16LE>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	b21a      	sxth	r2, r3
 8004fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8005038 <BMP280_Init+0x174>)
 8004fc4:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8004fc6:	209e      	movs	r0, #158	@ 0x9e
 8004fc8:	f7ff ff24 	bl	8004e14 <BMP280_Read16LE>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	b21a      	sxth	r2, r3
 8004fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800503c <BMP280_Init+0x178>)
 8004fd2:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	015b      	lsls	r3, r3, #5
 8004fd8:	b25a      	sxtb	r2, r3
 8004fda:	78bb      	ldrb	r3, [r7, #2]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	b25b      	sxtb	r3, r3
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	b25a      	sxtb	r2, r3
 8004fe4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	b25b      	sxtb	r3, r3
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	4619      	mov	r1, r3
 8004ff0:	20f4      	movs	r0, #244	@ 0xf4
 8004ff2:	f7ff ff29 	bl	8004e48 <BMP280_Write8>
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	200001f8 	.word	0x200001f8
 8005004:	200001fe 	.word	0x200001fe
 8005008:	200001fc 	.word	0x200001fc
 800500c:	200001fd 	.word	0x200001fd
 8005010:	20000214 	.word	0x20000214
 8005014:	20000200 	.word	0x20000200
 8005018:	20000202 	.word	0x20000202
 800501c:	20000216 	.word	0x20000216
 8005020:	20000204 	.word	0x20000204
 8005024:	20000206 	.word	0x20000206
 8005028:	20000208 	.word	0x20000208
 800502c:	2000020a 	.word	0x2000020a
 8005030:	2000020c 	.word	0x2000020c
 8005034:	2000020e 	.word	0x2000020e
 8005038:	20000210 	.word	0x20000210
 800503c:	20000212 	.word	0x20000212

08005040 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8005046:	4b3d      	ldr	r3, [pc, #244]	@ (800513c <BMP280_ReadTemperature+0xfc>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d16d      	bne.n	800512a <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800504e:	20f4      	movs	r0, #244	@ 0xf4
 8005050:	f7ff fea0 	bl	8004d94 <BMP280_Read8>
 8005054:	4603      	mov	r3, r0
 8005056:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	f023 0303 	bic.w	r3, r3, #3
 800505e:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8005068:	7dfb      	ldrb	r3, [r7, #23]
 800506a:	4619      	mov	r1, r3
 800506c:	20f4      	movs	r0, #244	@ 0xf4
 800506e:	f7ff feeb 	bl	8004e48 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 8005072:	20f4      	movs	r0, #244	@ 0xf4
 8005074:	f7ff fe8e 	bl	8004d94 <BMP280_Read8>
 8005078:	4603      	mov	r3, r0
 800507a:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 800507c:	7dbb      	ldrb	r3, [r7, #22]
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8005084:	7dbb      	ldrb	r3, [r7, #22]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d14f      	bne.n	800512a <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800508a:	20f4      	movs	r0, #244	@ 0xf4
 800508c:	f7ff fe82 	bl	8004d94 <BMP280_Read8>
 8005090:	4603      	mov	r3, r0
 8005092:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8005094:	7dbb      	ldrb	r3, [r7, #22]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 800509c:	7dbb      	ldrb	r3, [r7, #22]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d000      	beq.n	80050a4 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 80050a2:	e7f2      	b.n	800508a <BMP280_ReadTemperature+0x4a>
				  break;
 80050a4:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 80050a6:	20fa      	movs	r0, #250	@ 0xfa
 80050a8:	f7ff feea 	bl	8004e80 <BMP280_Read24>
 80050ac:	4603      	mov	r3, r0
 80050ae:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	111b      	asrs	r3, r3, #4
 80050b4:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	10da      	asrs	r2, r3, #3
 80050ba:	4b21      	ldr	r3, [pc, #132]	@ (8005140 <BMP280_ReadTemperature+0x100>)
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80050c2:	4a20      	ldr	r2, [pc, #128]	@ (8005144 <BMP280_ReadTemperature+0x104>)
 80050c4:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80050c8:	fb02 f303 	mul.w	r3, r2, r3
 80050cc:	12db      	asrs	r3, r3, #11
 80050ce:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	111b      	asrs	r3, r3, #4
 80050d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005140 <BMP280_ReadTemperature+0x100>)
 80050d6:	8812      	ldrh	r2, [r2, #0]
 80050d8:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	1112      	asrs	r2, r2, #4
 80050de:	4918      	ldr	r1, [pc, #96]	@ (8005140 <BMP280_ReadTemperature+0x100>)
 80050e0:	8809      	ldrh	r1, [r1, #0]
 80050e2:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80050e4:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80050e8:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80050ea:	4a17      	ldr	r2, [pc, #92]	@ (8005148 <BMP280_ReadTemperature+0x108>)
 80050ec:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80050f0:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80050f4:	139b      	asrs	r3, r3, #14
 80050f6:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4413      	add	r3, r2
 80050fe:	4a13      	ldr	r2, [pc, #76]	@ (800514c <BMP280_ReadTemperature+0x10c>)
 8005100:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8005102:	4b12      	ldr	r3, [pc, #72]	@ (800514c <BMP280_ReadTemperature+0x10c>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	3380      	adds	r3, #128	@ 0x80
 800510e:	121b      	asrs	r3, r3, #8
 8005110:	ee07 3a90 	vmov	s15, r3
 8005114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005118:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 800511c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005120:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8005150 <BMP280_ReadTemperature+0x110>
 8005124:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005128:	e001      	b.n	800512e <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 800512a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005154 <BMP280_ReadTemperature+0x114>
}
 800512e:	eef0 7a47 	vmov.f32	s15, s14
 8005132:	eeb0 0a67 	vmov.f32	s0, s15
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	200001fe 	.word	0x200001fe
 8005140:	20000214 	.word	0x20000214
 8005144:	20000200 	.word	0x20000200
 8005148:	20000202 	.word	0x20000202
 800514c:	20000218 	.word	0x20000218
 8005150:	42c80000 	.word	0x42c80000
 8005154:	c2c60000 	.word	0xc2c60000

08005158 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8005158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800515c:	b0cc      	sub	sp, #304	@ 0x130
 800515e:	af00      	add	r7, sp, #0
 8005160:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 8005164:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8005168:	f7ff ff6a 	bl	8005040 <BMP280_ReadTemperature>
 800516c:	eef0 7a40 	vmov.f32	s15, s0
 8005170:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005174:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8005178:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800517c:	edd3 7a00 	vldr	s15, [r3]
 8005180:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8005450 <BMP280_ReadTemperatureAndPressure+0x2f8>
 8005184:	eef4 7a47 	vcmp.f32	s15, s14
 8005188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518c:	d101      	bne.n	8005192 <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 800518e:	23ff      	movs	r3, #255	@ 0xff
 8005190:	e2bf      	b.n	8005712 <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8005192:	20f7      	movs	r0, #247	@ 0xf7
 8005194:	f7ff fe74 	bl	8004e80 <BMP280_Read24>
 8005198:	4603      	mov	r3, r0
 800519a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	  adc_P >>= 4;
 800519e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80051a2:	111b      	asrs	r3, r3, #4
 80051a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 80051a8:	4baa      	ldr	r3, [pc, #680]	@ (8005454 <BMP280_ReadTemperatureAndPressure+0x2fc>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	17da      	asrs	r2, r3, #31
 80051ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051b2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80051b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80051ba:	460b      	mov	r3, r1
 80051bc:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80051c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051c2:	4613      	mov	r3, r2
 80051c4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80051c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051ce:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 80051d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80051d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80051da:	fb03 f102 	mul.w	r1, r3, r2
 80051de:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80051e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
 80051ea:	18ca      	adds	r2, r1, r3
 80051ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80051f0:	fba3 4503 	umull	r4, r5, r3, r3
 80051f4:	1953      	adds	r3, r2, r5
 80051f6:	461d      	mov	r5, r3
 80051f8:	4b97      	ldr	r3, [pc, #604]	@ (8005458 <BMP280_ReadTemperatureAndPressure+0x300>)
 80051fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051fe:	b21b      	sxth	r3, r3
 8005200:	17da      	asrs	r2, r3, #31
 8005202:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005206:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800520a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800520e:	4603      	mov	r3, r0
 8005210:	fb03 f205 	mul.w	r2, r3, r5
 8005214:	460b      	mov	r3, r1
 8005216:	fb04 f303 	mul.w	r3, r4, r3
 800521a:	4413      	add	r3, r2
 800521c:	4602      	mov	r2, r0
 800521e:	fba4 8902 	umull	r8, r9, r4, r2
 8005222:	444b      	add	r3, r9
 8005224:	4699      	mov	r9, r3
 8005226:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 800522a:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 800522e:	4b8b      	ldr	r3, [pc, #556]	@ (800545c <BMP280_ReadTemperatureAndPressure+0x304>)
 8005230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005234:	b21b      	sxth	r3, r3
 8005236:	17da      	asrs	r2, r3, #31
 8005238:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800523c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005240:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005244:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8005248:	462a      	mov	r2, r5
 800524a:	fb02 f203 	mul.w	r2, r2, r3
 800524e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005252:	4621      	mov	r1, r4
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	441a      	add	r2, r3
 800525a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800525e:	4621      	mov	r1, r4
 8005260:	fba3 ab01 	umull	sl, fp, r3, r1
 8005264:	eb02 030b 	add.w	r3, r2, fp
 8005268:	469b      	mov	fp, r3
 800526a:	f04f 0000 	mov.w	r0, #0
 800526e:	f04f 0100 	mov.w	r1, #0
 8005272:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8005276:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 800527a:	ea4f 404a 	mov.w	r0, sl, lsl #17
 800527e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8005282:	1814      	adds	r4, r2, r0
 8005284:	643c      	str	r4, [r7, #64]	@ 0x40
 8005286:	414b      	adcs	r3, r1
 8005288:	647b      	str	r3, [r7, #68]	@ 0x44
 800528a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800528e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 8005292:	4b73      	ldr	r3, [pc, #460]	@ (8005460 <BMP280_ReadTemperatureAndPressure+0x308>)
 8005294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005298:	b21b      	sxth	r3, r3
 800529a:	17da      	asrs	r2, r3, #31
 800529c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052a0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80052a4:	f04f 0000 	mov.w	r0, #0
 80052a8:	f04f 0100 	mov.w	r1, #0
 80052ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80052b0:	00d9      	lsls	r1, r3, #3
 80052b2:	2000      	movs	r0, #0
 80052b4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80052b8:	1814      	adds	r4, r2, r0
 80052ba:	63bc      	str	r4, [r7, #56]	@ 0x38
 80052bc:	414b      	adcs	r3, r1
 80052be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052c0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80052c4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80052c8:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80052cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80052d0:	fb03 f102 	mul.w	r1, r3, r2
 80052d4:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80052d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80052dc:	fb02 f303 	mul.w	r3, r2, r3
 80052e0:	18ca      	adds	r2, r1, r3
 80052e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80052e6:	fba3 1303 	umull	r1, r3, r3, r3
 80052ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80052ee:	460b      	mov	r3, r1
 80052f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f8:	18d3      	adds	r3, r2, r3
 80052fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80052fe:	4b59      	ldr	r3, [pc, #356]	@ (8005464 <BMP280_ReadTemperatureAndPressure+0x30c>)
 8005300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005304:	b21b      	sxth	r3, r3
 8005306:	17da      	asrs	r2, r3, #31
 8005308:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800530c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005310:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8005314:	462b      	mov	r3, r5
 8005316:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800531a:	4642      	mov	r2, r8
 800531c:	fb02 f203 	mul.w	r2, r2, r3
 8005320:	464b      	mov	r3, r9
 8005322:	4621      	mov	r1, r4
 8005324:	fb01 f303 	mul.w	r3, r1, r3
 8005328:	4413      	add	r3, r2
 800532a:	4622      	mov	r2, r4
 800532c:	4641      	mov	r1, r8
 800532e:	fba2 1201 	umull	r1, r2, r2, r1
 8005332:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8005336:	460a      	mov	r2, r1
 8005338:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 800533c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8005340:	4413      	add	r3, r2
 8005342:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005346:	f04f 0000 	mov.w	r0, #0
 800534a:	f04f 0100 	mov.w	r1, #0
 800534e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8005352:	4623      	mov	r3, r4
 8005354:	0a18      	lsrs	r0, r3, #8
 8005356:	462b      	mov	r3, r5
 8005358:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800535c:	462b      	mov	r3, r5
 800535e:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8005360:	4b41      	ldr	r3, [pc, #260]	@ (8005468 <BMP280_ReadTemperatureAndPressure+0x310>)
 8005362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005366:	b21b      	sxth	r3, r3
 8005368:	17da      	asrs	r2, r3, #31
 800536a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800536e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005372:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005376:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800537a:	464a      	mov	r2, r9
 800537c:	fb02 f203 	mul.w	r2, r2, r3
 8005380:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005384:	4644      	mov	r4, r8
 8005386:	fb04 f303 	mul.w	r3, r4, r3
 800538a:	441a      	add	r2, r3
 800538c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005390:	4644      	mov	r4, r8
 8005392:	fba3 4304 	umull	r4, r3, r3, r4
 8005396:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800539a:	4623      	mov	r3, r4
 800539c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a4:	18d3      	adds	r3, r2, r3
 80053a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 80053b6:	464c      	mov	r4, r9
 80053b8:	0323      	lsls	r3, r4, #12
 80053ba:	4644      	mov	r4, r8
 80053bc:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80053c0:	4644      	mov	r4, r8
 80053c2:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80053c4:	1884      	adds	r4, r0, r2
 80053c6:	633c      	str	r4, [r7, #48]	@ 0x30
 80053c8:	eb41 0303 	adc.w	r3, r1, r3
 80053cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ce:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80053d2:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80053d6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80053da:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80053de:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 80053e2:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80053e6:	4b21      	ldr	r3, [pc, #132]	@ (800546c <BMP280_ReadTemperatureAndPressure+0x314>)
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2200      	movs	r2, #0
 80053ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053f6:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80053fa:	462b      	mov	r3, r5
 80053fc:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8005400:	4642      	mov	r2, r8
 8005402:	fb02 f203 	mul.w	r2, r2, r3
 8005406:	464b      	mov	r3, r9
 8005408:	4621      	mov	r1, r4
 800540a:	fb01 f303 	mul.w	r3, r1, r3
 800540e:	4413      	add	r3, r2
 8005410:	4622      	mov	r2, r4
 8005412:	4641      	mov	r1, r8
 8005414:	fba2 1201 	umull	r1, r2, r2, r1
 8005418:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800541c:	460a      	mov	r2, r1
 800541e:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8005422:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005426:	4413      	add	r3, r2
 8005428:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005438:	4629      	mov	r1, r5
 800543a:	104a      	asrs	r2, r1, #1
 800543c:	4629      	mov	r1, r5
 800543e:	17cb      	asrs	r3, r1, #31
 8005440:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	  if (var1 == 0) {
 8005444:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8005448:	4313      	orrs	r3, r2
 800544a:	d111      	bne.n	8005470 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 800544c:	2300      	movs	r3, #0
 800544e:	e160      	b.n	8005712 <BMP280_ReadTemperatureAndPressure+0x5ba>
 8005450:	c2c60000 	.word	0xc2c60000
 8005454:	20000218 	.word	0x20000218
 8005458:	2000020c 	.word	0x2000020c
 800545c:	2000020a 	.word	0x2000020a
 8005460:	20000208 	.word	0x20000208
 8005464:	20000206 	.word	0x20000206
 8005468:	20000204 	.word	0x20000204
 800546c:	20000216 	.word	0x20000216
	  }
	  p = 1048576 - adc_P;
 8005470:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005474:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8005478:	17da      	asrs	r2, r3, #31
 800547a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800547c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800547e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8005482:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 8005486:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800548a:	105b      	asrs	r3, r3, #1
 800548c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005490:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005494:	07db      	lsls	r3, r3, #31
 8005496:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800549a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800549e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80054a2:	4621      	mov	r1, r4
 80054a4:	1a89      	subs	r1, r1, r2
 80054a6:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80054aa:	4629      	mov	r1, r5
 80054ac:	eb61 0303 	sbc.w	r3, r1, r3
 80054b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054b4:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80054b8:	4622      	mov	r2, r4
 80054ba:	462b      	mov	r3, r5
 80054bc:	1891      	adds	r1, r2, r2
 80054be:	6239      	str	r1, [r7, #32]
 80054c0:	415b      	adcs	r3, r3
 80054c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054c8:	4621      	mov	r1, r4
 80054ca:	1851      	adds	r1, r2, r1
 80054cc:	61b9      	str	r1, [r7, #24]
 80054ce:	4629      	mov	r1, r5
 80054d0:	414b      	adcs	r3, r1
 80054d2:	61fb      	str	r3, [r7, #28]
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80054e0:	4649      	mov	r1, r9
 80054e2:	018b      	lsls	r3, r1, #6
 80054e4:	4641      	mov	r1, r8
 80054e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054ea:	4641      	mov	r1, r8
 80054ec:	018a      	lsls	r2, r1, #6
 80054ee:	4641      	mov	r1, r8
 80054f0:	1889      	adds	r1, r1, r2
 80054f2:	6139      	str	r1, [r7, #16]
 80054f4:	4649      	mov	r1, r9
 80054f6:	eb43 0101 	adc.w	r1, r3, r1
 80054fa:	6179      	str	r1, [r7, #20]
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8005508:	4649      	mov	r1, r9
 800550a:	008b      	lsls	r3, r1, #2
 800550c:	4641      	mov	r1, r8
 800550e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005512:	4641      	mov	r1, r8
 8005514:	008a      	lsls	r2, r1, #2
 8005516:	4610      	mov	r0, r2
 8005518:	4619      	mov	r1, r3
 800551a:	4603      	mov	r3, r0
 800551c:	4622      	mov	r2, r4
 800551e:	189b      	adds	r3, r3, r2
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	460b      	mov	r3, r1
 8005524:	462a      	mov	r2, r5
 8005526:	eb42 0303 	adc.w	r3, r2, r3
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8005538:	4649      	mov	r1, r9
 800553a:	008b      	lsls	r3, r1, #2
 800553c:	4641      	mov	r1, r8
 800553e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005542:	4641      	mov	r1, r8
 8005544:	008a      	lsls	r2, r1, #2
 8005546:	4610      	mov	r0, r2
 8005548:	4619      	mov	r1, r3
 800554a:	4603      	mov	r3, r0
 800554c:	4622      	mov	r2, r4
 800554e:	189b      	adds	r3, r3, r2
 8005550:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005552:	462b      	mov	r3, r5
 8005554:	460a      	mov	r2, r1
 8005556:	eb42 0303 	adc.w	r3, r2, r3
 800555a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800555c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8005560:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005564:	f7fb fb90 	bl	8000c88 <__aeabi_ldivmod>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8005570:	4b6b      	ldr	r3, [pc, #428]	@ (8005720 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 8005572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005576:	b21b      	sxth	r3, r3
 8005578:	17da      	asrs	r2, r3, #31
 800557a:	673b      	str	r3, [r7, #112]	@ 0x70
 800557c:	677a      	str	r2, [r7, #116]	@ 0x74
 800557e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8005582:	f04f 0000 	mov.w	r0, #0
 8005586:	f04f 0100 	mov.w	r1, #0
 800558a:	0b50      	lsrs	r0, r2, #13
 800558c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8005590:	1359      	asrs	r1, r3, #13
 8005592:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8005596:	462b      	mov	r3, r5
 8005598:	fb00 f203 	mul.w	r2, r0, r3
 800559c:	4623      	mov	r3, r4
 800559e:	fb03 f301 	mul.w	r3, r3, r1
 80055a2:	4413      	add	r3, r2
 80055a4:	4622      	mov	r2, r4
 80055a6:	fba2 1200 	umull	r1, r2, r2, r0
 80055aa:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80055ae:	460a      	mov	r2, r1
 80055b0:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80055b4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80055b8:	4413      	add	r3, r2
 80055ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055be:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f04f 0100 	mov.w	r1, #0
 80055ca:	0b50      	lsrs	r0, r2, #13
 80055cc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80055d0:	1359      	asrs	r1, r3, #13
 80055d2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80055d6:	462b      	mov	r3, r5
 80055d8:	fb00 f203 	mul.w	r2, r0, r3
 80055dc:	4623      	mov	r3, r4
 80055de:	fb03 f301 	mul.w	r3, r3, r1
 80055e2:	4413      	add	r3, r2
 80055e4:	4622      	mov	r2, r4
 80055e6:	fba2 1200 	umull	r1, r2, r2, r0
 80055ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80055ee:	460a      	mov	r2, r1
 80055f0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80055f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80055f8:	4413      	add	r3, r2
 80055fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800560a:	4621      	mov	r1, r4
 800560c:	0e4a      	lsrs	r2, r1, #25
 800560e:	4629      	mov	r1, r5
 8005610:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8005614:	4629      	mov	r1, r5
 8005616:	164b      	asrs	r3, r1, #25
 8005618:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 800561c:	4b41      	ldr	r3, [pc, #260]	@ (8005724 <BMP280_ReadTemperatureAndPressure+0x5cc>)
 800561e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005622:	b21b      	sxth	r3, r3
 8005624:	17da      	asrs	r2, r3, #31
 8005626:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005628:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800562a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800562e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8005632:	462a      	mov	r2, r5
 8005634:	fb02 f203 	mul.w	r2, r2, r3
 8005638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563c:	4621      	mov	r1, r4
 800563e:	fb01 f303 	mul.w	r3, r1, r3
 8005642:	4413      	add	r3, r2
 8005644:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8005648:	4621      	mov	r1, r4
 800564a:	fba2 1201 	umull	r1, r2, r2, r1
 800564e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005652:	460a      	mov	r2, r1
 8005654:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8005658:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800565c:	4413      	add	r3, r2
 800565e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800566e:	4621      	mov	r1, r4
 8005670:	0cca      	lsrs	r2, r1, #19
 8005672:	4629      	mov	r1, r5
 8005674:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8005678:	4629      	mov	r1, r5
 800567a:	14cb      	asrs	r3, r1, #19
 800567c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8005680:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8005684:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8005688:	1884      	adds	r4, r0, r2
 800568a:	663c      	str	r4, [r7, #96]	@ 0x60
 800568c:	eb41 0303 	adc.w	r3, r1, r3
 8005690:	667b      	str	r3, [r7, #100]	@ 0x64
 8005692:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8005696:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800569a:	4621      	mov	r1, r4
 800569c:	1889      	adds	r1, r1, r2
 800569e:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056a0:	4629      	mov	r1, r5
 80056a2:	eb43 0101 	adc.w	r1, r3, r1
 80056a6:	65f9      	str	r1, [r7, #92]	@ 0x5c
 80056a8:	f04f 0000 	mov.w	r0, #0
 80056ac:	f04f 0100 	mov.w	r1, #0
 80056b0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80056b4:	4623      	mov	r3, r4
 80056b6:	0a18      	lsrs	r0, r3, #8
 80056b8:	462b      	mov	r3, r5
 80056ba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80056be:	462b      	mov	r3, r5
 80056c0:	1219      	asrs	r1, r3, #8
 80056c2:	4b19      	ldr	r3, [pc, #100]	@ (8005728 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 80056c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056c8:	b21b      	sxth	r3, r3
 80056ca:	17da      	asrs	r2, r3, #31
 80056cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80056ce:	657a      	str	r2, [r7, #84]	@ 0x54
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80056dc:	464c      	mov	r4, r9
 80056de:	0123      	lsls	r3, r4, #4
 80056e0:	4644      	mov	r4, r8
 80056e2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80056e6:	4644      	mov	r4, r8
 80056e8:	0122      	lsls	r2, r4, #4
 80056ea:	1884      	adds	r4, r0, r2
 80056ec:	603c      	str	r4, [r7, #0]
 80056ee:	eb41 0303 	adc.w	r3, r1, r3
 80056f2:	607b      	str	r3, [r7, #4]
 80056f4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80056f8:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  *pressure = (int32_t)p/256;
 80056fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005700:	2b00      	cmp	r3, #0
 8005702:	da00      	bge.n	8005706 <BMP280_ReadTemperatureAndPressure+0x5ae>
 8005704:	33ff      	adds	r3, #255	@ 0xff
 8005706:	121b      	asrs	r3, r3, #8
 8005708:	461a      	mov	r2, r3
 800570a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800570e:	601a      	str	r2, [r3, #0]

	  return 0;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005718:	46bd      	mov	sp, r7
 800571a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800571e:	bf00      	nop
 8005720:	20000212 	.word	0x20000212
 8005724:	20000210 	.word	0x20000210
 8005728:	2000020e 	.word	0x2000020e

0800572c <lcd_send_cmd>:

//#define SLAVE_ADDRESS_LCD 0x70 // change this according to ur setup
#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af02      	add	r7, sp, #8
 8005732:	4603      	mov	r3, r0
 8005734:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	f023 030f 	bic.w	r3, r3, #15
 800573c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	f043 030c 	orr.w	r3, r3, #12
 800574a:	b2db      	uxtb	r3, r3
 800574c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	f043 0308 	orr.w	r3, r3, #8
 8005754:	b2db      	uxtb	r3, r3
 8005756:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8005758:	7bbb      	ldrb	r3, [r7, #14]
 800575a:	f043 030c 	orr.w	r3, r3, #12
 800575e:	b2db      	uxtb	r3, r3
 8005760:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8005762:	7bbb      	ldrb	r3, [r7, #14]
 8005764:	f043 0308 	orr.w	r3, r3, #8
 8005768:	b2db      	uxtb	r3, r3
 800576a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800576c:	f107 0208 	add.w	r2, r7, #8
 8005770:	2364      	movs	r3, #100	@ 0x64
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	2304      	movs	r3, #4
 8005776:	214e      	movs	r1, #78	@ 0x4e
 8005778:	4803      	ldr	r0, [pc, #12]	@ (8005788 <lcd_send_cmd+0x5c>)
 800577a:	f7fc f8d5 	bl	8001928 <HAL_I2C_Master_Transmit>
}
 800577e:	bf00      	nop
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000270 	.word	0x20000270

0800578c <lcd_send_data>:

void lcd_send_data (char data)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af02      	add	r7, sp, #8
 8005792:	4603      	mov	r3, r0
 8005794:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8005796:	79fb      	ldrb	r3, [r7, #7]
 8005798:	f023 030f 	bic.w	r3, r3, #15
 800579c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	f043 030d 	orr.w	r3, r3, #13
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	f043 0309 	orr.w	r3, r3, #9
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80057b8:	7bbb      	ldrb	r3, [r7, #14]
 80057ba:	f043 030d 	orr.w	r3, r3, #13
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80057c2:	7bbb      	ldrb	r3, [r7, #14]
 80057c4:	f043 0309 	orr.w	r3, r3, #9
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80057cc:	f107 0208 	add.w	r2, r7, #8
 80057d0:	2364      	movs	r3, #100	@ 0x64
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	2304      	movs	r3, #4
 80057d6:	214e      	movs	r1, #78	@ 0x4e
 80057d8:	4803      	ldr	r0, [pc, #12]	@ (80057e8 <lcd_send_data+0x5c>)
 80057da:	f7fc f8a5 	bl	8001928 <HAL_I2C_Master_Transmit>
}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000270 	.word	0x20000270

080057ec <lcd_clear>:

void lcd_clear (void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80057f2:	2080      	movs	r0, #128	@ 0x80
 80057f4:	f7ff ff9a 	bl	800572c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80057f8:	2300      	movs	r3, #0
 80057fa:	607b      	str	r3, [r7, #4]
 80057fc:	e005      	b.n	800580a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80057fe:	2020      	movs	r0, #32
 8005800:	f7ff ffc4 	bl	800578c <lcd_send_data>
	for (int i=0; i<70; i++)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3301      	adds	r3, #1
 8005808:	607b      	str	r3, [r7, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b45      	cmp	r3, #69	@ 0x45
 800580e:	ddf6      	ble.n	80057fe <lcd_clear+0x12>
	}
	lcd_put_cur(0, 0); //Dopisane ustawienie kursora na 0,0
 8005810:	2100      	movs	r1, #0
 8005812:	2000      	movs	r0, #0
 8005814:	f000 f804 	bl	8005820 <lcd_put_cur>
}
 8005818:	bf00      	nop
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
    switch (row)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <lcd_put_cur+0x18>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d005      	beq.n	8005842 <lcd_put_cur+0x22>
 8005836:	e009      	b.n	800584c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583e:	603b      	str	r3, [r7, #0]
            break;
 8005840:	e004      	b.n	800584c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005848:	603b      	str	r3, [r7, #0]
            break;
 800584a:	bf00      	nop
    }

    lcd_send_cmd (col);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff ff6b 	bl	800572c <lcd_send_cmd>
}
 8005856:	bf00      	nop
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <lcd_init>:


void lcd_init (void)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8005862:	2032      	movs	r0, #50	@ 0x32
 8005864:	f7fb fc36 	bl	80010d4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8005868:	2030      	movs	r0, #48	@ 0x30
 800586a:	f7ff ff5f 	bl	800572c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800586e:	2005      	movs	r0, #5
 8005870:	f7fb fc30 	bl	80010d4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8005874:	2030      	movs	r0, #48	@ 0x30
 8005876:	f7ff ff59 	bl	800572c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800587a:	2001      	movs	r0, #1
 800587c:	f7fb fc2a 	bl	80010d4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8005880:	2030      	movs	r0, #48	@ 0x30
 8005882:	f7ff ff53 	bl	800572c <lcd_send_cmd>
	HAL_Delay(10);
 8005886:	200a      	movs	r0, #10
 8005888:	f7fb fc24 	bl	80010d4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800588c:	2020      	movs	r0, #32
 800588e:	f7ff ff4d 	bl	800572c <lcd_send_cmd>
	HAL_Delay(10);
 8005892:	200a      	movs	r0, #10
 8005894:	f7fb fc1e 	bl	80010d4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8005898:	2028      	movs	r0, #40	@ 0x28
 800589a:	f7ff ff47 	bl	800572c <lcd_send_cmd>
	HAL_Delay(1);
 800589e:	2001      	movs	r0, #1
 80058a0:	f7fb fc18 	bl	80010d4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80058a4:	2008      	movs	r0, #8
 80058a6:	f7ff ff41 	bl	800572c <lcd_send_cmd>
	HAL_Delay(1);
 80058aa:	2001      	movs	r0, #1
 80058ac:	f7fb fc12 	bl	80010d4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80058b0:	2001      	movs	r0, #1
 80058b2:	f7ff ff3b 	bl	800572c <lcd_send_cmd>
	HAL_Delay(1);
 80058b6:	2001      	movs	r0, #1
 80058b8:	f7fb fc0c 	bl	80010d4 <HAL_Delay>
	HAL_Delay(1);
 80058bc:	2001      	movs	r0, #1
 80058be:	f7fb fc09 	bl	80010d4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80058c2:	2006      	movs	r0, #6
 80058c4:	f7ff ff32 	bl	800572c <lcd_send_cmd>
	HAL_Delay(1);
 80058c8:	2001      	movs	r0, #1
 80058ca:	f7fb fc03 	bl	80010d4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80058ce:	200c      	movs	r0, #12
 80058d0:	f7ff ff2c 	bl	800572c <lcd_send_cmd>
}
 80058d4:	bf00      	nop
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
	while (*str)
 80058e0:	e006      	b.n	80058f0 <lcd_send_string+0x18>
	{
		lcd_send_data (*str++);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff ff4e 	bl	800578c <lcd_send_data>
	while (*str)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1f4      	bne.n	80058e2 <lcd_send_string+0xa>
	}
}
 80058f8:	bf00      	nop
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	0000      	movs	r0, r0
 8005904:	0000      	movs	r0, r0
	...

08005908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	@ 0x28
 800590c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800590e:	f7fb fb83 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005912:	f000 f905 	bl	8005b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005916:	f000 fa75 	bl	8005e04 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800591a:	f000 fa43 	bl	8005da4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800591e:	f000 f967 	bl	8005bf0 <MX_I2C1_Init>
  MX_I2C4_Init();
 8005922:	f000 f9a5 	bl	8005c70 <MX_I2C4_Init>
  MX_TIM1_Init();
 8005926:	f000 f9e3 	bl	8005cf0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 800592a:	2301      	movs	r3, #1
 800592c:	2203      	movs	r2, #3
 800592e:	2101      	movs	r1, #1
 8005930:	486d      	ldr	r0, [pc, #436]	@ (8005ae8 <main+0x1e0>)
 8005932:	f7ff fac7 	bl	8004ec4 <BMP280_Init>
  lcd_init ();
 8005936:	f7ff ff92 	bl	800585e <lcd_init>
  lcd_send_string ("Czujnik BMP280");
 800593a:	486c      	ldr	r0, [pc, #432]	@ (8005aec <main+0x1e4>)
 800593c:	f7ff ffcc 	bl	80058d8 <lcd_send_string>
  HAL_Delay(100);
 8005940:	2064      	movs	r0, #100	@ 0x64
 8005942:	f7fb fbc7 	bl	80010d4 <HAL_Delay>
  lcd_put_cur(1, 0);
 8005946:	2100      	movs	r1, #0
 8005948:	2001      	movs	r0, #1
 800594a:	f7ff ff69 	bl	8005820 <lcd_put_cur>
  lcd_send_string("I2C1-BMP,I2C4-LCD");
 800594e:	4868      	ldr	r0, [pc, #416]	@ (8005af0 <main+0x1e8>)
 8005950:	f7ff ffc2 	bl	80058d8 <lcd_send_string>
  HAL_Delay(2000);
 8005954:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8005958:	f7fb fbbc 	bl	80010d4 <HAL_Delay>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800595c:	213c      	movs	r1, #60	@ 0x3c
 800595e:	4865      	ldr	r0, [pc, #404]	@ (8005af4 <main+0x1ec>)
 8005960:	f7fd fff2 	bl	8003948 <HAL_TIM_Encoder_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8005964:	4964      	ldr	r1, [pc, #400]	@ (8005af8 <main+0x1f0>)
 8005966:	4865      	ldr	r0, [pc, #404]	@ (8005afc <main+0x1f4>)
 8005968:	f7ff fbf6 	bl	8005158 <BMP280_ReadTemperatureAndPressure>
	  sprintf((char*)text, "%.2f, ", temperature);
 800596c:	4b63      	ldr	r3, [pc, #396]	@ (8005afc <main+0x1f4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4618      	mov	r0, r3
 8005972:	f7fa fe09 	bl	8000588 <__aeabi_f2d>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4638      	mov	r0, r7
 800597c:	4960      	ldr	r1, [pc, #384]	@ (8005b00 <main+0x1f8>)
 800597e:	f001 fb37 	bl	8006ff0 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 1000);
 8005982:	463b      	mov	r3, r7
 8005984:	4618      	mov	r0, r3
 8005986:	f7fa fc93 	bl	80002b0 <strlen>
 800598a:	4603      	mov	r3, r0
 800598c:	b29a      	uxth	r2, r3
 800598e:	4639      	mov	r1, r7
 8005990:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005994:	485b      	ldr	r0, [pc, #364]	@ (8005b04 <main+0x1fc>)
 8005996:	f7fe fa13 	bl	8003dc0 <HAL_UART_Transmit>

	  lcd_clear ();
 800599a:	f7ff ff27 	bl	80057ec <lcd_clear>
	  lcd_put_cur(0, 0);
 800599e:	2100      	movs	r1, #0
 80059a0:	2000      	movs	r0, #0
 80059a2:	f7ff ff3d 	bl	8005820 <lcd_put_cur>
	  sprintf((char*)text, "Temp.  %.2f  C", temperature);
 80059a6:	4b55      	ldr	r3, [pc, #340]	@ (8005afc <main+0x1f4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fa fdec 	bl	8000588 <__aeabi_f2d>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4638      	mov	r0, r7
 80059b6:	4954      	ldr	r1, [pc, #336]	@ (8005b08 <main+0x200>)
 80059b8:	f001 fb1a 	bl	8006ff0 <siprintf>
	  lcd_send_string(text);
 80059bc:	463b      	mov	r3, r7
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff ff8a 	bl	80058d8 <lcd_send_string>
	  lcd_put_cur(1, 0);
 80059c4:	2100      	movs	r1, #0
 80059c6:	2001      	movs	r0, #1
 80059c8:	f7ff ff2a 	bl	8005820 <lcd_put_cur>

	  // Odczytujemy wartość z enkodera
	  int encoder_value = __HAL_TIM_GET_COUNTER(&htim1);
 80059cc:	4b49      	ldr	r3, [pc, #292]	@ (8005af4 <main+0x1ec>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24

	  // Sprawdzamy kierunek obrotu enkodera
	  static int previous_encoder_value = 0;  // Zmienna do przechowywania poprzedniej wartości
	  int encoder_delta = encoder_value - previous_encoder_value;  // Różnica między aktualnym i poprzednim odczytem
 80059d4:	4b4d      	ldr	r3, [pc, #308]	@ (8005b0c <main+0x204>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	623b      	str	r3, [r7, #32]

	  // Jeśli obracamy w jedną stronę (wartość rośnie), zwiększamy temp_zadana
	  if (encoder_delta > 0) {
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	dd20      	ble.n	8005a26 <main+0x11e>
	    if (temp_zadana < 34.90) {
 80059e4:	4b4a      	ldr	r3, [pc, #296]	@ (8005b10 <main+0x208>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fa fdcd 	bl	8000588 <__aeabi_f2d>
 80059ee:	a33a      	add	r3, pc, #232	@ (adr r3, 8005ad8 <main+0x1d0>)
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	f7fb f892 	bl	8000b1c <__aeabi_dcmplt>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d033      	beq.n	8005a66 <main+0x15e>
	      temp_zadana += 0.1;  // Zwiększamy o 0.1 stopnia
 80059fe:	4b44      	ldr	r3, [pc, #272]	@ (8005b10 <main+0x208>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fa fdc0 	bl	8000588 <__aeabi_f2d>
 8005a08:	a335      	add	r3, pc, #212	@ (adr r3, 8005ae0 <main+0x1d8>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f7fa fc5d 	bl	80002cc <__adddf3>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4610      	mov	r0, r2
 8005a18:	4619      	mov	r1, r3
 8005a1a:	f7fb f8e5 	bl	8000be8 <__aeabi_d2f>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	4a3b      	ldr	r2, [pc, #236]	@ (8005b10 <main+0x208>)
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	e01f      	b.n	8005a66 <main+0x15e>
	    }
	  }
	  // Jeśli obracamy w drugą stronę (wartość maleje), zmniejszamy temp_zadana
	  else if (encoder_delta < 0) {
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	da1c      	bge.n	8005a66 <main+0x15e>
	    if (temp_zadana > 20.00) {
 8005a2c:	4b38      	ldr	r3, [pc, #224]	@ (8005b10 <main+0x208>)
 8005a2e:	edd3 7a00 	vldr	s15, [r3]
 8005a32:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8005a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a3e:	dd12      	ble.n	8005a66 <main+0x15e>
	      temp_zadana -= 0.1;  // Zmniejszamy o 0.1 stopnia
 8005a40:	4b33      	ldr	r3, [pc, #204]	@ (8005b10 <main+0x208>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fa fd9f 	bl	8000588 <__aeabi_f2d>
 8005a4a:	a325      	add	r3, pc, #148	@ (adr r3, 8005ae0 <main+0x1d8>)
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	f7fa fc3a 	bl	80002c8 <__aeabi_dsub>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f7fb f8c4 	bl	8000be8 <__aeabi_d2f>
 8005a60:	4603      	mov	r3, r0
 8005a62:	4a2b      	ldr	r2, [pc, #172]	@ (8005b10 <main+0x208>)
 8005a64:	6013      	str	r3, [r2, #0]
	    }
	  }

	  // Aktualizujemy poprzednią wartość enkodera
	  previous_encoder_value = encoder_value;
 8005a66:	4a29      	ldr	r2, [pc, #164]	@ (8005b0c <main+0x204>)
 8005a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6a:	6013      	str	r3, [r2, #0]

	  sprintf((char*)text, "T_zad. %.2f  C", temp_zadana);
 8005a6c:	4b28      	ldr	r3, [pc, #160]	@ (8005b10 <main+0x208>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fa fd89 	bl	8000588 <__aeabi_f2d>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	4925      	ldr	r1, [pc, #148]	@ (8005b14 <main+0x20c>)
 8005a7e:	f001 fab7 	bl	8006ff0 <siprintf>
	  lcd_send_string(text);
 8005a82:	463b      	mov	r3, r7
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff ff27 	bl	80058d8 <lcd_send_string>

	  if (temperature<temp_zadana)
 8005a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8005afc <main+0x1f4>)
 8005a8c:	ed93 7a00 	vldr	s14, [r3]
 8005a90:	4b1f      	ldr	r3, [pc, #124]	@ (8005b10 <main+0x208>)
 8005a92:	edd3 7a00 	vldr	s15, [r3]
 8005a96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a9e:	d50a      	bpl.n	8005ab6 <main+0x1ae>
	  {
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	2180      	movs	r1, #128	@ 0x80
 8005aa4:	481c      	ldr	r0, [pc, #112]	@ (8005b18 <main+0x210>)
 8005aa6:	f7fb fe89 	bl	80017bc <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8005aaa:	2201      	movs	r2, #1
 8005aac:	2101      	movs	r1, #1
 8005aae:	481b      	ldr	r0, [pc, #108]	@ (8005b1c <main+0x214>)
 8005ab0:	f7fb fe84 	bl	80017bc <HAL_GPIO_WritePin>
 8005ab4:	e009      	b.n	8005aca <main+0x1c2>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2180      	movs	r1, #128	@ 0x80
 8005aba:	4817      	ldr	r0, [pc, #92]	@ (8005b18 <main+0x210>)
 8005abc:	f7fb fe7e 	bl	80017bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	4815      	ldr	r0, [pc, #84]	@ (8005b1c <main+0x214>)
 8005ac6:	f7fb fe79 	bl	80017bc <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(500);
 8005aca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005ace:	f7fb fb01 	bl	80010d4 <HAL_Delay>
  {
 8005ad2:	e747      	b.n	8005964 <main+0x5c>
 8005ad4:	f3af 8000 	nop.w
 8005ad8:	33333333 	.word	0x33333333
 8005adc:	40417333 	.word	0x40417333
 8005ae0:	9999999a 	.word	0x9999999a
 8005ae4:	3fb99999 	.word	0x3fb99999
 8005ae8:	2000021c 	.word	0x2000021c
 8005aec:	08009260 	.word	0x08009260
 8005af0:	08009270 	.word	0x08009270
 8005af4:	200002c4 	.word	0x200002c4
 8005af8:	2000039c 	.word	0x2000039c
 8005afc:	20000398 	.word	0x20000398
 8005b00:	08009284 	.word	0x08009284
 8005b04:	20000310 	.word	0x20000310
 8005b08:	0800928c 	.word	0x0800928c
 8005b0c:	200003a0 	.word	0x200003a0
 8005b10:	20000008 	.word	0x20000008
 8005b14:	0800929c 	.word	0x0800929c
 8005b18:	40020c00 	.word	0x40020c00
 8005b1c:	40020400 	.word	0x40020400

08005b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b094      	sub	sp, #80	@ 0x50
 8005b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b26:	f107 0320 	add.w	r3, r7, #32
 8005b2a:	2230      	movs	r2, #48	@ 0x30
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f001 fac1 	bl	80070b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b34:	f107 030c 	add.w	r3, r7, #12
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	605a      	str	r2, [r3, #4]
 8005b3e:	609a      	str	r2, [r3, #8]
 8005b40:	60da      	str	r2, [r3, #12]
 8005b42:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005b44:	f7fc fd90 	bl	8002668 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b48:	4b27      	ldr	r3, [pc, #156]	@ (8005be8 <SystemClock_Config+0xc8>)
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4c:	4a26      	ldr	r2, [pc, #152]	@ (8005be8 <SystemClock_Config+0xc8>)
 8005b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b54:	4b24      	ldr	r3, [pc, #144]	@ (8005be8 <SystemClock_Config+0xc8>)
 8005b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005b60:	4b22      	ldr	r3, [pc, #136]	@ (8005bec <SystemClock_Config+0xcc>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005b68:	4a20      	ldr	r2, [pc, #128]	@ (8005bec <SystemClock_Config+0xcc>)
 8005b6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	4b1e      	ldr	r3, [pc, #120]	@ (8005bec <SystemClock_Config+0xcc>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005b78:	607b      	str	r3, [r7, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005b80:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8005b84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b86:	2302      	movs	r3, #2
 8005b88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005b8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005b90:	2304      	movs	r3, #4
 8005b92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005b94:	2348      	movs	r3, #72	@ 0x48
 8005b96:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ba0:	f107 0320 	add.w	r3, r7, #32
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fc fd6f 	bl	8002688 <HAL_RCC_OscConfig>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005bb0:	f000 fa4c 	bl	800604c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005bb4:	230f      	movs	r3, #15
 8005bb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005bb8:	2302      	movs	r3, #2
 8005bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005bc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005bca:	f107 030c 	add.w	r3, r7, #12
 8005bce:	2102      	movs	r1, #2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fc fffd 	bl	8002bd0 <HAL_RCC_ClockConfig>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005bdc:	f000 fa36 	bl	800604c <Error_Handler>
  }
}
 8005be0:	bf00      	nop
 8005be2:	3750      	adds	r7, #80	@ 0x50
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40023800 	.word	0x40023800
 8005bec:	40007000 	.word	0x40007000

08005bf0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8005c64 <MX_I2C1_Init+0x74>)
 8005bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c68 <MX_I2C1_Init+0x78>)
 8005bf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8005bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8005c64 <MX_I2C1_Init+0x74>)
 8005bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8005c6c <MX_I2C1_Init+0x7c>)
 8005bfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005c00:	4b18      	ldr	r3, [pc, #96]	@ (8005c64 <MX_I2C1_Init+0x74>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c06:	4b17      	ldr	r3, [pc, #92]	@ (8005c64 <MX_I2C1_Init+0x74>)
 8005c08:	2201      	movs	r2, #1
 8005c0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c0c:	4b15      	ldr	r3, [pc, #84]	@ (8005c64 <MX_I2C1_Init+0x74>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005c12:	4b14      	ldr	r3, [pc, #80]	@ (8005c64 <MX_I2C1_Init+0x74>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005c18:	4b12      	ldr	r3, [pc, #72]	@ (8005c64 <MX_I2C1_Init+0x74>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c1e:	4b11      	ldr	r3, [pc, #68]	@ (8005c64 <MX_I2C1_Init+0x74>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c24:	4b0f      	ldr	r3, [pc, #60]	@ (8005c64 <MX_I2C1_Init+0x74>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005c2a:	480e      	ldr	r0, [pc, #56]	@ (8005c64 <MX_I2C1_Init+0x74>)
 8005c2c:	f7fb fde0 	bl	80017f0 <HAL_I2C_Init>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005c36:	f000 fa09 	bl	800604c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4809      	ldr	r0, [pc, #36]	@ (8005c64 <MX_I2C1_Init+0x74>)
 8005c3e:	f7fc fc7b 	bl	8002538 <HAL_I2CEx_ConfigAnalogFilter>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005c48:	f000 fa00 	bl	800604c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	4805      	ldr	r0, [pc, #20]	@ (8005c64 <MX_I2C1_Init+0x74>)
 8005c50:	f7fc fcbd 	bl	80025ce <HAL_I2CEx_ConfigDigitalFilter>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005c5a:	f000 f9f7 	bl	800604c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005c5e:	bf00      	nop
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	2000021c 	.word	0x2000021c
 8005c68:	40005400 	.word	0x40005400
 8005c6c:	00808cd2 	.word	0x00808cd2

08005c70 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8005c74:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce4 <MX_I2C4_Init+0x74>)
 8005c76:	4a1c      	ldr	r2, [pc, #112]	@ (8005ce8 <MX_I2C4_Init+0x78>)
 8005c78:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 8005c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce4 <MX_I2C4_Init+0x74>)
 8005c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cec <MX_I2C4_Init+0x7c>)
 8005c7e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8005c80:	4b18      	ldr	r3, [pc, #96]	@ (8005ce4 <MX_I2C4_Init+0x74>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c86:	4b17      	ldr	r3, [pc, #92]	@ (8005ce4 <MX_I2C4_Init+0x74>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c8c:	4b15      	ldr	r3, [pc, #84]	@ (8005ce4 <MX_I2C4_Init+0x74>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8005c92:	4b14      	ldr	r3, [pc, #80]	@ (8005ce4 <MX_I2C4_Init+0x74>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005c98:	4b12      	ldr	r3, [pc, #72]	@ (8005ce4 <MX_I2C4_Init+0x74>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c9e:	4b11      	ldr	r3, [pc, #68]	@ (8005ce4 <MX_I2C4_Init+0x74>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce4 <MX_I2C4_Init+0x74>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8005caa:	480e      	ldr	r0, [pc, #56]	@ (8005ce4 <MX_I2C4_Init+0x74>)
 8005cac:	f7fb fda0 	bl	80017f0 <HAL_I2C_Init>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8005cb6:	f000 f9c9 	bl	800604c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005cba:	2100      	movs	r1, #0
 8005cbc:	4809      	ldr	r0, [pc, #36]	@ (8005ce4 <MX_I2C4_Init+0x74>)
 8005cbe:	f7fc fc3b 	bl	8002538 <HAL_I2CEx_ConfigAnalogFilter>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8005cc8:	f000 f9c0 	bl	800604c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8005ccc:	2100      	movs	r1, #0
 8005cce:	4805      	ldr	r0, [pc, #20]	@ (8005ce4 <MX_I2C4_Init+0x74>)
 8005cd0:	f7fc fc7d 	bl	80025ce <HAL_I2CEx_ConfigDigitalFilter>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8005cda:	f000 f9b7 	bl	800604c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8005cde:	bf00      	nop
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000270 	.word	0x20000270
 8005ce8:	40006000 	.word	0x40006000
 8005cec:	00808cd2 	.word	0x00808cd2

08005cf0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b08c      	sub	sp, #48	@ 0x30
 8005cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005cf6:	f107 030c 	add.w	r3, r7, #12
 8005cfa:	2224      	movs	r2, #36	@ 0x24
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 f9d9 	bl	80070b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d04:	463b      	mov	r3, r7
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	605a      	str	r2, [r3, #4]
 8005d0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005d0e:	4b23      	ldr	r3, [pc, #140]	@ (8005d9c <MX_TIM1_Init+0xac>)
 8005d10:	4a23      	ldr	r2, [pc, #140]	@ (8005da0 <MX_TIM1_Init+0xb0>)
 8005d12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005d14:	4b21      	ldr	r3, [pc, #132]	@ (8005d9c <MX_TIM1_Init+0xac>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d1a:	4b20      	ldr	r3, [pc, #128]	@ (8005d9c <MX_TIM1_Init+0xac>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 8005d20:	4b1e      	ldr	r3, [pc, #120]	@ (8005d9c <MX_TIM1_Init+0xac>)
 8005d22:	2214      	movs	r2, #20
 8005d24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d26:	4b1d      	ldr	r3, [pc, #116]	@ (8005d9c <MX_TIM1_Init+0xac>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8005d9c <MX_TIM1_Init+0xac>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d32:	4b1a      	ldr	r3, [pc, #104]	@ (8005d9c <MX_TIM1_Init+0xac>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005d40:	2301      	movs	r3, #1
 8005d42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005d44:	2300      	movs	r3, #0
 8005d46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 7;
 8005d48:	2307      	movs	r3, #7
 8005d4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005d50:	2301      	movs	r3, #1
 8005d52:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005d54:	2300      	movs	r3, #0
 8005d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 7;
 8005d58:	2307      	movs	r3, #7
 8005d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005d5c:	f107 030c 	add.w	r3, r7, #12
 8005d60:	4619      	mov	r1, r3
 8005d62:	480e      	ldr	r0, [pc, #56]	@ (8005d9c <MX_TIM1_Init+0xac>)
 8005d64:	f7fd fd4a 	bl	80037fc <HAL_TIM_Encoder_Init>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8005d6e:	f000 f96d 	bl	800604c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d72:	2300      	movs	r3, #0
 8005d74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005d76:	2300      	movs	r3, #0
 8005d78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005d7e:	463b      	mov	r3, r7
 8005d80:	4619      	mov	r1, r3
 8005d82:	4806      	ldr	r0, [pc, #24]	@ (8005d9c <MX_TIM1_Init+0xac>)
 8005d84:	f7fd ff40 	bl	8003c08 <HAL_TIMEx_MasterConfigSynchronization>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8005d8e:	f000 f95d 	bl	800604c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005d92:	bf00      	nop
 8005d94:	3730      	adds	r7, #48	@ 0x30
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	200002c4 	.word	0x200002c4
 8005da0:	40010000 	.word	0x40010000

08005da4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005da8:	4b14      	ldr	r3, [pc, #80]	@ (8005dfc <MX_USART3_UART_Init+0x58>)
 8005daa:	4a15      	ldr	r2, [pc, #84]	@ (8005e00 <MX_USART3_UART_Init+0x5c>)
 8005dac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005dae:	4b13      	ldr	r3, [pc, #76]	@ (8005dfc <MX_USART3_UART_Init+0x58>)
 8005db0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005db4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005db6:	4b11      	ldr	r3, [pc, #68]	@ (8005dfc <MX_USART3_UART_Init+0x58>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8005dfc <MX_USART3_UART_Init+0x58>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8005dfc <MX_USART3_UART_Init+0x58>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005dfc <MX_USART3_UART_Init+0x58>)
 8005dca:	220c      	movs	r2, #12
 8005dcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005dce:	4b0b      	ldr	r3, [pc, #44]	@ (8005dfc <MX_USART3_UART_Init+0x58>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005dd4:	4b09      	ldr	r3, [pc, #36]	@ (8005dfc <MX_USART3_UART_Init+0x58>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005dda:	4b08      	ldr	r3, [pc, #32]	@ (8005dfc <MX_USART3_UART_Init+0x58>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005de0:	4b06      	ldr	r3, [pc, #24]	@ (8005dfc <MX_USART3_UART_Init+0x58>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005de6:	4805      	ldr	r0, [pc, #20]	@ (8005dfc <MX_USART3_UART_Init+0x58>)
 8005de8:	f7fd ff9c 	bl	8003d24 <HAL_UART_Init>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005df2:	f000 f92b 	bl	800604c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005df6:	bf00      	nop
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20000310 	.word	0x20000310
 8005e00:	40004800 	.word	0x40004800

08005e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08c      	sub	sp, #48	@ 0x30
 8005e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e0a:	f107 031c 	add.w	r3, r7, #28
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	605a      	str	r2, [r3, #4]
 8005e14:	609a      	str	r2, [r3, #8]
 8005e16:	60da      	str	r2, [r3, #12]
 8005e18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e1a:	4b86      	ldr	r3, [pc, #536]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1e:	4a85      	ldr	r2, [pc, #532]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e20:	f043 0304 	orr.w	r3, r3, #4
 8005e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e26:	4b83      	ldr	r3, [pc, #524]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005e32:	4b80      	ldr	r3, [pc, #512]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e36:	4a7f      	ldr	r2, [pc, #508]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e3e:	4b7d      	ldr	r3, [pc, #500]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e4a:	4b7a      	ldr	r3, [pc, #488]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4e:	4a79      	ldr	r2, [pc, #484]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e50:	f043 0301 	orr.w	r3, r3, #1
 8005e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e56:	4b77      	ldr	r3, [pc, #476]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	613b      	str	r3, [r7, #16]
 8005e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e62:	4b74      	ldr	r3, [pc, #464]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e66:	4a73      	ldr	r2, [pc, #460]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e68:	f043 0302 	orr.w	r3, r3, #2
 8005e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e6e:	4b71      	ldr	r3, [pc, #452]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e7a:	4b6e      	ldr	r3, [pc, #440]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7e:	4a6d      	ldr	r2, [pc, #436]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e80:	f043 0310 	orr.w	r3, r3, #16
 8005e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e86:	4b6b      	ldr	r3, [pc, #428]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e8a:	f003 0310 	and.w	r3, r3, #16
 8005e8e:	60bb      	str	r3, [r7, #8]
 8005e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e92:	4b68      	ldr	r3, [pc, #416]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e96:	4a67      	ldr	r2, [pc, #412]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005e98:	f043 0308 	orr.w	r3, r3, #8
 8005e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e9e:	4b65      	ldr	r3, [pc, #404]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	607b      	str	r3, [r7, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005eaa:	4b62      	ldr	r3, [pc, #392]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eae:	4a61      	ldr	r2, [pc, #388]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8006034 <MX_GPIO_Init+0x230>)
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ebe:	603b      	str	r3, [r7, #0]
 8005ec0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8005ec8:	485b      	ldr	r0, [pc, #364]	@ (8006038 <MX_GPIO_Init+0x234>)
 8005eca:	f7fb fc77 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005ece:	2200      	movs	r2, #0
 8005ed0:	2140      	movs	r1, #64	@ 0x40
 8005ed2:	485a      	ldr	r0, [pc, #360]	@ (800603c <MX_GPIO_Init+0x238>)
 8005ed4:	f7fb fc72 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2180      	movs	r1, #128	@ 0x80
 8005edc:	4858      	ldr	r0, [pc, #352]	@ (8006040 <MX_GPIO_Init+0x23c>)
 8005ede:	f7fb fc6d 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005ee2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005ee8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005ef2:	f107 031c 	add.w	r3, r7, #28
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4852      	ldr	r0, [pc, #328]	@ (8006044 <MX_GPIO_Init+0x240>)
 8005efa:	f7fb fab3 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005efe:	2332      	movs	r3, #50	@ 0x32
 8005f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f02:	2302      	movs	r3, #2
 8005f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f0e:	230b      	movs	r3, #11
 8005f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f12:	f107 031c 	add.w	r3, r7, #28
 8005f16:	4619      	mov	r1, r3
 8005f18:	484a      	ldr	r0, [pc, #296]	@ (8006044 <MX_GPIO_Init+0x240>)
 8005f1a:	f7fb faa3 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005f1e:	2386      	movs	r3, #134	@ 0x86
 8005f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f22:	2302      	movs	r3, #2
 8005f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f2e:	230b      	movs	r3, #11
 8005f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f32:	f107 031c 	add.w	r3, r7, #28
 8005f36:	4619      	mov	r1, r3
 8005f38:	4843      	ldr	r0, [pc, #268]	@ (8006048 <MX_GPIO_Init+0x244>)
 8005f3a:	f7fb fa93 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8005f3e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8005f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f44:	2301      	movs	r3, #1
 8005f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f50:	f107 031c 	add.w	r3, r7, #28
 8005f54:	4619      	mov	r1, r3
 8005f56:	4838      	ldr	r0, [pc, #224]	@ (8006038 <MX_GPIO_Init+0x234>)
 8005f58:	f7fb fa84 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005f5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f62:	2302      	movs	r3, #2
 8005f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f6e:	230b      	movs	r3, #11
 8005f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005f72:	f107 031c 	add.w	r3, r7, #28
 8005f76:	4619      	mov	r1, r3
 8005f78:	482f      	ldr	r0, [pc, #188]	@ (8006038 <MX_GPIO_Init+0x234>)
 8005f7a:	f7fb fa73 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005f7e:	2340      	movs	r3, #64	@ 0x40
 8005f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f82:	2301      	movs	r3, #1
 8005f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005f8e:	f107 031c 	add.w	r3, r7, #28
 8005f92:	4619      	mov	r1, r3
 8005f94:	4829      	ldr	r0, [pc, #164]	@ (800603c <MX_GPIO_Init+0x238>)
 8005f96:	f7fb fa65 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005f9a:	2380      	movs	r3, #128	@ 0x80
 8005f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005fa6:	f107 031c 	add.w	r3, r7, #28
 8005faa:	4619      	mov	r1, r3
 8005fac:	4823      	ldr	r0, [pc, #140]	@ (800603c <MX_GPIO_Init+0x238>)
 8005fae:	f7fb fa59 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005fb2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8005fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fb8:	2302      	movs	r3, #2
 8005fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005fc4:	230a      	movs	r3, #10
 8005fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fc8:	f107 031c 	add.w	r3, r7, #28
 8005fcc:	4619      	mov	r1, r3
 8005fce:	481e      	ldr	r0, [pc, #120]	@ (8006048 <MX_GPIO_Init+0x244>)
 8005fd0:	f7fb fa48 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005fd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005fe2:	f107 031c 	add.w	r3, r7, #28
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4817      	ldr	r0, [pc, #92]	@ (8006048 <MX_GPIO_Init+0x244>)
 8005fea:	f7fb fa3b 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005fee:	2380      	movs	r3, #128	@ 0x80
 8005ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ffe:	f107 031c 	add.w	r3, r7, #28
 8006002:	4619      	mov	r1, r3
 8006004:	480e      	ldr	r0, [pc, #56]	@ (8006040 <MX_GPIO_Init+0x23c>)
 8006006:	f7fb fa2d 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800600a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800600e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006010:	2302      	movs	r3, #2
 8006012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006014:	2300      	movs	r3, #0
 8006016:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006018:	2303      	movs	r3, #3
 800601a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800601c:	230b      	movs	r3, #11
 800601e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006020:	f107 031c 	add.w	r3, r7, #28
 8006024:	4619      	mov	r1, r3
 8006026:	4805      	ldr	r0, [pc, #20]	@ (800603c <MX_GPIO_Init+0x238>)
 8006028:	f7fb fa1c 	bl	8001464 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800602c:	bf00      	nop
 800602e:	3730      	adds	r7, #48	@ 0x30
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	40023800 	.word	0x40023800
 8006038:	40020400 	.word	0x40020400
 800603c:	40021800 	.word	0x40021800
 8006040:	40020c00 	.word	0x40020c00
 8006044:	40020800 	.word	0x40020800
 8006048:	40020000 	.word	0x40020000

0800604c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006050:	b672      	cpsid	i
}
 8006052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006054:	bf00      	nop
 8006056:	e7fd      	b.n	8006054 <Error_Handler+0x8>

08006058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800605e:	4b0f      	ldr	r3, [pc, #60]	@ (800609c <HAL_MspInit+0x44>)
 8006060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006062:	4a0e      	ldr	r2, [pc, #56]	@ (800609c <HAL_MspInit+0x44>)
 8006064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006068:	6413      	str	r3, [r2, #64]	@ 0x40
 800606a:	4b0c      	ldr	r3, [pc, #48]	@ (800609c <HAL_MspInit+0x44>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006072:	607b      	str	r3, [r7, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006076:	4b09      	ldr	r3, [pc, #36]	@ (800609c <HAL_MspInit+0x44>)
 8006078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607a:	4a08      	ldr	r2, [pc, #32]	@ (800609c <HAL_MspInit+0x44>)
 800607c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006080:	6453      	str	r3, [r2, #68]	@ 0x44
 8006082:	4b06      	ldr	r3, [pc, #24]	@ (800609c <HAL_MspInit+0x44>)
 8006084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40023800 	.word	0x40023800

080060a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b0ac      	sub	sp, #176	@ 0xb0
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80060ac:	2200      	movs	r2, #0
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	605a      	str	r2, [r3, #4]
 80060b2:	609a      	str	r2, [r3, #8]
 80060b4:	60da      	str	r2, [r3, #12]
 80060b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80060b8:	f107 0318 	add.w	r3, r7, #24
 80060bc:	2284      	movs	r2, #132	@ 0x84
 80060be:	2100      	movs	r1, #0
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fff8 	bl	80070b6 <memset>
  if(hi2c->Instance==I2C1)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a44      	ldr	r2, [pc, #272]	@ (80061dc <HAL_I2C_MspInit+0x13c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d13d      	bne.n	800614c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80060d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80060d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80060d6:	2300      	movs	r3, #0
 80060d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060da:	f107 0318 	add.w	r3, r7, #24
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fc ff9c 	bl	800301c <HAL_RCCEx_PeriphCLKConfig>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80060ea:	f7ff ffaf 	bl	800604c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060ee:	4b3c      	ldr	r3, [pc, #240]	@ (80061e0 <HAL_I2C_MspInit+0x140>)
 80060f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f2:	4a3b      	ldr	r2, [pc, #236]	@ (80061e0 <HAL_I2C_MspInit+0x140>)
 80060f4:	f043 0302 	orr.w	r3, r3, #2
 80060f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80060fa:	4b39      	ldr	r3, [pc, #228]	@ (80061e0 <HAL_I2C_MspInit+0x140>)
 80060fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006106:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800610a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800610e:	2312      	movs	r3, #18
 8006110:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006114:	2300      	movs	r3, #0
 8006116:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800611a:	2303      	movs	r3, #3
 800611c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006120:	2304      	movs	r3, #4
 8006122:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006126:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800612a:	4619      	mov	r1, r3
 800612c:	482d      	ldr	r0, [pc, #180]	@ (80061e4 <HAL_I2C_MspInit+0x144>)
 800612e:	f7fb f999 	bl	8001464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006132:	4b2b      	ldr	r3, [pc, #172]	@ (80061e0 <HAL_I2C_MspInit+0x140>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006136:	4a2a      	ldr	r2, [pc, #168]	@ (80061e0 <HAL_I2C_MspInit+0x140>)
 8006138:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800613c:	6413      	str	r3, [r2, #64]	@ 0x40
 800613e:	4b28      	ldr	r3, [pc, #160]	@ (80061e0 <HAL_I2C_MspInit+0x140>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006142:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800614a:	e042      	b.n	80061d2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C4)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a25      	ldr	r2, [pc, #148]	@ (80061e8 <HAL_I2C_MspInit+0x148>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d13d      	bne.n	80061d2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8006156:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800615a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800615c:	2300      	movs	r3, #0
 800615e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006162:	f107 0318 	add.w	r3, r7, #24
 8006166:	4618      	mov	r0, r3
 8006168:	f7fc ff58 	bl	800301c <HAL_RCCEx_PeriphCLKConfig>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8006172:	f7ff ff6b 	bl	800604c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006176:	4b1a      	ldr	r3, [pc, #104]	@ (80061e0 <HAL_I2C_MspInit+0x140>)
 8006178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617a:	4a19      	ldr	r2, [pc, #100]	@ (80061e0 <HAL_I2C_MspInit+0x140>)
 800617c:	f043 0308 	orr.w	r3, r3, #8
 8006180:	6313      	str	r3, [r2, #48]	@ 0x30
 8006182:	4b17      	ldr	r3, [pc, #92]	@ (80061e0 <HAL_I2C_MspInit+0x140>)
 8006184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800618e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006196:	2312      	movs	r3, #18
 8006198:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800619c:	2300      	movs	r3, #0
 800619e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061a2:	2303      	movs	r3, #3
 80061a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80061a8:	2304      	movs	r3, #4
 80061aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80061ae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80061b2:	4619      	mov	r1, r3
 80061b4:	480d      	ldr	r0, [pc, #52]	@ (80061ec <HAL_I2C_MspInit+0x14c>)
 80061b6:	f7fb f955 	bl	8001464 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80061ba:	4b09      	ldr	r3, [pc, #36]	@ (80061e0 <HAL_I2C_MspInit+0x140>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061be:	4a08      	ldr	r2, [pc, #32]	@ (80061e0 <HAL_I2C_MspInit+0x140>)
 80061c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80061c6:	4b06      	ldr	r3, [pc, #24]	@ (80061e0 <HAL_I2C_MspInit+0x140>)
 80061c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061ce:	60bb      	str	r3, [r7, #8]
 80061d0:	68bb      	ldr	r3, [r7, #8]
}
 80061d2:	bf00      	nop
 80061d4:	37b0      	adds	r7, #176	@ 0xb0
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	40005400 	.word	0x40005400
 80061e0:	40023800 	.word	0x40023800
 80061e4:	40020400 	.word	0x40020400
 80061e8:	40006000 	.word	0x40006000
 80061ec:	40020c00 	.word	0x40020c00

080061f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08a      	sub	sp, #40	@ 0x28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061f8:	f107 0314 	add.w	r3, r7, #20
 80061fc:	2200      	movs	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	605a      	str	r2, [r3, #4]
 8006202:	609a      	str	r2, [r3, #8]
 8006204:	60da      	str	r2, [r3, #12]
 8006206:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a17      	ldr	r2, [pc, #92]	@ (800626c <HAL_TIM_Encoder_MspInit+0x7c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d128      	bne.n	8006264 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006212:	4b17      	ldr	r3, [pc, #92]	@ (8006270 <HAL_TIM_Encoder_MspInit+0x80>)
 8006214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006216:	4a16      	ldr	r2, [pc, #88]	@ (8006270 <HAL_TIM_Encoder_MspInit+0x80>)
 8006218:	f043 0301 	orr.w	r3, r3, #1
 800621c:	6453      	str	r3, [r2, #68]	@ 0x44
 800621e:	4b14      	ldr	r3, [pc, #80]	@ (8006270 <HAL_TIM_Encoder_MspInit+0x80>)
 8006220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800622a:	4b11      	ldr	r3, [pc, #68]	@ (8006270 <HAL_TIM_Encoder_MspInit+0x80>)
 800622c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800622e:	4a10      	ldr	r2, [pc, #64]	@ (8006270 <HAL_TIM_Encoder_MspInit+0x80>)
 8006230:	f043 0310 	orr.w	r3, r3, #16
 8006234:	6313      	str	r3, [r2, #48]	@ 0x30
 8006236:	4b0e      	ldr	r3, [pc, #56]	@ (8006270 <HAL_TIM_Encoder_MspInit+0x80>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006242:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8006246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006248:	2302      	movs	r3, #2
 800624a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800624c:	2300      	movs	r3, #0
 800624e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006250:	2300      	movs	r3, #0
 8006252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006254:	2301      	movs	r3, #1
 8006256:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006258:	f107 0314 	add.w	r3, r7, #20
 800625c:	4619      	mov	r1, r3
 800625e:	4805      	ldr	r0, [pc, #20]	@ (8006274 <HAL_TIM_Encoder_MspInit+0x84>)
 8006260:	f7fb f900 	bl	8001464 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8006264:	bf00      	nop
 8006266:	3728      	adds	r7, #40	@ 0x28
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	40010000 	.word	0x40010000
 8006270:	40023800 	.word	0x40023800
 8006274:	40021000 	.word	0x40021000

08006278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b0aa      	sub	sp, #168	@ 0xa8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006280:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	609a      	str	r2, [r3, #8]
 800628c:	60da      	str	r2, [r3, #12]
 800628e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006290:	f107 0310 	add.w	r3, r7, #16
 8006294:	2284      	movs	r2, #132	@ 0x84
 8006296:	2100      	movs	r1, #0
 8006298:	4618      	mov	r0, r3
 800629a:	f000 ff0c 	bl	80070b6 <memset>
  if(huart->Instance==USART3)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a26      	ldr	r2, [pc, #152]	@ (800633c <HAL_UART_MspInit+0xc4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d144      	bne.n	8006332 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80062a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80062ae:	2300      	movs	r3, #0
 80062b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062b2:	f107 0310 	add.w	r3, r7, #16
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fc feb0 	bl	800301c <HAL_RCCEx_PeriphCLKConfig>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80062c2:	f7ff fec3 	bl	800604c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80062c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006340 <HAL_UART_MspInit+0xc8>)
 80062c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006340 <HAL_UART_MspInit+0xc8>)
 80062cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80062d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006340 <HAL_UART_MspInit+0xc8>)
 80062d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80062de:	4b18      	ldr	r3, [pc, #96]	@ (8006340 <HAL_UART_MspInit+0xc8>)
 80062e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e2:	4a17      	ldr	r2, [pc, #92]	@ (8006340 <HAL_UART_MspInit+0xc8>)
 80062e4:	f043 0308 	orr.w	r3, r3, #8
 80062e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80062ea:	4b15      	ldr	r3, [pc, #84]	@ (8006340 <HAL_UART_MspInit+0xc8>)
 80062ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	60bb      	str	r3, [r7, #8]
 80062f4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80062f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80062fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062fe:	2302      	movs	r3, #2
 8006300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006304:	2300      	movs	r3, #0
 8006306:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800630a:	2303      	movs	r3, #3
 800630c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006310:	2307      	movs	r3, #7
 8006312:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006316:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800631a:	4619      	mov	r1, r3
 800631c:	4809      	ldr	r0, [pc, #36]	@ (8006344 <HAL_UART_MspInit+0xcc>)
 800631e:	f7fb f8a1 	bl	8001464 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006322:	2200      	movs	r2, #0
 8006324:	2100      	movs	r1, #0
 8006326:	2027      	movs	r0, #39	@ 0x27
 8006328:	f7fa ffd3 	bl	80012d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800632c:	2027      	movs	r0, #39	@ 0x27
 800632e:	f7fa ffec 	bl	800130a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8006332:	bf00      	nop
 8006334:	37a8      	adds	r7, #168	@ 0xa8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	40004800 	.word	0x40004800
 8006340:	40023800 	.word	0x40023800
 8006344:	40020c00 	.word	0x40020c00

08006348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800634c:	bf00      	nop
 800634e:	e7fd      	b.n	800634c <NMI_Handler+0x4>

08006350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006354:	bf00      	nop
 8006356:	e7fd      	b.n	8006354 <HardFault_Handler+0x4>

08006358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800635c:	bf00      	nop
 800635e:	e7fd      	b.n	800635c <MemManage_Handler+0x4>

08006360 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006364:	bf00      	nop
 8006366:	e7fd      	b.n	8006364 <BusFault_Handler+0x4>

08006368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800636c:	bf00      	nop
 800636e:	e7fd      	b.n	800636c <UsageFault_Handler+0x4>

08006370 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006374:	bf00      	nop
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800637e:	b480      	push	{r7}
 8006380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006382:	bf00      	nop
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006390:	bf00      	nop
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800639e:	f7fa fe79 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063a2:	bf00      	nop
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80063ac:	4802      	ldr	r0, [pc, #8]	@ (80063b8 <USART3_IRQHandler+0x10>)
 80063ae:	f7fd fd91 	bl	8003ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80063b2:	bf00      	nop
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000310 	.word	0x20000310

080063bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  return 1;
 80063c0:	2301      	movs	r3, #1
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <_kill>:

int _kill(int pid, int sig)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80063d6:	f000 fec1 	bl	800715c <__errno>
 80063da:	4603      	mov	r3, r0
 80063dc:	2216      	movs	r2, #22
 80063de:	601a      	str	r2, [r3, #0]
  return -1;
 80063e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <_exit>:

void _exit (int status)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80063f4:	f04f 31ff 	mov.w	r1, #4294967295
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff ffe7 	bl	80063cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80063fe:	bf00      	nop
 8006400:	e7fd      	b.n	80063fe <_exit+0x12>

08006402 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b086      	sub	sp, #24
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800640e:	2300      	movs	r3, #0
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	e00a      	b.n	800642a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006414:	f3af 8000 	nop.w
 8006418:	4601      	mov	r1, r0
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	60ba      	str	r2, [r7, #8]
 8006420:	b2ca      	uxtb	r2, r1
 8006422:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	3301      	adds	r3, #1
 8006428:	617b      	str	r3, [r7, #20]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	429a      	cmp	r2, r3
 8006430:	dbf0      	blt.n	8006414 <_read+0x12>
  }

  return len;
 8006432:	687b      	ldr	r3, [r7, #4]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	e009      	b.n	8006462 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	60ba      	str	r2, [r7, #8]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	4618      	mov	r0, r3
 8006458:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	3301      	adds	r3, #1
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	429a      	cmp	r2, r3
 8006468:	dbf1      	blt.n	800644e <_write+0x12>
  }
  return len;
 800646a:	687b      	ldr	r3, [r7, #4]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <_close>:

int _close(int file)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800647c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800649c:	605a      	str	r2, [r3, #4]
  return 0;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <_isatty>:

int _isatty(int file)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80064b4:	2301      	movs	r3, #1
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	60f8      	str	r0, [r7, #12]
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80064e4:	4a14      	ldr	r2, [pc, #80]	@ (8006538 <_sbrk+0x5c>)
 80064e6:	4b15      	ldr	r3, [pc, #84]	@ (800653c <_sbrk+0x60>)
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80064f0:	4b13      	ldr	r3, [pc, #76]	@ (8006540 <_sbrk+0x64>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d102      	bne.n	80064fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80064f8:	4b11      	ldr	r3, [pc, #68]	@ (8006540 <_sbrk+0x64>)
 80064fa:	4a12      	ldr	r2, [pc, #72]	@ (8006544 <_sbrk+0x68>)
 80064fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80064fe:	4b10      	ldr	r3, [pc, #64]	@ (8006540 <_sbrk+0x64>)
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4413      	add	r3, r2
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	429a      	cmp	r2, r3
 800650a:	d207      	bcs.n	800651c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800650c:	f000 fe26 	bl	800715c <__errno>
 8006510:	4603      	mov	r3, r0
 8006512:	220c      	movs	r2, #12
 8006514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006516:	f04f 33ff 	mov.w	r3, #4294967295
 800651a:	e009      	b.n	8006530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800651c:	4b08      	ldr	r3, [pc, #32]	@ (8006540 <_sbrk+0x64>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006522:	4b07      	ldr	r3, [pc, #28]	@ (8006540 <_sbrk+0x64>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4413      	add	r3, r2
 800652a:	4a05      	ldr	r2, [pc, #20]	@ (8006540 <_sbrk+0x64>)
 800652c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800652e:	68fb      	ldr	r3, [r7, #12]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20050000 	.word	0x20050000
 800653c:	00000400 	.word	0x00000400
 8006540:	200003a4 	.word	0x200003a4
 8006544:	200004f8 	.word	0x200004f8

08006548 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800654c:	4b06      	ldr	r3, [pc, #24]	@ (8006568 <SystemInit+0x20>)
 800654e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006552:	4a05      	ldr	r2, [pc, #20]	@ (8006568 <SystemInit+0x20>)
 8006554:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006558:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800655c:	bf00      	nop
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	e000ed00 	.word	0xe000ed00

0800656c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800656c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80065a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006570:	f7ff ffea 	bl	8006548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006574:	480c      	ldr	r0, [pc, #48]	@ (80065a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006576:	490d      	ldr	r1, [pc, #52]	@ (80065ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006578:	4a0d      	ldr	r2, [pc, #52]	@ (80065b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800657a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800657c:	e002      	b.n	8006584 <LoopCopyDataInit>

0800657e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800657e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006582:	3304      	adds	r3, #4

08006584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006588:	d3f9      	bcc.n	800657e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800658a:	4a0a      	ldr	r2, [pc, #40]	@ (80065b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800658c:	4c0a      	ldr	r4, [pc, #40]	@ (80065b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800658e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006590:	e001      	b.n	8006596 <LoopFillZerobss>

08006592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006594:	3204      	adds	r2, #4

08006596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006598:	d3fb      	bcc.n	8006592 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800659a:	f000 fde5 	bl	8007168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800659e:	f7ff f9b3 	bl	8005908 <main>
  bx  lr    
 80065a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80065a4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80065a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80065ac:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80065b0:	08009648 	.word	0x08009648
  ldr r2, =_sbss
 80065b4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80065b8:	200004f4 	.word	0x200004f4

080065bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065bc:	e7fe      	b.n	80065bc <ADC_IRQHandler>

080065be <__cvt>:
 80065be:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065c2:	ec57 6b10 	vmov	r6, r7, d0
 80065c6:	2f00      	cmp	r7, #0
 80065c8:	460c      	mov	r4, r1
 80065ca:	4619      	mov	r1, r3
 80065cc:	463b      	mov	r3, r7
 80065ce:	bfbb      	ittet	lt
 80065d0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80065d4:	461f      	movlt	r7, r3
 80065d6:	2300      	movge	r3, #0
 80065d8:	232d      	movlt	r3, #45	@ 0x2d
 80065da:	700b      	strb	r3, [r1, #0]
 80065dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065de:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80065e2:	4691      	mov	r9, r2
 80065e4:	f023 0820 	bic.w	r8, r3, #32
 80065e8:	bfbc      	itt	lt
 80065ea:	4632      	movlt	r2, r6
 80065ec:	4616      	movlt	r6, r2
 80065ee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065f2:	d005      	beq.n	8006600 <__cvt+0x42>
 80065f4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80065f8:	d100      	bne.n	80065fc <__cvt+0x3e>
 80065fa:	3401      	adds	r4, #1
 80065fc:	2102      	movs	r1, #2
 80065fe:	e000      	b.n	8006602 <__cvt+0x44>
 8006600:	2103      	movs	r1, #3
 8006602:	ab03      	add	r3, sp, #12
 8006604:	9301      	str	r3, [sp, #4]
 8006606:	ab02      	add	r3, sp, #8
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	ec47 6b10 	vmov	d0, r6, r7
 800660e:	4653      	mov	r3, sl
 8006610:	4622      	mov	r2, r4
 8006612:	f000 fe59 	bl	80072c8 <_dtoa_r>
 8006616:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800661a:	4605      	mov	r5, r0
 800661c:	d119      	bne.n	8006652 <__cvt+0x94>
 800661e:	f019 0f01 	tst.w	r9, #1
 8006622:	d00e      	beq.n	8006642 <__cvt+0x84>
 8006624:	eb00 0904 	add.w	r9, r0, r4
 8006628:	2200      	movs	r2, #0
 800662a:	2300      	movs	r3, #0
 800662c:	4630      	mov	r0, r6
 800662e:	4639      	mov	r1, r7
 8006630:	f7fa fa6a 	bl	8000b08 <__aeabi_dcmpeq>
 8006634:	b108      	cbz	r0, 800663a <__cvt+0x7c>
 8006636:	f8cd 900c 	str.w	r9, [sp, #12]
 800663a:	2230      	movs	r2, #48	@ 0x30
 800663c:	9b03      	ldr	r3, [sp, #12]
 800663e:	454b      	cmp	r3, r9
 8006640:	d31e      	bcc.n	8006680 <__cvt+0xc2>
 8006642:	9b03      	ldr	r3, [sp, #12]
 8006644:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006646:	1b5b      	subs	r3, r3, r5
 8006648:	4628      	mov	r0, r5
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	b004      	add	sp, #16
 800664e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006652:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006656:	eb00 0904 	add.w	r9, r0, r4
 800665a:	d1e5      	bne.n	8006628 <__cvt+0x6a>
 800665c:	7803      	ldrb	r3, [r0, #0]
 800665e:	2b30      	cmp	r3, #48	@ 0x30
 8006660:	d10a      	bne.n	8006678 <__cvt+0xba>
 8006662:	2200      	movs	r2, #0
 8006664:	2300      	movs	r3, #0
 8006666:	4630      	mov	r0, r6
 8006668:	4639      	mov	r1, r7
 800666a:	f7fa fa4d 	bl	8000b08 <__aeabi_dcmpeq>
 800666e:	b918      	cbnz	r0, 8006678 <__cvt+0xba>
 8006670:	f1c4 0401 	rsb	r4, r4, #1
 8006674:	f8ca 4000 	str.w	r4, [sl]
 8006678:	f8da 3000 	ldr.w	r3, [sl]
 800667c:	4499      	add	r9, r3
 800667e:	e7d3      	b.n	8006628 <__cvt+0x6a>
 8006680:	1c59      	adds	r1, r3, #1
 8006682:	9103      	str	r1, [sp, #12]
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	e7d9      	b.n	800663c <__cvt+0x7e>

08006688 <__exponent>:
 8006688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800668a:	2900      	cmp	r1, #0
 800668c:	bfba      	itte	lt
 800668e:	4249      	neglt	r1, r1
 8006690:	232d      	movlt	r3, #45	@ 0x2d
 8006692:	232b      	movge	r3, #43	@ 0x2b
 8006694:	2909      	cmp	r1, #9
 8006696:	7002      	strb	r2, [r0, #0]
 8006698:	7043      	strb	r3, [r0, #1]
 800669a:	dd29      	ble.n	80066f0 <__exponent+0x68>
 800669c:	f10d 0307 	add.w	r3, sp, #7
 80066a0:	461d      	mov	r5, r3
 80066a2:	270a      	movs	r7, #10
 80066a4:	461a      	mov	r2, r3
 80066a6:	fbb1 f6f7 	udiv	r6, r1, r7
 80066aa:	fb07 1416 	mls	r4, r7, r6, r1
 80066ae:	3430      	adds	r4, #48	@ 0x30
 80066b0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80066b4:	460c      	mov	r4, r1
 80066b6:	2c63      	cmp	r4, #99	@ 0x63
 80066b8:	f103 33ff 	add.w	r3, r3, #4294967295
 80066bc:	4631      	mov	r1, r6
 80066be:	dcf1      	bgt.n	80066a4 <__exponent+0x1c>
 80066c0:	3130      	adds	r1, #48	@ 0x30
 80066c2:	1e94      	subs	r4, r2, #2
 80066c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80066c8:	1c41      	adds	r1, r0, #1
 80066ca:	4623      	mov	r3, r4
 80066cc:	42ab      	cmp	r3, r5
 80066ce:	d30a      	bcc.n	80066e6 <__exponent+0x5e>
 80066d0:	f10d 0309 	add.w	r3, sp, #9
 80066d4:	1a9b      	subs	r3, r3, r2
 80066d6:	42ac      	cmp	r4, r5
 80066d8:	bf88      	it	hi
 80066da:	2300      	movhi	r3, #0
 80066dc:	3302      	adds	r3, #2
 80066de:	4403      	add	r3, r0
 80066e0:	1a18      	subs	r0, r3, r0
 80066e2:	b003      	add	sp, #12
 80066e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066e6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80066ea:	f801 6f01 	strb.w	r6, [r1, #1]!
 80066ee:	e7ed      	b.n	80066cc <__exponent+0x44>
 80066f0:	2330      	movs	r3, #48	@ 0x30
 80066f2:	3130      	adds	r1, #48	@ 0x30
 80066f4:	7083      	strb	r3, [r0, #2]
 80066f6:	70c1      	strb	r1, [r0, #3]
 80066f8:	1d03      	adds	r3, r0, #4
 80066fa:	e7f1      	b.n	80066e0 <__exponent+0x58>

080066fc <_printf_float>:
 80066fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006700:	b08d      	sub	sp, #52	@ 0x34
 8006702:	460c      	mov	r4, r1
 8006704:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006708:	4616      	mov	r6, r2
 800670a:	461f      	mov	r7, r3
 800670c:	4605      	mov	r5, r0
 800670e:	f000 fcdb 	bl	80070c8 <_localeconv_r>
 8006712:	6803      	ldr	r3, [r0, #0]
 8006714:	9304      	str	r3, [sp, #16]
 8006716:	4618      	mov	r0, r3
 8006718:	f7f9 fdca 	bl	80002b0 <strlen>
 800671c:	2300      	movs	r3, #0
 800671e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006720:	f8d8 3000 	ldr.w	r3, [r8]
 8006724:	9005      	str	r0, [sp, #20]
 8006726:	3307      	adds	r3, #7
 8006728:	f023 0307 	bic.w	r3, r3, #7
 800672c:	f103 0208 	add.w	r2, r3, #8
 8006730:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006734:	f8d4 b000 	ldr.w	fp, [r4]
 8006738:	f8c8 2000 	str.w	r2, [r8]
 800673c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006740:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006744:	9307      	str	r3, [sp, #28]
 8006746:	f8cd 8018 	str.w	r8, [sp, #24]
 800674a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800674e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006752:	4b9c      	ldr	r3, [pc, #624]	@ (80069c4 <_printf_float+0x2c8>)
 8006754:	f04f 32ff 	mov.w	r2, #4294967295
 8006758:	f7fa fa08 	bl	8000b6c <__aeabi_dcmpun>
 800675c:	bb70      	cbnz	r0, 80067bc <_printf_float+0xc0>
 800675e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006762:	4b98      	ldr	r3, [pc, #608]	@ (80069c4 <_printf_float+0x2c8>)
 8006764:	f04f 32ff 	mov.w	r2, #4294967295
 8006768:	f7fa f9e2 	bl	8000b30 <__aeabi_dcmple>
 800676c:	bb30      	cbnz	r0, 80067bc <_printf_float+0xc0>
 800676e:	2200      	movs	r2, #0
 8006770:	2300      	movs	r3, #0
 8006772:	4640      	mov	r0, r8
 8006774:	4649      	mov	r1, r9
 8006776:	f7fa f9d1 	bl	8000b1c <__aeabi_dcmplt>
 800677a:	b110      	cbz	r0, 8006782 <_printf_float+0x86>
 800677c:	232d      	movs	r3, #45	@ 0x2d
 800677e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006782:	4a91      	ldr	r2, [pc, #580]	@ (80069c8 <_printf_float+0x2cc>)
 8006784:	4b91      	ldr	r3, [pc, #580]	@ (80069cc <_printf_float+0x2d0>)
 8006786:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800678a:	bf94      	ite	ls
 800678c:	4690      	movls	r8, r2
 800678e:	4698      	movhi	r8, r3
 8006790:	2303      	movs	r3, #3
 8006792:	6123      	str	r3, [r4, #16]
 8006794:	f02b 0304 	bic.w	r3, fp, #4
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	f04f 0900 	mov.w	r9, #0
 800679e:	9700      	str	r7, [sp, #0]
 80067a0:	4633      	mov	r3, r6
 80067a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80067a4:	4621      	mov	r1, r4
 80067a6:	4628      	mov	r0, r5
 80067a8:	f000 f9d2 	bl	8006b50 <_printf_common>
 80067ac:	3001      	adds	r0, #1
 80067ae:	f040 808d 	bne.w	80068cc <_printf_float+0x1d0>
 80067b2:	f04f 30ff 	mov.w	r0, #4294967295
 80067b6:	b00d      	add	sp, #52	@ 0x34
 80067b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067bc:	4642      	mov	r2, r8
 80067be:	464b      	mov	r3, r9
 80067c0:	4640      	mov	r0, r8
 80067c2:	4649      	mov	r1, r9
 80067c4:	f7fa f9d2 	bl	8000b6c <__aeabi_dcmpun>
 80067c8:	b140      	cbz	r0, 80067dc <_printf_float+0xe0>
 80067ca:	464b      	mov	r3, r9
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	bfbc      	itt	lt
 80067d0:	232d      	movlt	r3, #45	@ 0x2d
 80067d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80067d6:	4a7e      	ldr	r2, [pc, #504]	@ (80069d0 <_printf_float+0x2d4>)
 80067d8:	4b7e      	ldr	r3, [pc, #504]	@ (80069d4 <_printf_float+0x2d8>)
 80067da:	e7d4      	b.n	8006786 <_printf_float+0x8a>
 80067dc:	6863      	ldr	r3, [r4, #4]
 80067de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80067e2:	9206      	str	r2, [sp, #24]
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	d13b      	bne.n	8006860 <_printf_float+0x164>
 80067e8:	2306      	movs	r3, #6
 80067ea:	6063      	str	r3, [r4, #4]
 80067ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80067f0:	2300      	movs	r3, #0
 80067f2:	6022      	str	r2, [r4, #0]
 80067f4:	9303      	str	r3, [sp, #12]
 80067f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80067f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80067fc:	ab09      	add	r3, sp, #36	@ 0x24
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	6861      	ldr	r1, [r4, #4]
 8006802:	ec49 8b10 	vmov	d0, r8, r9
 8006806:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800680a:	4628      	mov	r0, r5
 800680c:	f7ff fed7 	bl	80065be <__cvt>
 8006810:	9b06      	ldr	r3, [sp, #24]
 8006812:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006814:	2b47      	cmp	r3, #71	@ 0x47
 8006816:	4680      	mov	r8, r0
 8006818:	d129      	bne.n	800686e <_printf_float+0x172>
 800681a:	1cc8      	adds	r0, r1, #3
 800681c:	db02      	blt.n	8006824 <_printf_float+0x128>
 800681e:	6863      	ldr	r3, [r4, #4]
 8006820:	4299      	cmp	r1, r3
 8006822:	dd41      	ble.n	80068a8 <_printf_float+0x1ac>
 8006824:	f1aa 0a02 	sub.w	sl, sl, #2
 8006828:	fa5f fa8a 	uxtb.w	sl, sl
 800682c:	3901      	subs	r1, #1
 800682e:	4652      	mov	r2, sl
 8006830:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006834:	9109      	str	r1, [sp, #36]	@ 0x24
 8006836:	f7ff ff27 	bl	8006688 <__exponent>
 800683a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800683c:	1813      	adds	r3, r2, r0
 800683e:	2a01      	cmp	r2, #1
 8006840:	4681      	mov	r9, r0
 8006842:	6123      	str	r3, [r4, #16]
 8006844:	dc02      	bgt.n	800684c <_printf_float+0x150>
 8006846:	6822      	ldr	r2, [r4, #0]
 8006848:	07d2      	lsls	r2, r2, #31
 800684a:	d501      	bpl.n	8006850 <_printf_float+0x154>
 800684c:	3301      	adds	r3, #1
 800684e:	6123      	str	r3, [r4, #16]
 8006850:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0a2      	beq.n	800679e <_printf_float+0xa2>
 8006858:	232d      	movs	r3, #45	@ 0x2d
 800685a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800685e:	e79e      	b.n	800679e <_printf_float+0xa2>
 8006860:	9a06      	ldr	r2, [sp, #24]
 8006862:	2a47      	cmp	r2, #71	@ 0x47
 8006864:	d1c2      	bne.n	80067ec <_printf_float+0xf0>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1c0      	bne.n	80067ec <_printf_float+0xf0>
 800686a:	2301      	movs	r3, #1
 800686c:	e7bd      	b.n	80067ea <_printf_float+0xee>
 800686e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006872:	d9db      	bls.n	800682c <_printf_float+0x130>
 8006874:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006878:	d118      	bne.n	80068ac <_printf_float+0x1b0>
 800687a:	2900      	cmp	r1, #0
 800687c:	6863      	ldr	r3, [r4, #4]
 800687e:	dd0b      	ble.n	8006898 <_printf_float+0x19c>
 8006880:	6121      	str	r1, [r4, #16]
 8006882:	b913      	cbnz	r3, 800688a <_printf_float+0x18e>
 8006884:	6822      	ldr	r2, [r4, #0]
 8006886:	07d0      	lsls	r0, r2, #31
 8006888:	d502      	bpl.n	8006890 <_printf_float+0x194>
 800688a:	3301      	adds	r3, #1
 800688c:	440b      	add	r3, r1
 800688e:	6123      	str	r3, [r4, #16]
 8006890:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006892:	f04f 0900 	mov.w	r9, #0
 8006896:	e7db      	b.n	8006850 <_printf_float+0x154>
 8006898:	b913      	cbnz	r3, 80068a0 <_printf_float+0x1a4>
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	07d2      	lsls	r2, r2, #31
 800689e:	d501      	bpl.n	80068a4 <_printf_float+0x1a8>
 80068a0:	3302      	adds	r3, #2
 80068a2:	e7f4      	b.n	800688e <_printf_float+0x192>
 80068a4:	2301      	movs	r3, #1
 80068a6:	e7f2      	b.n	800688e <_printf_float+0x192>
 80068a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80068ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068ae:	4299      	cmp	r1, r3
 80068b0:	db05      	blt.n	80068be <_printf_float+0x1c2>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	6121      	str	r1, [r4, #16]
 80068b6:	07d8      	lsls	r0, r3, #31
 80068b8:	d5ea      	bpl.n	8006890 <_printf_float+0x194>
 80068ba:	1c4b      	adds	r3, r1, #1
 80068bc:	e7e7      	b.n	800688e <_printf_float+0x192>
 80068be:	2900      	cmp	r1, #0
 80068c0:	bfd4      	ite	le
 80068c2:	f1c1 0202 	rsble	r2, r1, #2
 80068c6:	2201      	movgt	r2, #1
 80068c8:	4413      	add	r3, r2
 80068ca:	e7e0      	b.n	800688e <_printf_float+0x192>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	055a      	lsls	r2, r3, #21
 80068d0:	d407      	bmi.n	80068e2 <_printf_float+0x1e6>
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	4642      	mov	r2, r8
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	d12b      	bne.n	8006938 <_printf_float+0x23c>
 80068e0:	e767      	b.n	80067b2 <_printf_float+0xb6>
 80068e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068e6:	f240 80dd 	bls.w	8006aa4 <_printf_float+0x3a8>
 80068ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068ee:	2200      	movs	r2, #0
 80068f0:	2300      	movs	r3, #0
 80068f2:	f7fa f909 	bl	8000b08 <__aeabi_dcmpeq>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	d033      	beq.n	8006962 <_printf_float+0x266>
 80068fa:	4a37      	ldr	r2, [pc, #220]	@ (80069d8 <_printf_float+0x2dc>)
 80068fc:	2301      	movs	r3, #1
 80068fe:	4631      	mov	r1, r6
 8006900:	4628      	mov	r0, r5
 8006902:	47b8      	blx	r7
 8006904:	3001      	adds	r0, #1
 8006906:	f43f af54 	beq.w	80067b2 <_printf_float+0xb6>
 800690a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800690e:	4543      	cmp	r3, r8
 8006910:	db02      	blt.n	8006918 <_printf_float+0x21c>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	07d8      	lsls	r0, r3, #31
 8006916:	d50f      	bpl.n	8006938 <_printf_float+0x23c>
 8006918:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800691c:	4631      	mov	r1, r6
 800691e:	4628      	mov	r0, r5
 8006920:	47b8      	blx	r7
 8006922:	3001      	adds	r0, #1
 8006924:	f43f af45 	beq.w	80067b2 <_printf_float+0xb6>
 8006928:	f04f 0900 	mov.w	r9, #0
 800692c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006930:	f104 0a1a 	add.w	sl, r4, #26
 8006934:	45c8      	cmp	r8, r9
 8006936:	dc09      	bgt.n	800694c <_printf_float+0x250>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	079b      	lsls	r3, r3, #30
 800693c:	f100 8103 	bmi.w	8006b46 <_printf_float+0x44a>
 8006940:	68e0      	ldr	r0, [r4, #12]
 8006942:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006944:	4298      	cmp	r0, r3
 8006946:	bfb8      	it	lt
 8006948:	4618      	movlt	r0, r3
 800694a:	e734      	b.n	80067b6 <_printf_float+0xba>
 800694c:	2301      	movs	r3, #1
 800694e:	4652      	mov	r2, sl
 8006950:	4631      	mov	r1, r6
 8006952:	4628      	mov	r0, r5
 8006954:	47b8      	blx	r7
 8006956:	3001      	adds	r0, #1
 8006958:	f43f af2b 	beq.w	80067b2 <_printf_float+0xb6>
 800695c:	f109 0901 	add.w	r9, r9, #1
 8006960:	e7e8      	b.n	8006934 <_printf_float+0x238>
 8006962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006964:	2b00      	cmp	r3, #0
 8006966:	dc39      	bgt.n	80069dc <_printf_float+0x2e0>
 8006968:	4a1b      	ldr	r2, [pc, #108]	@ (80069d8 <_printf_float+0x2dc>)
 800696a:	2301      	movs	r3, #1
 800696c:	4631      	mov	r1, r6
 800696e:	4628      	mov	r0, r5
 8006970:	47b8      	blx	r7
 8006972:	3001      	adds	r0, #1
 8006974:	f43f af1d 	beq.w	80067b2 <_printf_float+0xb6>
 8006978:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800697c:	ea59 0303 	orrs.w	r3, r9, r3
 8006980:	d102      	bne.n	8006988 <_printf_float+0x28c>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	07d9      	lsls	r1, r3, #31
 8006986:	d5d7      	bpl.n	8006938 <_printf_float+0x23c>
 8006988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800698c:	4631      	mov	r1, r6
 800698e:	4628      	mov	r0, r5
 8006990:	47b8      	blx	r7
 8006992:	3001      	adds	r0, #1
 8006994:	f43f af0d 	beq.w	80067b2 <_printf_float+0xb6>
 8006998:	f04f 0a00 	mov.w	sl, #0
 800699c:	f104 0b1a 	add.w	fp, r4, #26
 80069a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a2:	425b      	negs	r3, r3
 80069a4:	4553      	cmp	r3, sl
 80069a6:	dc01      	bgt.n	80069ac <_printf_float+0x2b0>
 80069a8:	464b      	mov	r3, r9
 80069aa:	e793      	b.n	80068d4 <_printf_float+0x1d8>
 80069ac:	2301      	movs	r3, #1
 80069ae:	465a      	mov	r2, fp
 80069b0:	4631      	mov	r1, r6
 80069b2:	4628      	mov	r0, r5
 80069b4:	47b8      	blx	r7
 80069b6:	3001      	adds	r0, #1
 80069b8:	f43f aefb 	beq.w	80067b2 <_printf_float+0xb6>
 80069bc:	f10a 0a01 	add.w	sl, sl, #1
 80069c0:	e7ee      	b.n	80069a0 <_printf_float+0x2a4>
 80069c2:	bf00      	nop
 80069c4:	7fefffff 	.word	0x7fefffff
 80069c8:	080092c4 	.word	0x080092c4
 80069cc:	080092c8 	.word	0x080092c8
 80069d0:	080092cc 	.word	0x080092cc
 80069d4:	080092d0 	.word	0x080092d0
 80069d8:	080092d4 	.word	0x080092d4
 80069dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069e2:	4553      	cmp	r3, sl
 80069e4:	bfa8      	it	ge
 80069e6:	4653      	movge	r3, sl
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	4699      	mov	r9, r3
 80069ec:	dc36      	bgt.n	8006a5c <_printf_float+0x360>
 80069ee:	f04f 0b00 	mov.w	fp, #0
 80069f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069f6:	f104 021a 	add.w	r2, r4, #26
 80069fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069fc:	9306      	str	r3, [sp, #24]
 80069fe:	eba3 0309 	sub.w	r3, r3, r9
 8006a02:	455b      	cmp	r3, fp
 8006a04:	dc31      	bgt.n	8006a6a <_printf_float+0x36e>
 8006a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a08:	459a      	cmp	sl, r3
 8006a0a:	dc3a      	bgt.n	8006a82 <_printf_float+0x386>
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	07da      	lsls	r2, r3, #31
 8006a10:	d437      	bmi.n	8006a82 <_printf_float+0x386>
 8006a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a14:	ebaa 0903 	sub.w	r9, sl, r3
 8006a18:	9b06      	ldr	r3, [sp, #24]
 8006a1a:	ebaa 0303 	sub.w	r3, sl, r3
 8006a1e:	4599      	cmp	r9, r3
 8006a20:	bfa8      	it	ge
 8006a22:	4699      	movge	r9, r3
 8006a24:	f1b9 0f00 	cmp.w	r9, #0
 8006a28:	dc33      	bgt.n	8006a92 <_printf_float+0x396>
 8006a2a:	f04f 0800 	mov.w	r8, #0
 8006a2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a32:	f104 0b1a 	add.w	fp, r4, #26
 8006a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a38:	ebaa 0303 	sub.w	r3, sl, r3
 8006a3c:	eba3 0309 	sub.w	r3, r3, r9
 8006a40:	4543      	cmp	r3, r8
 8006a42:	f77f af79 	ble.w	8006938 <_printf_float+0x23c>
 8006a46:	2301      	movs	r3, #1
 8006a48:	465a      	mov	r2, fp
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	47b8      	blx	r7
 8006a50:	3001      	adds	r0, #1
 8006a52:	f43f aeae 	beq.w	80067b2 <_printf_float+0xb6>
 8006a56:	f108 0801 	add.w	r8, r8, #1
 8006a5a:	e7ec      	b.n	8006a36 <_printf_float+0x33a>
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b8      	blx	r7
 8006a64:	3001      	adds	r0, #1
 8006a66:	d1c2      	bne.n	80069ee <_printf_float+0x2f2>
 8006a68:	e6a3      	b.n	80067b2 <_printf_float+0xb6>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	4628      	mov	r0, r5
 8006a70:	9206      	str	r2, [sp, #24]
 8006a72:	47b8      	blx	r7
 8006a74:	3001      	adds	r0, #1
 8006a76:	f43f ae9c 	beq.w	80067b2 <_printf_float+0xb6>
 8006a7a:	9a06      	ldr	r2, [sp, #24]
 8006a7c:	f10b 0b01 	add.w	fp, fp, #1
 8006a80:	e7bb      	b.n	80069fa <_printf_float+0x2fe>
 8006a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a86:	4631      	mov	r1, r6
 8006a88:	4628      	mov	r0, r5
 8006a8a:	47b8      	blx	r7
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d1c0      	bne.n	8006a12 <_printf_float+0x316>
 8006a90:	e68f      	b.n	80067b2 <_printf_float+0xb6>
 8006a92:	9a06      	ldr	r2, [sp, #24]
 8006a94:	464b      	mov	r3, r9
 8006a96:	4442      	add	r2, r8
 8006a98:	4631      	mov	r1, r6
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	47b8      	blx	r7
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	d1c3      	bne.n	8006a2a <_printf_float+0x32e>
 8006aa2:	e686      	b.n	80067b2 <_printf_float+0xb6>
 8006aa4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006aa8:	f1ba 0f01 	cmp.w	sl, #1
 8006aac:	dc01      	bgt.n	8006ab2 <_printf_float+0x3b6>
 8006aae:	07db      	lsls	r3, r3, #31
 8006ab0:	d536      	bpl.n	8006b20 <_printf_float+0x424>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	4642      	mov	r2, r8
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	4628      	mov	r0, r5
 8006aba:	47b8      	blx	r7
 8006abc:	3001      	adds	r0, #1
 8006abe:	f43f ae78 	beq.w	80067b2 <_printf_float+0xb6>
 8006ac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4628      	mov	r0, r5
 8006aca:	47b8      	blx	r7
 8006acc:	3001      	adds	r0, #1
 8006ace:	f43f ae70 	beq.w	80067b2 <_printf_float+0xb6>
 8006ad2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ade:	f7fa f813 	bl	8000b08 <__aeabi_dcmpeq>
 8006ae2:	b9c0      	cbnz	r0, 8006b16 <_printf_float+0x41a>
 8006ae4:	4653      	mov	r3, sl
 8006ae6:	f108 0201 	add.w	r2, r8, #1
 8006aea:	4631      	mov	r1, r6
 8006aec:	4628      	mov	r0, r5
 8006aee:	47b8      	blx	r7
 8006af0:	3001      	adds	r0, #1
 8006af2:	d10c      	bne.n	8006b0e <_printf_float+0x412>
 8006af4:	e65d      	b.n	80067b2 <_printf_float+0xb6>
 8006af6:	2301      	movs	r3, #1
 8006af8:	465a      	mov	r2, fp
 8006afa:	4631      	mov	r1, r6
 8006afc:	4628      	mov	r0, r5
 8006afe:	47b8      	blx	r7
 8006b00:	3001      	adds	r0, #1
 8006b02:	f43f ae56 	beq.w	80067b2 <_printf_float+0xb6>
 8006b06:	f108 0801 	add.w	r8, r8, #1
 8006b0a:	45d0      	cmp	r8, sl
 8006b0c:	dbf3      	blt.n	8006af6 <_printf_float+0x3fa>
 8006b0e:	464b      	mov	r3, r9
 8006b10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006b14:	e6df      	b.n	80068d6 <_printf_float+0x1da>
 8006b16:	f04f 0800 	mov.w	r8, #0
 8006b1a:	f104 0b1a 	add.w	fp, r4, #26
 8006b1e:	e7f4      	b.n	8006b0a <_printf_float+0x40e>
 8006b20:	2301      	movs	r3, #1
 8006b22:	4642      	mov	r2, r8
 8006b24:	e7e1      	b.n	8006aea <_printf_float+0x3ee>
 8006b26:	2301      	movs	r3, #1
 8006b28:	464a      	mov	r2, r9
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	47b8      	blx	r7
 8006b30:	3001      	adds	r0, #1
 8006b32:	f43f ae3e 	beq.w	80067b2 <_printf_float+0xb6>
 8006b36:	f108 0801 	add.w	r8, r8, #1
 8006b3a:	68e3      	ldr	r3, [r4, #12]
 8006b3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b3e:	1a5b      	subs	r3, r3, r1
 8006b40:	4543      	cmp	r3, r8
 8006b42:	dcf0      	bgt.n	8006b26 <_printf_float+0x42a>
 8006b44:	e6fc      	b.n	8006940 <_printf_float+0x244>
 8006b46:	f04f 0800 	mov.w	r8, #0
 8006b4a:	f104 0919 	add.w	r9, r4, #25
 8006b4e:	e7f4      	b.n	8006b3a <_printf_float+0x43e>

08006b50 <_printf_common>:
 8006b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b54:	4616      	mov	r6, r2
 8006b56:	4698      	mov	r8, r3
 8006b58:	688a      	ldr	r2, [r1, #8]
 8006b5a:	690b      	ldr	r3, [r1, #16]
 8006b5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b60:	4293      	cmp	r3, r2
 8006b62:	bfb8      	it	lt
 8006b64:	4613      	movlt	r3, r2
 8006b66:	6033      	str	r3, [r6, #0]
 8006b68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b6c:	4607      	mov	r7, r0
 8006b6e:	460c      	mov	r4, r1
 8006b70:	b10a      	cbz	r2, 8006b76 <_printf_common+0x26>
 8006b72:	3301      	adds	r3, #1
 8006b74:	6033      	str	r3, [r6, #0]
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	0699      	lsls	r1, r3, #26
 8006b7a:	bf42      	ittt	mi
 8006b7c:	6833      	ldrmi	r3, [r6, #0]
 8006b7e:	3302      	addmi	r3, #2
 8006b80:	6033      	strmi	r3, [r6, #0]
 8006b82:	6825      	ldr	r5, [r4, #0]
 8006b84:	f015 0506 	ands.w	r5, r5, #6
 8006b88:	d106      	bne.n	8006b98 <_printf_common+0x48>
 8006b8a:	f104 0a19 	add.w	sl, r4, #25
 8006b8e:	68e3      	ldr	r3, [r4, #12]
 8006b90:	6832      	ldr	r2, [r6, #0]
 8006b92:	1a9b      	subs	r3, r3, r2
 8006b94:	42ab      	cmp	r3, r5
 8006b96:	dc26      	bgt.n	8006be6 <_printf_common+0x96>
 8006b98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b9c:	6822      	ldr	r2, [r4, #0]
 8006b9e:	3b00      	subs	r3, #0
 8006ba0:	bf18      	it	ne
 8006ba2:	2301      	movne	r3, #1
 8006ba4:	0692      	lsls	r2, r2, #26
 8006ba6:	d42b      	bmi.n	8006c00 <_printf_common+0xb0>
 8006ba8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bac:	4641      	mov	r1, r8
 8006bae:	4638      	mov	r0, r7
 8006bb0:	47c8      	blx	r9
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	d01e      	beq.n	8006bf4 <_printf_common+0xa4>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	6922      	ldr	r2, [r4, #16]
 8006bba:	f003 0306 	and.w	r3, r3, #6
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	bf02      	ittt	eq
 8006bc2:	68e5      	ldreq	r5, [r4, #12]
 8006bc4:	6833      	ldreq	r3, [r6, #0]
 8006bc6:	1aed      	subeq	r5, r5, r3
 8006bc8:	68a3      	ldr	r3, [r4, #8]
 8006bca:	bf0c      	ite	eq
 8006bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bd0:	2500      	movne	r5, #0
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	bfc4      	itt	gt
 8006bd6:	1a9b      	subgt	r3, r3, r2
 8006bd8:	18ed      	addgt	r5, r5, r3
 8006bda:	2600      	movs	r6, #0
 8006bdc:	341a      	adds	r4, #26
 8006bde:	42b5      	cmp	r5, r6
 8006be0:	d11a      	bne.n	8006c18 <_printf_common+0xc8>
 8006be2:	2000      	movs	r0, #0
 8006be4:	e008      	b.n	8006bf8 <_printf_common+0xa8>
 8006be6:	2301      	movs	r3, #1
 8006be8:	4652      	mov	r2, sl
 8006bea:	4641      	mov	r1, r8
 8006bec:	4638      	mov	r0, r7
 8006bee:	47c8      	blx	r9
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d103      	bne.n	8006bfc <_printf_common+0xac>
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfc:	3501      	adds	r5, #1
 8006bfe:	e7c6      	b.n	8006b8e <_printf_common+0x3e>
 8006c00:	18e1      	adds	r1, r4, r3
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	2030      	movs	r0, #48	@ 0x30
 8006c06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c0a:	4422      	add	r2, r4
 8006c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c14:	3302      	adds	r3, #2
 8006c16:	e7c7      	b.n	8006ba8 <_printf_common+0x58>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	4641      	mov	r1, r8
 8006c1e:	4638      	mov	r0, r7
 8006c20:	47c8      	blx	r9
 8006c22:	3001      	adds	r0, #1
 8006c24:	d0e6      	beq.n	8006bf4 <_printf_common+0xa4>
 8006c26:	3601      	adds	r6, #1
 8006c28:	e7d9      	b.n	8006bde <_printf_common+0x8e>
	...

08006c2c <_printf_i>:
 8006c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c30:	7e0f      	ldrb	r7, [r1, #24]
 8006c32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c34:	2f78      	cmp	r7, #120	@ 0x78
 8006c36:	4691      	mov	r9, r2
 8006c38:	4680      	mov	r8, r0
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	469a      	mov	sl, r3
 8006c3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c42:	d807      	bhi.n	8006c54 <_printf_i+0x28>
 8006c44:	2f62      	cmp	r7, #98	@ 0x62
 8006c46:	d80a      	bhi.n	8006c5e <_printf_i+0x32>
 8006c48:	2f00      	cmp	r7, #0
 8006c4a:	f000 80d2 	beq.w	8006df2 <_printf_i+0x1c6>
 8006c4e:	2f58      	cmp	r7, #88	@ 0x58
 8006c50:	f000 80b9 	beq.w	8006dc6 <_printf_i+0x19a>
 8006c54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c5c:	e03a      	b.n	8006cd4 <_printf_i+0xa8>
 8006c5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c62:	2b15      	cmp	r3, #21
 8006c64:	d8f6      	bhi.n	8006c54 <_printf_i+0x28>
 8006c66:	a101      	add	r1, pc, #4	@ (adr r1, 8006c6c <_printf_i+0x40>)
 8006c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c6c:	08006cc5 	.word	0x08006cc5
 8006c70:	08006cd9 	.word	0x08006cd9
 8006c74:	08006c55 	.word	0x08006c55
 8006c78:	08006c55 	.word	0x08006c55
 8006c7c:	08006c55 	.word	0x08006c55
 8006c80:	08006c55 	.word	0x08006c55
 8006c84:	08006cd9 	.word	0x08006cd9
 8006c88:	08006c55 	.word	0x08006c55
 8006c8c:	08006c55 	.word	0x08006c55
 8006c90:	08006c55 	.word	0x08006c55
 8006c94:	08006c55 	.word	0x08006c55
 8006c98:	08006dd9 	.word	0x08006dd9
 8006c9c:	08006d03 	.word	0x08006d03
 8006ca0:	08006d93 	.word	0x08006d93
 8006ca4:	08006c55 	.word	0x08006c55
 8006ca8:	08006c55 	.word	0x08006c55
 8006cac:	08006dfb 	.word	0x08006dfb
 8006cb0:	08006c55 	.word	0x08006c55
 8006cb4:	08006d03 	.word	0x08006d03
 8006cb8:	08006c55 	.word	0x08006c55
 8006cbc:	08006c55 	.word	0x08006c55
 8006cc0:	08006d9b 	.word	0x08006d9b
 8006cc4:	6833      	ldr	r3, [r6, #0]
 8006cc6:	1d1a      	adds	r2, r3, #4
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6032      	str	r2, [r6, #0]
 8006ccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e09d      	b.n	8006e14 <_printf_i+0x1e8>
 8006cd8:	6833      	ldr	r3, [r6, #0]
 8006cda:	6820      	ldr	r0, [r4, #0]
 8006cdc:	1d19      	adds	r1, r3, #4
 8006cde:	6031      	str	r1, [r6, #0]
 8006ce0:	0606      	lsls	r6, r0, #24
 8006ce2:	d501      	bpl.n	8006ce8 <_printf_i+0xbc>
 8006ce4:	681d      	ldr	r5, [r3, #0]
 8006ce6:	e003      	b.n	8006cf0 <_printf_i+0xc4>
 8006ce8:	0645      	lsls	r5, r0, #25
 8006cea:	d5fb      	bpl.n	8006ce4 <_printf_i+0xb8>
 8006cec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cf0:	2d00      	cmp	r5, #0
 8006cf2:	da03      	bge.n	8006cfc <_printf_i+0xd0>
 8006cf4:	232d      	movs	r3, #45	@ 0x2d
 8006cf6:	426d      	negs	r5, r5
 8006cf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cfc:	4859      	ldr	r0, [pc, #356]	@ (8006e64 <_printf_i+0x238>)
 8006cfe:	230a      	movs	r3, #10
 8006d00:	e011      	b.n	8006d26 <_printf_i+0xfa>
 8006d02:	6821      	ldr	r1, [r4, #0]
 8006d04:	6833      	ldr	r3, [r6, #0]
 8006d06:	0608      	lsls	r0, r1, #24
 8006d08:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d0c:	d402      	bmi.n	8006d14 <_printf_i+0xe8>
 8006d0e:	0649      	lsls	r1, r1, #25
 8006d10:	bf48      	it	mi
 8006d12:	b2ad      	uxthmi	r5, r5
 8006d14:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d16:	4853      	ldr	r0, [pc, #332]	@ (8006e64 <_printf_i+0x238>)
 8006d18:	6033      	str	r3, [r6, #0]
 8006d1a:	bf14      	ite	ne
 8006d1c:	230a      	movne	r3, #10
 8006d1e:	2308      	moveq	r3, #8
 8006d20:	2100      	movs	r1, #0
 8006d22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d26:	6866      	ldr	r6, [r4, #4]
 8006d28:	60a6      	str	r6, [r4, #8]
 8006d2a:	2e00      	cmp	r6, #0
 8006d2c:	bfa2      	ittt	ge
 8006d2e:	6821      	ldrge	r1, [r4, #0]
 8006d30:	f021 0104 	bicge.w	r1, r1, #4
 8006d34:	6021      	strge	r1, [r4, #0]
 8006d36:	b90d      	cbnz	r5, 8006d3c <_printf_i+0x110>
 8006d38:	2e00      	cmp	r6, #0
 8006d3a:	d04b      	beq.n	8006dd4 <_printf_i+0x1a8>
 8006d3c:	4616      	mov	r6, r2
 8006d3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d42:	fb03 5711 	mls	r7, r3, r1, r5
 8006d46:	5dc7      	ldrb	r7, [r0, r7]
 8006d48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d4c:	462f      	mov	r7, r5
 8006d4e:	42bb      	cmp	r3, r7
 8006d50:	460d      	mov	r5, r1
 8006d52:	d9f4      	bls.n	8006d3e <_printf_i+0x112>
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d10b      	bne.n	8006d70 <_printf_i+0x144>
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	07df      	lsls	r7, r3, #31
 8006d5c:	d508      	bpl.n	8006d70 <_printf_i+0x144>
 8006d5e:	6923      	ldr	r3, [r4, #16]
 8006d60:	6861      	ldr	r1, [r4, #4]
 8006d62:	4299      	cmp	r1, r3
 8006d64:	bfde      	ittt	le
 8006d66:	2330      	movle	r3, #48	@ 0x30
 8006d68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d70:	1b92      	subs	r2, r2, r6
 8006d72:	6122      	str	r2, [r4, #16]
 8006d74:	f8cd a000 	str.w	sl, [sp]
 8006d78:	464b      	mov	r3, r9
 8006d7a:	aa03      	add	r2, sp, #12
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	4640      	mov	r0, r8
 8006d80:	f7ff fee6 	bl	8006b50 <_printf_common>
 8006d84:	3001      	adds	r0, #1
 8006d86:	d14a      	bne.n	8006e1e <_printf_i+0x1f2>
 8006d88:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8c:	b004      	add	sp, #16
 8006d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	f043 0320 	orr.w	r3, r3, #32
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	4833      	ldr	r0, [pc, #204]	@ (8006e68 <_printf_i+0x23c>)
 8006d9c:	2778      	movs	r7, #120	@ 0x78
 8006d9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	6831      	ldr	r1, [r6, #0]
 8006da6:	061f      	lsls	r7, r3, #24
 8006da8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006dac:	d402      	bmi.n	8006db4 <_printf_i+0x188>
 8006dae:	065f      	lsls	r7, r3, #25
 8006db0:	bf48      	it	mi
 8006db2:	b2ad      	uxthmi	r5, r5
 8006db4:	6031      	str	r1, [r6, #0]
 8006db6:	07d9      	lsls	r1, r3, #31
 8006db8:	bf44      	itt	mi
 8006dba:	f043 0320 	orrmi.w	r3, r3, #32
 8006dbe:	6023      	strmi	r3, [r4, #0]
 8006dc0:	b11d      	cbz	r5, 8006dca <_printf_i+0x19e>
 8006dc2:	2310      	movs	r3, #16
 8006dc4:	e7ac      	b.n	8006d20 <_printf_i+0xf4>
 8006dc6:	4827      	ldr	r0, [pc, #156]	@ (8006e64 <_printf_i+0x238>)
 8006dc8:	e7e9      	b.n	8006d9e <_printf_i+0x172>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	f023 0320 	bic.w	r3, r3, #32
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	e7f6      	b.n	8006dc2 <_printf_i+0x196>
 8006dd4:	4616      	mov	r6, r2
 8006dd6:	e7bd      	b.n	8006d54 <_printf_i+0x128>
 8006dd8:	6833      	ldr	r3, [r6, #0]
 8006dda:	6825      	ldr	r5, [r4, #0]
 8006ddc:	6961      	ldr	r1, [r4, #20]
 8006dde:	1d18      	adds	r0, r3, #4
 8006de0:	6030      	str	r0, [r6, #0]
 8006de2:	062e      	lsls	r6, r5, #24
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	d501      	bpl.n	8006dec <_printf_i+0x1c0>
 8006de8:	6019      	str	r1, [r3, #0]
 8006dea:	e002      	b.n	8006df2 <_printf_i+0x1c6>
 8006dec:	0668      	lsls	r0, r5, #25
 8006dee:	d5fb      	bpl.n	8006de8 <_printf_i+0x1bc>
 8006df0:	8019      	strh	r1, [r3, #0]
 8006df2:	2300      	movs	r3, #0
 8006df4:	6123      	str	r3, [r4, #16]
 8006df6:	4616      	mov	r6, r2
 8006df8:	e7bc      	b.n	8006d74 <_printf_i+0x148>
 8006dfa:	6833      	ldr	r3, [r6, #0]
 8006dfc:	1d1a      	adds	r2, r3, #4
 8006dfe:	6032      	str	r2, [r6, #0]
 8006e00:	681e      	ldr	r6, [r3, #0]
 8006e02:	6862      	ldr	r2, [r4, #4]
 8006e04:	2100      	movs	r1, #0
 8006e06:	4630      	mov	r0, r6
 8006e08:	f7f9 fa02 	bl	8000210 <memchr>
 8006e0c:	b108      	cbz	r0, 8006e12 <_printf_i+0x1e6>
 8006e0e:	1b80      	subs	r0, r0, r6
 8006e10:	6060      	str	r0, [r4, #4]
 8006e12:	6863      	ldr	r3, [r4, #4]
 8006e14:	6123      	str	r3, [r4, #16]
 8006e16:	2300      	movs	r3, #0
 8006e18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e1c:	e7aa      	b.n	8006d74 <_printf_i+0x148>
 8006e1e:	6923      	ldr	r3, [r4, #16]
 8006e20:	4632      	mov	r2, r6
 8006e22:	4649      	mov	r1, r9
 8006e24:	4640      	mov	r0, r8
 8006e26:	47d0      	blx	sl
 8006e28:	3001      	adds	r0, #1
 8006e2a:	d0ad      	beq.n	8006d88 <_printf_i+0x15c>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	079b      	lsls	r3, r3, #30
 8006e30:	d413      	bmi.n	8006e5a <_printf_i+0x22e>
 8006e32:	68e0      	ldr	r0, [r4, #12]
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	4298      	cmp	r0, r3
 8006e38:	bfb8      	it	lt
 8006e3a:	4618      	movlt	r0, r3
 8006e3c:	e7a6      	b.n	8006d8c <_printf_i+0x160>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	4632      	mov	r2, r6
 8006e42:	4649      	mov	r1, r9
 8006e44:	4640      	mov	r0, r8
 8006e46:	47d0      	blx	sl
 8006e48:	3001      	adds	r0, #1
 8006e4a:	d09d      	beq.n	8006d88 <_printf_i+0x15c>
 8006e4c:	3501      	adds	r5, #1
 8006e4e:	68e3      	ldr	r3, [r4, #12]
 8006e50:	9903      	ldr	r1, [sp, #12]
 8006e52:	1a5b      	subs	r3, r3, r1
 8006e54:	42ab      	cmp	r3, r5
 8006e56:	dcf2      	bgt.n	8006e3e <_printf_i+0x212>
 8006e58:	e7eb      	b.n	8006e32 <_printf_i+0x206>
 8006e5a:	2500      	movs	r5, #0
 8006e5c:	f104 0619 	add.w	r6, r4, #25
 8006e60:	e7f5      	b.n	8006e4e <_printf_i+0x222>
 8006e62:	bf00      	nop
 8006e64:	080092d6 	.word	0x080092d6
 8006e68:	080092e7 	.word	0x080092e7

08006e6c <std>:
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	b510      	push	{r4, lr}
 8006e70:	4604      	mov	r4, r0
 8006e72:	e9c0 3300 	strd	r3, r3, [r0]
 8006e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e7a:	6083      	str	r3, [r0, #8]
 8006e7c:	8181      	strh	r1, [r0, #12]
 8006e7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e80:	81c2      	strh	r2, [r0, #14]
 8006e82:	6183      	str	r3, [r0, #24]
 8006e84:	4619      	mov	r1, r3
 8006e86:	2208      	movs	r2, #8
 8006e88:	305c      	adds	r0, #92	@ 0x5c
 8006e8a:	f000 f914 	bl	80070b6 <memset>
 8006e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec4 <std+0x58>)
 8006e90:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e92:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec8 <std+0x5c>)
 8006e94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e96:	4b0d      	ldr	r3, [pc, #52]	@ (8006ecc <std+0x60>)
 8006e98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed0 <std+0x64>)
 8006e9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed4 <std+0x68>)
 8006ea0:	6224      	str	r4, [r4, #32]
 8006ea2:	429c      	cmp	r4, r3
 8006ea4:	d006      	beq.n	8006eb4 <std+0x48>
 8006ea6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006eaa:	4294      	cmp	r4, r2
 8006eac:	d002      	beq.n	8006eb4 <std+0x48>
 8006eae:	33d0      	adds	r3, #208	@ 0xd0
 8006eb0:	429c      	cmp	r4, r3
 8006eb2:	d105      	bne.n	8006ec0 <std+0x54>
 8006eb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ebc:	f000 b978 	b.w	80071b0 <__retarget_lock_init_recursive>
 8006ec0:	bd10      	pop	{r4, pc}
 8006ec2:	bf00      	nop
 8006ec4:	08007031 	.word	0x08007031
 8006ec8:	08007053 	.word	0x08007053
 8006ecc:	0800708b 	.word	0x0800708b
 8006ed0:	080070af 	.word	0x080070af
 8006ed4:	200003a8 	.word	0x200003a8

08006ed8 <stdio_exit_handler>:
 8006ed8:	4a02      	ldr	r2, [pc, #8]	@ (8006ee4 <stdio_exit_handler+0xc>)
 8006eda:	4903      	ldr	r1, [pc, #12]	@ (8006ee8 <stdio_exit_handler+0x10>)
 8006edc:	4803      	ldr	r0, [pc, #12]	@ (8006eec <stdio_exit_handler+0x14>)
 8006ede:	f000 b869 	b.w	8006fb4 <_fwalk_sglue>
 8006ee2:	bf00      	nop
 8006ee4:	20000010 	.word	0x20000010
 8006ee8:	08008b0d 	.word	0x08008b0d
 8006eec:	20000020 	.word	0x20000020

08006ef0 <cleanup_stdio>:
 8006ef0:	6841      	ldr	r1, [r0, #4]
 8006ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f24 <cleanup_stdio+0x34>)
 8006ef4:	4299      	cmp	r1, r3
 8006ef6:	b510      	push	{r4, lr}
 8006ef8:	4604      	mov	r4, r0
 8006efa:	d001      	beq.n	8006f00 <cleanup_stdio+0x10>
 8006efc:	f001 fe06 	bl	8008b0c <_fflush_r>
 8006f00:	68a1      	ldr	r1, [r4, #8]
 8006f02:	4b09      	ldr	r3, [pc, #36]	@ (8006f28 <cleanup_stdio+0x38>)
 8006f04:	4299      	cmp	r1, r3
 8006f06:	d002      	beq.n	8006f0e <cleanup_stdio+0x1e>
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f001 fdff 	bl	8008b0c <_fflush_r>
 8006f0e:	68e1      	ldr	r1, [r4, #12]
 8006f10:	4b06      	ldr	r3, [pc, #24]	@ (8006f2c <cleanup_stdio+0x3c>)
 8006f12:	4299      	cmp	r1, r3
 8006f14:	d004      	beq.n	8006f20 <cleanup_stdio+0x30>
 8006f16:	4620      	mov	r0, r4
 8006f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f1c:	f001 bdf6 	b.w	8008b0c <_fflush_r>
 8006f20:	bd10      	pop	{r4, pc}
 8006f22:	bf00      	nop
 8006f24:	200003a8 	.word	0x200003a8
 8006f28:	20000410 	.word	0x20000410
 8006f2c:	20000478 	.word	0x20000478

08006f30 <global_stdio_init.part.0>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	4b0b      	ldr	r3, [pc, #44]	@ (8006f60 <global_stdio_init.part.0+0x30>)
 8006f34:	4c0b      	ldr	r4, [pc, #44]	@ (8006f64 <global_stdio_init.part.0+0x34>)
 8006f36:	4a0c      	ldr	r2, [pc, #48]	@ (8006f68 <global_stdio_init.part.0+0x38>)
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2104      	movs	r1, #4
 8006f40:	f7ff ff94 	bl	8006e6c <std>
 8006f44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f48:	2201      	movs	r2, #1
 8006f4a:	2109      	movs	r1, #9
 8006f4c:	f7ff ff8e 	bl	8006e6c <std>
 8006f50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f54:	2202      	movs	r2, #2
 8006f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f5a:	2112      	movs	r1, #18
 8006f5c:	f7ff bf86 	b.w	8006e6c <std>
 8006f60:	200004e0 	.word	0x200004e0
 8006f64:	200003a8 	.word	0x200003a8
 8006f68:	08006ed9 	.word	0x08006ed9

08006f6c <__sfp_lock_acquire>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	@ (8006f74 <__sfp_lock_acquire+0x8>)
 8006f6e:	f000 b920 	b.w	80071b2 <__retarget_lock_acquire_recursive>
 8006f72:	bf00      	nop
 8006f74:	200004e9 	.word	0x200004e9

08006f78 <__sfp_lock_release>:
 8006f78:	4801      	ldr	r0, [pc, #4]	@ (8006f80 <__sfp_lock_release+0x8>)
 8006f7a:	f000 b91b 	b.w	80071b4 <__retarget_lock_release_recursive>
 8006f7e:	bf00      	nop
 8006f80:	200004e9 	.word	0x200004e9

08006f84 <__sinit>:
 8006f84:	b510      	push	{r4, lr}
 8006f86:	4604      	mov	r4, r0
 8006f88:	f7ff fff0 	bl	8006f6c <__sfp_lock_acquire>
 8006f8c:	6a23      	ldr	r3, [r4, #32]
 8006f8e:	b11b      	cbz	r3, 8006f98 <__sinit+0x14>
 8006f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f94:	f7ff bff0 	b.w	8006f78 <__sfp_lock_release>
 8006f98:	4b04      	ldr	r3, [pc, #16]	@ (8006fac <__sinit+0x28>)
 8006f9a:	6223      	str	r3, [r4, #32]
 8006f9c:	4b04      	ldr	r3, [pc, #16]	@ (8006fb0 <__sinit+0x2c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1f5      	bne.n	8006f90 <__sinit+0xc>
 8006fa4:	f7ff ffc4 	bl	8006f30 <global_stdio_init.part.0>
 8006fa8:	e7f2      	b.n	8006f90 <__sinit+0xc>
 8006faa:	bf00      	nop
 8006fac:	08006ef1 	.word	0x08006ef1
 8006fb0:	200004e0 	.word	0x200004e0

08006fb4 <_fwalk_sglue>:
 8006fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fb8:	4607      	mov	r7, r0
 8006fba:	4688      	mov	r8, r1
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	2600      	movs	r6, #0
 8006fc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fc4:	f1b9 0901 	subs.w	r9, r9, #1
 8006fc8:	d505      	bpl.n	8006fd6 <_fwalk_sglue+0x22>
 8006fca:	6824      	ldr	r4, [r4, #0]
 8006fcc:	2c00      	cmp	r4, #0
 8006fce:	d1f7      	bne.n	8006fc0 <_fwalk_sglue+0xc>
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd6:	89ab      	ldrh	r3, [r5, #12]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d907      	bls.n	8006fec <_fwalk_sglue+0x38>
 8006fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	d003      	beq.n	8006fec <_fwalk_sglue+0x38>
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	47c0      	blx	r8
 8006fea:	4306      	orrs	r6, r0
 8006fec:	3568      	adds	r5, #104	@ 0x68
 8006fee:	e7e9      	b.n	8006fc4 <_fwalk_sglue+0x10>

08006ff0 <siprintf>:
 8006ff0:	b40e      	push	{r1, r2, r3}
 8006ff2:	b500      	push	{lr}
 8006ff4:	b09c      	sub	sp, #112	@ 0x70
 8006ff6:	ab1d      	add	r3, sp, #116	@ 0x74
 8006ff8:	9002      	str	r0, [sp, #8]
 8006ffa:	9006      	str	r0, [sp, #24]
 8006ffc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007000:	4809      	ldr	r0, [pc, #36]	@ (8007028 <siprintf+0x38>)
 8007002:	9107      	str	r1, [sp, #28]
 8007004:	9104      	str	r1, [sp, #16]
 8007006:	4909      	ldr	r1, [pc, #36]	@ (800702c <siprintf+0x3c>)
 8007008:	f853 2b04 	ldr.w	r2, [r3], #4
 800700c:	9105      	str	r1, [sp, #20]
 800700e:	6800      	ldr	r0, [r0, #0]
 8007010:	9301      	str	r3, [sp, #4]
 8007012:	a902      	add	r1, sp, #8
 8007014:	f001 fbfa 	bl	800880c <_svfiprintf_r>
 8007018:	9b02      	ldr	r3, [sp, #8]
 800701a:	2200      	movs	r2, #0
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	b01c      	add	sp, #112	@ 0x70
 8007020:	f85d eb04 	ldr.w	lr, [sp], #4
 8007024:	b003      	add	sp, #12
 8007026:	4770      	bx	lr
 8007028:	2000001c 	.word	0x2000001c
 800702c:	ffff0208 	.word	0xffff0208

08007030 <__sread>:
 8007030:	b510      	push	{r4, lr}
 8007032:	460c      	mov	r4, r1
 8007034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007038:	f000 f86c 	bl	8007114 <_read_r>
 800703c:	2800      	cmp	r0, #0
 800703e:	bfab      	itete	ge
 8007040:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007042:	89a3      	ldrhlt	r3, [r4, #12]
 8007044:	181b      	addge	r3, r3, r0
 8007046:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800704a:	bfac      	ite	ge
 800704c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800704e:	81a3      	strhlt	r3, [r4, #12]
 8007050:	bd10      	pop	{r4, pc}

08007052 <__swrite>:
 8007052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007056:	461f      	mov	r7, r3
 8007058:	898b      	ldrh	r3, [r1, #12]
 800705a:	05db      	lsls	r3, r3, #23
 800705c:	4605      	mov	r5, r0
 800705e:	460c      	mov	r4, r1
 8007060:	4616      	mov	r6, r2
 8007062:	d505      	bpl.n	8007070 <__swrite+0x1e>
 8007064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007068:	2302      	movs	r3, #2
 800706a:	2200      	movs	r2, #0
 800706c:	f000 f840 	bl	80070f0 <_lseek_r>
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007076:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800707a:	81a3      	strh	r3, [r4, #12]
 800707c:	4632      	mov	r2, r6
 800707e:	463b      	mov	r3, r7
 8007080:	4628      	mov	r0, r5
 8007082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007086:	f000 b857 	b.w	8007138 <_write_r>

0800708a <__sseek>:
 800708a:	b510      	push	{r4, lr}
 800708c:	460c      	mov	r4, r1
 800708e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007092:	f000 f82d 	bl	80070f0 <_lseek_r>
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	bf15      	itete	ne
 800709c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800709e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070a6:	81a3      	strheq	r3, [r4, #12]
 80070a8:	bf18      	it	ne
 80070aa:	81a3      	strhne	r3, [r4, #12]
 80070ac:	bd10      	pop	{r4, pc}

080070ae <__sclose>:
 80070ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b2:	f000 b80d 	b.w	80070d0 <_close_r>

080070b6 <memset>:
 80070b6:	4402      	add	r2, r0
 80070b8:	4603      	mov	r3, r0
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d100      	bne.n	80070c0 <memset+0xa>
 80070be:	4770      	bx	lr
 80070c0:	f803 1b01 	strb.w	r1, [r3], #1
 80070c4:	e7f9      	b.n	80070ba <memset+0x4>
	...

080070c8 <_localeconv_r>:
 80070c8:	4800      	ldr	r0, [pc, #0]	@ (80070cc <_localeconv_r+0x4>)
 80070ca:	4770      	bx	lr
 80070cc:	2000015c 	.word	0x2000015c

080070d0 <_close_r>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	4d06      	ldr	r5, [pc, #24]	@ (80070ec <_close_r+0x1c>)
 80070d4:	2300      	movs	r3, #0
 80070d6:	4604      	mov	r4, r0
 80070d8:	4608      	mov	r0, r1
 80070da:	602b      	str	r3, [r5, #0]
 80070dc:	f7ff f9ca 	bl	8006474 <_close>
 80070e0:	1c43      	adds	r3, r0, #1
 80070e2:	d102      	bne.n	80070ea <_close_r+0x1a>
 80070e4:	682b      	ldr	r3, [r5, #0]
 80070e6:	b103      	cbz	r3, 80070ea <_close_r+0x1a>
 80070e8:	6023      	str	r3, [r4, #0]
 80070ea:	bd38      	pop	{r3, r4, r5, pc}
 80070ec:	200004e4 	.word	0x200004e4

080070f0 <_lseek_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4d07      	ldr	r5, [pc, #28]	@ (8007110 <_lseek_r+0x20>)
 80070f4:	4604      	mov	r4, r0
 80070f6:	4608      	mov	r0, r1
 80070f8:	4611      	mov	r1, r2
 80070fa:	2200      	movs	r2, #0
 80070fc:	602a      	str	r2, [r5, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	f7ff f9df 	bl	80064c2 <_lseek>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d102      	bne.n	800710e <_lseek_r+0x1e>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	b103      	cbz	r3, 800710e <_lseek_r+0x1e>
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	200004e4 	.word	0x200004e4

08007114 <_read_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4d07      	ldr	r5, [pc, #28]	@ (8007134 <_read_r+0x20>)
 8007118:	4604      	mov	r4, r0
 800711a:	4608      	mov	r0, r1
 800711c:	4611      	mov	r1, r2
 800711e:	2200      	movs	r2, #0
 8007120:	602a      	str	r2, [r5, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	f7ff f96d 	bl	8006402 <_read>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d102      	bne.n	8007132 <_read_r+0x1e>
 800712c:	682b      	ldr	r3, [r5, #0]
 800712e:	b103      	cbz	r3, 8007132 <_read_r+0x1e>
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	200004e4 	.word	0x200004e4

08007138 <_write_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	4d07      	ldr	r5, [pc, #28]	@ (8007158 <_write_r+0x20>)
 800713c:	4604      	mov	r4, r0
 800713e:	4608      	mov	r0, r1
 8007140:	4611      	mov	r1, r2
 8007142:	2200      	movs	r2, #0
 8007144:	602a      	str	r2, [r5, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	f7ff f978 	bl	800643c <_write>
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	d102      	bne.n	8007156 <_write_r+0x1e>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	b103      	cbz	r3, 8007156 <_write_r+0x1e>
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	200004e4 	.word	0x200004e4

0800715c <__errno>:
 800715c:	4b01      	ldr	r3, [pc, #4]	@ (8007164 <__errno+0x8>)
 800715e:	6818      	ldr	r0, [r3, #0]
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	2000001c 	.word	0x2000001c

08007168 <__libc_init_array>:
 8007168:	b570      	push	{r4, r5, r6, lr}
 800716a:	4d0d      	ldr	r5, [pc, #52]	@ (80071a0 <__libc_init_array+0x38>)
 800716c:	4c0d      	ldr	r4, [pc, #52]	@ (80071a4 <__libc_init_array+0x3c>)
 800716e:	1b64      	subs	r4, r4, r5
 8007170:	10a4      	asrs	r4, r4, #2
 8007172:	2600      	movs	r6, #0
 8007174:	42a6      	cmp	r6, r4
 8007176:	d109      	bne.n	800718c <__libc_init_array+0x24>
 8007178:	4d0b      	ldr	r5, [pc, #44]	@ (80071a8 <__libc_init_array+0x40>)
 800717a:	4c0c      	ldr	r4, [pc, #48]	@ (80071ac <__libc_init_array+0x44>)
 800717c:	f002 f864 	bl	8009248 <_init>
 8007180:	1b64      	subs	r4, r4, r5
 8007182:	10a4      	asrs	r4, r4, #2
 8007184:	2600      	movs	r6, #0
 8007186:	42a6      	cmp	r6, r4
 8007188:	d105      	bne.n	8007196 <__libc_init_array+0x2e>
 800718a:	bd70      	pop	{r4, r5, r6, pc}
 800718c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007190:	4798      	blx	r3
 8007192:	3601      	adds	r6, #1
 8007194:	e7ee      	b.n	8007174 <__libc_init_array+0xc>
 8007196:	f855 3b04 	ldr.w	r3, [r5], #4
 800719a:	4798      	blx	r3
 800719c:	3601      	adds	r6, #1
 800719e:	e7f2      	b.n	8007186 <__libc_init_array+0x1e>
 80071a0:	08009640 	.word	0x08009640
 80071a4:	08009640 	.word	0x08009640
 80071a8:	08009640 	.word	0x08009640
 80071ac:	08009644 	.word	0x08009644

080071b0 <__retarget_lock_init_recursive>:
 80071b0:	4770      	bx	lr

080071b2 <__retarget_lock_acquire_recursive>:
 80071b2:	4770      	bx	lr

080071b4 <__retarget_lock_release_recursive>:
 80071b4:	4770      	bx	lr

080071b6 <quorem>:
 80071b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	6903      	ldr	r3, [r0, #16]
 80071bc:	690c      	ldr	r4, [r1, #16]
 80071be:	42a3      	cmp	r3, r4
 80071c0:	4607      	mov	r7, r0
 80071c2:	db7e      	blt.n	80072c2 <quorem+0x10c>
 80071c4:	3c01      	subs	r4, #1
 80071c6:	f101 0814 	add.w	r8, r1, #20
 80071ca:	00a3      	lsls	r3, r4, #2
 80071cc:	f100 0514 	add.w	r5, r0, #20
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071e0:	3301      	adds	r3, #1
 80071e2:	429a      	cmp	r2, r3
 80071e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80071ec:	d32e      	bcc.n	800724c <quorem+0x96>
 80071ee:	f04f 0a00 	mov.w	sl, #0
 80071f2:	46c4      	mov	ip, r8
 80071f4:	46ae      	mov	lr, r5
 80071f6:	46d3      	mov	fp, sl
 80071f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071fc:	b298      	uxth	r0, r3
 80071fe:	fb06 a000 	mla	r0, r6, r0, sl
 8007202:	0c02      	lsrs	r2, r0, #16
 8007204:	0c1b      	lsrs	r3, r3, #16
 8007206:	fb06 2303 	mla	r3, r6, r3, r2
 800720a:	f8de 2000 	ldr.w	r2, [lr]
 800720e:	b280      	uxth	r0, r0
 8007210:	b292      	uxth	r2, r2
 8007212:	1a12      	subs	r2, r2, r0
 8007214:	445a      	add	r2, fp
 8007216:	f8de 0000 	ldr.w	r0, [lr]
 800721a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800721e:	b29b      	uxth	r3, r3
 8007220:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007224:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007228:	b292      	uxth	r2, r2
 800722a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800722e:	45e1      	cmp	r9, ip
 8007230:	f84e 2b04 	str.w	r2, [lr], #4
 8007234:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007238:	d2de      	bcs.n	80071f8 <quorem+0x42>
 800723a:	9b00      	ldr	r3, [sp, #0]
 800723c:	58eb      	ldr	r3, [r5, r3]
 800723e:	b92b      	cbnz	r3, 800724c <quorem+0x96>
 8007240:	9b01      	ldr	r3, [sp, #4]
 8007242:	3b04      	subs	r3, #4
 8007244:	429d      	cmp	r5, r3
 8007246:	461a      	mov	r2, r3
 8007248:	d32f      	bcc.n	80072aa <quorem+0xf4>
 800724a:	613c      	str	r4, [r7, #16]
 800724c:	4638      	mov	r0, r7
 800724e:	f001 f979 	bl	8008544 <__mcmp>
 8007252:	2800      	cmp	r0, #0
 8007254:	db25      	blt.n	80072a2 <quorem+0xec>
 8007256:	4629      	mov	r1, r5
 8007258:	2000      	movs	r0, #0
 800725a:	f858 2b04 	ldr.w	r2, [r8], #4
 800725e:	f8d1 c000 	ldr.w	ip, [r1]
 8007262:	fa1f fe82 	uxth.w	lr, r2
 8007266:	fa1f f38c 	uxth.w	r3, ip
 800726a:	eba3 030e 	sub.w	r3, r3, lr
 800726e:	4403      	add	r3, r0
 8007270:	0c12      	lsrs	r2, r2, #16
 8007272:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007276:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800727a:	b29b      	uxth	r3, r3
 800727c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007280:	45c1      	cmp	r9, r8
 8007282:	f841 3b04 	str.w	r3, [r1], #4
 8007286:	ea4f 4022 	mov.w	r0, r2, asr #16
 800728a:	d2e6      	bcs.n	800725a <quorem+0xa4>
 800728c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007290:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007294:	b922      	cbnz	r2, 80072a0 <quorem+0xea>
 8007296:	3b04      	subs	r3, #4
 8007298:	429d      	cmp	r5, r3
 800729a:	461a      	mov	r2, r3
 800729c:	d30b      	bcc.n	80072b6 <quorem+0x100>
 800729e:	613c      	str	r4, [r7, #16]
 80072a0:	3601      	adds	r6, #1
 80072a2:	4630      	mov	r0, r6
 80072a4:	b003      	add	sp, #12
 80072a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072aa:	6812      	ldr	r2, [r2, #0]
 80072ac:	3b04      	subs	r3, #4
 80072ae:	2a00      	cmp	r2, #0
 80072b0:	d1cb      	bne.n	800724a <quorem+0x94>
 80072b2:	3c01      	subs	r4, #1
 80072b4:	e7c6      	b.n	8007244 <quorem+0x8e>
 80072b6:	6812      	ldr	r2, [r2, #0]
 80072b8:	3b04      	subs	r3, #4
 80072ba:	2a00      	cmp	r2, #0
 80072bc:	d1ef      	bne.n	800729e <quorem+0xe8>
 80072be:	3c01      	subs	r4, #1
 80072c0:	e7ea      	b.n	8007298 <quorem+0xe2>
 80072c2:	2000      	movs	r0, #0
 80072c4:	e7ee      	b.n	80072a4 <quorem+0xee>
	...

080072c8 <_dtoa_r>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	69c7      	ldr	r7, [r0, #28]
 80072ce:	b099      	sub	sp, #100	@ 0x64
 80072d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80072d4:	ec55 4b10 	vmov	r4, r5, d0
 80072d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80072da:	9109      	str	r1, [sp, #36]	@ 0x24
 80072dc:	4683      	mov	fp, r0
 80072de:	920e      	str	r2, [sp, #56]	@ 0x38
 80072e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072e2:	b97f      	cbnz	r7, 8007304 <_dtoa_r+0x3c>
 80072e4:	2010      	movs	r0, #16
 80072e6:	f000 fdfd 	bl	8007ee4 <malloc>
 80072ea:	4602      	mov	r2, r0
 80072ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80072f0:	b920      	cbnz	r0, 80072fc <_dtoa_r+0x34>
 80072f2:	4ba7      	ldr	r3, [pc, #668]	@ (8007590 <_dtoa_r+0x2c8>)
 80072f4:	21ef      	movs	r1, #239	@ 0xef
 80072f6:	48a7      	ldr	r0, [pc, #668]	@ (8007594 <_dtoa_r+0x2cc>)
 80072f8:	f001 fc68 	bl	8008bcc <__assert_func>
 80072fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007300:	6007      	str	r7, [r0, #0]
 8007302:	60c7      	str	r7, [r0, #12]
 8007304:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007308:	6819      	ldr	r1, [r3, #0]
 800730a:	b159      	cbz	r1, 8007324 <_dtoa_r+0x5c>
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	604a      	str	r2, [r1, #4]
 8007310:	2301      	movs	r3, #1
 8007312:	4093      	lsls	r3, r2
 8007314:	608b      	str	r3, [r1, #8]
 8007316:	4658      	mov	r0, fp
 8007318:	f000 feda 	bl	80080d0 <_Bfree>
 800731c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007320:	2200      	movs	r2, #0
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	1e2b      	subs	r3, r5, #0
 8007326:	bfb9      	ittee	lt
 8007328:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800732c:	9303      	strlt	r3, [sp, #12]
 800732e:	2300      	movge	r3, #0
 8007330:	6033      	strge	r3, [r6, #0]
 8007332:	9f03      	ldr	r7, [sp, #12]
 8007334:	4b98      	ldr	r3, [pc, #608]	@ (8007598 <_dtoa_r+0x2d0>)
 8007336:	bfbc      	itt	lt
 8007338:	2201      	movlt	r2, #1
 800733a:	6032      	strlt	r2, [r6, #0]
 800733c:	43bb      	bics	r3, r7
 800733e:	d112      	bne.n	8007366 <_dtoa_r+0x9e>
 8007340:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007342:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800734c:	4323      	orrs	r3, r4
 800734e:	f000 854d 	beq.w	8007dec <_dtoa_r+0xb24>
 8007352:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007354:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80075ac <_dtoa_r+0x2e4>
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 854f 	beq.w	8007dfc <_dtoa_r+0xb34>
 800735e:	f10a 0303 	add.w	r3, sl, #3
 8007362:	f000 bd49 	b.w	8007df8 <_dtoa_r+0xb30>
 8007366:	ed9d 7b02 	vldr	d7, [sp, #8]
 800736a:	2200      	movs	r2, #0
 800736c:	ec51 0b17 	vmov	r0, r1, d7
 8007370:	2300      	movs	r3, #0
 8007372:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007376:	f7f9 fbc7 	bl	8000b08 <__aeabi_dcmpeq>
 800737a:	4680      	mov	r8, r0
 800737c:	b158      	cbz	r0, 8007396 <_dtoa_r+0xce>
 800737e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007380:	2301      	movs	r3, #1
 8007382:	6013      	str	r3, [r2, #0]
 8007384:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007386:	b113      	cbz	r3, 800738e <_dtoa_r+0xc6>
 8007388:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800738a:	4b84      	ldr	r3, [pc, #528]	@ (800759c <_dtoa_r+0x2d4>)
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80075b0 <_dtoa_r+0x2e8>
 8007392:	f000 bd33 	b.w	8007dfc <_dtoa_r+0xb34>
 8007396:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800739a:	aa16      	add	r2, sp, #88	@ 0x58
 800739c:	a917      	add	r1, sp, #92	@ 0x5c
 800739e:	4658      	mov	r0, fp
 80073a0:	f001 f980 	bl	80086a4 <__d2b>
 80073a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80073a8:	4681      	mov	r9, r0
 80073aa:	2e00      	cmp	r6, #0
 80073ac:	d077      	beq.n	800749e <_dtoa_r+0x1d6>
 80073ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80073b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80073c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80073c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073c8:	4619      	mov	r1, r3
 80073ca:	2200      	movs	r2, #0
 80073cc:	4b74      	ldr	r3, [pc, #464]	@ (80075a0 <_dtoa_r+0x2d8>)
 80073ce:	f7f8 ff7b 	bl	80002c8 <__aeabi_dsub>
 80073d2:	a369      	add	r3, pc, #420	@ (adr r3, 8007578 <_dtoa_r+0x2b0>)
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f7f9 f92e 	bl	8000638 <__aeabi_dmul>
 80073dc:	a368      	add	r3, pc, #416	@ (adr r3, 8007580 <_dtoa_r+0x2b8>)
 80073de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e2:	f7f8 ff73 	bl	80002cc <__adddf3>
 80073e6:	4604      	mov	r4, r0
 80073e8:	4630      	mov	r0, r6
 80073ea:	460d      	mov	r5, r1
 80073ec:	f7f9 f8ba 	bl	8000564 <__aeabi_i2d>
 80073f0:	a365      	add	r3, pc, #404	@ (adr r3, 8007588 <_dtoa_r+0x2c0>)
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	f7f9 f91f 	bl	8000638 <__aeabi_dmul>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4620      	mov	r0, r4
 8007400:	4629      	mov	r1, r5
 8007402:	f7f8 ff63 	bl	80002cc <__adddf3>
 8007406:	4604      	mov	r4, r0
 8007408:	460d      	mov	r5, r1
 800740a:	f7f9 fbc5 	bl	8000b98 <__aeabi_d2iz>
 800740e:	2200      	movs	r2, #0
 8007410:	4607      	mov	r7, r0
 8007412:	2300      	movs	r3, #0
 8007414:	4620      	mov	r0, r4
 8007416:	4629      	mov	r1, r5
 8007418:	f7f9 fb80 	bl	8000b1c <__aeabi_dcmplt>
 800741c:	b140      	cbz	r0, 8007430 <_dtoa_r+0x168>
 800741e:	4638      	mov	r0, r7
 8007420:	f7f9 f8a0 	bl	8000564 <__aeabi_i2d>
 8007424:	4622      	mov	r2, r4
 8007426:	462b      	mov	r3, r5
 8007428:	f7f9 fb6e 	bl	8000b08 <__aeabi_dcmpeq>
 800742c:	b900      	cbnz	r0, 8007430 <_dtoa_r+0x168>
 800742e:	3f01      	subs	r7, #1
 8007430:	2f16      	cmp	r7, #22
 8007432:	d851      	bhi.n	80074d8 <_dtoa_r+0x210>
 8007434:	4b5b      	ldr	r3, [pc, #364]	@ (80075a4 <_dtoa_r+0x2dc>)
 8007436:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007442:	f7f9 fb6b 	bl	8000b1c <__aeabi_dcmplt>
 8007446:	2800      	cmp	r0, #0
 8007448:	d048      	beq.n	80074dc <_dtoa_r+0x214>
 800744a:	3f01      	subs	r7, #1
 800744c:	2300      	movs	r3, #0
 800744e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007450:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007452:	1b9b      	subs	r3, r3, r6
 8007454:	1e5a      	subs	r2, r3, #1
 8007456:	bf44      	itt	mi
 8007458:	f1c3 0801 	rsbmi	r8, r3, #1
 800745c:	2300      	movmi	r3, #0
 800745e:	9208      	str	r2, [sp, #32]
 8007460:	bf54      	ite	pl
 8007462:	f04f 0800 	movpl.w	r8, #0
 8007466:	9308      	strmi	r3, [sp, #32]
 8007468:	2f00      	cmp	r7, #0
 800746a:	db39      	blt.n	80074e0 <_dtoa_r+0x218>
 800746c:	9b08      	ldr	r3, [sp, #32]
 800746e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007470:	443b      	add	r3, r7
 8007472:	9308      	str	r3, [sp, #32]
 8007474:	2300      	movs	r3, #0
 8007476:	930a      	str	r3, [sp, #40]	@ 0x28
 8007478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800747a:	2b09      	cmp	r3, #9
 800747c:	d864      	bhi.n	8007548 <_dtoa_r+0x280>
 800747e:	2b05      	cmp	r3, #5
 8007480:	bfc4      	itt	gt
 8007482:	3b04      	subgt	r3, #4
 8007484:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007488:	f1a3 0302 	sub.w	r3, r3, #2
 800748c:	bfcc      	ite	gt
 800748e:	2400      	movgt	r4, #0
 8007490:	2401      	movle	r4, #1
 8007492:	2b03      	cmp	r3, #3
 8007494:	d863      	bhi.n	800755e <_dtoa_r+0x296>
 8007496:	e8df f003 	tbb	[pc, r3]
 800749a:	372a      	.short	0x372a
 800749c:	5535      	.short	0x5535
 800749e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80074a2:	441e      	add	r6, r3
 80074a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074a8:	2b20      	cmp	r3, #32
 80074aa:	bfc1      	itttt	gt
 80074ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074b0:	409f      	lslgt	r7, r3
 80074b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80074b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80074ba:	bfd6      	itet	le
 80074bc:	f1c3 0320 	rsble	r3, r3, #32
 80074c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80074c4:	fa04 f003 	lslle.w	r0, r4, r3
 80074c8:	f7f9 f83c 	bl	8000544 <__aeabi_ui2d>
 80074cc:	2201      	movs	r2, #1
 80074ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074d2:	3e01      	subs	r6, #1
 80074d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80074d6:	e777      	b.n	80073c8 <_dtoa_r+0x100>
 80074d8:	2301      	movs	r3, #1
 80074da:	e7b8      	b.n	800744e <_dtoa_r+0x186>
 80074dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80074de:	e7b7      	b.n	8007450 <_dtoa_r+0x188>
 80074e0:	427b      	negs	r3, r7
 80074e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80074e4:	2300      	movs	r3, #0
 80074e6:	eba8 0807 	sub.w	r8, r8, r7
 80074ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074ec:	e7c4      	b.n	8007478 <_dtoa_r+0x1b0>
 80074ee:	2300      	movs	r3, #0
 80074f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	dc35      	bgt.n	8007564 <_dtoa_r+0x29c>
 80074f8:	2301      	movs	r3, #1
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	9307      	str	r3, [sp, #28]
 80074fe:	461a      	mov	r2, r3
 8007500:	920e      	str	r2, [sp, #56]	@ 0x38
 8007502:	e00b      	b.n	800751c <_dtoa_r+0x254>
 8007504:	2301      	movs	r3, #1
 8007506:	e7f3      	b.n	80074f0 <_dtoa_r+0x228>
 8007508:	2300      	movs	r3, #0
 800750a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800750c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800750e:	18fb      	adds	r3, r7, r3
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	3301      	adds	r3, #1
 8007514:	2b01      	cmp	r3, #1
 8007516:	9307      	str	r3, [sp, #28]
 8007518:	bfb8      	it	lt
 800751a:	2301      	movlt	r3, #1
 800751c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007520:	2100      	movs	r1, #0
 8007522:	2204      	movs	r2, #4
 8007524:	f102 0514 	add.w	r5, r2, #20
 8007528:	429d      	cmp	r5, r3
 800752a:	d91f      	bls.n	800756c <_dtoa_r+0x2a4>
 800752c:	6041      	str	r1, [r0, #4]
 800752e:	4658      	mov	r0, fp
 8007530:	f000 fd8e 	bl	8008050 <_Balloc>
 8007534:	4682      	mov	sl, r0
 8007536:	2800      	cmp	r0, #0
 8007538:	d13c      	bne.n	80075b4 <_dtoa_r+0x2ec>
 800753a:	4b1b      	ldr	r3, [pc, #108]	@ (80075a8 <_dtoa_r+0x2e0>)
 800753c:	4602      	mov	r2, r0
 800753e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007542:	e6d8      	b.n	80072f6 <_dtoa_r+0x2e>
 8007544:	2301      	movs	r3, #1
 8007546:	e7e0      	b.n	800750a <_dtoa_r+0x242>
 8007548:	2401      	movs	r4, #1
 800754a:	2300      	movs	r3, #0
 800754c:	9309      	str	r3, [sp, #36]	@ 0x24
 800754e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007550:	f04f 33ff 	mov.w	r3, #4294967295
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	9307      	str	r3, [sp, #28]
 8007558:	2200      	movs	r2, #0
 800755a:	2312      	movs	r3, #18
 800755c:	e7d0      	b.n	8007500 <_dtoa_r+0x238>
 800755e:	2301      	movs	r3, #1
 8007560:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007562:	e7f5      	b.n	8007550 <_dtoa_r+0x288>
 8007564:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	9307      	str	r3, [sp, #28]
 800756a:	e7d7      	b.n	800751c <_dtoa_r+0x254>
 800756c:	3101      	adds	r1, #1
 800756e:	0052      	lsls	r2, r2, #1
 8007570:	e7d8      	b.n	8007524 <_dtoa_r+0x25c>
 8007572:	bf00      	nop
 8007574:	f3af 8000 	nop.w
 8007578:	636f4361 	.word	0x636f4361
 800757c:	3fd287a7 	.word	0x3fd287a7
 8007580:	8b60c8b3 	.word	0x8b60c8b3
 8007584:	3fc68a28 	.word	0x3fc68a28
 8007588:	509f79fb 	.word	0x509f79fb
 800758c:	3fd34413 	.word	0x3fd34413
 8007590:	08009305 	.word	0x08009305
 8007594:	0800931c 	.word	0x0800931c
 8007598:	7ff00000 	.word	0x7ff00000
 800759c:	080092d5 	.word	0x080092d5
 80075a0:	3ff80000 	.word	0x3ff80000
 80075a4:	08009418 	.word	0x08009418
 80075a8:	08009374 	.word	0x08009374
 80075ac:	08009301 	.word	0x08009301
 80075b0:	080092d4 	.word	0x080092d4
 80075b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075b8:	6018      	str	r0, [r3, #0]
 80075ba:	9b07      	ldr	r3, [sp, #28]
 80075bc:	2b0e      	cmp	r3, #14
 80075be:	f200 80a4 	bhi.w	800770a <_dtoa_r+0x442>
 80075c2:	2c00      	cmp	r4, #0
 80075c4:	f000 80a1 	beq.w	800770a <_dtoa_r+0x442>
 80075c8:	2f00      	cmp	r7, #0
 80075ca:	dd33      	ble.n	8007634 <_dtoa_r+0x36c>
 80075cc:	4bad      	ldr	r3, [pc, #692]	@ (8007884 <_dtoa_r+0x5bc>)
 80075ce:	f007 020f 	and.w	r2, r7, #15
 80075d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075d6:	ed93 7b00 	vldr	d7, [r3]
 80075da:	05f8      	lsls	r0, r7, #23
 80075dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80075e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80075e4:	d516      	bpl.n	8007614 <_dtoa_r+0x34c>
 80075e6:	4ba8      	ldr	r3, [pc, #672]	@ (8007888 <_dtoa_r+0x5c0>)
 80075e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075f0:	f7f9 f94c 	bl	800088c <__aeabi_ddiv>
 80075f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075f8:	f004 040f 	and.w	r4, r4, #15
 80075fc:	2603      	movs	r6, #3
 80075fe:	4da2      	ldr	r5, [pc, #648]	@ (8007888 <_dtoa_r+0x5c0>)
 8007600:	b954      	cbnz	r4, 8007618 <_dtoa_r+0x350>
 8007602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800760a:	f7f9 f93f 	bl	800088c <__aeabi_ddiv>
 800760e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007612:	e028      	b.n	8007666 <_dtoa_r+0x39e>
 8007614:	2602      	movs	r6, #2
 8007616:	e7f2      	b.n	80075fe <_dtoa_r+0x336>
 8007618:	07e1      	lsls	r1, r4, #31
 800761a:	d508      	bpl.n	800762e <_dtoa_r+0x366>
 800761c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007620:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007624:	f7f9 f808 	bl	8000638 <__aeabi_dmul>
 8007628:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800762c:	3601      	adds	r6, #1
 800762e:	1064      	asrs	r4, r4, #1
 8007630:	3508      	adds	r5, #8
 8007632:	e7e5      	b.n	8007600 <_dtoa_r+0x338>
 8007634:	f000 80d2 	beq.w	80077dc <_dtoa_r+0x514>
 8007638:	427c      	negs	r4, r7
 800763a:	4b92      	ldr	r3, [pc, #584]	@ (8007884 <_dtoa_r+0x5bc>)
 800763c:	4d92      	ldr	r5, [pc, #584]	@ (8007888 <_dtoa_r+0x5c0>)
 800763e:	f004 020f 	and.w	r2, r4, #15
 8007642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800764e:	f7f8 fff3 	bl	8000638 <__aeabi_dmul>
 8007652:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007656:	1124      	asrs	r4, r4, #4
 8007658:	2300      	movs	r3, #0
 800765a:	2602      	movs	r6, #2
 800765c:	2c00      	cmp	r4, #0
 800765e:	f040 80b2 	bne.w	80077c6 <_dtoa_r+0x4fe>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1d3      	bne.n	800760e <_dtoa_r+0x346>
 8007666:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007668:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 80b7 	beq.w	80077e0 <_dtoa_r+0x518>
 8007672:	4b86      	ldr	r3, [pc, #536]	@ (800788c <_dtoa_r+0x5c4>)
 8007674:	2200      	movs	r2, #0
 8007676:	4620      	mov	r0, r4
 8007678:	4629      	mov	r1, r5
 800767a:	f7f9 fa4f 	bl	8000b1c <__aeabi_dcmplt>
 800767e:	2800      	cmp	r0, #0
 8007680:	f000 80ae 	beq.w	80077e0 <_dtoa_r+0x518>
 8007684:	9b07      	ldr	r3, [sp, #28]
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 80aa 	beq.w	80077e0 <_dtoa_r+0x518>
 800768c:	9b00      	ldr	r3, [sp, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	dd37      	ble.n	8007702 <_dtoa_r+0x43a>
 8007692:	1e7b      	subs	r3, r7, #1
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	4620      	mov	r0, r4
 8007698:	4b7d      	ldr	r3, [pc, #500]	@ (8007890 <_dtoa_r+0x5c8>)
 800769a:	2200      	movs	r2, #0
 800769c:	4629      	mov	r1, r5
 800769e:	f7f8 ffcb 	bl	8000638 <__aeabi_dmul>
 80076a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076a6:	9c00      	ldr	r4, [sp, #0]
 80076a8:	3601      	adds	r6, #1
 80076aa:	4630      	mov	r0, r6
 80076ac:	f7f8 ff5a 	bl	8000564 <__aeabi_i2d>
 80076b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076b4:	f7f8 ffc0 	bl	8000638 <__aeabi_dmul>
 80076b8:	4b76      	ldr	r3, [pc, #472]	@ (8007894 <_dtoa_r+0x5cc>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	f7f8 fe06 	bl	80002cc <__adddf3>
 80076c0:	4605      	mov	r5, r0
 80076c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80076c6:	2c00      	cmp	r4, #0
 80076c8:	f040 808d 	bne.w	80077e6 <_dtoa_r+0x51e>
 80076cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076d0:	4b71      	ldr	r3, [pc, #452]	@ (8007898 <_dtoa_r+0x5d0>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	f7f8 fdf8 	bl	80002c8 <__aeabi_dsub>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076e0:	462a      	mov	r2, r5
 80076e2:	4633      	mov	r3, r6
 80076e4:	f7f9 fa38 	bl	8000b58 <__aeabi_dcmpgt>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	f040 828b 	bne.w	8007c04 <_dtoa_r+0x93c>
 80076ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076f2:	462a      	mov	r2, r5
 80076f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80076f8:	f7f9 fa10 	bl	8000b1c <__aeabi_dcmplt>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	f040 8128 	bne.w	8007952 <_dtoa_r+0x68a>
 8007702:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007706:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800770a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800770c:	2b00      	cmp	r3, #0
 800770e:	f2c0 815a 	blt.w	80079c6 <_dtoa_r+0x6fe>
 8007712:	2f0e      	cmp	r7, #14
 8007714:	f300 8157 	bgt.w	80079c6 <_dtoa_r+0x6fe>
 8007718:	4b5a      	ldr	r3, [pc, #360]	@ (8007884 <_dtoa_r+0x5bc>)
 800771a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800771e:	ed93 7b00 	vldr	d7, [r3]
 8007722:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007724:	2b00      	cmp	r3, #0
 8007726:	ed8d 7b00 	vstr	d7, [sp]
 800772a:	da03      	bge.n	8007734 <_dtoa_r+0x46c>
 800772c:	9b07      	ldr	r3, [sp, #28]
 800772e:	2b00      	cmp	r3, #0
 8007730:	f340 8101 	ble.w	8007936 <_dtoa_r+0x66e>
 8007734:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007738:	4656      	mov	r6, sl
 800773a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800773e:	4620      	mov	r0, r4
 8007740:	4629      	mov	r1, r5
 8007742:	f7f9 f8a3 	bl	800088c <__aeabi_ddiv>
 8007746:	f7f9 fa27 	bl	8000b98 <__aeabi_d2iz>
 800774a:	4680      	mov	r8, r0
 800774c:	f7f8 ff0a 	bl	8000564 <__aeabi_i2d>
 8007750:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007754:	f7f8 ff70 	bl	8000638 <__aeabi_dmul>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4620      	mov	r0, r4
 800775e:	4629      	mov	r1, r5
 8007760:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007764:	f7f8 fdb0 	bl	80002c8 <__aeabi_dsub>
 8007768:	f806 4b01 	strb.w	r4, [r6], #1
 800776c:	9d07      	ldr	r5, [sp, #28]
 800776e:	eba6 040a 	sub.w	r4, r6, sl
 8007772:	42a5      	cmp	r5, r4
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	f040 8117 	bne.w	80079aa <_dtoa_r+0x6e2>
 800777c:	f7f8 fda6 	bl	80002cc <__adddf3>
 8007780:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007784:	4604      	mov	r4, r0
 8007786:	460d      	mov	r5, r1
 8007788:	f7f9 f9e6 	bl	8000b58 <__aeabi_dcmpgt>
 800778c:	2800      	cmp	r0, #0
 800778e:	f040 80f9 	bne.w	8007984 <_dtoa_r+0x6bc>
 8007792:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007796:	4620      	mov	r0, r4
 8007798:	4629      	mov	r1, r5
 800779a:	f7f9 f9b5 	bl	8000b08 <__aeabi_dcmpeq>
 800779e:	b118      	cbz	r0, 80077a8 <_dtoa_r+0x4e0>
 80077a0:	f018 0f01 	tst.w	r8, #1
 80077a4:	f040 80ee 	bne.w	8007984 <_dtoa_r+0x6bc>
 80077a8:	4649      	mov	r1, r9
 80077aa:	4658      	mov	r0, fp
 80077ac:	f000 fc90 	bl	80080d0 <_Bfree>
 80077b0:	2300      	movs	r3, #0
 80077b2:	7033      	strb	r3, [r6, #0]
 80077b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077b6:	3701      	adds	r7, #1
 80077b8:	601f      	str	r7, [r3, #0]
 80077ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 831d 	beq.w	8007dfc <_dtoa_r+0xb34>
 80077c2:	601e      	str	r6, [r3, #0]
 80077c4:	e31a      	b.n	8007dfc <_dtoa_r+0xb34>
 80077c6:	07e2      	lsls	r2, r4, #31
 80077c8:	d505      	bpl.n	80077d6 <_dtoa_r+0x50e>
 80077ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077ce:	f7f8 ff33 	bl	8000638 <__aeabi_dmul>
 80077d2:	3601      	adds	r6, #1
 80077d4:	2301      	movs	r3, #1
 80077d6:	1064      	asrs	r4, r4, #1
 80077d8:	3508      	adds	r5, #8
 80077da:	e73f      	b.n	800765c <_dtoa_r+0x394>
 80077dc:	2602      	movs	r6, #2
 80077de:	e742      	b.n	8007666 <_dtoa_r+0x39e>
 80077e0:	9c07      	ldr	r4, [sp, #28]
 80077e2:	9704      	str	r7, [sp, #16]
 80077e4:	e761      	b.n	80076aa <_dtoa_r+0x3e2>
 80077e6:	4b27      	ldr	r3, [pc, #156]	@ (8007884 <_dtoa_r+0x5bc>)
 80077e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077f2:	4454      	add	r4, sl
 80077f4:	2900      	cmp	r1, #0
 80077f6:	d053      	beq.n	80078a0 <_dtoa_r+0x5d8>
 80077f8:	4928      	ldr	r1, [pc, #160]	@ (800789c <_dtoa_r+0x5d4>)
 80077fa:	2000      	movs	r0, #0
 80077fc:	f7f9 f846 	bl	800088c <__aeabi_ddiv>
 8007800:	4633      	mov	r3, r6
 8007802:	462a      	mov	r2, r5
 8007804:	f7f8 fd60 	bl	80002c8 <__aeabi_dsub>
 8007808:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800780c:	4656      	mov	r6, sl
 800780e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007812:	f7f9 f9c1 	bl	8000b98 <__aeabi_d2iz>
 8007816:	4605      	mov	r5, r0
 8007818:	f7f8 fea4 	bl	8000564 <__aeabi_i2d>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007824:	f7f8 fd50 	bl	80002c8 <__aeabi_dsub>
 8007828:	3530      	adds	r5, #48	@ 0x30
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007832:	f806 5b01 	strb.w	r5, [r6], #1
 8007836:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800783a:	f7f9 f96f 	bl	8000b1c <__aeabi_dcmplt>
 800783e:	2800      	cmp	r0, #0
 8007840:	d171      	bne.n	8007926 <_dtoa_r+0x65e>
 8007842:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007846:	4911      	ldr	r1, [pc, #68]	@ (800788c <_dtoa_r+0x5c4>)
 8007848:	2000      	movs	r0, #0
 800784a:	f7f8 fd3d 	bl	80002c8 <__aeabi_dsub>
 800784e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007852:	f7f9 f963 	bl	8000b1c <__aeabi_dcmplt>
 8007856:	2800      	cmp	r0, #0
 8007858:	f040 8095 	bne.w	8007986 <_dtoa_r+0x6be>
 800785c:	42a6      	cmp	r6, r4
 800785e:	f43f af50 	beq.w	8007702 <_dtoa_r+0x43a>
 8007862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007866:	4b0a      	ldr	r3, [pc, #40]	@ (8007890 <_dtoa_r+0x5c8>)
 8007868:	2200      	movs	r2, #0
 800786a:	f7f8 fee5 	bl	8000638 <__aeabi_dmul>
 800786e:	4b08      	ldr	r3, [pc, #32]	@ (8007890 <_dtoa_r+0x5c8>)
 8007870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007874:	2200      	movs	r2, #0
 8007876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800787a:	f7f8 fedd 	bl	8000638 <__aeabi_dmul>
 800787e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007882:	e7c4      	b.n	800780e <_dtoa_r+0x546>
 8007884:	08009418 	.word	0x08009418
 8007888:	080093f0 	.word	0x080093f0
 800788c:	3ff00000 	.word	0x3ff00000
 8007890:	40240000 	.word	0x40240000
 8007894:	401c0000 	.word	0x401c0000
 8007898:	40140000 	.word	0x40140000
 800789c:	3fe00000 	.word	0x3fe00000
 80078a0:	4631      	mov	r1, r6
 80078a2:	4628      	mov	r0, r5
 80078a4:	f7f8 fec8 	bl	8000638 <__aeabi_dmul>
 80078a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80078ae:	4656      	mov	r6, sl
 80078b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078b4:	f7f9 f970 	bl	8000b98 <__aeabi_d2iz>
 80078b8:	4605      	mov	r5, r0
 80078ba:	f7f8 fe53 	bl	8000564 <__aeabi_i2d>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078c6:	f7f8 fcff 	bl	80002c8 <__aeabi_dsub>
 80078ca:	3530      	adds	r5, #48	@ 0x30
 80078cc:	f806 5b01 	strb.w	r5, [r6], #1
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	42a6      	cmp	r6, r4
 80078d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078da:	f04f 0200 	mov.w	r2, #0
 80078de:	d124      	bne.n	800792a <_dtoa_r+0x662>
 80078e0:	4bac      	ldr	r3, [pc, #688]	@ (8007b94 <_dtoa_r+0x8cc>)
 80078e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078e6:	f7f8 fcf1 	bl	80002cc <__adddf3>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078f2:	f7f9 f931 	bl	8000b58 <__aeabi_dcmpgt>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d145      	bne.n	8007986 <_dtoa_r+0x6be>
 80078fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078fe:	49a5      	ldr	r1, [pc, #660]	@ (8007b94 <_dtoa_r+0x8cc>)
 8007900:	2000      	movs	r0, #0
 8007902:	f7f8 fce1 	bl	80002c8 <__aeabi_dsub>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800790e:	f7f9 f905 	bl	8000b1c <__aeabi_dcmplt>
 8007912:	2800      	cmp	r0, #0
 8007914:	f43f aef5 	beq.w	8007702 <_dtoa_r+0x43a>
 8007918:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800791a:	1e73      	subs	r3, r6, #1
 800791c:	9315      	str	r3, [sp, #84]	@ 0x54
 800791e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007922:	2b30      	cmp	r3, #48	@ 0x30
 8007924:	d0f8      	beq.n	8007918 <_dtoa_r+0x650>
 8007926:	9f04      	ldr	r7, [sp, #16]
 8007928:	e73e      	b.n	80077a8 <_dtoa_r+0x4e0>
 800792a:	4b9b      	ldr	r3, [pc, #620]	@ (8007b98 <_dtoa_r+0x8d0>)
 800792c:	f7f8 fe84 	bl	8000638 <__aeabi_dmul>
 8007930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007934:	e7bc      	b.n	80078b0 <_dtoa_r+0x5e8>
 8007936:	d10c      	bne.n	8007952 <_dtoa_r+0x68a>
 8007938:	4b98      	ldr	r3, [pc, #608]	@ (8007b9c <_dtoa_r+0x8d4>)
 800793a:	2200      	movs	r2, #0
 800793c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007940:	f7f8 fe7a 	bl	8000638 <__aeabi_dmul>
 8007944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007948:	f7f9 f8fc 	bl	8000b44 <__aeabi_dcmpge>
 800794c:	2800      	cmp	r0, #0
 800794e:	f000 8157 	beq.w	8007c00 <_dtoa_r+0x938>
 8007952:	2400      	movs	r4, #0
 8007954:	4625      	mov	r5, r4
 8007956:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007958:	43db      	mvns	r3, r3
 800795a:	9304      	str	r3, [sp, #16]
 800795c:	4656      	mov	r6, sl
 800795e:	2700      	movs	r7, #0
 8007960:	4621      	mov	r1, r4
 8007962:	4658      	mov	r0, fp
 8007964:	f000 fbb4 	bl	80080d0 <_Bfree>
 8007968:	2d00      	cmp	r5, #0
 800796a:	d0dc      	beq.n	8007926 <_dtoa_r+0x65e>
 800796c:	b12f      	cbz	r7, 800797a <_dtoa_r+0x6b2>
 800796e:	42af      	cmp	r7, r5
 8007970:	d003      	beq.n	800797a <_dtoa_r+0x6b2>
 8007972:	4639      	mov	r1, r7
 8007974:	4658      	mov	r0, fp
 8007976:	f000 fbab 	bl	80080d0 <_Bfree>
 800797a:	4629      	mov	r1, r5
 800797c:	4658      	mov	r0, fp
 800797e:	f000 fba7 	bl	80080d0 <_Bfree>
 8007982:	e7d0      	b.n	8007926 <_dtoa_r+0x65e>
 8007984:	9704      	str	r7, [sp, #16]
 8007986:	4633      	mov	r3, r6
 8007988:	461e      	mov	r6, r3
 800798a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800798e:	2a39      	cmp	r2, #57	@ 0x39
 8007990:	d107      	bne.n	80079a2 <_dtoa_r+0x6da>
 8007992:	459a      	cmp	sl, r3
 8007994:	d1f8      	bne.n	8007988 <_dtoa_r+0x6c0>
 8007996:	9a04      	ldr	r2, [sp, #16]
 8007998:	3201      	adds	r2, #1
 800799a:	9204      	str	r2, [sp, #16]
 800799c:	2230      	movs	r2, #48	@ 0x30
 800799e:	f88a 2000 	strb.w	r2, [sl]
 80079a2:	781a      	ldrb	r2, [r3, #0]
 80079a4:	3201      	adds	r2, #1
 80079a6:	701a      	strb	r2, [r3, #0]
 80079a8:	e7bd      	b.n	8007926 <_dtoa_r+0x65e>
 80079aa:	4b7b      	ldr	r3, [pc, #492]	@ (8007b98 <_dtoa_r+0x8d0>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	f7f8 fe43 	bl	8000638 <__aeabi_dmul>
 80079b2:	2200      	movs	r2, #0
 80079b4:	2300      	movs	r3, #0
 80079b6:	4604      	mov	r4, r0
 80079b8:	460d      	mov	r5, r1
 80079ba:	f7f9 f8a5 	bl	8000b08 <__aeabi_dcmpeq>
 80079be:	2800      	cmp	r0, #0
 80079c0:	f43f aebb 	beq.w	800773a <_dtoa_r+0x472>
 80079c4:	e6f0      	b.n	80077a8 <_dtoa_r+0x4e0>
 80079c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80079c8:	2a00      	cmp	r2, #0
 80079ca:	f000 80db 	beq.w	8007b84 <_dtoa_r+0x8bc>
 80079ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079d0:	2a01      	cmp	r2, #1
 80079d2:	f300 80bf 	bgt.w	8007b54 <_dtoa_r+0x88c>
 80079d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80079d8:	2a00      	cmp	r2, #0
 80079da:	f000 80b7 	beq.w	8007b4c <_dtoa_r+0x884>
 80079de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079e4:	4646      	mov	r6, r8
 80079e6:	9a08      	ldr	r2, [sp, #32]
 80079e8:	2101      	movs	r1, #1
 80079ea:	441a      	add	r2, r3
 80079ec:	4658      	mov	r0, fp
 80079ee:	4498      	add	r8, r3
 80079f0:	9208      	str	r2, [sp, #32]
 80079f2:	f000 fc21 	bl	8008238 <__i2b>
 80079f6:	4605      	mov	r5, r0
 80079f8:	b15e      	cbz	r6, 8007a12 <_dtoa_r+0x74a>
 80079fa:	9b08      	ldr	r3, [sp, #32]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	dd08      	ble.n	8007a12 <_dtoa_r+0x74a>
 8007a00:	42b3      	cmp	r3, r6
 8007a02:	9a08      	ldr	r2, [sp, #32]
 8007a04:	bfa8      	it	ge
 8007a06:	4633      	movge	r3, r6
 8007a08:	eba8 0803 	sub.w	r8, r8, r3
 8007a0c:	1af6      	subs	r6, r6, r3
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	9308      	str	r3, [sp, #32]
 8007a12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a14:	b1f3      	cbz	r3, 8007a54 <_dtoa_r+0x78c>
 8007a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 80b7 	beq.w	8007b8c <_dtoa_r+0x8c4>
 8007a1e:	b18c      	cbz	r4, 8007a44 <_dtoa_r+0x77c>
 8007a20:	4629      	mov	r1, r5
 8007a22:	4622      	mov	r2, r4
 8007a24:	4658      	mov	r0, fp
 8007a26:	f000 fcc7 	bl	80083b8 <__pow5mult>
 8007a2a:	464a      	mov	r2, r9
 8007a2c:	4601      	mov	r1, r0
 8007a2e:	4605      	mov	r5, r0
 8007a30:	4658      	mov	r0, fp
 8007a32:	f000 fc17 	bl	8008264 <__multiply>
 8007a36:	4649      	mov	r1, r9
 8007a38:	9004      	str	r0, [sp, #16]
 8007a3a:	4658      	mov	r0, fp
 8007a3c:	f000 fb48 	bl	80080d0 <_Bfree>
 8007a40:	9b04      	ldr	r3, [sp, #16]
 8007a42:	4699      	mov	r9, r3
 8007a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a46:	1b1a      	subs	r2, r3, r4
 8007a48:	d004      	beq.n	8007a54 <_dtoa_r+0x78c>
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	4658      	mov	r0, fp
 8007a4e:	f000 fcb3 	bl	80083b8 <__pow5mult>
 8007a52:	4681      	mov	r9, r0
 8007a54:	2101      	movs	r1, #1
 8007a56:	4658      	mov	r0, fp
 8007a58:	f000 fbee 	bl	8008238 <__i2b>
 8007a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a5e:	4604      	mov	r4, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 81cf 	beq.w	8007e04 <_dtoa_r+0xb3c>
 8007a66:	461a      	mov	r2, r3
 8007a68:	4601      	mov	r1, r0
 8007a6a:	4658      	mov	r0, fp
 8007a6c:	f000 fca4 	bl	80083b8 <__pow5mult>
 8007a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	4604      	mov	r4, r0
 8007a76:	f300 8095 	bgt.w	8007ba4 <_dtoa_r+0x8dc>
 8007a7a:	9b02      	ldr	r3, [sp, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f040 8087 	bne.w	8007b90 <_dtoa_r+0x8c8>
 8007a82:	9b03      	ldr	r3, [sp, #12]
 8007a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f040 8089 	bne.w	8007ba0 <_dtoa_r+0x8d8>
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a94:	0d1b      	lsrs	r3, r3, #20
 8007a96:	051b      	lsls	r3, r3, #20
 8007a98:	b12b      	cbz	r3, 8007aa6 <_dtoa_r+0x7de>
 8007a9a:	9b08      	ldr	r3, [sp, #32]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	9308      	str	r3, [sp, #32]
 8007aa0:	f108 0801 	add.w	r8, r8, #1
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 81b0 	beq.w	8007e10 <_dtoa_r+0xb48>
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ab6:	6918      	ldr	r0, [r3, #16]
 8007ab8:	f000 fb72 	bl	80081a0 <__hi0bits>
 8007abc:	f1c0 0020 	rsb	r0, r0, #32
 8007ac0:	9b08      	ldr	r3, [sp, #32]
 8007ac2:	4418      	add	r0, r3
 8007ac4:	f010 001f 	ands.w	r0, r0, #31
 8007ac8:	d077      	beq.n	8007bba <_dtoa_r+0x8f2>
 8007aca:	f1c0 0320 	rsb	r3, r0, #32
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	dd6b      	ble.n	8007baa <_dtoa_r+0x8e2>
 8007ad2:	9b08      	ldr	r3, [sp, #32]
 8007ad4:	f1c0 001c 	rsb	r0, r0, #28
 8007ad8:	4403      	add	r3, r0
 8007ada:	4480      	add	r8, r0
 8007adc:	4406      	add	r6, r0
 8007ade:	9308      	str	r3, [sp, #32]
 8007ae0:	f1b8 0f00 	cmp.w	r8, #0
 8007ae4:	dd05      	ble.n	8007af2 <_dtoa_r+0x82a>
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	4642      	mov	r2, r8
 8007aea:	4658      	mov	r0, fp
 8007aec:	f000 fcbe 	bl	800846c <__lshift>
 8007af0:	4681      	mov	r9, r0
 8007af2:	9b08      	ldr	r3, [sp, #32]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	dd05      	ble.n	8007b04 <_dtoa_r+0x83c>
 8007af8:	4621      	mov	r1, r4
 8007afa:	461a      	mov	r2, r3
 8007afc:	4658      	mov	r0, fp
 8007afe:	f000 fcb5 	bl	800846c <__lshift>
 8007b02:	4604      	mov	r4, r0
 8007b04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d059      	beq.n	8007bbe <_dtoa_r+0x8f6>
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	4648      	mov	r0, r9
 8007b0e:	f000 fd19 	bl	8008544 <__mcmp>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	da53      	bge.n	8007bbe <_dtoa_r+0x8f6>
 8007b16:	1e7b      	subs	r3, r7, #1
 8007b18:	9304      	str	r3, [sp, #16]
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	220a      	movs	r2, #10
 8007b20:	4658      	mov	r0, fp
 8007b22:	f000 faf7 	bl	8008114 <__multadd>
 8007b26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b28:	4681      	mov	r9, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f000 8172 	beq.w	8007e14 <_dtoa_r+0xb4c>
 8007b30:	2300      	movs	r3, #0
 8007b32:	4629      	mov	r1, r5
 8007b34:	220a      	movs	r2, #10
 8007b36:	4658      	mov	r0, fp
 8007b38:	f000 faec 	bl	8008114 <__multadd>
 8007b3c:	9b00      	ldr	r3, [sp, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	4605      	mov	r5, r0
 8007b42:	dc67      	bgt.n	8007c14 <_dtoa_r+0x94c>
 8007b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	dc41      	bgt.n	8007bce <_dtoa_r+0x906>
 8007b4a:	e063      	b.n	8007c14 <_dtoa_r+0x94c>
 8007b4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b52:	e746      	b.n	80079e2 <_dtoa_r+0x71a>
 8007b54:	9b07      	ldr	r3, [sp, #28]
 8007b56:	1e5c      	subs	r4, r3, #1
 8007b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b5a:	42a3      	cmp	r3, r4
 8007b5c:	bfbf      	itttt	lt
 8007b5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007b62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b64:	1ae3      	sublt	r3, r4, r3
 8007b66:	bfb4      	ite	lt
 8007b68:	18d2      	addlt	r2, r2, r3
 8007b6a:	1b1c      	subge	r4, r3, r4
 8007b6c:	9b07      	ldr	r3, [sp, #28]
 8007b6e:	bfbc      	itt	lt
 8007b70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007b72:	2400      	movlt	r4, #0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	bfb5      	itete	lt
 8007b78:	eba8 0603 	sublt.w	r6, r8, r3
 8007b7c:	9b07      	ldrge	r3, [sp, #28]
 8007b7e:	2300      	movlt	r3, #0
 8007b80:	4646      	movge	r6, r8
 8007b82:	e730      	b.n	80079e6 <_dtoa_r+0x71e>
 8007b84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b88:	4646      	mov	r6, r8
 8007b8a:	e735      	b.n	80079f8 <_dtoa_r+0x730>
 8007b8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b8e:	e75c      	b.n	8007a4a <_dtoa_r+0x782>
 8007b90:	2300      	movs	r3, #0
 8007b92:	e788      	b.n	8007aa6 <_dtoa_r+0x7de>
 8007b94:	3fe00000 	.word	0x3fe00000
 8007b98:	40240000 	.word	0x40240000
 8007b9c:	40140000 	.word	0x40140000
 8007ba0:	9b02      	ldr	r3, [sp, #8]
 8007ba2:	e780      	b.n	8007aa6 <_dtoa_r+0x7de>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ba8:	e782      	b.n	8007ab0 <_dtoa_r+0x7e8>
 8007baa:	d099      	beq.n	8007ae0 <_dtoa_r+0x818>
 8007bac:	9a08      	ldr	r2, [sp, #32]
 8007bae:	331c      	adds	r3, #28
 8007bb0:	441a      	add	r2, r3
 8007bb2:	4498      	add	r8, r3
 8007bb4:	441e      	add	r6, r3
 8007bb6:	9208      	str	r2, [sp, #32]
 8007bb8:	e792      	b.n	8007ae0 <_dtoa_r+0x818>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	e7f6      	b.n	8007bac <_dtoa_r+0x8e4>
 8007bbe:	9b07      	ldr	r3, [sp, #28]
 8007bc0:	9704      	str	r7, [sp, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dc20      	bgt.n	8007c08 <_dtoa_r+0x940>
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	dd1e      	ble.n	8007c0c <_dtoa_r+0x944>
 8007bce:	9b00      	ldr	r3, [sp, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f47f aec0 	bne.w	8007956 <_dtoa_r+0x68e>
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	2205      	movs	r2, #5
 8007bda:	4658      	mov	r0, fp
 8007bdc:	f000 fa9a 	bl	8008114 <__multadd>
 8007be0:	4601      	mov	r1, r0
 8007be2:	4604      	mov	r4, r0
 8007be4:	4648      	mov	r0, r9
 8007be6:	f000 fcad 	bl	8008544 <__mcmp>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	f77f aeb3 	ble.w	8007956 <_dtoa_r+0x68e>
 8007bf0:	4656      	mov	r6, sl
 8007bf2:	2331      	movs	r3, #49	@ 0x31
 8007bf4:	f806 3b01 	strb.w	r3, [r6], #1
 8007bf8:	9b04      	ldr	r3, [sp, #16]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	9304      	str	r3, [sp, #16]
 8007bfe:	e6ae      	b.n	800795e <_dtoa_r+0x696>
 8007c00:	9c07      	ldr	r4, [sp, #28]
 8007c02:	9704      	str	r7, [sp, #16]
 8007c04:	4625      	mov	r5, r4
 8007c06:	e7f3      	b.n	8007bf0 <_dtoa_r+0x928>
 8007c08:	9b07      	ldr	r3, [sp, #28]
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 8104 	beq.w	8007e1c <_dtoa_r+0xb54>
 8007c14:	2e00      	cmp	r6, #0
 8007c16:	dd05      	ble.n	8007c24 <_dtoa_r+0x95c>
 8007c18:	4629      	mov	r1, r5
 8007c1a:	4632      	mov	r2, r6
 8007c1c:	4658      	mov	r0, fp
 8007c1e:	f000 fc25 	bl	800846c <__lshift>
 8007c22:	4605      	mov	r5, r0
 8007c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d05a      	beq.n	8007ce0 <_dtoa_r+0xa18>
 8007c2a:	6869      	ldr	r1, [r5, #4]
 8007c2c:	4658      	mov	r0, fp
 8007c2e:	f000 fa0f 	bl	8008050 <_Balloc>
 8007c32:	4606      	mov	r6, r0
 8007c34:	b928      	cbnz	r0, 8007c42 <_dtoa_r+0x97a>
 8007c36:	4b84      	ldr	r3, [pc, #528]	@ (8007e48 <_dtoa_r+0xb80>)
 8007c38:	4602      	mov	r2, r0
 8007c3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c3e:	f7ff bb5a 	b.w	80072f6 <_dtoa_r+0x2e>
 8007c42:	692a      	ldr	r2, [r5, #16]
 8007c44:	3202      	adds	r2, #2
 8007c46:	0092      	lsls	r2, r2, #2
 8007c48:	f105 010c 	add.w	r1, r5, #12
 8007c4c:	300c      	adds	r0, #12
 8007c4e:	f000 ffaf 	bl	8008bb0 <memcpy>
 8007c52:	2201      	movs	r2, #1
 8007c54:	4631      	mov	r1, r6
 8007c56:	4658      	mov	r0, fp
 8007c58:	f000 fc08 	bl	800846c <__lshift>
 8007c5c:	f10a 0301 	add.w	r3, sl, #1
 8007c60:	9307      	str	r3, [sp, #28]
 8007c62:	9b00      	ldr	r3, [sp, #0]
 8007c64:	4453      	add	r3, sl
 8007c66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c68:	9b02      	ldr	r3, [sp, #8]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	462f      	mov	r7, r5
 8007c70:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c72:	4605      	mov	r5, r0
 8007c74:	9b07      	ldr	r3, [sp, #28]
 8007c76:	4621      	mov	r1, r4
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	4648      	mov	r0, r9
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	f7ff fa9a 	bl	80071b6 <quorem>
 8007c82:	4639      	mov	r1, r7
 8007c84:	9002      	str	r0, [sp, #8]
 8007c86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c8a:	4648      	mov	r0, r9
 8007c8c:	f000 fc5a 	bl	8008544 <__mcmp>
 8007c90:	462a      	mov	r2, r5
 8007c92:	9008      	str	r0, [sp, #32]
 8007c94:	4621      	mov	r1, r4
 8007c96:	4658      	mov	r0, fp
 8007c98:	f000 fc70 	bl	800857c <__mdiff>
 8007c9c:	68c2      	ldr	r2, [r0, #12]
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	bb02      	cbnz	r2, 8007ce4 <_dtoa_r+0xa1c>
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	4648      	mov	r0, r9
 8007ca6:	f000 fc4d 	bl	8008544 <__mcmp>
 8007caa:	4602      	mov	r2, r0
 8007cac:	4631      	mov	r1, r6
 8007cae:	4658      	mov	r0, fp
 8007cb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cb2:	f000 fa0d 	bl	80080d0 <_Bfree>
 8007cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cba:	9e07      	ldr	r6, [sp, #28]
 8007cbc:	ea43 0102 	orr.w	r1, r3, r2
 8007cc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cc2:	4319      	orrs	r1, r3
 8007cc4:	d110      	bne.n	8007ce8 <_dtoa_r+0xa20>
 8007cc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cca:	d029      	beq.n	8007d20 <_dtoa_r+0xa58>
 8007ccc:	9b08      	ldr	r3, [sp, #32]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	dd02      	ble.n	8007cd8 <_dtoa_r+0xa10>
 8007cd2:	9b02      	ldr	r3, [sp, #8]
 8007cd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007cd8:	9b00      	ldr	r3, [sp, #0]
 8007cda:	f883 8000 	strb.w	r8, [r3]
 8007cde:	e63f      	b.n	8007960 <_dtoa_r+0x698>
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	e7bb      	b.n	8007c5c <_dtoa_r+0x994>
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	e7e1      	b.n	8007cac <_dtoa_r+0x9e4>
 8007ce8:	9b08      	ldr	r3, [sp, #32]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	db04      	blt.n	8007cf8 <_dtoa_r+0xa30>
 8007cee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cf0:	430b      	orrs	r3, r1
 8007cf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	d120      	bne.n	8007d3a <_dtoa_r+0xa72>
 8007cf8:	2a00      	cmp	r2, #0
 8007cfa:	dded      	ble.n	8007cd8 <_dtoa_r+0xa10>
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4658      	mov	r0, fp
 8007d02:	f000 fbb3 	bl	800846c <__lshift>
 8007d06:	4621      	mov	r1, r4
 8007d08:	4681      	mov	r9, r0
 8007d0a:	f000 fc1b 	bl	8008544 <__mcmp>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	dc03      	bgt.n	8007d1a <_dtoa_r+0xa52>
 8007d12:	d1e1      	bne.n	8007cd8 <_dtoa_r+0xa10>
 8007d14:	f018 0f01 	tst.w	r8, #1
 8007d18:	d0de      	beq.n	8007cd8 <_dtoa_r+0xa10>
 8007d1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d1e:	d1d8      	bne.n	8007cd2 <_dtoa_r+0xa0a>
 8007d20:	9a00      	ldr	r2, [sp, #0]
 8007d22:	2339      	movs	r3, #57	@ 0x39
 8007d24:	7013      	strb	r3, [r2, #0]
 8007d26:	4633      	mov	r3, r6
 8007d28:	461e      	mov	r6, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d30:	2a39      	cmp	r2, #57	@ 0x39
 8007d32:	d052      	beq.n	8007dda <_dtoa_r+0xb12>
 8007d34:	3201      	adds	r2, #1
 8007d36:	701a      	strb	r2, [r3, #0]
 8007d38:	e612      	b.n	8007960 <_dtoa_r+0x698>
 8007d3a:	2a00      	cmp	r2, #0
 8007d3c:	dd07      	ble.n	8007d4e <_dtoa_r+0xa86>
 8007d3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d42:	d0ed      	beq.n	8007d20 <_dtoa_r+0xa58>
 8007d44:	9a00      	ldr	r2, [sp, #0]
 8007d46:	f108 0301 	add.w	r3, r8, #1
 8007d4a:	7013      	strb	r3, [r2, #0]
 8007d4c:	e608      	b.n	8007960 <_dtoa_r+0x698>
 8007d4e:	9b07      	ldr	r3, [sp, #28]
 8007d50:	9a07      	ldr	r2, [sp, #28]
 8007d52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d028      	beq.n	8007dae <_dtoa_r+0xae6>
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	2300      	movs	r3, #0
 8007d60:	220a      	movs	r2, #10
 8007d62:	4658      	mov	r0, fp
 8007d64:	f000 f9d6 	bl	8008114 <__multadd>
 8007d68:	42af      	cmp	r7, r5
 8007d6a:	4681      	mov	r9, r0
 8007d6c:	f04f 0300 	mov.w	r3, #0
 8007d70:	f04f 020a 	mov.w	r2, #10
 8007d74:	4639      	mov	r1, r7
 8007d76:	4658      	mov	r0, fp
 8007d78:	d107      	bne.n	8007d8a <_dtoa_r+0xac2>
 8007d7a:	f000 f9cb 	bl	8008114 <__multadd>
 8007d7e:	4607      	mov	r7, r0
 8007d80:	4605      	mov	r5, r0
 8007d82:	9b07      	ldr	r3, [sp, #28]
 8007d84:	3301      	adds	r3, #1
 8007d86:	9307      	str	r3, [sp, #28]
 8007d88:	e774      	b.n	8007c74 <_dtoa_r+0x9ac>
 8007d8a:	f000 f9c3 	bl	8008114 <__multadd>
 8007d8e:	4629      	mov	r1, r5
 8007d90:	4607      	mov	r7, r0
 8007d92:	2300      	movs	r3, #0
 8007d94:	220a      	movs	r2, #10
 8007d96:	4658      	mov	r0, fp
 8007d98:	f000 f9bc 	bl	8008114 <__multadd>
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	e7f0      	b.n	8007d82 <_dtoa_r+0xaba>
 8007da0:	9b00      	ldr	r3, [sp, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	bfcc      	ite	gt
 8007da6:	461e      	movgt	r6, r3
 8007da8:	2601      	movle	r6, #1
 8007daa:	4456      	add	r6, sl
 8007dac:	2700      	movs	r7, #0
 8007dae:	4649      	mov	r1, r9
 8007db0:	2201      	movs	r2, #1
 8007db2:	4658      	mov	r0, fp
 8007db4:	f000 fb5a 	bl	800846c <__lshift>
 8007db8:	4621      	mov	r1, r4
 8007dba:	4681      	mov	r9, r0
 8007dbc:	f000 fbc2 	bl	8008544 <__mcmp>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	dcb0      	bgt.n	8007d26 <_dtoa_r+0xa5e>
 8007dc4:	d102      	bne.n	8007dcc <_dtoa_r+0xb04>
 8007dc6:	f018 0f01 	tst.w	r8, #1
 8007dca:	d1ac      	bne.n	8007d26 <_dtoa_r+0xa5e>
 8007dcc:	4633      	mov	r3, r6
 8007dce:	461e      	mov	r6, r3
 8007dd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dd4:	2a30      	cmp	r2, #48	@ 0x30
 8007dd6:	d0fa      	beq.n	8007dce <_dtoa_r+0xb06>
 8007dd8:	e5c2      	b.n	8007960 <_dtoa_r+0x698>
 8007dda:	459a      	cmp	sl, r3
 8007ddc:	d1a4      	bne.n	8007d28 <_dtoa_r+0xa60>
 8007dde:	9b04      	ldr	r3, [sp, #16]
 8007de0:	3301      	adds	r3, #1
 8007de2:	9304      	str	r3, [sp, #16]
 8007de4:	2331      	movs	r3, #49	@ 0x31
 8007de6:	f88a 3000 	strb.w	r3, [sl]
 8007dea:	e5b9      	b.n	8007960 <_dtoa_r+0x698>
 8007dec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e4c <_dtoa_r+0xb84>
 8007df2:	b11b      	cbz	r3, 8007dfc <_dtoa_r+0xb34>
 8007df4:	f10a 0308 	add.w	r3, sl, #8
 8007df8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	4650      	mov	r0, sl
 8007dfe:	b019      	add	sp, #100	@ 0x64
 8007e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	f77f ae37 	ble.w	8007a7a <_dtoa_r+0x7b2>
 8007e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e10:	2001      	movs	r0, #1
 8007e12:	e655      	b.n	8007ac0 <_dtoa_r+0x7f8>
 8007e14:	9b00      	ldr	r3, [sp, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f77f aed6 	ble.w	8007bc8 <_dtoa_r+0x900>
 8007e1c:	4656      	mov	r6, sl
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4648      	mov	r0, r9
 8007e22:	f7ff f9c8 	bl	80071b6 <quorem>
 8007e26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e2a:	f806 8b01 	strb.w	r8, [r6], #1
 8007e2e:	9b00      	ldr	r3, [sp, #0]
 8007e30:	eba6 020a 	sub.w	r2, r6, sl
 8007e34:	4293      	cmp	r3, r2
 8007e36:	ddb3      	ble.n	8007da0 <_dtoa_r+0xad8>
 8007e38:	4649      	mov	r1, r9
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	220a      	movs	r2, #10
 8007e3e:	4658      	mov	r0, fp
 8007e40:	f000 f968 	bl	8008114 <__multadd>
 8007e44:	4681      	mov	r9, r0
 8007e46:	e7ea      	b.n	8007e1e <_dtoa_r+0xb56>
 8007e48:	08009374 	.word	0x08009374
 8007e4c:	080092f8 	.word	0x080092f8

08007e50 <_free_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4605      	mov	r5, r0
 8007e54:	2900      	cmp	r1, #0
 8007e56:	d041      	beq.n	8007edc <_free_r+0x8c>
 8007e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e5c:	1f0c      	subs	r4, r1, #4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	bfb8      	it	lt
 8007e62:	18e4      	addlt	r4, r4, r3
 8007e64:	f000 f8e8 	bl	8008038 <__malloc_lock>
 8007e68:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee0 <_free_r+0x90>)
 8007e6a:	6813      	ldr	r3, [r2, #0]
 8007e6c:	b933      	cbnz	r3, 8007e7c <_free_r+0x2c>
 8007e6e:	6063      	str	r3, [r4, #4]
 8007e70:	6014      	str	r4, [r2, #0]
 8007e72:	4628      	mov	r0, r5
 8007e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e78:	f000 b8e4 	b.w	8008044 <__malloc_unlock>
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	d908      	bls.n	8007e92 <_free_r+0x42>
 8007e80:	6820      	ldr	r0, [r4, #0]
 8007e82:	1821      	adds	r1, r4, r0
 8007e84:	428b      	cmp	r3, r1
 8007e86:	bf01      	itttt	eq
 8007e88:	6819      	ldreq	r1, [r3, #0]
 8007e8a:	685b      	ldreq	r3, [r3, #4]
 8007e8c:	1809      	addeq	r1, r1, r0
 8007e8e:	6021      	streq	r1, [r4, #0]
 8007e90:	e7ed      	b.n	8007e6e <_free_r+0x1e>
 8007e92:	461a      	mov	r2, r3
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	b10b      	cbz	r3, 8007e9c <_free_r+0x4c>
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	d9fa      	bls.n	8007e92 <_free_r+0x42>
 8007e9c:	6811      	ldr	r1, [r2, #0]
 8007e9e:	1850      	adds	r0, r2, r1
 8007ea0:	42a0      	cmp	r0, r4
 8007ea2:	d10b      	bne.n	8007ebc <_free_r+0x6c>
 8007ea4:	6820      	ldr	r0, [r4, #0]
 8007ea6:	4401      	add	r1, r0
 8007ea8:	1850      	adds	r0, r2, r1
 8007eaa:	4283      	cmp	r3, r0
 8007eac:	6011      	str	r1, [r2, #0]
 8007eae:	d1e0      	bne.n	8007e72 <_free_r+0x22>
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	6053      	str	r3, [r2, #4]
 8007eb6:	4408      	add	r0, r1
 8007eb8:	6010      	str	r0, [r2, #0]
 8007eba:	e7da      	b.n	8007e72 <_free_r+0x22>
 8007ebc:	d902      	bls.n	8007ec4 <_free_r+0x74>
 8007ebe:	230c      	movs	r3, #12
 8007ec0:	602b      	str	r3, [r5, #0]
 8007ec2:	e7d6      	b.n	8007e72 <_free_r+0x22>
 8007ec4:	6820      	ldr	r0, [r4, #0]
 8007ec6:	1821      	adds	r1, r4, r0
 8007ec8:	428b      	cmp	r3, r1
 8007eca:	bf04      	itt	eq
 8007ecc:	6819      	ldreq	r1, [r3, #0]
 8007ece:	685b      	ldreq	r3, [r3, #4]
 8007ed0:	6063      	str	r3, [r4, #4]
 8007ed2:	bf04      	itt	eq
 8007ed4:	1809      	addeq	r1, r1, r0
 8007ed6:	6021      	streq	r1, [r4, #0]
 8007ed8:	6054      	str	r4, [r2, #4]
 8007eda:	e7ca      	b.n	8007e72 <_free_r+0x22>
 8007edc:	bd38      	pop	{r3, r4, r5, pc}
 8007ede:	bf00      	nop
 8007ee0:	200004f0 	.word	0x200004f0

08007ee4 <malloc>:
 8007ee4:	4b02      	ldr	r3, [pc, #8]	@ (8007ef0 <malloc+0xc>)
 8007ee6:	4601      	mov	r1, r0
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	f000 b825 	b.w	8007f38 <_malloc_r>
 8007eee:	bf00      	nop
 8007ef0:	2000001c 	.word	0x2000001c

08007ef4 <sbrk_aligned>:
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	4e0f      	ldr	r6, [pc, #60]	@ (8007f34 <sbrk_aligned+0x40>)
 8007ef8:	460c      	mov	r4, r1
 8007efa:	6831      	ldr	r1, [r6, #0]
 8007efc:	4605      	mov	r5, r0
 8007efe:	b911      	cbnz	r1, 8007f06 <sbrk_aligned+0x12>
 8007f00:	f000 fe46 	bl	8008b90 <_sbrk_r>
 8007f04:	6030      	str	r0, [r6, #0]
 8007f06:	4621      	mov	r1, r4
 8007f08:	4628      	mov	r0, r5
 8007f0a:	f000 fe41 	bl	8008b90 <_sbrk_r>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	d103      	bne.n	8007f1a <sbrk_aligned+0x26>
 8007f12:	f04f 34ff 	mov.w	r4, #4294967295
 8007f16:	4620      	mov	r0, r4
 8007f18:	bd70      	pop	{r4, r5, r6, pc}
 8007f1a:	1cc4      	adds	r4, r0, #3
 8007f1c:	f024 0403 	bic.w	r4, r4, #3
 8007f20:	42a0      	cmp	r0, r4
 8007f22:	d0f8      	beq.n	8007f16 <sbrk_aligned+0x22>
 8007f24:	1a21      	subs	r1, r4, r0
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 fe32 	bl	8008b90 <_sbrk_r>
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d1f2      	bne.n	8007f16 <sbrk_aligned+0x22>
 8007f30:	e7ef      	b.n	8007f12 <sbrk_aligned+0x1e>
 8007f32:	bf00      	nop
 8007f34:	200004ec 	.word	0x200004ec

08007f38 <_malloc_r>:
 8007f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f3c:	1ccd      	adds	r5, r1, #3
 8007f3e:	f025 0503 	bic.w	r5, r5, #3
 8007f42:	3508      	adds	r5, #8
 8007f44:	2d0c      	cmp	r5, #12
 8007f46:	bf38      	it	cc
 8007f48:	250c      	movcc	r5, #12
 8007f4a:	2d00      	cmp	r5, #0
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	db01      	blt.n	8007f54 <_malloc_r+0x1c>
 8007f50:	42a9      	cmp	r1, r5
 8007f52:	d904      	bls.n	8007f5e <_malloc_r+0x26>
 8007f54:	230c      	movs	r3, #12
 8007f56:	6033      	str	r3, [r6, #0]
 8007f58:	2000      	movs	r0, #0
 8007f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008034 <_malloc_r+0xfc>
 8007f62:	f000 f869 	bl	8008038 <__malloc_lock>
 8007f66:	f8d8 3000 	ldr.w	r3, [r8]
 8007f6a:	461c      	mov	r4, r3
 8007f6c:	bb44      	cbnz	r4, 8007fc0 <_malloc_r+0x88>
 8007f6e:	4629      	mov	r1, r5
 8007f70:	4630      	mov	r0, r6
 8007f72:	f7ff ffbf 	bl	8007ef4 <sbrk_aligned>
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	4604      	mov	r4, r0
 8007f7a:	d158      	bne.n	800802e <_malloc_r+0xf6>
 8007f7c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f80:	4627      	mov	r7, r4
 8007f82:	2f00      	cmp	r7, #0
 8007f84:	d143      	bne.n	800800e <_malloc_r+0xd6>
 8007f86:	2c00      	cmp	r4, #0
 8007f88:	d04b      	beq.n	8008022 <_malloc_r+0xea>
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	4630      	mov	r0, r6
 8007f90:	eb04 0903 	add.w	r9, r4, r3
 8007f94:	f000 fdfc 	bl	8008b90 <_sbrk_r>
 8007f98:	4581      	cmp	r9, r0
 8007f9a:	d142      	bne.n	8008022 <_malloc_r+0xea>
 8007f9c:	6821      	ldr	r1, [r4, #0]
 8007f9e:	1a6d      	subs	r5, r5, r1
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f7ff ffa6 	bl	8007ef4 <sbrk_aligned>
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d03a      	beq.n	8008022 <_malloc_r+0xea>
 8007fac:	6823      	ldr	r3, [r4, #0]
 8007fae:	442b      	add	r3, r5
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	bb62      	cbnz	r2, 8008014 <_malloc_r+0xdc>
 8007fba:	f8c8 7000 	str.w	r7, [r8]
 8007fbe:	e00f      	b.n	8007fe0 <_malloc_r+0xa8>
 8007fc0:	6822      	ldr	r2, [r4, #0]
 8007fc2:	1b52      	subs	r2, r2, r5
 8007fc4:	d420      	bmi.n	8008008 <_malloc_r+0xd0>
 8007fc6:	2a0b      	cmp	r2, #11
 8007fc8:	d917      	bls.n	8007ffa <_malloc_r+0xc2>
 8007fca:	1961      	adds	r1, r4, r5
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	6025      	str	r5, [r4, #0]
 8007fd0:	bf18      	it	ne
 8007fd2:	6059      	strne	r1, [r3, #4]
 8007fd4:	6863      	ldr	r3, [r4, #4]
 8007fd6:	bf08      	it	eq
 8007fd8:	f8c8 1000 	streq.w	r1, [r8]
 8007fdc:	5162      	str	r2, [r4, r5]
 8007fde:	604b      	str	r3, [r1, #4]
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f000 f82f 	bl	8008044 <__malloc_unlock>
 8007fe6:	f104 000b 	add.w	r0, r4, #11
 8007fea:	1d23      	adds	r3, r4, #4
 8007fec:	f020 0007 	bic.w	r0, r0, #7
 8007ff0:	1ac2      	subs	r2, r0, r3
 8007ff2:	bf1c      	itt	ne
 8007ff4:	1a1b      	subne	r3, r3, r0
 8007ff6:	50a3      	strne	r3, [r4, r2]
 8007ff8:	e7af      	b.n	8007f5a <_malloc_r+0x22>
 8007ffa:	6862      	ldr	r2, [r4, #4]
 8007ffc:	42a3      	cmp	r3, r4
 8007ffe:	bf0c      	ite	eq
 8008000:	f8c8 2000 	streq.w	r2, [r8]
 8008004:	605a      	strne	r2, [r3, #4]
 8008006:	e7eb      	b.n	8007fe0 <_malloc_r+0xa8>
 8008008:	4623      	mov	r3, r4
 800800a:	6864      	ldr	r4, [r4, #4]
 800800c:	e7ae      	b.n	8007f6c <_malloc_r+0x34>
 800800e:	463c      	mov	r4, r7
 8008010:	687f      	ldr	r7, [r7, #4]
 8008012:	e7b6      	b.n	8007f82 <_malloc_r+0x4a>
 8008014:	461a      	mov	r2, r3
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	42a3      	cmp	r3, r4
 800801a:	d1fb      	bne.n	8008014 <_malloc_r+0xdc>
 800801c:	2300      	movs	r3, #0
 800801e:	6053      	str	r3, [r2, #4]
 8008020:	e7de      	b.n	8007fe0 <_malloc_r+0xa8>
 8008022:	230c      	movs	r3, #12
 8008024:	6033      	str	r3, [r6, #0]
 8008026:	4630      	mov	r0, r6
 8008028:	f000 f80c 	bl	8008044 <__malloc_unlock>
 800802c:	e794      	b.n	8007f58 <_malloc_r+0x20>
 800802e:	6005      	str	r5, [r0, #0]
 8008030:	e7d6      	b.n	8007fe0 <_malloc_r+0xa8>
 8008032:	bf00      	nop
 8008034:	200004f0 	.word	0x200004f0

08008038 <__malloc_lock>:
 8008038:	4801      	ldr	r0, [pc, #4]	@ (8008040 <__malloc_lock+0x8>)
 800803a:	f7ff b8ba 	b.w	80071b2 <__retarget_lock_acquire_recursive>
 800803e:	bf00      	nop
 8008040:	200004e8 	.word	0x200004e8

08008044 <__malloc_unlock>:
 8008044:	4801      	ldr	r0, [pc, #4]	@ (800804c <__malloc_unlock+0x8>)
 8008046:	f7ff b8b5 	b.w	80071b4 <__retarget_lock_release_recursive>
 800804a:	bf00      	nop
 800804c:	200004e8 	.word	0x200004e8

08008050 <_Balloc>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	69c6      	ldr	r6, [r0, #28]
 8008054:	4604      	mov	r4, r0
 8008056:	460d      	mov	r5, r1
 8008058:	b976      	cbnz	r6, 8008078 <_Balloc+0x28>
 800805a:	2010      	movs	r0, #16
 800805c:	f7ff ff42 	bl	8007ee4 <malloc>
 8008060:	4602      	mov	r2, r0
 8008062:	61e0      	str	r0, [r4, #28]
 8008064:	b920      	cbnz	r0, 8008070 <_Balloc+0x20>
 8008066:	4b18      	ldr	r3, [pc, #96]	@ (80080c8 <_Balloc+0x78>)
 8008068:	4818      	ldr	r0, [pc, #96]	@ (80080cc <_Balloc+0x7c>)
 800806a:	216b      	movs	r1, #107	@ 0x6b
 800806c:	f000 fdae 	bl	8008bcc <__assert_func>
 8008070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008074:	6006      	str	r6, [r0, #0]
 8008076:	60c6      	str	r6, [r0, #12]
 8008078:	69e6      	ldr	r6, [r4, #28]
 800807a:	68f3      	ldr	r3, [r6, #12]
 800807c:	b183      	cbz	r3, 80080a0 <_Balloc+0x50>
 800807e:	69e3      	ldr	r3, [r4, #28]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008086:	b9b8      	cbnz	r0, 80080b8 <_Balloc+0x68>
 8008088:	2101      	movs	r1, #1
 800808a:	fa01 f605 	lsl.w	r6, r1, r5
 800808e:	1d72      	adds	r2, r6, #5
 8008090:	0092      	lsls	r2, r2, #2
 8008092:	4620      	mov	r0, r4
 8008094:	f000 fdb8 	bl	8008c08 <_calloc_r>
 8008098:	b160      	cbz	r0, 80080b4 <_Balloc+0x64>
 800809a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800809e:	e00e      	b.n	80080be <_Balloc+0x6e>
 80080a0:	2221      	movs	r2, #33	@ 0x21
 80080a2:	2104      	movs	r1, #4
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 fdaf 	bl	8008c08 <_calloc_r>
 80080aa:	69e3      	ldr	r3, [r4, #28]
 80080ac:	60f0      	str	r0, [r6, #12]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1e4      	bne.n	800807e <_Balloc+0x2e>
 80080b4:	2000      	movs	r0, #0
 80080b6:	bd70      	pop	{r4, r5, r6, pc}
 80080b8:	6802      	ldr	r2, [r0, #0]
 80080ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080be:	2300      	movs	r3, #0
 80080c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080c4:	e7f7      	b.n	80080b6 <_Balloc+0x66>
 80080c6:	bf00      	nop
 80080c8:	08009305 	.word	0x08009305
 80080cc:	08009385 	.word	0x08009385

080080d0 <_Bfree>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	69c6      	ldr	r6, [r0, #28]
 80080d4:	4605      	mov	r5, r0
 80080d6:	460c      	mov	r4, r1
 80080d8:	b976      	cbnz	r6, 80080f8 <_Bfree+0x28>
 80080da:	2010      	movs	r0, #16
 80080dc:	f7ff ff02 	bl	8007ee4 <malloc>
 80080e0:	4602      	mov	r2, r0
 80080e2:	61e8      	str	r0, [r5, #28]
 80080e4:	b920      	cbnz	r0, 80080f0 <_Bfree+0x20>
 80080e6:	4b09      	ldr	r3, [pc, #36]	@ (800810c <_Bfree+0x3c>)
 80080e8:	4809      	ldr	r0, [pc, #36]	@ (8008110 <_Bfree+0x40>)
 80080ea:	218f      	movs	r1, #143	@ 0x8f
 80080ec:	f000 fd6e 	bl	8008bcc <__assert_func>
 80080f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080f4:	6006      	str	r6, [r0, #0]
 80080f6:	60c6      	str	r6, [r0, #12]
 80080f8:	b13c      	cbz	r4, 800810a <_Bfree+0x3a>
 80080fa:	69eb      	ldr	r3, [r5, #28]
 80080fc:	6862      	ldr	r2, [r4, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008104:	6021      	str	r1, [r4, #0]
 8008106:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	08009305 	.word	0x08009305
 8008110:	08009385 	.word	0x08009385

08008114 <__multadd>:
 8008114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008118:	690d      	ldr	r5, [r1, #16]
 800811a:	4607      	mov	r7, r0
 800811c:	460c      	mov	r4, r1
 800811e:	461e      	mov	r6, r3
 8008120:	f101 0c14 	add.w	ip, r1, #20
 8008124:	2000      	movs	r0, #0
 8008126:	f8dc 3000 	ldr.w	r3, [ip]
 800812a:	b299      	uxth	r1, r3
 800812c:	fb02 6101 	mla	r1, r2, r1, r6
 8008130:	0c1e      	lsrs	r6, r3, #16
 8008132:	0c0b      	lsrs	r3, r1, #16
 8008134:	fb02 3306 	mla	r3, r2, r6, r3
 8008138:	b289      	uxth	r1, r1
 800813a:	3001      	adds	r0, #1
 800813c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008140:	4285      	cmp	r5, r0
 8008142:	f84c 1b04 	str.w	r1, [ip], #4
 8008146:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800814a:	dcec      	bgt.n	8008126 <__multadd+0x12>
 800814c:	b30e      	cbz	r6, 8008192 <__multadd+0x7e>
 800814e:	68a3      	ldr	r3, [r4, #8]
 8008150:	42ab      	cmp	r3, r5
 8008152:	dc19      	bgt.n	8008188 <__multadd+0x74>
 8008154:	6861      	ldr	r1, [r4, #4]
 8008156:	4638      	mov	r0, r7
 8008158:	3101      	adds	r1, #1
 800815a:	f7ff ff79 	bl	8008050 <_Balloc>
 800815e:	4680      	mov	r8, r0
 8008160:	b928      	cbnz	r0, 800816e <__multadd+0x5a>
 8008162:	4602      	mov	r2, r0
 8008164:	4b0c      	ldr	r3, [pc, #48]	@ (8008198 <__multadd+0x84>)
 8008166:	480d      	ldr	r0, [pc, #52]	@ (800819c <__multadd+0x88>)
 8008168:	21ba      	movs	r1, #186	@ 0xba
 800816a:	f000 fd2f 	bl	8008bcc <__assert_func>
 800816e:	6922      	ldr	r2, [r4, #16]
 8008170:	3202      	adds	r2, #2
 8008172:	f104 010c 	add.w	r1, r4, #12
 8008176:	0092      	lsls	r2, r2, #2
 8008178:	300c      	adds	r0, #12
 800817a:	f000 fd19 	bl	8008bb0 <memcpy>
 800817e:	4621      	mov	r1, r4
 8008180:	4638      	mov	r0, r7
 8008182:	f7ff ffa5 	bl	80080d0 <_Bfree>
 8008186:	4644      	mov	r4, r8
 8008188:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800818c:	3501      	adds	r5, #1
 800818e:	615e      	str	r6, [r3, #20]
 8008190:	6125      	str	r5, [r4, #16]
 8008192:	4620      	mov	r0, r4
 8008194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008198:	08009374 	.word	0x08009374
 800819c:	08009385 	.word	0x08009385

080081a0 <__hi0bits>:
 80081a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80081a4:	4603      	mov	r3, r0
 80081a6:	bf36      	itet	cc
 80081a8:	0403      	lslcc	r3, r0, #16
 80081aa:	2000      	movcs	r0, #0
 80081ac:	2010      	movcc	r0, #16
 80081ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081b2:	bf3c      	itt	cc
 80081b4:	021b      	lslcc	r3, r3, #8
 80081b6:	3008      	addcc	r0, #8
 80081b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081bc:	bf3c      	itt	cc
 80081be:	011b      	lslcc	r3, r3, #4
 80081c0:	3004      	addcc	r0, #4
 80081c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081c6:	bf3c      	itt	cc
 80081c8:	009b      	lslcc	r3, r3, #2
 80081ca:	3002      	addcc	r0, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	db05      	blt.n	80081dc <__hi0bits+0x3c>
 80081d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80081d4:	f100 0001 	add.w	r0, r0, #1
 80081d8:	bf08      	it	eq
 80081da:	2020      	moveq	r0, #32
 80081dc:	4770      	bx	lr

080081de <__lo0bits>:
 80081de:	6803      	ldr	r3, [r0, #0]
 80081e0:	4602      	mov	r2, r0
 80081e2:	f013 0007 	ands.w	r0, r3, #7
 80081e6:	d00b      	beq.n	8008200 <__lo0bits+0x22>
 80081e8:	07d9      	lsls	r1, r3, #31
 80081ea:	d421      	bmi.n	8008230 <__lo0bits+0x52>
 80081ec:	0798      	lsls	r0, r3, #30
 80081ee:	bf49      	itett	mi
 80081f0:	085b      	lsrmi	r3, r3, #1
 80081f2:	089b      	lsrpl	r3, r3, #2
 80081f4:	2001      	movmi	r0, #1
 80081f6:	6013      	strmi	r3, [r2, #0]
 80081f8:	bf5c      	itt	pl
 80081fa:	6013      	strpl	r3, [r2, #0]
 80081fc:	2002      	movpl	r0, #2
 80081fe:	4770      	bx	lr
 8008200:	b299      	uxth	r1, r3
 8008202:	b909      	cbnz	r1, 8008208 <__lo0bits+0x2a>
 8008204:	0c1b      	lsrs	r3, r3, #16
 8008206:	2010      	movs	r0, #16
 8008208:	b2d9      	uxtb	r1, r3
 800820a:	b909      	cbnz	r1, 8008210 <__lo0bits+0x32>
 800820c:	3008      	adds	r0, #8
 800820e:	0a1b      	lsrs	r3, r3, #8
 8008210:	0719      	lsls	r1, r3, #28
 8008212:	bf04      	itt	eq
 8008214:	091b      	lsreq	r3, r3, #4
 8008216:	3004      	addeq	r0, #4
 8008218:	0799      	lsls	r1, r3, #30
 800821a:	bf04      	itt	eq
 800821c:	089b      	lsreq	r3, r3, #2
 800821e:	3002      	addeq	r0, #2
 8008220:	07d9      	lsls	r1, r3, #31
 8008222:	d403      	bmi.n	800822c <__lo0bits+0x4e>
 8008224:	085b      	lsrs	r3, r3, #1
 8008226:	f100 0001 	add.w	r0, r0, #1
 800822a:	d003      	beq.n	8008234 <__lo0bits+0x56>
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	4770      	bx	lr
 8008230:	2000      	movs	r0, #0
 8008232:	4770      	bx	lr
 8008234:	2020      	movs	r0, #32
 8008236:	4770      	bx	lr

08008238 <__i2b>:
 8008238:	b510      	push	{r4, lr}
 800823a:	460c      	mov	r4, r1
 800823c:	2101      	movs	r1, #1
 800823e:	f7ff ff07 	bl	8008050 <_Balloc>
 8008242:	4602      	mov	r2, r0
 8008244:	b928      	cbnz	r0, 8008252 <__i2b+0x1a>
 8008246:	4b05      	ldr	r3, [pc, #20]	@ (800825c <__i2b+0x24>)
 8008248:	4805      	ldr	r0, [pc, #20]	@ (8008260 <__i2b+0x28>)
 800824a:	f240 1145 	movw	r1, #325	@ 0x145
 800824e:	f000 fcbd 	bl	8008bcc <__assert_func>
 8008252:	2301      	movs	r3, #1
 8008254:	6144      	str	r4, [r0, #20]
 8008256:	6103      	str	r3, [r0, #16]
 8008258:	bd10      	pop	{r4, pc}
 800825a:	bf00      	nop
 800825c:	08009374 	.word	0x08009374
 8008260:	08009385 	.word	0x08009385

08008264 <__multiply>:
 8008264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	4614      	mov	r4, r2
 800826a:	690a      	ldr	r2, [r1, #16]
 800826c:	6923      	ldr	r3, [r4, #16]
 800826e:	429a      	cmp	r2, r3
 8008270:	bfa8      	it	ge
 8008272:	4623      	movge	r3, r4
 8008274:	460f      	mov	r7, r1
 8008276:	bfa4      	itt	ge
 8008278:	460c      	movge	r4, r1
 800827a:	461f      	movge	r7, r3
 800827c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008280:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008284:	68a3      	ldr	r3, [r4, #8]
 8008286:	6861      	ldr	r1, [r4, #4]
 8008288:	eb0a 0609 	add.w	r6, sl, r9
 800828c:	42b3      	cmp	r3, r6
 800828e:	b085      	sub	sp, #20
 8008290:	bfb8      	it	lt
 8008292:	3101      	addlt	r1, #1
 8008294:	f7ff fedc 	bl	8008050 <_Balloc>
 8008298:	b930      	cbnz	r0, 80082a8 <__multiply+0x44>
 800829a:	4602      	mov	r2, r0
 800829c:	4b44      	ldr	r3, [pc, #272]	@ (80083b0 <__multiply+0x14c>)
 800829e:	4845      	ldr	r0, [pc, #276]	@ (80083b4 <__multiply+0x150>)
 80082a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80082a4:	f000 fc92 	bl	8008bcc <__assert_func>
 80082a8:	f100 0514 	add.w	r5, r0, #20
 80082ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082b0:	462b      	mov	r3, r5
 80082b2:	2200      	movs	r2, #0
 80082b4:	4543      	cmp	r3, r8
 80082b6:	d321      	bcc.n	80082fc <__multiply+0x98>
 80082b8:	f107 0114 	add.w	r1, r7, #20
 80082bc:	f104 0214 	add.w	r2, r4, #20
 80082c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80082c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80082c8:	9302      	str	r3, [sp, #8]
 80082ca:	1b13      	subs	r3, r2, r4
 80082cc:	3b15      	subs	r3, #21
 80082ce:	f023 0303 	bic.w	r3, r3, #3
 80082d2:	3304      	adds	r3, #4
 80082d4:	f104 0715 	add.w	r7, r4, #21
 80082d8:	42ba      	cmp	r2, r7
 80082da:	bf38      	it	cc
 80082dc:	2304      	movcc	r3, #4
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	9b02      	ldr	r3, [sp, #8]
 80082e2:	9103      	str	r1, [sp, #12]
 80082e4:	428b      	cmp	r3, r1
 80082e6:	d80c      	bhi.n	8008302 <__multiply+0x9e>
 80082e8:	2e00      	cmp	r6, #0
 80082ea:	dd03      	ble.n	80082f4 <__multiply+0x90>
 80082ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d05b      	beq.n	80083ac <__multiply+0x148>
 80082f4:	6106      	str	r6, [r0, #16]
 80082f6:	b005      	add	sp, #20
 80082f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fc:	f843 2b04 	str.w	r2, [r3], #4
 8008300:	e7d8      	b.n	80082b4 <__multiply+0x50>
 8008302:	f8b1 a000 	ldrh.w	sl, [r1]
 8008306:	f1ba 0f00 	cmp.w	sl, #0
 800830a:	d024      	beq.n	8008356 <__multiply+0xf2>
 800830c:	f104 0e14 	add.w	lr, r4, #20
 8008310:	46a9      	mov	r9, r5
 8008312:	f04f 0c00 	mov.w	ip, #0
 8008316:	f85e 7b04 	ldr.w	r7, [lr], #4
 800831a:	f8d9 3000 	ldr.w	r3, [r9]
 800831e:	fa1f fb87 	uxth.w	fp, r7
 8008322:	b29b      	uxth	r3, r3
 8008324:	fb0a 330b 	mla	r3, sl, fp, r3
 8008328:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800832c:	f8d9 7000 	ldr.w	r7, [r9]
 8008330:	4463      	add	r3, ip
 8008332:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008336:	fb0a c70b 	mla	r7, sl, fp, ip
 800833a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800833e:	b29b      	uxth	r3, r3
 8008340:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008344:	4572      	cmp	r2, lr
 8008346:	f849 3b04 	str.w	r3, [r9], #4
 800834a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800834e:	d8e2      	bhi.n	8008316 <__multiply+0xb2>
 8008350:	9b01      	ldr	r3, [sp, #4]
 8008352:	f845 c003 	str.w	ip, [r5, r3]
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800835c:	3104      	adds	r1, #4
 800835e:	f1b9 0f00 	cmp.w	r9, #0
 8008362:	d021      	beq.n	80083a8 <__multiply+0x144>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	f104 0c14 	add.w	ip, r4, #20
 800836a:	46ae      	mov	lr, r5
 800836c:	f04f 0a00 	mov.w	sl, #0
 8008370:	f8bc b000 	ldrh.w	fp, [ip]
 8008374:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008378:	fb09 770b 	mla	r7, r9, fp, r7
 800837c:	4457      	add	r7, sl
 800837e:	b29b      	uxth	r3, r3
 8008380:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008384:	f84e 3b04 	str.w	r3, [lr], #4
 8008388:	f85c 3b04 	ldr.w	r3, [ip], #4
 800838c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008390:	f8be 3000 	ldrh.w	r3, [lr]
 8008394:	fb09 330a 	mla	r3, r9, sl, r3
 8008398:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800839c:	4562      	cmp	r2, ip
 800839e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083a2:	d8e5      	bhi.n	8008370 <__multiply+0x10c>
 80083a4:	9f01      	ldr	r7, [sp, #4]
 80083a6:	51eb      	str	r3, [r5, r7]
 80083a8:	3504      	adds	r5, #4
 80083aa:	e799      	b.n	80082e0 <__multiply+0x7c>
 80083ac:	3e01      	subs	r6, #1
 80083ae:	e79b      	b.n	80082e8 <__multiply+0x84>
 80083b0:	08009374 	.word	0x08009374
 80083b4:	08009385 	.word	0x08009385

080083b8 <__pow5mult>:
 80083b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083bc:	4615      	mov	r5, r2
 80083be:	f012 0203 	ands.w	r2, r2, #3
 80083c2:	4607      	mov	r7, r0
 80083c4:	460e      	mov	r6, r1
 80083c6:	d007      	beq.n	80083d8 <__pow5mult+0x20>
 80083c8:	4c25      	ldr	r4, [pc, #148]	@ (8008460 <__pow5mult+0xa8>)
 80083ca:	3a01      	subs	r2, #1
 80083cc:	2300      	movs	r3, #0
 80083ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083d2:	f7ff fe9f 	bl	8008114 <__multadd>
 80083d6:	4606      	mov	r6, r0
 80083d8:	10ad      	asrs	r5, r5, #2
 80083da:	d03d      	beq.n	8008458 <__pow5mult+0xa0>
 80083dc:	69fc      	ldr	r4, [r7, #28]
 80083de:	b97c      	cbnz	r4, 8008400 <__pow5mult+0x48>
 80083e0:	2010      	movs	r0, #16
 80083e2:	f7ff fd7f 	bl	8007ee4 <malloc>
 80083e6:	4602      	mov	r2, r0
 80083e8:	61f8      	str	r0, [r7, #28]
 80083ea:	b928      	cbnz	r0, 80083f8 <__pow5mult+0x40>
 80083ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008464 <__pow5mult+0xac>)
 80083ee:	481e      	ldr	r0, [pc, #120]	@ (8008468 <__pow5mult+0xb0>)
 80083f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80083f4:	f000 fbea 	bl	8008bcc <__assert_func>
 80083f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083fc:	6004      	str	r4, [r0, #0]
 80083fe:	60c4      	str	r4, [r0, #12]
 8008400:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008404:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008408:	b94c      	cbnz	r4, 800841e <__pow5mult+0x66>
 800840a:	f240 2171 	movw	r1, #625	@ 0x271
 800840e:	4638      	mov	r0, r7
 8008410:	f7ff ff12 	bl	8008238 <__i2b>
 8008414:	2300      	movs	r3, #0
 8008416:	f8c8 0008 	str.w	r0, [r8, #8]
 800841a:	4604      	mov	r4, r0
 800841c:	6003      	str	r3, [r0, #0]
 800841e:	f04f 0900 	mov.w	r9, #0
 8008422:	07eb      	lsls	r3, r5, #31
 8008424:	d50a      	bpl.n	800843c <__pow5mult+0x84>
 8008426:	4631      	mov	r1, r6
 8008428:	4622      	mov	r2, r4
 800842a:	4638      	mov	r0, r7
 800842c:	f7ff ff1a 	bl	8008264 <__multiply>
 8008430:	4631      	mov	r1, r6
 8008432:	4680      	mov	r8, r0
 8008434:	4638      	mov	r0, r7
 8008436:	f7ff fe4b 	bl	80080d0 <_Bfree>
 800843a:	4646      	mov	r6, r8
 800843c:	106d      	asrs	r5, r5, #1
 800843e:	d00b      	beq.n	8008458 <__pow5mult+0xa0>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	b938      	cbnz	r0, 8008454 <__pow5mult+0x9c>
 8008444:	4622      	mov	r2, r4
 8008446:	4621      	mov	r1, r4
 8008448:	4638      	mov	r0, r7
 800844a:	f7ff ff0b 	bl	8008264 <__multiply>
 800844e:	6020      	str	r0, [r4, #0]
 8008450:	f8c0 9000 	str.w	r9, [r0]
 8008454:	4604      	mov	r4, r0
 8008456:	e7e4      	b.n	8008422 <__pow5mult+0x6a>
 8008458:	4630      	mov	r0, r6
 800845a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800845e:	bf00      	nop
 8008460:	080093e0 	.word	0x080093e0
 8008464:	08009305 	.word	0x08009305
 8008468:	08009385 	.word	0x08009385

0800846c <__lshift>:
 800846c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008470:	460c      	mov	r4, r1
 8008472:	6849      	ldr	r1, [r1, #4]
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800847a:	68a3      	ldr	r3, [r4, #8]
 800847c:	4607      	mov	r7, r0
 800847e:	4691      	mov	r9, r2
 8008480:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008484:	f108 0601 	add.w	r6, r8, #1
 8008488:	42b3      	cmp	r3, r6
 800848a:	db0b      	blt.n	80084a4 <__lshift+0x38>
 800848c:	4638      	mov	r0, r7
 800848e:	f7ff fddf 	bl	8008050 <_Balloc>
 8008492:	4605      	mov	r5, r0
 8008494:	b948      	cbnz	r0, 80084aa <__lshift+0x3e>
 8008496:	4602      	mov	r2, r0
 8008498:	4b28      	ldr	r3, [pc, #160]	@ (800853c <__lshift+0xd0>)
 800849a:	4829      	ldr	r0, [pc, #164]	@ (8008540 <__lshift+0xd4>)
 800849c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80084a0:	f000 fb94 	bl	8008bcc <__assert_func>
 80084a4:	3101      	adds	r1, #1
 80084a6:	005b      	lsls	r3, r3, #1
 80084a8:	e7ee      	b.n	8008488 <__lshift+0x1c>
 80084aa:	2300      	movs	r3, #0
 80084ac:	f100 0114 	add.w	r1, r0, #20
 80084b0:	f100 0210 	add.w	r2, r0, #16
 80084b4:	4618      	mov	r0, r3
 80084b6:	4553      	cmp	r3, sl
 80084b8:	db33      	blt.n	8008522 <__lshift+0xb6>
 80084ba:	6920      	ldr	r0, [r4, #16]
 80084bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084c0:	f104 0314 	add.w	r3, r4, #20
 80084c4:	f019 091f 	ands.w	r9, r9, #31
 80084c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084d0:	d02b      	beq.n	800852a <__lshift+0xbe>
 80084d2:	f1c9 0e20 	rsb	lr, r9, #32
 80084d6:	468a      	mov	sl, r1
 80084d8:	2200      	movs	r2, #0
 80084da:	6818      	ldr	r0, [r3, #0]
 80084dc:	fa00 f009 	lsl.w	r0, r0, r9
 80084e0:	4310      	orrs	r0, r2
 80084e2:	f84a 0b04 	str.w	r0, [sl], #4
 80084e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ea:	459c      	cmp	ip, r3
 80084ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80084f0:	d8f3      	bhi.n	80084da <__lshift+0x6e>
 80084f2:	ebac 0304 	sub.w	r3, ip, r4
 80084f6:	3b15      	subs	r3, #21
 80084f8:	f023 0303 	bic.w	r3, r3, #3
 80084fc:	3304      	adds	r3, #4
 80084fe:	f104 0015 	add.w	r0, r4, #21
 8008502:	4584      	cmp	ip, r0
 8008504:	bf38      	it	cc
 8008506:	2304      	movcc	r3, #4
 8008508:	50ca      	str	r2, [r1, r3]
 800850a:	b10a      	cbz	r2, 8008510 <__lshift+0xa4>
 800850c:	f108 0602 	add.w	r6, r8, #2
 8008510:	3e01      	subs	r6, #1
 8008512:	4638      	mov	r0, r7
 8008514:	612e      	str	r6, [r5, #16]
 8008516:	4621      	mov	r1, r4
 8008518:	f7ff fdda 	bl	80080d0 <_Bfree>
 800851c:	4628      	mov	r0, r5
 800851e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008522:	f842 0f04 	str.w	r0, [r2, #4]!
 8008526:	3301      	adds	r3, #1
 8008528:	e7c5      	b.n	80084b6 <__lshift+0x4a>
 800852a:	3904      	subs	r1, #4
 800852c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008530:	f841 2f04 	str.w	r2, [r1, #4]!
 8008534:	459c      	cmp	ip, r3
 8008536:	d8f9      	bhi.n	800852c <__lshift+0xc0>
 8008538:	e7ea      	b.n	8008510 <__lshift+0xa4>
 800853a:	bf00      	nop
 800853c:	08009374 	.word	0x08009374
 8008540:	08009385 	.word	0x08009385

08008544 <__mcmp>:
 8008544:	690a      	ldr	r2, [r1, #16]
 8008546:	4603      	mov	r3, r0
 8008548:	6900      	ldr	r0, [r0, #16]
 800854a:	1a80      	subs	r0, r0, r2
 800854c:	b530      	push	{r4, r5, lr}
 800854e:	d10e      	bne.n	800856e <__mcmp+0x2a>
 8008550:	3314      	adds	r3, #20
 8008552:	3114      	adds	r1, #20
 8008554:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008558:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800855c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008560:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008564:	4295      	cmp	r5, r2
 8008566:	d003      	beq.n	8008570 <__mcmp+0x2c>
 8008568:	d205      	bcs.n	8008576 <__mcmp+0x32>
 800856a:	f04f 30ff 	mov.w	r0, #4294967295
 800856e:	bd30      	pop	{r4, r5, pc}
 8008570:	42a3      	cmp	r3, r4
 8008572:	d3f3      	bcc.n	800855c <__mcmp+0x18>
 8008574:	e7fb      	b.n	800856e <__mcmp+0x2a>
 8008576:	2001      	movs	r0, #1
 8008578:	e7f9      	b.n	800856e <__mcmp+0x2a>
	...

0800857c <__mdiff>:
 800857c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008580:	4689      	mov	r9, r1
 8008582:	4606      	mov	r6, r0
 8008584:	4611      	mov	r1, r2
 8008586:	4648      	mov	r0, r9
 8008588:	4614      	mov	r4, r2
 800858a:	f7ff ffdb 	bl	8008544 <__mcmp>
 800858e:	1e05      	subs	r5, r0, #0
 8008590:	d112      	bne.n	80085b8 <__mdiff+0x3c>
 8008592:	4629      	mov	r1, r5
 8008594:	4630      	mov	r0, r6
 8008596:	f7ff fd5b 	bl	8008050 <_Balloc>
 800859a:	4602      	mov	r2, r0
 800859c:	b928      	cbnz	r0, 80085aa <__mdiff+0x2e>
 800859e:	4b3f      	ldr	r3, [pc, #252]	@ (800869c <__mdiff+0x120>)
 80085a0:	f240 2137 	movw	r1, #567	@ 0x237
 80085a4:	483e      	ldr	r0, [pc, #248]	@ (80086a0 <__mdiff+0x124>)
 80085a6:	f000 fb11 	bl	8008bcc <__assert_func>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085b0:	4610      	mov	r0, r2
 80085b2:	b003      	add	sp, #12
 80085b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b8:	bfbc      	itt	lt
 80085ba:	464b      	movlt	r3, r9
 80085bc:	46a1      	movlt	r9, r4
 80085be:	4630      	mov	r0, r6
 80085c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80085c4:	bfba      	itte	lt
 80085c6:	461c      	movlt	r4, r3
 80085c8:	2501      	movlt	r5, #1
 80085ca:	2500      	movge	r5, #0
 80085cc:	f7ff fd40 	bl	8008050 <_Balloc>
 80085d0:	4602      	mov	r2, r0
 80085d2:	b918      	cbnz	r0, 80085dc <__mdiff+0x60>
 80085d4:	4b31      	ldr	r3, [pc, #196]	@ (800869c <__mdiff+0x120>)
 80085d6:	f240 2145 	movw	r1, #581	@ 0x245
 80085da:	e7e3      	b.n	80085a4 <__mdiff+0x28>
 80085dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085e0:	6926      	ldr	r6, [r4, #16]
 80085e2:	60c5      	str	r5, [r0, #12]
 80085e4:	f109 0310 	add.w	r3, r9, #16
 80085e8:	f109 0514 	add.w	r5, r9, #20
 80085ec:	f104 0e14 	add.w	lr, r4, #20
 80085f0:	f100 0b14 	add.w	fp, r0, #20
 80085f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80085f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	46d9      	mov	r9, fp
 8008600:	f04f 0c00 	mov.w	ip, #0
 8008604:	9b01      	ldr	r3, [sp, #4]
 8008606:	f85e 0b04 	ldr.w	r0, [lr], #4
 800860a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800860e:	9301      	str	r3, [sp, #4]
 8008610:	fa1f f38a 	uxth.w	r3, sl
 8008614:	4619      	mov	r1, r3
 8008616:	b283      	uxth	r3, r0
 8008618:	1acb      	subs	r3, r1, r3
 800861a:	0c00      	lsrs	r0, r0, #16
 800861c:	4463      	add	r3, ip
 800861e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008622:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008626:	b29b      	uxth	r3, r3
 8008628:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800862c:	4576      	cmp	r6, lr
 800862e:	f849 3b04 	str.w	r3, [r9], #4
 8008632:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008636:	d8e5      	bhi.n	8008604 <__mdiff+0x88>
 8008638:	1b33      	subs	r3, r6, r4
 800863a:	3b15      	subs	r3, #21
 800863c:	f023 0303 	bic.w	r3, r3, #3
 8008640:	3415      	adds	r4, #21
 8008642:	3304      	adds	r3, #4
 8008644:	42a6      	cmp	r6, r4
 8008646:	bf38      	it	cc
 8008648:	2304      	movcc	r3, #4
 800864a:	441d      	add	r5, r3
 800864c:	445b      	add	r3, fp
 800864e:	461e      	mov	r6, r3
 8008650:	462c      	mov	r4, r5
 8008652:	4544      	cmp	r4, r8
 8008654:	d30e      	bcc.n	8008674 <__mdiff+0xf8>
 8008656:	f108 0103 	add.w	r1, r8, #3
 800865a:	1b49      	subs	r1, r1, r5
 800865c:	f021 0103 	bic.w	r1, r1, #3
 8008660:	3d03      	subs	r5, #3
 8008662:	45a8      	cmp	r8, r5
 8008664:	bf38      	it	cc
 8008666:	2100      	movcc	r1, #0
 8008668:	440b      	add	r3, r1
 800866a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800866e:	b191      	cbz	r1, 8008696 <__mdiff+0x11a>
 8008670:	6117      	str	r7, [r2, #16]
 8008672:	e79d      	b.n	80085b0 <__mdiff+0x34>
 8008674:	f854 1b04 	ldr.w	r1, [r4], #4
 8008678:	46e6      	mov	lr, ip
 800867a:	0c08      	lsrs	r0, r1, #16
 800867c:	fa1c fc81 	uxtah	ip, ip, r1
 8008680:	4471      	add	r1, lr
 8008682:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008686:	b289      	uxth	r1, r1
 8008688:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800868c:	f846 1b04 	str.w	r1, [r6], #4
 8008690:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008694:	e7dd      	b.n	8008652 <__mdiff+0xd6>
 8008696:	3f01      	subs	r7, #1
 8008698:	e7e7      	b.n	800866a <__mdiff+0xee>
 800869a:	bf00      	nop
 800869c:	08009374 	.word	0x08009374
 80086a0:	08009385 	.word	0x08009385

080086a4 <__d2b>:
 80086a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086a8:	460f      	mov	r7, r1
 80086aa:	2101      	movs	r1, #1
 80086ac:	ec59 8b10 	vmov	r8, r9, d0
 80086b0:	4616      	mov	r6, r2
 80086b2:	f7ff fccd 	bl	8008050 <_Balloc>
 80086b6:	4604      	mov	r4, r0
 80086b8:	b930      	cbnz	r0, 80086c8 <__d2b+0x24>
 80086ba:	4602      	mov	r2, r0
 80086bc:	4b23      	ldr	r3, [pc, #140]	@ (800874c <__d2b+0xa8>)
 80086be:	4824      	ldr	r0, [pc, #144]	@ (8008750 <__d2b+0xac>)
 80086c0:	f240 310f 	movw	r1, #783	@ 0x30f
 80086c4:	f000 fa82 	bl	8008bcc <__assert_func>
 80086c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086d0:	b10d      	cbz	r5, 80086d6 <__d2b+0x32>
 80086d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086d6:	9301      	str	r3, [sp, #4]
 80086d8:	f1b8 0300 	subs.w	r3, r8, #0
 80086dc:	d023      	beq.n	8008726 <__d2b+0x82>
 80086de:	4668      	mov	r0, sp
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	f7ff fd7c 	bl	80081de <__lo0bits>
 80086e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086ea:	b1d0      	cbz	r0, 8008722 <__d2b+0x7e>
 80086ec:	f1c0 0320 	rsb	r3, r0, #32
 80086f0:	fa02 f303 	lsl.w	r3, r2, r3
 80086f4:	430b      	orrs	r3, r1
 80086f6:	40c2      	lsrs	r2, r0
 80086f8:	6163      	str	r3, [r4, #20]
 80086fa:	9201      	str	r2, [sp, #4]
 80086fc:	9b01      	ldr	r3, [sp, #4]
 80086fe:	61a3      	str	r3, [r4, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	bf0c      	ite	eq
 8008704:	2201      	moveq	r2, #1
 8008706:	2202      	movne	r2, #2
 8008708:	6122      	str	r2, [r4, #16]
 800870a:	b1a5      	cbz	r5, 8008736 <__d2b+0x92>
 800870c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008710:	4405      	add	r5, r0
 8008712:	603d      	str	r5, [r7, #0]
 8008714:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008718:	6030      	str	r0, [r6, #0]
 800871a:	4620      	mov	r0, r4
 800871c:	b003      	add	sp, #12
 800871e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008722:	6161      	str	r1, [r4, #20]
 8008724:	e7ea      	b.n	80086fc <__d2b+0x58>
 8008726:	a801      	add	r0, sp, #4
 8008728:	f7ff fd59 	bl	80081de <__lo0bits>
 800872c:	9b01      	ldr	r3, [sp, #4]
 800872e:	6163      	str	r3, [r4, #20]
 8008730:	3020      	adds	r0, #32
 8008732:	2201      	movs	r2, #1
 8008734:	e7e8      	b.n	8008708 <__d2b+0x64>
 8008736:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800873a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800873e:	6038      	str	r0, [r7, #0]
 8008740:	6918      	ldr	r0, [r3, #16]
 8008742:	f7ff fd2d 	bl	80081a0 <__hi0bits>
 8008746:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800874a:	e7e5      	b.n	8008718 <__d2b+0x74>
 800874c:	08009374 	.word	0x08009374
 8008750:	08009385 	.word	0x08009385

08008754 <__ssputs_r>:
 8008754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008758:	688e      	ldr	r6, [r1, #8]
 800875a:	461f      	mov	r7, r3
 800875c:	42be      	cmp	r6, r7
 800875e:	680b      	ldr	r3, [r1, #0]
 8008760:	4682      	mov	sl, r0
 8008762:	460c      	mov	r4, r1
 8008764:	4690      	mov	r8, r2
 8008766:	d82d      	bhi.n	80087c4 <__ssputs_r+0x70>
 8008768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800876c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008770:	d026      	beq.n	80087c0 <__ssputs_r+0x6c>
 8008772:	6965      	ldr	r5, [r4, #20]
 8008774:	6909      	ldr	r1, [r1, #16]
 8008776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800877a:	eba3 0901 	sub.w	r9, r3, r1
 800877e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008782:	1c7b      	adds	r3, r7, #1
 8008784:	444b      	add	r3, r9
 8008786:	106d      	asrs	r5, r5, #1
 8008788:	429d      	cmp	r5, r3
 800878a:	bf38      	it	cc
 800878c:	461d      	movcc	r5, r3
 800878e:	0553      	lsls	r3, r2, #21
 8008790:	d527      	bpl.n	80087e2 <__ssputs_r+0x8e>
 8008792:	4629      	mov	r1, r5
 8008794:	f7ff fbd0 	bl	8007f38 <_malloc_r>
 8008798:	4606      	mov	r6, r0
 800879a:	b360      	cbz	r0, 80087f6 <__ssputs_r+0xa2>
 800879c:	6921      	ldr	r1, [r4, #16]
 800879e:	464a      	mov	r2, r9
 80087a0:	f000 fa06 	bl	8008bb0 <memcpy>
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ae:	81a3      	strh	r3, [r4, #12]
 80087b0:	6126      	str	r6, [r4, #16]
 80087b2:	6165      	str	r5, [r4, #20]
 80087b4:	444e      	add	r6, r9
 80087b6:	eba5 0509 	sub.w	r5, r5, r9
 80087ba:	6026      	str	r6, [r4, #0]
 80087bc:	60a5      	str	r5, [r4, #8]
 80087be:	463e      	mov	r6, r7
 80087c0:	42be      	cmp	r6, r7
 80087c2:	d900      	bls.n	80087c6 <__ssputs_r+0x72>
 80087c4:	463e      	mov	r6, r7
 80087c6:	6820      	ldr	r0, [r4, #0]
 80087c8:	4632      	mov	r2, r6
 80087ca:	4641      	mov	r1, r8
 80087cc:	f000 f9c6 	bl	8008b5c <memmove>
 80087d0:	68a3      	ldr	r3, [r4, #8]
 80087d2:	1b9b      	subs	r3, r3, r6
 80087d4:	60a3      	str	r3, [r4, #8]
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	4433      	add	r3, r6
 80087da:	6023      	str	r3, [r4, #0]
 80087dc:	2000      	movs	r0, #0
 80087de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e2:	462a      	mov	r2, r5
 80087e4:	f000 fa36 	bl	8008c54 <_realloc_r>
 80087e8:	4606      	mov	r6, r0
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d1e0      	bne.n	80087b0 <__ssputs_r+0x5c>
 80087ee:	6921      	ldr	r1, [r4, #16]
 80087f0:	4650      	mov	r0, sl
 80087f2:	f7ff fb2d 	bl	8007e50 <_free_r>
 80087f6:	230c      	movs	r3, #12
 80087f8:	f8ca 3000 	str.w	r3, [sl]
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	f04f 30ff 	mov.w	r0, #4294967295
 8008808:	e7e9      	b.n	80087de <__ssputs_r+0x8a>
	...

0800880c <_svfiprintf_r>:
 800880c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	4698      	mov	r8, r3
 8008812:	898b      	ldrh	r3, [r1, #12]
 8008814:	061b      	lsls	r3, r3, #24
 8008816:	b09d      	sub	sp, #116	@ 0x74
 8008818:	4607      	mov	r7, r0
 800881a:	460d      	mov	r5, r1
 800881c:	4614      	mov	r4, r2
 800881e:	d510      	bpl.n	8008842 <_svfiprintf_r+0x36>
 8008820:	690b      	ldr	r3, [r1, #16]
 8008822:	b973      	cbnz	r3, 8008842 <_svfiprintf_r+0x36>
 8008824:	2140      	movs	r1, #64	@ 0x40
 8008826:	f7ff fb87 	bl	8007f38 <_malloc_r>
 800882a:	6028      	str	r0, [r5, #0]
 800882c:	6128      	str	r0, [r5, #16]
 800882e:	b930      	cbnz	r0, 800883e <_svfiprintf_r+0x32>
 8008830:	230c      	movs	r3, #12
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	f04f 30ff 	mov.w	r0, #4294967295
 8008838:	b01d      	add	sp, #116	@ 0x74
 800883a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883e:	2340      	movs	r3, #64	@ 0x40
 8008840:	616b      	str	r3, [r5, #20]
 8008842:	2300      	movs	r3, #0
 8008844:	9309      	str	r3, [sp, #36]	@ 0x24
 8008846:	2320      	movs	r3, #32
 8008848:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800884c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008850:	2330      	movs	r3, #48	@ 0x30
 8008852:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089f0 <_svfiprintf_r+0x1e4>
 8008856:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800885a:	f04f 0901 	mov.w	r9, #1
 800885e:	4623      	mov	r3, r4
 8008860:	469a      	mov	sl, r3
 8008862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008866:	b10a      	cbz	r2, 800886c <_svfiprintf_r+0x60>
 8008868:	2a25      	cmp	r2, #37	@ 0x25
 800886a:	d1f9      	bne.n	8008860 <_svfiprintf_r+0x54>
 800886c:	ebba 0b04 	subs.w	fp, sl, r4
 8008870:	d00b      	beq.n	800888a <_svfiprintf_r+0x7e>
 8008872:	465b      	mov	r3, fp
 8008874:	4622      	mov	r2, r4
 8008876:	4629      	mov	r1, r5
 8008878:	4638      	mov	r0, r7
 800887a:	f7ff ff6b 	bl	8008754 <__ssputs_r>
 800887e:	3001      	adds	r0, #1
 8008880:	f000 80a7 	beq.w	80089d2 <_svfiprintf_r+0x1c6>
 8008884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008886:	445a      	add	r2, fp
 8008888:	9209      	str	r2, [sp, #36]	@ 0x24
 800888a:	f89a 3000 	ldrb.w	r3, [sl]
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 809f 	beq.w	80089d2 <_svfiprintf_r+0x1c6>
 8008894:	2300      	movs	r3, #0
 8008896:	f04f 32ff 	mov.w	r2, #4294967295
 800889a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800889e:	f10a 0a01 	add.w	sl, sl, #1
 80088a2:	9304      	str	r3, [sp, #16]
 80088a4:	9307      	str	r3, [sp, #28]
 80088a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80088ac:	4654      	mov	r4, sl
 80088ae:	2205      	movs	r2, #5
 80088b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b4:	484e      	ldr	r0, [pc, #312]	@ (80089f0 <_svfiprintf_r+0x1e4>)
 80088b6:	f7f7 fcab 	bl	8000210 <memchr>
 80088ba:	9a04      	ldr	r2, [sp, #16]
 80088bc:	b9d8      	cbnz	r0, 80088f6 <_svfiprintf_r+0xea>
 80088be:	06d0      	lsls	r0, r2, #27
 80088c0:	bf44      	itt	mi
 80088c2:	2320      	movmi	r3, #32
 80088c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088c8:	0711      	lsls	r1, r2, #28
 80088ca:	bf44      	itt	mi
 80088cc:	232b      	movmi	r3, #43	@ 0x2b
 80088ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088d2:	f89a 3000 	ldrb.w	r3, [sl]
 80088d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088d8:	d015      	beq.n	8008906 <_svfiprintf_r+0xfa>
 80088da:	9a07      	ldr	r2, [sp, #28]
 80088dc:	4654      	mov	r4, sl
 80088de:	2000      	movs	r0, #0
 80088e0:	f04f 0c0a 	mov.w	ip, #10
 80088e4:	4621      	mov	r1, r4
 80088e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ea:	3b30      	subs	r3, #48	@ 0x30
 80088ec:	2b09      	cmp	r3, #9
 80088ee:	d94b      	bls.n	8008988 <_svfiprintf_r+0x17c>
 80088f0:	b1b0      	cbz	r0, 8008920 <_svfiprintf_r+0x114>
 80088f2:	9207      	str	r2, [sp, #28]
 80088f4:	e014      	b.n	8008920 <_svfiprintf_r+0x114>
 80088f6:	eba0 0308 	sub.w	r3, r0, r8
 80088fa:	fa09 f303 	lsl.w	r3, r9, r3
 80088fe:	4313      	orrs	r3, r2
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	46a2      	mov	sl, r4
 8008904:	e7d2      	b.n	80088ac <_svfiprintf_r+0xa0>
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	1d19      	adds	r1, r3, #4
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	9103      	str	r1, [sp, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	bfbb      	ittet	lt
 8008912:	425b      	neglt	r3, r3
 8008914:	f042 0202 	orrlt.w	r2, r2, #2
 8008918:	9307      	strge	r3, [sp, #28]
 800891a:	9307      	strlt	r3, [sp, #28]
 800891c:	bfb8      	it	lt
 800891e:	9204      	strlt	r2, [sp, #16]
 8008920:	7823      	ldrb	r3, [r4, #0]
 8008922:	2b2e      	cmp	r3, #46	@ 0x2e
 8008924:	d10a      	bne.n	800893c <_svfiprintf_r+0x130>
 8008926:	7863      	ldrb	r3, [r4, #1]
 8008928:	2b2a      	cmp	r3, #42	@ 0x2a
 800892a:	d132      	bne.n	8008992 <_svfiprintf_r+0x186>
 800892c:	9b03      	ldr	r3, [sp, #12]
 800892e:	1d1a      	adds	r2, r3, #4
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	9203      	str	r2, [sp, #12]
 8008934:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008938:	3402      	adds	r4, #2
 800893a:	9305      	str	r3, [sp, #20]
 800893c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a00 <_svfiprintf_r+0x1f4>
 8008940:	7821      	ldrb	r1, [r4, #0]
 8008942:	2203      	movs	r2, #3
 8008944:	4650      	mov	r0, sl
 8008946:	f7f7 fc63 	bl	8000210 <memchr>
 800894a:	b138      	cbz	r0, 800895c <_svfiprintf_r+0x150>
 800894c:	9b04      	ldr	r3, [sp, #16]
 800894e:	eba0 000a 	sub.w	r0, r0, sl
 8008952:	2240      	movs	r2, #64	@ 0x40
 8008954:	4082      	lsls	r2, r0
 8008956:	4313      	orrs	r3, r2
 8008958:	3401      	adds	r4, #1
 800895a:	9304      	str	r3, [sp, #16]
 800895c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008960:	4824      	ldr	r0, [pc, #144]	@ (80089f4 <_svfiprintf_r+0x1e8>)
 8008962:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008966:	2206      	movs	r2, #6
 8008968:	f7f7 fc52 	bl	8000210 <memchr>
 800896c:	2800      	cmp	r0, #0
 800896e:	d036      	beq.n	80089de <_svfiprintf_r+0x1d2>
 8008970:	4b21      	ldr	r3, [pc, #132]	@ (80089f8 <_svfiprintf_r+0x1ec>)
 8008972:	bb1b      	cbnz	r3, 80089bc <_svfiprintf_r+0x1b0>
 8008974:	9b03      	ldr	r3, [sp, #12]
 8008976:	3307      	adds	r3, #7
 8008978:	f023 0307 	bic.w	r3, r3, #7
 800897c:	3308      	adds	r3, #8
 800897e:	9303      	str	r3, [sp, #12]
 8008980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008982:	4433      	add	r3, r6
 8008984:	9309      	str	r3, [sp, #36]	@ 0x24
 8008986:	e76a      	b.n	800885e <_svfiprintf_r+0x52>
 8008988:	fb0c 3202 	mla	r2, ip, r2, r3
 800898c:	460c      	mov	r4, r1
 800898e:	2001      	movs	r0, #1
 8008990:	e7a8      	b.n	80088e4 <_svfiprintf_r+0xd8>
 8008992:	2300      	movs	r3, #0
 8008994:	3401      	adds	r4, #1
 8008996:	9305      	str	r3, [sp, #20]
 8008998:	4619      	mov	r1, r3
 800899a:	f04f 0c0a 	mov.w	ip, #10
 800899e:	4620      	mov	r0, r4
 80089a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089a4:	3a30      	subs	r2, #48	@ 0x30
 80089a6:	2a09      	cmp	r2, #9
 80089a8:	d903      	bls.n	80089b2 <_svfiprintf_r+0x1a6>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0c6      	beq.n	800893c <_svfiprintf_r+0x130>
 80089ae:	9105      	str	r1, [sp, #20]
 80089b0:	e7c4      	b.n	800893c <_svfiprintf_r+0x130>
 80089b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80089b6:	4604      	mov	r4, r0
 80089b8:	2301      	movs	r3, #1
 80089ba:	e7f0      	b.n	800899e <_svfiprintf_r+0x192>
 80089bc:	ab03      	add	r3, sp, #12
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	462a      	mov	r2, r5
 80089c2:	4b0e      	ldr	r3, [pc, #56]	@ (80089fc <_svfiprintf_r+0x1f0>)
 80089c4:	a904      	add	r1, sp, #16
 80089c6:	4638      	mov	r0, r7
 80089c8:	f7fd fe98 	bl	80066fc <_printf_float>
 80089cc:	1c42      	adds	r2, r0, #1
 80089ce:	4606      	mov	r6, r0
 80089d0:	d1d6      	bne.n	8008980 <_svfiprintf_r+0x174>
 80089d2:	89ab      	ldrh	r3, [r5, #12]
 80089d4:	065b      	lsls	r3, r3, #25
 80089d6:	f53f af2d 	bmi.w	8008834 <_svfiprintf_r+0x28>
 80089da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089dc:	e72c      	b.n	8008838 <_svfiprintf_r+0x2c>
 80089de:	ab03      	add	r3, sp, #12
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	462a      	mov	r2, r5
 80089e4:	4b05      	ldr	r3, [pc, #20]	@ (80089fc <_svfiprintf_r+0x1f0>)
 80089e6:	a904      	add	r1, sp, #16
 80089e8:	4638      	mov	r0, r7
 80089ea:	f7fe f91f 	bl	8006c2c <_printf_i>
 80089ee:	e7ed      	b.n	80089cc <_svfiprintf_r+0x1c0>
 80089f0:	080094e0 	.word	0x080094e0
 80089f4:	080094ea 	.word	0x080094ea
 80089f8:	080066fd 	.word	0x080066fd
 80089fc:	08008755 	.word	0x08008755
 8008a00:	080094e6 	.word	0x080094e6

08008a04 <__sflush_r>:
 8008a04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0c:	0716      	lsls	r6, r2, #28
 8008a0e:	4605      	mov	r5, r0
 8008a10:	460c      	mov	r4, r1
 8008a12:	d454      	bmi.n	8008abe <__sflush_r+0xba>
 8008a14:	684b      	ldr	r3, [r1, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	dc02      	bgt.n	8008a20 <__sflush_r+0x1c>
 8008a1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dd48      	ble.n	8008ab2 <__sflush_r+0xae>
 8008a20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a22:	2e00      	cmp	r6, #0
 8008a24:	d045      	beq.n	8008ab2 <__sflush_r+0xae>
 8008a26:	2300      	movs	r3, #0
 8008a28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a2c:	682f      	ldr	r7, [r5, #0]
 8008a2e:	6a21      	ldr	r1, [r4, #32]
 8008a30:	602b      	str	r3, [r5, #0]
 8008a32:	d030      	beq.n	8008a96 <__sflush_r+0x92>
 8008a34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	0759      	lsls	r1, r3, #29
 8008a3a:	d505      	bpl.n	8008a48 <__sflush_r+0x44>
 8008a3c:	6863      	ldr	r3, [r4, #4]
 8008a3e:	1ad2      	subs	r2, r2, r3
 8008a40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a42:	b10b      	cbz	r3, 8008a48 <__sflush_r+0x44>
 8008a44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a46:	1ad2      	subs	r2, r2, r3
 8008a48:	2300      	movs	r3, #0
 8008a4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a4c:	6a21      	ldr	r1, [r4, #32]
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b0      	blx	r6
 8008a52:	1c43      	adds	r3, r0, #1
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	d106      	bne.n	8008a66 <__sflush_r+0x62>
 8008a58:	6829      	ldr	r1, [r5, #0]
 8008a5a:	291d      	cmp	r1, #29
 8008a5c:	d82b      	bhi.n	8008ab6 <__sflush_r+0xb2>
 8008a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008b08 <__sflush_r+0x104>)
 8008a60:	410a      	asrs	r2, r1
 8008a62:	07d6      	lsls	r6, r2, #31
 8008a64:	d427      	bmi.n	8008ab6 <__sflush_r+0xb2>
 8008a66:	2200      	movs	r2, #0
 8008a68:	6062      	str	r2, [r4, #4]
 8008a6a:	04d9      	lsls	r1, r3, #19
 8008a6c:	6922      	ldr	r2, [r4, #16]
 8008a6e:	6022      	str	r2, [r4, #0]
 8008a70:	d504      	bpl.n	8008a7c <__sflush_r+0x78>
 8008a72:	1c42      	adds	r2, r0, #1
 8008a74:	d101      	bne.n	8008a7a <__sflush_r+0x76>
 8008a76:	682b      	ldr	r3, [r5, #0]
 8008a78:	b903      	cbnz	r3, 8008a7c <__sflush_r+0x78>
 8008a7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a7e:	602f      	str	r7, [r5, #0]
 8008a80:	b1b9      	cbz	r1, 8008ab2 <__sflush_r+0xae>
 8008a82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a86:	4299      	cmp	r1, r3
 8008a88:	d002      	beq.n	8008a90 <__sflush_r+0x8c>
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f7ff f9e0 	bl	8007e50 <_free_r>
 8008a90:	2300      	movs	r3, #0
 8008a92:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a94:	e00d      	b.n	8008ab2 <__sflush_r+0xae>
 8008a96:	2301      	movs	r3, #1
 8008a98:	4628      	mov	r0, r5
 8008a9a:	47b0      	blx	r6
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	1c50      	adds	r0, r2, #1
 8008aa0:	d1c9      	bne.n	8008a36 <__sflush_r+0x32>
 8008aa2:	682b      	ldr	r3, [r5, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0c6      	beq.n	8008a36 <__sflush_r+0x32>
 8008aa8:	2b1d      	cmp	r3, #29
 8008aaa:	d001      	beq.n	8008ab0 <__sflush_r+0xac>
 8008aac:	2b16      	cmp	r3, #22
 8008aae:	d11e      	bne.n	8008aee <__sflush_r+0xea>
 8008ab0:	602f      	str	r7, [r5, #0]
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	e022      	b.n	8008afc <__sflush_r+0xf8>
 8008ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aba:	b21b      	sxth	r3, r3
 8008abc:	e01b      	b.n	8008af6 <__sflush_r+0xf2>
 8008abe:	690f      	ldr	r7, [r1, #16]
 8008ac0:	2f00      	cmp	r7, #0
 8008ac2:	d0f6      	beq.n	8008ab2 <__sflush_r+0xae>
 8008ac4:	0793      	lsls	r3, r2, #30
 8008ac6:	680e      	ldr	r6, [r1, #0]
 8008ac8:	bf08      	it	eq
 8008aca:	694b      	ldreq	r3, [r1, #20]
 8008acc:	600f      	str	r7, [r1, #0]
 8008ace:	bf18      	it	ne
 8008ad0:	2300      	movne	r3, #0
 8008ad2:	eba6 0807 	sub.w	r8, r6, r7
 8008ad6:	608b      	str	r3, [r1, #8]
 8008ad8:	f1b8 0f00 	cmp.w	r8, #0
 8008adc:	dde9      	ble.n	8008ab2 <__sflush_r+0xae>
 8008ade:	6a21      	ldr	r1, [r4, #32]
 8008ae0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ae2:	4643      	mov	r3, r8
 8008ae4:	463a      	mov	r2, r7
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b0      	blx	r6
 8008aea:	2800      	cmp	r0, #0
 8008aec:	dc08      	bgt.n	8008b00 <__sflush_r+0xfc>
 8008aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008af6:	81a3      	strh	r3, [r4, #12]
 8008af8:	f04f 30ff 	mov.w	r0, #4294967295
 8008afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b00:	4407      	add	r7, r0
 8008b02:	eba8 0800 	sub.w	r8, r8, r0
 8008b06:	e7e7      	b.n	8008ad8 <__sflush_r+0xd4>
 8008b08:	dfbffffe 	.word	0xdfbffffe

08008b0c <_fflush_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	690b      	ldr	r3, [r1, #16]
 8008b10:	4605      	mov	r5, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	b913      	cbnz	r3, 8008b1c <_fflush_r+0x10>
 8008b16:	2500      	movs	r5, #0
 8008b18:	4628      	mov	r0, r5
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	b118      	cbz	r0, 8008b26 <_fflush_r+0x1a>
 8008b1e:	6a03      	ldr	r3, [r0, #32]
 8008b20:	b90b      	cbnz	r3, 8008b26 <_fflush_r+0x1a>
 8008b22:	f7fe fa2f 	bl	8006f84 <__sinit>
 8008b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0f3      	beq.n	8008b16 <_fflush_r+0xa>
 8008b2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b30:	07d0      	lsls	r0, r2, #31
 8008b32:	d404      	bmi.n	8008b3e <_fflush_r+0x32>
 8008b34:	0599      	lsls	r1, r3, #22
 8008b36:	d402      	bmi.n	8008b3e <_fflush_r+0x32>
 8008b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b3a:	f7fe fb3a 	bl	80071b2 <__retarget_lock_acquire_recursive>
 8008b3e:	4628      	mov	r0, r5
 8008b40:	4621      	mov	r1, r4
 8008b42:	f7ff ff5f 	bl	8008a04 <__sflush_r>
 8008b46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b48:	07da      	lsls	r2, r3, #31
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	d4e4      	bmi.n	8008b18 <_fflush_r+0xc>
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	059b      	lsls	r3, r3, #22
 8008b52:	d4e1      	bmi.n	8008b18 <_fflush_r+0xc>
 8008b54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b56:	f7fe fb2d 	bl	80071b4 <__retarget_lock_release_recursive>
 8008b5a:	e7dd      	b.n	8008b18 <_fflush_r+0xc>

08008b5c <memmove>:
 8008b5c:	4288      	cmp	r0, r1
 8008b5e:	b510      	push	{r4, lr}
 8008b60:	eb01 0402 	add.w	r4, r1, r2
 8008b64:	d902      	bls.n	8008b6c <memmove+0x10>
 8008b66:	4284      	cmp	r4, r0
 8008b68:	4623      	mov	r3, r4
 8008b6a:	d807      	bhi.n	8008b7c <memmove+0x20>
 8008b6c:	1e43      	subs	r3, r0, #1
 8008b6e:	42a1      	cmp	r1, r4
 8008b70:	d008      	beq.n	8008b84 <memmove+0x28>
 8008b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b7a:	e7f8      	b.n	8008b6e <memmove+0x12>
 8008b7c:	4402      	add	r2, r0
 8008b7e:	4601      	mov	r1, r0
 8008b80:	428a      	cmp	r2, r1
 8008b82:	d100      	bne.n	8008b86 <memmove+0x2a>
 8008b84:	bd10      	pop	{r4, pc}
 8008b86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b8e:	e7f7      	b.n	8008b80 <memmove+0x24>

08008b90 <_sbrk_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4d06      	ldr	r5, [pc, #24]	@ (8008bac <_sbrk_r+0x1c>)
 8008b94:	2300      	movs	r3, #0
 8008b96:	4604      	mov	r4, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	f7fd fc9e 	bl	80064dc <_sbrk>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_sbrk_r+0x1a>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_sbrk_r+0x1a>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	200004e4 	.word	0x200004e4

08008bb0 <memcpy>:
 8008bb0:	440a      	add	r2, r1
 8008bb2:	4291      	cmp	r1, r2
 8008bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bb8:	d100      	bne.n	8008bbc <memcpy+0xc>
 8008bba:	4770      	bx	lr
 8008bbc:	b510      	push	{r4, lr}
 8008bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bc6:	4291      	cmp	r1, r2
 8008bc8:	d1f9      	bne.n	8008bbe <memcpy+0xe>
 8008bca:	bd10      	pop	{r4, pc}

08008bcc <__assert_func>:
 8008bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bce:	4614      	mov	r4, r2
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	4b09      	ldr	r3, [pc, #36]	@ (8008bf8 <__assert_func+0x2c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	68d8      	ldr	r0, [r3, #12]
 8008bda:	b954      	cbnz	r4, 8008bf2 <__assert_func+0x26>
 8008bdc:	4b07      	ldr	r3, [pc, #28]	@ (8008bfc <__assert_func+0x30>)
 8008bde:	461c      	mov	r4, r3
 8008be0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008be4:	9100      	str	r1, [sp, #0]
 8008be6:	462b      	mov	r3, r5
 8008be8:	4905      	ldr	r1, [pc, #20]	@ (8008c00 <__assert_func+0x34>)
 8008bea:	f000 f86f 	bl	8008ccc <fiprintf>
 8008bee:	f000 f87f 	bl	8008cf0 <abort>
 8008bf2:	4b04      	ldr	r3, [pc, #16]	@ (8008c04 <__assert_func+0x38>)
 8008bf4:	e7f4      	b.n	8008be0 <__assert_func+0x14>
 8008bf6:	bf00      	nop
 8008bf8:	2000001c 	.word	0x2000001c
 8008bfc:	08009536 	.word	0x08009536
 8008c00:	08009508 	.word	0x08009508
 8008c04:	080094fb 	.word	0x080094fb

08008c08 <_calloc_r>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	fba1 5402 	umull	r5, r4, r1, r2
 8008c0e:	b93c      	cbnz	r4, 8008c20 <_calloc_r+0x18>
 8008c10:	4629      	mov	r1, r5
 8008c12:	f7ff f991 	bl	8007f38 <_malloc_r>
 8008c16:	4606      	mov	r6, r0
 8008c18:	b928      	cbnz	r0, 8008c26 <_calloc_r+0x1e>
 8008c1a:	2600      	movs	r6, #0
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
 8008c20:	220c      	movs	r2, #12
 8008c22:	6002      	str	r2, [r0, #0]
 8008c24:	e7f9      	b.n	8008c1a <_calloc_r+0x12>
 8008c26:	462a      	mov	r2, r5
 8008c28:	4621      	mov	r1, r4
 8008c2a:	f7fe fa44 	bl	80070b6 <memset>
 8008c2e:	e7f5      	b.n	8008c1c <_calloc_r+0x14>

08008c30 <__ascii_mbtowc>:
 8008c30:	b082      	sub	sp, #8
 8008c32:	b901      	cbnz	r1, 8008c36 <__ascii_mbtowc+0x6>
 8008c34:	a901      	add	r1, sp, #4
 8008c36:	b142      	cbz	r2, 8008c4a <__ascii_mbtowc+0x1a>
 8008c38:	b14b      	cbz	r3, 8008c4e <__ascii_mbtowc+0x1e>
 8008c3a:	7813      	ldrb	r3, [r2, #0]
 8008c3c:	600b      	str	r3, [r1, #0]
 8008c3e:	7812      	ldrb	r2, [r2, #0]
 8008c40:	1e10      	subs	r0, r2, #0
 8008c42:	bf18      	it	ne
 8008c44:	2001      	movne	r0, #1
 8008c46:	b002      	add	sp, #8
 8008c48:	4770      	bx	lr
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	e7fb      	b.n	8008c46 <__ascii_mbtowc+0x16>
 8008c4e:	f06f 0001 	mvn.w	r0, #1
 8008c52:	e7f8      	b.n	8008c46 <__ascii_mbtowc+0x16>

08008c54 <_realloc_r>:
 8008c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c58:	4680      	mov	r8, r0
 8008c5a:	4615      	mov	r5, r2
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	b921      	cbnz	r1, 8008c6a <_realloc_r+0x16>
 8008c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c64:	4611      	mov	r1, r2
 8008c66:	f7ff b967 	b.w	8007f38 <_malloc_r>
 8008c6a:	b92a      	cbnz	r2, 8008c78 <_realloc_r+0x24>
 8008c6c:	f7ff f8f0 	bl	8007e50 <_free_r>
 8008c70:	2400      	movs	r4, #0
 8008c72:	4620      	mov	r0, r4
 8008c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c78:	f000 f841 	bl	8008cfe <_malloc_usable_size_r>
 8008c7c:	4285      	cmp	r5, r0
 8008c7e:	4606      	mov	r6, r0
 8008c80:	d802      	bhi.n	8008c88 <_realloc_r+0x34>
 8008c82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c86:	d8f4      	bhi.n	8008c72 <_realloc_r+0x1e>
 8008c88:	4629      	mov	r1, r5
 8008c8a:	4640      	mov	r0, r8
 8008c8c:	f7ff f954 	bl	8007f38 <_malloc_r>
 8008c90:	4607      	mov	r7, r0
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d0ec      	beq.n	8008c70 <_realloc_r+0x1c>
 8008c96:	42b5      	cmp	r5, r6
 8008c98:	462a      	mov	r2, r5
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	bf28      	it	cs
 8008c9e:	4632      	movcs	r2, r6
 8008ca0:	f7ff ff86 	bl	8008bb0 <memcpy>
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	4640      	mov	r0, r8
 8008ca8:	f7ff f8d2 	bl	8007e50 <_free_r>
 8008cac:	463c      	mov	r4, r7
 8008cae:	e7e0      	b.n	8008c72 <_realloc_r+0x1e>

08008cb0 <__ascii_wctomb>:
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	4608      	mov	r0, r1
 8008cb4:	b141      	cbz	r1, 8008cc8 <__ascii_wctomb+0x18>
 8008cb6:	2aff      	cmp	r2, #255	@ 0xff
 8008cb8:	d904      	bls.n	8008cc4 <__ascii_wctomb+0x14>
 8008cba:	228a      	movs	r2, #138	@ 0x8a
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc2:	4770      	bx	lr
 8008cc4:	700a      	strb	r2, [r1, #0]
 8008cc6:	2001      	movs	r0, #1
 8008cc8:	4770      	bx	lr
	...

08008ccc <fiprintf>:
 8008ccc:	b40e      	push	{r1, r2, r3}
 8008cce:	b503      	push	{r0, r1, lr}
 8008cd0:	4601      	mov	r1, r0
 8008cd2:	ab03      	add	r3, sp, #12
 8008cd4:	4805      	ldr	r0, [pc, #20]	@ (8008cec <fiprintf+0x20>)
 8008cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cda:	6800      	ldr	r0, [r0, #0]
 8008cdc:	9301      	str	r3, [sp, #4]
 8008cde:	f000 f83f 	bl	8008d60 <_vfiprintf_r>
 8008ce2:	b002      	add	sp, #8
 8008ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ce8:	b003      	add	sp, #12
 8008cea:	4770      	bx	lr
 8008cec:	2000001c 	.word	0x2000001c

08008cf0 <abort>:
 8008cf0:	b508      	push	{r3, lr}
 8008cf2:	2006      	movs	r0, #6
 8008cf4:	f000 fa08 	bl	8009108 <raise>
 8008cf8:	2001      	movs	r0, #1
 8008cfa:	f7fd fb77 	bl	80063ec <_exit>

08008cfe <_malloc_usable_size_r>:
 8008cfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d02:	1f18      	subs	r0, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	bfbc      	itt	lt
 8008d08:	580b      	ldrlt	r3, [r1, r0]
 8008d0a:	18c0      	addlt	r0, r0, r3
 8008d0c:	4770      	bx	lr

08008d0e <__sfputc_r>:
 8008d0e:	6893      	ldr	r3, [r2, #8]
 8008d10:	3b01      	subs	r3, #1
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	b410      	push	{r4}
 8008d16:	6093      	str	r3, [r2, #8]
 8008d18:	da08      	bge.n	8008d2c <__sfputc_r+0x1e>
 8008d1a:	6994      	ldr	r4, [r2, #24]
 8008d1c:	42a3      	cmp	r3, r4
 8008d1e:	db01      	blt.n	8008d24 <__sfputc_r+0x16>
 8008d20:	290a      	cmp	r1, #10
 8008d22:	d103      	bne.n	8008d2c <__sfputc_r+0x1e>
 8008d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d28:	f000 b932 	b.w	8008f90 <__swbuf_r>
 8008d2c:	6813      	ldr	r3, [r2, #0]
 8008d2e:	1c58      	adds	r0, r3, #1
 8008d30:	6010      	str	r0, [r2, #0]
 8008d32:	7019      	strb	r1, [r3, #0]
 8008d34:	4608      	mov	r0, r1
 8008d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <__sfputs_r>:
 8008d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3e:	4606      	mov	r6, r0
 8008d40:	460f      	mov	r7, r1
 8008d42:	4614      	mov	r4, r2
 8008d44:	18d5      	adds	r5, r2, r3
 8008d46:	42ac      	cmp	r4, r5
 8008d48:	d101      	bne.n	8008d4e <__sfputs_r+0x12>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	e007      	b.n	8008d5e <__sfputs_r+0x22>
 8008d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d52:	463a      	mov	r2, r7
 8008d54:	4630      	mov	r0, r6
 8008d56:	f7ff ffda 	bl	8008d0e <__sfputc_r>
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	d1f3      	bne.n	8008d46 <__sfputs_r+0xa>
 8008d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d60 <_vfiprintf_r>:
 8008d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d64:	460d      	mov	r5, r1
 8008d66:	b09d      	sub	sp, #116	@ 0x74
 8008d68:	4614      	mov	r4, r2
 8008d6a:	4698      	mov	r8, r3
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	b118      	cbz	r0, 8008d78 <_vfiprintf_r+0x18>
 8008d70:	6a03      	ldr	r3, [r0, #32]
 8008d72:	b90b      	cbnz	r3, 8008d78 <_vfiprintf_r+0x18>
 8008d74:	f7fe f906 	bl	8006f84 <__sinit>
 8008d78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d7a:	07d9      	lsls	r1, r3, #31
 8008d7c:	d405      	bmi.n	8008d8a <_vfiprintf_r+0x2a>
 8008d7e:	89ab      	ldrh	r3, [r5, #12]
 8008d80:	059a      	lsls	r2, r3, #22
 8008d82:	d402      	bmi.n	8008d8a <_vfiprintf_r+0x2a>
 8008d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d86:	f7fe fa14 	bl	80071b2 <__retarget_lock_acquire_recursive>
 8008d8a:	89ab      	ldrh	r3, [r5, #12]
 8008d8c:	071b      	lsls	r3, r3, #28
 8008d8e:	d501      	bpl.n	8008d94 <_vfiprintf_r+0x34>
 8008d90:	692b      	ldr	r3, [r5, #16]
 8008d92:	b99b      	cbnz	r3, 8008dbc <_vfiprintf_r+0x5c>
 8008d94:	4629      	mov	r1, r5
 8008d96:	4630      	mov	r0, r6
 8008d98:	f000 f938 	bl	800900c <__swsetup_r>
 8008d9c:	b170      	cbz	r0, 8008dbc <_vfiprintf_r+0x5c>
 8008d9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008da0:	07dc      	lsls	r4, r3, #31
 8008da2:	d504      	bpl.n	8008dae <_vfiprintf_r+0x4e>
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295
 8008da8:	b01d      	add	sp, #116	@ 0x74
 8008daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dae:	89ab      	ldrh	r3, [r5, #12]
 8008db0:	0598      	lsls	r0, r3, #22
 8008db2:	d4f7      	bmi.n	8008da4 <_vfiprintf_r+0x44>
 8008db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008db6:	f7fe f9fd 	bl	80071b4 <__retarget_lock_release_recursive>
 8008dba:	e7f3      	b.n	8008da4 <_vfiprintf_r+0x44>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dc0:	2320      	movs	r3, #32
 8008dc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dca:	2330      	movs	r3, #48	@ 0x30
 8008dcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f7c <_vfiprintf_r+0x21c>
 8008dd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dd4:	f04f 0901 	mov.w	r9, #1
 8008dd8:	4623      	mov	r3, r4
 8008dda:	469a      	mov	sl, r3
 8008ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008de0:	b10a      	cbz	r2, 8008de6 <_vfiprintf_r+0x86>
 8008de2:	2a25      	cmp	r2, #37	@ 0x25
 8008de4:	d1f9      	bne.n	8008dda <_vfiprintf_r+0x7a>
 8008de6:	ebba 0b04 	subs.w	fp, sl, r4
 8008dea:	d00b      	beq.n	8008e04 <_vfiprintf_r+0xa4>
 8008dec:	465b      	mov	r3, fp
 8008dee:	4622      	mov	r2, r4
 8008df0:	4629      	mov	r1, r5
 8008df2:	4630      	mov	r0, r6
 8008df4:	f7ff ffa2 	bl	8008d3c <__sfputs_r>
 8008df8:	3001      	adds	r0, #1
 8008dfa:	f000 80a7 	beq.w	8008f4c <_vfiprintf_r+0x1ec>
 8008dfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e00:	445a      	add	r2, fp
 8008e02:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e04:	f89a 3000 	ldrb.w	r3, [sl]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 809f 	beq.w	8008f4c <_vfiprintf_r+0x1ec>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f04f 32ff 	mov.w	r2, #4294967295
 8008e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e18:	f10a 0a01 	add.w	sl, sl, #1
 8008e1c:	9304      	str	r3, [sp, #16]
 8008e1e:	9307      	str	r3, [sp, #28]
 8008e20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e24:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e26:	4654      	mov	r4, sl
 8008e28:	2205      	movs	r2, #5
 8008e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e2e:	4853      	ldr	r0, [pc, #332]	@ (8008f7c <_vfiprintf_r+0x21c>)
 8008e30:	f7f7 f9ee 	bl	8000210 <memchr>
 8008e34:	9a04      	ldr	r2, [sp, #16]
 8008e36:	b9d8      	cbnz	r0, 8008e70 <_vfiprintf_r+0x110>
 8008e38:	06d1      	lsls	r1, r2, #27
 8008e3a:	bf44      	itt	mi
 8008e3c:	2320      	movmi	r3, #32
 8008e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e42:	0713      	lsls	r3, r2, #28
 8008e44:	bf44      	itt	mi
 8008e46:	232b      	movmi	r3, #43	@ 0x2b
 8008e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e50:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e52:	d015      	beq.n	8008e80 <_vfiprintf_r+0x120>
 8008e54:	9a07      	ldr	r2, [sp, #28]
 8008e56:	4654      	mov	r4, sl
 8008e58:	2000      	movs	r0, #0
 8008e5a:	f04f 0c0a 	mov.w	ip, #10
 8008e5e:	4621      	mov	r1, r4
 8008e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e64:	3b30      	subs	r3, #48	@ 0x30
 8008e66:	2b09      	cmp	r3, #9
 8008e68:	d94b      	bls.n	8008f02 <_vfiprintf_r+0x1a2>
 8008e6a:	b1b0      	cbz	r0, 8008e9a <_vfiprintf_r+0x13a>
 8008e6c:	9207      	str	r2, [sp, #28]
 8008e6e:	e014      	b.n	8008e9a <_vfiprintf_r+0x13a>
 8008e70:	eba0 0308 	sub.w	r3, r0, r8
 8008e74:	fa09 f303 	lsl.w	r3, r9, r3
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	46a2      	mov	sl, r4
 8008e7e:	e7d2      	b.n	8008e26 <_vfiprintf_r+0xc6>
 8008e80:	9b03      	ldr	r3, [sp, #12]
 8008e82:	1d19      	adds	r1, r3, #4
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	9103      	str	r1, [sp, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	bfbb      	ittet	lt
 8008e8c:	425b      	neglt	r3, r3
 8008e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e92:	9307      	strge	r3, [sp, #28]
 8008e94:	9307      	strlt	r3, [sp, #28]
 8008e96:	bfb8      	it	lt
 8008e98:	9204      	strlt	r2, [sp, #16]
 8008e9a:	7823      	ldrb	r3, [r4, #0]
 8008e9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e9e:	d10a      	bne.n	8008eb6 <_vfiprintf_r+0x156>
 8008ea0:	7863      	ldrb	r3, [r4, #1]
 8008ea2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ea4:	d132      	bne.n	8008f0c <_vfiprintf_r+0x1ac>
 8008ea6:	9b03      	ldr	r3, [sp, #12]
 8008ea8:	1d1a      	adds	r2, r3, #4
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	9203      	str	r2, [sp, #12]
 8008eae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008eb2:	3402      	adds	r4, #2
 8008eb4:	9305      	str	r3, [sp, #20]
 8008eb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f8c <_vfiprintf_r+0x22c>
 8008eba:	7821      	ldrb	r1, [r4, #0]
 8008ebc:	2203      	movs	r2, #3
 8008ebe:	4650      	mov	r0, sl
 8008ec0:	f7f7 f9a6 	bl	8000210 <memchr>
 8008ec4:	b138      	cbz	r0, 8008ed6 <_vfiprintf_r+0x176>
 8008ec6:	9b04      	ldr	r3, [sp, #16]
 8008ec8:	eba0 000a 	sub.w	r0, r0, sl
 8008ecc:	2240      	movs	r2, #64	@ 0x40
 8008ece:	4082      	lsls	r2, r0
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	3401      	adds	r4, #1
 8008ed4:	9304      	str	r3, [sp, #16]
 8008ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eda:	4829      	ldr	r0, [pc, #164]	@ (8008f80 <_vfiprintf_r+0x220>)
 8008edc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ee0:	2206      	movs	r2, #6
 8008ee2:	f7f7 f995 	bl	8000210 <memchr>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d03f      	beq.n	8008f6a <_vfiprintf_r+0x20a>
 8008eea:	4b26      	ldr	r3, [pc, #152]	@ (8008f84 <_vfiprintf_r+0x224>)
 8008eec:	bb1b      	cbnz	r3, 8008f36 <_vfiprintf_r+0x1d6>
 8008eee:	9b03      	ldr	r3, [sp, #12]
 8008ef0:	3307      	adds	r3, #7
 8008ef2:	f023 0307 	bic.w	r3, r3, #7
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	9303      	str	r3, [sp, #12]
 8008efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008efc:	443b      	add	r3, r7
 8008efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f00:	e76a      	b.n	8008dd8 <_vfiprintf_r+0x78>
 8008f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f06:	460c      	mov	r4, r1
 8008f08:	2001      	movs	r0, #1
 8008f0a:	e7a8      	b.n	8008e5e <_vfiprintf_r+0xfe>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	3401      	adds	r4, #1
 8008f10:	9305      	str	r3, [sp, #20]
 8008f12:	4619      	mov	r1, r3
 8008f14:	f04f 0c0a 	mov.w	ip, #10
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f1e:	3a30      	subs	r2, #48	@ 0x30
 8008f20:	2a09      	cmp	r2, #9
 8008f22:	d903      	bls.n	8008f2c <_vfiprintf_r+0x1cc>
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d0c6      	beq.n	8008eb6 <_vfiprintf_r+0x156>
 8008f28:	9105      	str	r1, [sp, #20]
 8008f2a:	e7c4      	b.n	8008eb6 <_vfiprintf_r+0x156>
 8008f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f30:	4604      	mov	r4, r0
 8008f32:	2301      	movs	r3, #1
 8008f34:	e7f0      	b.n	8008f18 <_vfiprintf_r+0x1b8>
 8008f36:	ab03      	add	r3, sp, #12
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	462a      	mov	r2, r5
 8008f3c:	4b12      	ldr	r3, [pc, #72]	@ (8008f88 <_vfiprintf_r+0x228>)
 8008f3e:	a904      	add	r1, sp, #16
 8008f40:	4630      	mov	r0, r6
 8008f42:	f7fd fbdb 	bl	80066fc <_printf_float>
 8008f46:	4607      	mov	r7, r0
 8008f48:	1c78      	adds	r0, r7, #1
 8008f4a:	d1d6      	bne.n	8008efa <_vfiprintf_r+0x19a>
 8008f4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f4e:	07d9      	lsls	r1, r3, #31
 8008f50:	d405      	bmi.n	8008f5e <_vfiprintf_r+0x1fe>
 8008f52:	89ab      	ldrh	r3, [r5, #12]
 8008f54:	059a      	lsls	r2, r3, #22
 8008f56:	d402      	bmi.n	8008f5e <_vfiprintf_r+0x1fe>
 8008f58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f5a:	f7fe f92b 	bl	80071b4 <__retarget_lock_release_recursive>
 8008f5e:	89ab      	ldrh	r3, [r5, #12]
 8008f60:	065b      	lsls	r3, r3, #25
 8008f62:	f53f af1f 	bmi.w	8008da4 <_vfiprintf_r+0x44>
 8008f66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f68:	e71e      	b.n	8008da8 <_vfiprintf_r+0x48>
 8008f6a:	ab03      	add	r3, sp, #12
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	462a      	mov	r2, r5
 8008f70:	4b05      	ldr	r3, [pc, #20]	@ (8008f88 <_vfiprintf_r+0x228>)
 8008f72:	a904      	add	r1, sp, #16
 8008f74:	4630      	mov	r0, r6
 8008f76:	f7fd fe59 	bl	8006c2c <_printf_i>
 8008f7a:	e7e4      	b.n	8008f46 <_vfiprintf_r+0x1e6>
 8008f7c:	080094e0 	.word	0x080094e0
 8008f80:	080094ea 	.word	0x080094ea
 8008f84:	080066fd 	.word	0x080066fd
 8008f88:	08008d3d 	.word	0x08008d3d
 8008f8c:	080094e6 	.word	0x080094e6

08008f90 <__swbuf_r>:
 8008f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f92:	460e      	mov	r6, r1
 8008f94:	4614      	mov	r4, r2
 8008f96:	4605      	mov	r5, r0
 8008f98:	b118      	cbz	r0, 8008fa2 <__swbuf_r+0x12>
 8008f9a:	6a03      	ldr	r3, [r0, #32]
 8008f9c:	b90b      	cbnz	r3, 8008fa2 <__swbuf_r+0x12>
 8008f9e:	f7fd fff1 	bl	8006f84 <__sinit>
 8008fa2:	69a3      	ldr	r3, [r4, #24]
 8008fa4:	60a3      	str	r3, [r4, #8]
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	071a      	lsls	r2, r3, #28
 8008faa:	d501      	bpl.n	8008fb0 <__swbuf_r+0x20>
 8008fac:	6923      	ldr	r3, [r4, #16]
 8008fae:	b943      	cbnz	r3, 8008fc2 <__swbuf_r+0x32>
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f000 f82a 	bl	800900c <__swsetup_r>
 8008fb8:	b118      	cbz	r0, 8008fc2 <__swbuf_r+0x32>
 8008fba:	f04f 37ff 	mov.w	r7, #4294967295
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	6922      	ldr	r2, [r4, #16]
 8008fc6:	1a98      	subs	r0, r3, r2
 8008fc8:	6963      	ldr	r3, [r4, #20]
 8008fca:	b2f6      	uxtb	r6, r6
 8008fcc:	4283      	cmp	r3, r0
 8008fce:	4637      	mov	r7, r6
 8008fd0:	dc05      	bgt.n	8008fde <__swbuf_r+0x4e>
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	f7ff fd99 	bl	8008b0c <_fflush_r>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d1ed      	bne.n	8008fba <__swbuf_r+0x2a>
 8008fde:	68a3      	ldr	r3, [r4, #8]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	60a3      	str	r3, [r4, #8]
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	6022      	str	r2, [r4, #0]
 8008fea:	701e      	strb	r6, [r3, #0]
 8008fec:	6962      	ldr	r2, [r4, #20]
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d004      	beq.n	8008ffe <__swbuf_r+0x6e>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	07db      	lsls	r3, r3, #31
 8008ff8:	d5e1      	bpl.n	8008fbe <__swbuf_r+0x2e>
 8008ffa:	2e0a      	cmp	r6, #10
 8008ffc:	d1df      	bne.n	8008fbe <__swbuf_r+0x2e>
 8008ffe:	4621      	mov	r1, r4
 8009000:	4628      	mov	r0, r5
 8009002:	f7ff fd83 	bl	8008b0c <_fflush_r>
 8009006:	2800      	cmp	r0, #0
 8009008:	d0d9      	beq.n	8008fbe <__swbuf_r+0x2e>
 800900a:	e7d6      	b.n	8008fba <__swbuf_r+0x2a>

0800900c <__swsetup_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4b29      	ldr	r3, [pc, #164]	@ (80090b4 <__swsetup_r+0xa8>)
 8009010:	4605      	mov	r5, r0
 8009012:	6818      	ldr	r0, [r3, #0]
 8009014:	460c      	mov	r4, r1
 8009016:	b118      	cbz	r0, 8009020 <__swsetup_r+0x14>
 8009018:	6a03      	ldr	r3, [r0, #32]
 800901a:	b90b      	cbnz	r3, 8009020 <__swsetup_r+0x14>
 800901c:	f7fd ffb2 	bl	8006f84 <__sinit>
 8009020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009024:	0719      	lsls	r1, r3, #28
 8009026:	d422      	bmi.n	800906e <__swsetup_r+0x62>
 8009028:	06da      	lsls	r2, r3, #27
 800902a:	d407      	bmi.n	800903c <__swsetup_r+0x30>
 800902c:	2209      	movs	r2, #9
 800902e:	602a      	str	r2, [r5, #0]
 8009030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009034:	81a3      	strh	r3, [r4, #12]
 8009036:	f04f 30ff 	mov.w	r0, #4294967295
 800903a:	e033      	b.n	80090a4 <__swsetup_r+0x98>
 800903c:	0758      	lsls	r0, r3, #29
 800903e:	d512      	bpl.n	8009066 <__swsetup_r+0x5a>
 8009040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009042:	b141      	cbz	r1, 8009056 <__swsetup_r+0x4a>
 8009044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009048:	4299      	cmp	r1, r3
 800904a:	d002      	beq.n	8009052 <__swsetup_r+0x46>
 800904c:	4628      	mov	r0, r5
 800904e:	f7fe feff 	bl	8007e50 <_free_r>
 8009052:	2300      	movs	r3, #0
 8009054:	6363      	str	r3, [r4, #52]	@ 0x34
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800905c:	81a3      	strh	r3, [r4, #12]
 800905e:	2300      	movs	r3, #0
 8009060:	6063      	str	r3, [r4, #4]
 8009062:	6923      	ldr	r3, [r4, #16]
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	f043 0308 	orr.w	r3, r3, #8
 800906c:	81a3      	strh	r3, [r4, #12]
 800906e:	6923      	ldr	r3, [r4, #16]
 8009070:	b94b      	cbnz	r3, 8009086 <__swsetup_r+0x7a>
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800907c:	d003      	beq.n	8009086 <__swsetup_r+0x7a>
 800907e:	4621      	mov	r1, r4
 8009080:	4628      	mov	r0, r5
 8009082:	f000 f883 	bl	800918c <__smakebuf_r>
 8009086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800908a:	f013 0201 	ands.w	r2, r3, #1
 800908e:	d00a      	beq.n	80090a6 <__swsetup_r+0x9a>
 8009090:	2200      	movs	r2, #0
 8009092:	60a2      	str	r2, [r4, #8]
 8009094:	6962      	ldr	r2, [r4, #20]
 8009096:	4252      	negs	r2, r2
 8009098:	61a2      	str	r2, [r4, #24]
 800909a:	6922      	ldr	r2, [r4, #16]
 800909c:	b942      	cbnz	r2, 80090b0 <__swsetup_r+0xa4>
 800909e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090a2:	d1c5      	bne.n	8009030 <__swsetup_r+0x24>
 80090a4:	bd38      	pop	{r3, r4, r5, pc}
 80090a6:	0799      	lsls	r1, r3, #30
 80090a8:	bf58      	it	pl
 80090aa:	6962      	ldrpl	r2, [r4, #20]
 80090ac:	60a2      	str	r2, [r4, #8]
 80090ae:	e7f4      	b.n	800909a <__swsetup_r+0x8e>
 80090b0:	2000      	movs	r0, #0
 80090b2:	e7f7      	b.n	80090a4 <__swsetup_r+0x98>
 80090b4:	2000001c 	.word	0x2000001c

080090b8 <_raise_r>:
 80090b8:	291f      	cmp	r1, #31
 80090ba:	b538      	push	{r3, r4, r5, lr}
 80090bc:	4605      	mov	r5, r0
 80090be:	460c      	mov	r4, r1
 80090c0:	d904      	bls.n	80090cc <_raise_r+0x14>
 80090c2:	2316      	movs	r3, #22
 80090c4:	6003      	str	r3, [r0, #0]
 80090c6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80090ce:	b112      	cbz	r2, 80090d6 <_raise_r+0x1e>
 80090d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090d4:	b94b      	cbnz	r3, 80090ea <_raise_r+0x32>
 80090d6:	4628      	mov	r0, r5
 80090d8:	f000 f830 	bl	800913c <_getpid_r>
 80090dc:	4622      	mov	r2, r4
 80090de:	4601      	mov	r1, r0
 80090e0:	4628      	mov	r0, r5
 80090e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090e6:	f000 b817 	b.w	8009118 <_kill_r>
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d00a      	beq.n	8009104 <_raise_r+0x4c>
 80090ee:	1c59      	adds	r1, r3, #1
 80090f0:	d103      	bne.n	80090fa <_raise_r+0x42>
 80090f2:	2316      	movs	r3, #22
 80090f4:	6003      	str	r3, [r0, #0]
 80090f6:	2001      	movs	r0, #1
 80090f8:	e7e7      	b.n	80090ca <_raise_r+0x12>
 80090fa:	2100      	movs	r1, #0
 80090fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009100:	4620      	mov	r0, r4
 8009102:	4798      	blx	r3
 8009104:	2000      	movs	r0, #0
 8009106:	e7e0      	b.n	80090ca <_raise_r+0x12>

08009108 <raise>:
 8009108:	4b02      	ldr	r3, [pc, #8]	@ (8009114 <raise+0xc>)
 800910a:	4601      	mov	r1, r0
 800910c:	6818      	ldr	r0, [r3, #0]
 800910e:	f7ff bfd3 	b.w	80090b8 <_raise_r>
 8009112:	bf00      	nop
 8009114:	2000001c 	.word	0x2000001c

08009118 <_kill_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4d07      	ldr	r5, [pc, #28]	@ (8009138 <_kill_r+0x20>)
 800911c:	2300      	movs	r3, #0
 800911e:	4604      	mov	r4, r0
 8009120:	4608      	mov	r0, r1
 8009122:	4611      	mov	r1, r2
 8009124:	602b      	str	r3, [r5, #0]
 8009126:	f7fd f951 	bl	80063cc <_kill>
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	d102      	bne.n	8009134 <_kill_r+0x1c>
 800912e:	682b      	ldr	r3, [r5, #0]
 8009130:	b103      	cbz	r3, 8009134 <_kill_r+0x1c>
 8009132:	6023      	str	r3, [r4, #0]
 8009134:	bd38      	pop	{r3, r4, r5, pc}
 8009136:	bf00      	nop
 8009138:	200004e4 	.word	0x200004e4

0800913c <_getpid_r>:
 800913c:	f7fd b93e 	b.w	80063bc <_getpid>

08009140 <__swhatbuf_r>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	460c      	mov	r4, r1
 8009144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009148:	2900      	cmp	r1, #0
 800914a:	b096      	sub	sp, #88	@ 0x58
 800914c:	4615      	mov	r5, r2
 800914e:	461e      	mov	r6, r3
 8009150:	da0d      	bge.n	800916e <__swhatbuf_r+0x2e>
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009158:	f04f 0100 	mov.w	r1, #0
 800915c:	bf14      	ite	ne
 800915e:	2340      	movne	r3, #64	@ 0x40
 8009160:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009164:	2000      	movs	r0, #0
 8009166:	6031      	str	r1, [r6, #0]
 8009168:	602b      	str	r3, [r5, #0]
 800916a:	b016      	add	sp, #88	@ 0x58
 800916c:	bd70      	pop	{r4, r5, r6, pc}
 800916e:	466a      	mov	r2, sp
 8009170:	f000 f848 	bl	8009204 <_fstat_r>
 8009174:	2800      	cmp	r0, #0
 8009176:	dbec      	blt.n	8009152 <__swhatbuf_r+0x12>
 8009178:	9901      	ldr	r1, [sp, #4]
 800917a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800917e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009182:	4259      	negs	r1, r3
 8009184:	4159      	adcs	r1, r3
 8009186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800918a:	e7eb      	b.n	8009164 <__swhatbuf_r+0x24>

0800918c <__smakebuf_r>:
 800918c:	898b      	ldrh	r3, [r1, #12]
 800918e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009190:	079d      	lsls	r5, r3, #30
 8009192:	4606      	mov	r6, r0
 8009194:	460c      	mov	r4, r1
 8009196:	d507      	bpl.n	80091a8 <__smakebuf_r+0x1c>
 8009198:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	6123      	str	r3, [r4, #16]
 80091a0:	2301      	movs	r3, #1
 80091a2:	6163      	str	r3, [r4, #20]
 80091a4:	b003      	add	sp, #12
 80091a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091a8:	ab01      	add	r3, sp, #4
 80091aa:	466a      	mov	r2, sp
 80091ac:	f7ff ffc8 	bl	8009140 <__swhatbuf_r>
 80091b0:	9f00      	ldr	r7, [sp, #0]
 80091b2:	4605      	mov	r5, r0
 80091b4:	4639      	mov	r1, r7
 80091b6:	4630      	mov	r0, r6
 80091b8:	f7fe febe 	bl	8007f38 <_malloc_r>
 80091bc:	b948      	cbnz	r0, 80091d2 <__smakebuf_r+0x46>
 80091be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091c2:	059a      	lsls	r2, r3, #22
 80091c4:	d4ee      	bmi.n	80091a4 <__smakebuf_r+0x18>
 80091c6:	f023 0303 	bic.w	r3, r3, #3
 80091ca:	f043 0302 	orr.w	r3, r3, #2
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	e7e2      	b.n	8009198 <__smakebuf_r+0xc>
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	6020      	str	r0, [r4, #0]
 80091d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091da:	81a3      	strh	r3, [r4, #12]
 80091dc:	9b01      	ldr	r3, [sp, #4]
 80091de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091e2:	b15b      	cbz	r3, 80091fc <__smakebuf_r+0x70>
 80091e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091e8:	4630      	mov	r0, r6
 80091ea:	f000 f81d 	bl	8009228 <_isatty_r>
 80091ee:	b128      	cbz	r0, 80091fc <__smakebuf_r+0x70>
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	f023 0303 	bic.w	r3, r3, #3
 80091f6:	f043 0301 	orr.w	r3, r3, #1
 80091fa:	81a3      	strh	r3, [r4, #12]
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	431d      	orrs	r5, r3
 8009200:	81a5      	strh	r5, [r4, #12]
 8009202:	e7cf      	b.n	80091a4 <__smakebuf_r+0x18>

08009204 <_fstat_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	4d07      	ldr	r5, [pc, #28]	@ (8009224 <_fstat_r+0x20>)
 8009208:	2300      	movs	r3, #0
 800920a:	4604      	mov	r4, r0
 800920c:	4608      	mov	r0, r1
 800920e:	4611      	mov	r1, r2
 8009210:	602b      	str	r3, [r5, #0]
 8009212:	f7fd f93b 	bl	800648c <_fstat>
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	d102      	bne.n	8009220 <_fstat_r+0x1c>
 800921a:	682b      	ldr	r3, [r5, #0]
 800921c:	b103      	cbz	r3, 8009220 <_fstat_r+0x1c>
 800921e:	6023      	str	r3, [r4, #0]
 8009220:	bd38      	pop	{r3, r4, r5, pc}
 8009222:	bf00      	nop
 8009224:	200004e4 	.word	0x200004e4

08009228 <_isatty_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d06      	ldr	r5, [pc, #24]	@ (8009244 <_isatty_r+0x1c>)
 800922c:	2300      	movs	r3, #0
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	602b      	str	r3, [r5, #0]
 8009234:	f7fd f93a 	bl	80064ac <_isatty>
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	d102      	bne.n	8009242 <_isatty_r+0x1a>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	b103      	cbz	r3, 8009242 <_isatty_r+0x1a>
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	bd38      	pop	{r3, r4, r5, pc}
 8009244:	200004e4 	.word	0x200004e4

08009248 <_init>:
 8009248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924a:	bf00      	nop
 800924c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924e:	bc08      	pop	{r3}
 8009250:	469e      	mov	lr, r3
 8009252:	4770      	bx	lr

08009254 <_fini>:
 8009254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009256:	bf00      	nop
 8009258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800925a:	bc08      	pop	{r3}
 800925c:	469e      	mov	lr, r3
 800925e:	4770      	bx	lr
